{"certifications":{"blocks":{"back-end-development-and-apis-certification":{"challenges":[{"id":"561add10cb82ac38a17523bc","title":"Back End Development and APIs Certification","certification":"back-end-development-and-apis","challengeType":7,"isPrivate":true,"tests":[{"id":"bd7158d8c443edefaeb5bdef","title":"Timestamp Microservice"},{"id":"bd7158d8c443edefaeb5bdff","title":"Request Header Parser Microservice"},{"id":"bd7158d8c443edefaeb5bd0e","title":"URL Shortener Microservice"},{"id":"5a8b073d06fa14fcfde687aa","title":"Exercise Tracker"},{"id":"bd7158d8c443edefaeb5bd0f","title":"File Metadata Microservice"}]}]},"data-analysis-with-python-certification":{"challenges":[{"id":"5e46fc95ac417301a38fb934","title":"Data Analysis with Python Certification","certification":"data-analysis-with-python","challengeType":7,"isPrivate":true,"tests":[{"id":"5e46f7e5ac417301a38fb928","title":"Mean-Variance-Standard Deviation Calculator"},{"id":"5e46f7e5ac417301a38fb929","title":"Demographic Data Analyzer"},{"id":"5e46f7f8ac417301a38fb92a","title":"Medical Data Visualizer"},{"id":"5e46f802ac417301a38fb92b","title":"Page View Time Series Visualizer"},{"id":"5e4f5c4b570f7e3a4949899f","title":"Sea Level Predictor"}]}]},"data-visualization-certification":{"challenges":[{"id":"5a553ca864b52e1d8bceea14","title":"Data Visualization Certification","certification":"data-visualization","challengeType":7,"isPrivate":true,"tests":[{"id":"bd7168d8c242eddfaeb5bd13","title":"Visualize Data with a Bar Chart"},{"id":"bd7178d8c242eddfaeb5bd13","title":"Visualize Data with a Scatterplot Graph"},{"id":"bd7188d8c242eddfaeb5bd13","title":"Visualize Data with a Heat Map"},{"id":"587d7fa6367417b2b2512bbf","title":"Visualize Data with a Choropleth Map"},{"id":"587d7fa6367417b2b2512bc0","title":"Visualize Data with a Treemap Diagram"}]}]},"front-end-development-libraries-certification":{"challenges":[{"id":"561acd10cb82ac38a17513bc","title":"Front End Development Libraries Certification","certification":"front-end-development-libraries","challengeType":7,"isPrivate":true,"tests":[{"id":"bd7158d8c442eddfaeb5bd13","title":"Build a Random Quote Machine"},{"id":"bd7157d8c242eddfaeb5bd13","title":"Build a Markdown Previewer"},{"id":"587d7dbc367417b2b2512bae","title":"Build a Drum Machine"},{"id":"bd7158d8c442eddfaeb5bd17","title":"Build a JavaScript Calculator"},{"id":"bd7158d8c442eddfaeb5bd0f","title":"Build a 25 + 5 Clock"}]}]},"information-security-certification":{"challenges":[{"id":"5e6021435ac9d0ecd8b94b00","title":"Information Security Certification","certification":"information-security","challengeType":7,"isPrivate":true,"tests":[{"id":"587d824a367417b2b2512c44","title":"Stock Price Checker"},{"id":"587d824a367417b2b2512c45","title":"Anonymous Message Board"},{"id":"5e46f979ac417301a38fb932","title":"Port Scanner"},{"id":"5e46f983ac417301a38fb933","title":"SHA-1 Password Cracker"},{"id":"5e601c775ac9d0ecd8b94aff","title":"Secure Real Time Multiplayer Game"}]}]},"javascript-algorithms-and-data-structures-certification":{"challenges":[{"id":"561abd10cb81ac38a17513bc","title":"JavaScript Algorithms and Data Structures Certification","certification":"javascript-algorithms-and-data-structures","challengeType":7,"isPrivate":true,"tests":[{"id":"aaa48de84e1ecc7c742e1124","title":"Palindrome Checker"},{"id":"a7f4d8f2483413a6ce226cac","title":"Roman Numeral Converter"},{"id":"56533eb9ac21ba0edf2244e2","title":"Caesars Cipher"},{"id":"aff0395860f5d3034dc0bfc9","title":"Telephone Number Validator"},{"id":"aa2e6f85cab2ab736c9a9b24","title":"Cash Register"}]}]},"legacy-back-end-certification":{"challenges":[{"id":"660add10cb82ac38a17513be","title":"Legacy Back End Certification","certification":"legacy-back-end","challengeType":7,"isPrivate":true,"tests":[{"id":"bd7158d8c443edefaeb5bdef","title":"Timestamp Microservice"},{"id":"bd7158d8c443edefaeb5bdff","title":"Request Header Parser Microservice"},{"id":"bd7158d8c443edefaeb5bd0e","title":"URL Shortener Microservice"},{"id":"bd7158d8c443edefaeb5bdee","title":"Image Search Abstraction Layer"},{"id":"bd7158d8c443edefaeb5bd0f","title":"File Metadata Microservice"},{"id":"bd7158d8c443eddfaeb5bdef","title":"Build a Voting App"},{"id":"bd7158d8c443eddfaeb5bdff","title":"Build a Nightlife Coordination App"},{"id":"bd7158d8c443eddfaeb5bd0e","title":"Chart the Stock Market"},{"id":"bd7158d8c443eddfaeb5bd0f","title":"Manage a Book Trading Club"},{"id":"bd7158d8c443eddfaeb5bdee","title":"Build a Pinterest Clone"}]}]},"legacy-data-visualization-certification":{"challenges":[{"id":"561add10cb82ac39a17513bc","title":"Legacy Data Visualization Certification","certification":"legacy-data-visualization","challengeType":7,"isPrivate":true,"tests":[{"id":"bd7157d8c242eddfaeb5bd13","title":"Build a Markdown Previewer"},{"id":"bd7156d8c242eddfaeb5bd13","title":"Build a Camper Leaderboard"},{"id":"bd7155d8c242eddfaeb5bd13","title":"Build a Recipe Box"},{"id":"bd7154d8c242eddfaeb5bd13","title":"Build the Game of Life"},{"id":"bd7153d8c242eddfaeb5bd13","title":"Build a Roguelike Dungeon Crawler Game"},{"id":"bd7168d8c242eddfaeb5bd13","title":"Visualize Data with a Bar Chart"},{"id":"bd7178d8c242eddfaeb5bd13","title":"Visualize Data with a Scatterplot Graph"},{"id":"bd7188d8c242eddfaeb5bd13","title":"Visualize Data with a Heat Map"},{"id":"bd7198d8c242eddfaeb5bd13","title":"Show National Contiguity with a Force Directed Graph"},{"id":"bd7108d8c242eddfaeb5bd13","title":"Map Data Across the Globe"}]}]},"legacy-front-end-certification":{"challenges":[{"id":"561add10cb82ac38a17513be","title":"Legacy Front End Certification","certification":"legacy-front-end","challengeType":7,"isPrivate":true,"tests":[{"id":"bd7158d8c242eddfaeb5bd13","title":"Build a Personal Portfolio Webpage"},{"id":"bd7158d8c442eddfaeb5bd13","title":"Build a Random Quote Machine"},{"id":"bd7158d8c442eddfaeb5bd0f","title":"Build a 25 + 5 Clock"},{"id":"bd7158d8c442eddfaeb5bd17","title":"Build a JavaScript Calculator"},{"id":"bd7158d8c442eddfaeb5bd10","title":"Show the Local Weather"},{"id":"bd7158d8c442eddfaeb5bd1f","title":"Use the Twitch JSON API"},{"id":"bd7158d8c442eddfaeb5bd18","title":"Stylize Stories on Camper News"},{"id":"bd7158d8c442eddfaeb5bd19","title":"Build a Wikipedia Viewer"},{"id":"bd7158d8c442eedfaeb5bd1c","title":"Build a Tic Tac Toe Game"},{"id":"bd7158d8c442eddfaeb5bd1c","title":"Build a Simon Game"}]}]},"legacy-full-stack-certification":{"challenges":[{"id":"561add10cb82ac38a17213bd","title":"Legacy Full Stack Certification","certification":"legacy-full-stack","challengeType":7,"isPrivate":true,"tests":[{"id":"561add10cb82ac38a17513bc","title":"Responsive Web Design Certification"},{"id":"561abd10cb81ac38a17513bc","title":"JavaScript Algorithms and Data Structures Certification"},{"id":"561acd10cb82ac38a17513bc","title":"Front End Libraries Certification"},{"id":"5a553ca864b52e1d8bceea14","title":"Data Visualization Certification"},{"id":"561add10cb82ac38a17523bc","title":"API's and Microservices Certification"},{"id":"561add10cb82ac38a17213bc","title":"Legacy Information Security and Quality Assurance Certification"}]}]},"legacy-information-security-and-quality-assurance-certification":{"challenges":[{"id":"561add10cb82ac38a17213bc","title":"Legacy Information Security and Quality Assurance Certification","certification":"legacy-information-security-and-quality-assurance","challengeType":7,"isPrivate":true,"tests":[{"id":"587d8249367417b2b2512c41","title":"Metric-Imperial Converter"},{"id":"587d8249367417b2b2512c42","title":"Issue Tracker"},{"id":"587d824a367417b2b2512c43","title":"Personal Library"},{"id":"587d824a367417b2b2512c44","title":"Stock Price Checker"},{"id":"587d824a367417b2b2512c45","title":"Anonymous Message Board"}]}]},"machine-learning-with-python-certification":{"challenges":[{"id":"5e46fc95ac417301a38fb935","title":"Machine Learning with Python Certification","certification":"machine-learning-with-python","challengeType":7,"isPrivate":true,"tests":[{"id":"5e46f8d6ac417301a38fb92d","title":"Rock Paper Scissors"},{"id":"5e46f8dcac417301a38fb92e","title":"Cat and Dog Image Classifier"},{"id":"5e46f8e3ac417301a38fb92f","title":"Book Recommendation Engine using KNN"},{"id":"5e46f8edac417301a38fb930","title":"Linear Regression Health Costs Calculator"},{"id":"5e46f8edac417301a38fb931","title":"Neural Network SMS Text Classifier"}]}]},"quality-assurance-certification":{"challenges":[{"id":"5e611829481575a52dc59c0e","title":"Quality Assurance Certification","certification":"quality-assurance","challengeType":7,"isPrivate":true,"tests":[{"id":"587d8249367417b2b2512c41","title":"Metric-Imperial Converter"},{"id":"587d8249367417b2b2512c42","title":"Issue Tracker"},{"id":"587d824a367417b2b2512c43","title":"Personal Library"},{"id":"5e601bf95ac9d0ecd8b94afd","title":"Sudoku Solver"},{"id":"5e601c0d5ac9d0ecd8b94afe","title":"American British Translator"}]}]},"relational-database-certification":{"challenges":[{"id":"606243f50267e718b1e755f4","title":"Relational Database Certification","certification":"relational-database","challengeType":7,"isPrivate":true,"tests":[{"id":"5f1a4ef5d5d6b5ab580fc6ae","title":"Celestial Bodies Database"},{"id":"5f9771307d4d22b9d2b75a94","title":"World Cup Database"},{"id":"5f87ac112ae598023a42df1a","title":"Salon Appointment Scheduler"},{"id":"602d9ff222201c65d2a019f2","title":"Periodic Table Database"},{"id":"602da04c22201c65d2a019f4","title":"Number Guessing Game"}]}]},"responsive-web-design-certification":{"challenges":[{"id":"561add10cb82ac38a17513bc","title":"Responsive Web Design Certification","certification":"responsive-web-design","challengeType":7,"isPrivate":true,"tests":[{"id":"bd7158d8c442eddfaeb5bd18","title":"Build a Tribute Page"},{"id":"587d78af367417b2b2512b03","title":"Build a Survey Form"},{"id":"587d78af367417b2b2512b04","title":"Build a Product Landing Page"},{"id":"587d78b0367417b2b2512b05","title":"Build a Technical Documentation Page"},{"id":"bd7158d8c242eddfaeb5bd13","title":"Build a Personal Portfolio Webpage"}]}]},"scientific-computing-with-python-certification":{"challenges":[{"id":"5e44431b903586ffb414c951","title":"Scientific Computing with Python Certification","certification":"scientific-computing-with-python","challengeType":7,"isPrivate":true,"tests":[{"id":"5e44412c903586ffb414c94c","title":"Arithmetic Formatter"},{"id":"5e444136903586ffb414c94d","title":"Time Calculator"},{"id":"5e44413e903586ffb414c94e","title":"Budget App"},{"id":"5e444147903586ffb414c94f","title":"Polygon Area Calculator"},{"id":"5e44414f903586ffb414c950","title":"Probability Calculator"}]}]}}},"responsive-web-design":{"blocks":{"applied-accessibility":{"meta":{"name":"Applied Accessibility","isUpcomingChange":false,"dashedName":"applied-accessibility","order":3,"time":"5 hours","template":"","required":[],"superBlock":"responsive-web-design","challengeOrder":[["587d774c367417b2b2512a9c","Add a Text Alternative to Images for Visually Impaired Accessibility"],["587d774c367417b2b2512a9d","Know When Alt Text Should be Left Blank"],["587d774d367417b2b2512a9e","Use Headings to Show Hierarchical Relationships of Content"],["587d774e367417b2b2512a9f","Jump Straight to the Content Using the main Element"],["587d774e367417b2b2512aa0","Wrap Content in the article Element"],["587d7787367417b2b2512aa1","Make Screen Reader Navigation Easier with the header Landmark"],["587d7788367417b2b2512aa2","Make Screen Reader Navigation Easier with the nav Landmark"],["587d7788367417b2b2512aa3","Make Screen Reader Navigation Easier with the footer Landmark"],["587d7789367417b2b2512aa4","Improve Accessibility of Audio Content with the audio Element"],["587d778a367417b2b2512aa5","Improve Chart Accessibility with the figure Element"],["587d778a367417b2b2512aa6","Improve Form Field Accessibility with the label Element"],["587d778b367417b2b2512aa7","Wrap Radio Buttons in a fieldset Element for Better Accessibility"],["587d778b367417b2b2512aa8","Add an Accessible Date Picker"],["587d778c367417b2b2512aa9","Standardize Times with the HTML5 datetime Attribute"],["587d778d367417b2b2512aaa","Make Elements Only Visible to a Screen Reader by Using Custom CSS"],["587d778e367417b2b2512aab","Improve Readability with High Contrast Text"],["587d778f367417b2b2512aac","Avoid Colorblindness Issues by Using Sufficient Contrast"],["587d778f367417b2b2512aad","Avoid Colorblindness Issues by Carefully Choosing Colors that Convey Information"],["587d778f367417b2b2512aae","Give Links Meaning by Using Descriptive Link Text"],["587d7790367417b2b2512aaf","Make Links Navigable with HTML Access Keys"],["587d7790367417b2b2512ab0","Use tabindex to Add Keyboard Focus to an Element"],["587d7790367417b2b2512ab1","Use tabindex to Specify the Order of Keyboard Focus for Several Elements"]]},"challenges":[{"id":"587d774c367417b2b2512a9c","title":"Add a Text Alternative to Images for Visually Impaired Accessibility","challengeType":0,"videoUrl":"https://scrimba.com/c/cPp7VfD","forumTopicId":16628,"dashedName":"add-a-text-alternative-to-images-for-visually-impaired-accessibility","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<img src=\"doingKarateWow.jpeg\">","error":null,"seed":"<img src=\"doingKarateWow.jpeg\">"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<img src=\"doingKarateWow.jpeg\" alt=\"Someone doing karate\">","error":null,"seed":"<img src=\"doingKarateWow.jpeg\" alt=\"Someone doing karate\">"}]],"tests":[{"text":"<p>Your <code>img</code> tag should have an <code>alt</code> attribute and it should not be empty.</p>","testString":"assert($('img').attr('alt'));"}],"description":"<section id=\"description\">\n<p>You've likely seen an <code>alt</code> attribute on an <code>img</code> tag in other challenges. <code>alt</code> text describes the image's content and provides a text-alternative for it. An <code>alt</code> attribute helps in cases where the image fails to load or can't be seen by a user. Search engines also use it to understand what an image contains to include it in search results. Here's an example:</p>\n<pre><code class=\"language-html\">&#x3C;img src=\"importantLogo.jpeg\" alt=\"Company logo\">\n</code></pre>\n<p>People with visual impairments rely on screen readers to convert web content to an audio interface. They won't get information if it's only presented visually. For images, screen readers can access the <code>alt</code> attribute and read its contents to deliver key information.</p>\n<p>Good <code>alt</code> text provides the reader a brief description of the image. You should always include an <code>alt</code> attribute on your image. Per HTML5 specification, this is now considered mandatory.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat happens to be both a coding ninja and an actual ninja, who is building a website to share his knowledge. The profile picture he wants to use shows his skills and should be appreciated by all site visitors. Add an <code>alt</code> attribute in the <code>img</code> tag, that explains Camper Cat is doing karate. (The image <code>src</code> doesn't link to an actual file, so you should see the <code>alt</code> text in the display.)</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":0,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d778b367417b2b2512aa8","title":"Add an Accessible Date Picker","challengeType":0,"videoUrl":"https://scrimba.com/c/cR3bRbCV","forumTopicId":301008,"dashedName":"add-an-accessible-date-picker","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Tournaments</h1>\n  </header>\n  <main>\n    <section>\n      <h2>Mortal Kombat Tournament Survey</h2>\n      <form>\n        <p>Tell us the best date for the competition</p>\n        <label for=\"pickdate\">Preferred Date:</label>\n\n        <!-- Only change code below this line -->\n\n\n\n        <!-- Only change code above this line -->\n\n        <input type=\"submit\" name=\"submit\" value=\"Submit\">\n      </form>\n    </section>\n  </main>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Tournaments</h1>\n  </header>\n  <main>\n    <section>\n      <h2>Mortal Kombat Tournament Survey</h2>\n      <form>\n        <p>Tell us the best date for the competition</p>\n        <label for=\"pickdate\">Preferred Date:</label>\n\n        <!-- Only change code below this line -->\n\n\n\n        <!-- Only change code above this line -->\n\n        <input type=\"submit\" name=\"submit\" value=\"Submit\">\n      </form>\n    </section>\n  </main>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Tournaments</h1>\n  </header>\n  <main>\n    <section>\n      <h2>Mortal Kombat Tournament Survey</h2>\n      <form>\n        <p>Tell us the best date for the competition</p>\n        <label for=\"pickdate\">Preferred Date:</label>\n        <input type=\"date\" id=\"pickdate\" name=\"date\">\n        <input type=\"submit\" name=\"submit\" value=\"Submit\">\n      </form>\n    </section>\n  </main>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Tournaments</h1>\n  </header>\n  <main>\n    <section>\n      <h2>Mortal Kombat Tournament Survey</h2>\n      <form>\n        <p>Tell us the best date for the competition</p>\n        <label for=\"pickdate\">Preferred Date:</label>\n        <input type=\"date\" id=\"pickdate\" name=\"date\">\n        <input type=\"submit\" name=\"submit\" value=\"Submit\">\n      </form>\n    </section>\n  </main>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"}]],"tests":[{"text":"<p>Your code should add one <code>input</code> tag for the date selector field.</p>","testString":"assert($('input').length == 2);"},{"text":"<p>Your <code>input</code> tag should have a <code>type</code> attribute with a value of <code>date</code>.</p>","testString":"assert($('input').attr('type') == 'date');"},{"text":"<p>Your <code>input</code> tag should have an <code>id</code> attribute with a value of <code>pickdate</code>.</p>","testString":"assert($('input').attr('id') == 'pickdate');"},{"text":"<p>Your <code>input</code> tag should have a <code>name</code> attribute with a value of <code>date</code>.</p>","testString":"assert($('input').attr('name') == 'date');"}],"description":"<section id=\"description\">\n<p>Forms often include the <code>input</code> field, which can be used to create several different form controls. The <code>type</code> attribute on this element indicates what kind of <code>input</code> element will be created.</p>\n<p>You may have noticed the <code>text</code> and <code>submit</code> input types in prior challenges, and HTML5 introduced an option to specify a <code>date</code> field. Depending on browser support, a date picker shows up in the <code>input</code> field when it's in focus, which makes filling in a form easier for all users.</p>\n<p>For older browsers, the type will default to <code>text</code>, so it helps to show users the expected date format in the <code>label</code> or <code>placeholder</code> text just in case.</p>\n<p>Here's an example:</p>\n<pre><code class=\"language-html\">&#x3C;label for=\"input1\">Enter a date:&#x3C;/label>\n&#x3C;input type=\"date\" id=\"input1\" name=\"input1\">\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat is setting up a Mortal Kombat tournament and wants to ask his competitors to see what date works best. Add an <code>input</code> tag with a <code>type</code> attribute of <code>date</code>, an <code>id</code> attribute of <code>pickdate</code>, and a <code>name</code> attribute of <code>date</code>.</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":12,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d778f367417b2b2512aad","title":"Avoid Colorblindness Issues by Carefully Choosing Colors that Convey Information","challengeType":0,"videoUrl":"https://scrimba.com/c/c437as3","forumTopicId":301011,"dashedName":"avoid-colorblindness-issues-by-carefully-choosing-colors-that-convey-information","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<head>\n  <style>\n  button {\n    color: #33FF33;\n    background-color: #FFFF33;\n    font-size: 14px;\n    padding: 10px;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Danger!</h1>\n  </header>\n  <button>Delete Internet</button>\n</body>","error":null,"seed":"<head>\n  <style>\n  button {\n    color: #33FF33;\n    background-color: #FFFF33;\n    font-size: 14px;\n    padding: 10px;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Danger!</h1>\n  </header>\n  <button>Delete Internet</button>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<head>\n  <style>\n    button {\n      color: #003366;\n      background-color: #FFFF33;\n      font-size: 14px;\n      padding: 10px;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Danger!</h1>\n  </header>\n  <button>Delete Internet</button>\n</body>","error":null,"seed":"<head>\n  <style>\n    button {\n      color: #003366;\n      background-color: #FFFF33;\n      font-size: 14px;\n      padding: 10px;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Danger!</h1>\n  </header>\n  <button>Delete Internet</button>\n</body>"}]],"tests":[{"text":"<p>Your code should change the text <code>color</code> for the <code>button</code> to the dark blue.</p>","testString":"assert($('button').css('color') == 'rgb(0, 51, 102)');"}],"description":"<section id=\"description\">\n<p>There are various forms of colorblindness. These can range from a reduced sensitivity to a certain wavelength of light to the inability to see color at all. The most common form is a reduced sensitivity to detect greens.</p>\n<p>For example, if two similar green colors are the foreground and background color of your content, a colorblind user may not be able to distinguish them. Close colors can be thought of as neighbors on the color wheel, and those combinations should be avoided when conveying important information.</p>\n<p><strong>Note:</strong> Some online color picking tools include visual simulations of how colors appear for different types of colorblindness. These are great resources in addition to online contrast checking calculators.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat is testing different styles for an important button, but the yellow (<code>#FFFF33</code>) <code>background-color</code> and the green (<code>#33FF33</code>) text <code>color</code> are neighboring hues on the color wheel and virtually indistinguishable for some colorblind users. (Their similar lightness also fails the contrast ratio check). Change the text <code>color</code> to a dark blue (<code>#003366</code>) to solve both problems.</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":17,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d778f367417b2b2512aac","title":"Avoid Colorblindness Issues by Using Sufficient Contrast","challengeType":0,"videoUrl":"https://scrimba.com/c/cmzMEUw","forumTopicId":301012,"dashedName":"avoid-colorblindness-issues-by-using-sufficient-contrast","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<head>\n  <style>\n  body {\n    color: hsl(0, 55%, 20%);\n    background-color: hsl(120, 25%, 35%);\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>A Word on the Recent Catnip Doping Scandal</h2>\n    <p>The influence that catnip has on feline behavior is well-documented, and its use as an herbal supplement in competitive ninja circles remains controversial. Once again, the debate to ban the substance is brought to the public's attention after the high-profile win of Kittytron, a long-time proponent and user of the green stuff, at the Claw of Fury tournament.</p>\n    <p>As I've stated in the past, I firmly believe a true ninja's skills must come from within, with no external influences. My own catnip use shall continue as purely recreational.</p>\n  </article>\n</body>","error":null,"seed":"<head>\n  <style>\n  body {\n    color: hsl(0, 55%, 20%);\n    background-color: hsl(120, 25%, 35%);\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>A Word on the Recent Catnip Doping Scandal</h2>\n    <p>The influence that catnip has on feline behavior is well-documented, and its use as an herbal supplement in competitive ninja circles remains controversial. Once again, the debate to ban the substance is brought to the public's attention after the high-profile win of Kittytron, a long-time proponent and user of the green stuff, at the Claw of Fury tournament.</p>\n    <p>As I've stated in the past, I firmly believe a true ninja's skills must come from within, with no external influences. My own catnip use shall continue as purely recreational.</p>\n  </article>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<head>\n  <style>\n  body {\n    color: hsl(0, 55%, 15%);\n    background-color: hsl(120, 25%, 55%);\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>A Word on the Recent Catnip Doping Scandal</h2>\n    <p>The influence that catnip has on feline behavior is well-documented, and its use as an herbal supplement in competitive ninja circles remains controversial. Once again, the debate to ban the substance is brought to the public's attention after the high-profile win of Kittytron, a long-time proponent and user of the green stuff, at the Claw of Fury tournament.</p>\n    <p>As I've stated in the past, I firmly believe a true ninja's skills must come from within, with no external influences. My own catnip use shall continue as purely recreational.</p>\n  </article>\n</body>","error":null,"seed":"<head>\n  <style>\n  body {\n    color: hsl(0, 55%, 15%);\n    background-color: hsl(120, 25%, 55%);\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>A Word on the Recent Catnip Doping Scandal</h2>\n    <p>The influence that catnip has on feline behavior is well-documented, and its use as an herbal supplement in competitive ninja circles remains controversial. Once again, the debate to ban the substance is brought to the public's attention after the high-profile win of Kittytron, a long-time proponent and user of the green stuff, at the Claw of Fury tournament.</p>\n    <p>As I've stated in the past, I firmly believe a true ninja's skills must come from within, with no external influences. My own catnip use shall continue as purely recreational.</p>\n  </article>\n</body>"}]],"tests":[{"text":"<p>Your code should only change the lightness value for the text <code>color</code> property to a value of 15%.</p>","testString":"assert(code.match(/color:\\s*?hsl\\(0,\\s*?55%,\\s*?15%\\)/gi));"},{"text":"<p>Your code should only change the lightness value for the <code>background-color</code> property to a value of 55%.</p>","testString":"assert(code.match(/background-color:\\s*?hsl\\(120,\\s*?25%,\\s*?55%\\)/gi));"}],"description":"<section id=\"description\">\n<p>Color is a large part of visual design, but its use introduces two accessibility issues. First, color alone should not be used as the only way to convey important information because screen reader users won't see it. Second, foreground and background colors need sufficient contrast so colorblind users can distinguish them.</p>\n<p>Previous challenges covered having text alternatives to address the first issue. The last challenge introduced contrast checking tools to help with the second. The WCAG-recommended contrast ratio of 4.5:1 applies for color use as well as gray-scale combinations.</p>\n<p>Colorblind users have trouble distinguishing some colors from others - usually in hue but sometimes lightness as well. You may recall the contrast ratio is calculated using the relative luminance (or lightness) values of the foreground and background colors.</p>\n<p>In practice, the 4.5:1 contrast ratio can be reached by shading (adding black to) the darker color and tinting (adding white to) the lighter color. Darker shades on the color wheel are considered to be shades of blues, violets, magentas, and reds, whereas lighter tinted colors are oranges, yellows, greens, and blue-greens.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat is experimenting with using color for his blog text and background, but his current combination of a greenish <code>background-color</code> with maroon text <code>color</code> has a 2.5:1 contrast ratio. You can easily adjust the lightness of the colors since he declared them using the CSS <code>hsl()</code> property (which stands for hue, saturation, lightness) by changing the third argument. Increase the <code>background-color</code> lightness value from 35% to 55%, and decrease the <code>color</code> lightness value from 20% to 15%. This improves the contrast to 5.9:1.</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":16,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d778f367417b2b2512aae","title":"Give Links Meaning by Using Descriptive Link Text","challengeType":0,"videoUrl":"https://scrimba.com/c/c437DcV","forumTopicId":301013,"dashedName":"give-links-meaning-by-using-descriptive-link-text","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near. <a href=\"\">Click here</a> for information about batteries</p>\n  </article>\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near. <a href=\"\">Click here</a> for information about batteries</p>\n  </article>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near. Click here for <a href=\"\">information about batteries</a></p>\n  </article>\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near. Click here for <a href=\"\">information about batteries</a></p>\n  </article>\n</body>"}]],"tests":[{"text":"<p>Your code should move the anchor <code>a</code> tags from around the words <code>Click here</code> to wrap around the words <code>information about batteries</code>.</p>","testString":"assert(\n  $('a')\n    .text()\n    .match(/^(information about batteries)$/g)\n);"},{"text":"<p>The <code>a</code> element should have an <code>href</code> attribute with a value of an empty string <code>\"\"</code>.</p>","testString":"assert($('a').attr('href') === '');"},{"text":"<p>The <code>a</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/a>/g) &&\n    code.match(/<\\/a>/g).length === code.match(/<a href=(''|\"\")>/g).length\n);"}],"description":"<section id=\"description\">\n<p>Screen reader users have various options for what type of content their device reads. These options include skipping to (or over) landmark elements, jumping to the main content, or getting a page summary from the headings. Another option is to only hear the links available on a page.</p>\n<p>Screen readers do this by reading the link text, or what's between the anchor (<code>a</code>) tags. Having a list of \"click here\" or \"read more\" links isn't helpful. Instead, use brief but descriptive text within the <code>a</code> tags to provide more meaning for these users.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The link text that Camper Cat is using is not very descriptive without the surrounding context. Move the anchor (<code>a</code>) tags so they wrap around the text <code>information about batteries</code> instead of <code>Click here</code>.</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":18,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d7789367417b2b2512aa4","title":"Improve Accessibility of Audio Content with the audio Element","challengeType":0,"videoUrl":"https://scrimba.com/c/cVJVkcZ","forumTopicId":301014,"dashedName":"improve-accessibility-of-audio-content-with-the-audio-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Real Coding Ninjas</h1>\n  </header>\n  <main>\n    <p>A sound clip of Zersiax's screen reader in action.</p>\n\n\n\n  </main>\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Real Coding Ninjas</h1>\n  </header>\n  <main>\n    <p>A sound clip of Zersiax's screen reader in action.</p>\n\n\n\n  </main>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Real Coding Ninjas</h1>\n  </header>\n  <main>\n    <p>A sound clip of Zersiax's screen reader in action.</p>\n    <audio controls>\n      <source src=\"https://s3.amazonaws.com/freecodecamp/screen-reader.mp3\" type=\"audio/mpeg\"/>\n    </audio>\n  </main>\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Real Coding Ninjas</h1>\n  </header>\n  <main>\n    <p>A sound clip of Zersiax's screen reader in action.</p>\n    <audio controls>\n      <source src=\"https://s3.amazonaws.com/freecodecamp/screen-reader.mp3\" type=\"audio/mpeg\"/>\n    </audio>\n  </main>\n</body>"}]],"tests":[{"text":"<p>Your code should have one <code>audio</code> tag.</p>","testString":"assert($('audio').length === 1);"},{"text":"<p>Your <code>audio</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/audio>/g).length === 1 &&\n    code.match(/<audio.*>[\\s\\S]*<\\/audio>/g)\n);"},{"text":"<p>The <code>audio</code> tag should have the <code>controls</code> attribute.</p>","testString":"assert($('audio').attr('controls'));"},{"text":"<p>Your code should have one <code>source</code> tag.</p>","testString":"assert($('source').length === 1);"},{"text":"<p>Your <code>source</code> tag should be inside the <code>audio</code> tags.</p>","testString":"assert($('audio').children('source').length === 1);"},{"text":"<p>The value for the <code>src</code> attribute on the <code>source</code> tag should match the link in the instructions exactly.</p>","testString":"assert(\n  $('source').attr('src') ===\n    'https://s3.amazonaws.com/freecodecamp/screen-reader.mp3'\n);"},{"text":"<p>Your code should include a <code>type</code> attribute on the <code>source</code> tag with a value of audio/mpeg.</p>","testString":"assert($('source').attr('type') === 'audio/mpeg');"}],"description":"<section id=\"description\">\n<p>HTML5's <code>audio</code> element gives semantic meaning when it wraps sound or audio stream content in your markup. Audio content also needs a text alternative to be accessible to people who are deaf or hard of hearing. This can be done with nearby text on the page or a link to a transcript.</p>\n<p>The <code>audio</code> tag supports the <code>controls</code> attribute. This shows the browser default play, pause, and other controls, and supports keyboard functionality. This is a boolean attribute, meaning it doesn't need a value, its presence on the tag turns the setting on.</p>\n<p>Here's an example:</p>\n<pre><code class=\"language-html\">&#x3C;audio id=\"meowClip\" controls>\n  &#x3C;source src=\"audio/meow.mp3\" type=\"audio/mpeg\">\n  &#x3C;source src=\"audio/meow.ogg\" type=\"audio/ogg\">\n&#x3C;/audio>\n</code></pre>\n<p><strong>Note:</strong> Multimedia content usually has both visual and auditory components. It needs synchronized captions and a transcript so users with visual and/or auditory impairments can access it. Generally, a web developer is not responsible for creating the captions or transcript, but needs to know to include them.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Time to take a break from Camper Cat and meet fellow camper Zersiax (@zersiax), a champion of accessibility and a screen reader user. To hear a clip of his screen reader in action, add an <code>audio</code> element after the <code>p</code>. Include the <code>controls</code> attribute. Then place a <code>source</code> tag inside the <code>audio</code> tags with the <code>src</code> attribute set to <code>https://s3.amazonaws.com/freecodecamp/screen-reader.mp3</code> and <code>type</code> attribute set to <code>\"audio/mpeg\"</code>.</p>\n<p><strong>Note:</strong> The audio clip may sound fast and be difficult to understand, but that is a normal speed for screen reader users.</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":8,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d778a367417b2b2512aa5","title":"Improve Chart Accessibility with the figure Element","challengeType":0,"videoUrl":"https://scrimba.com/c/cGJMqtE","forumTopicId":301015,"dashedName":"improve-chart-accessibility-with-the-figure-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <main>\n    <section>\n\n      <!-- Only change code below this line -->\n      <div>\n        <!-- Stacked bar chart will go here -->\n        <br>\n        <p>Breakdown per week of time to spend training in stealth, combat, and weapons.</p>\n      </div>\n      <!-- Only change code above this line -->\n\n    </section>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <main>\n    <section>\n\n      <!-- Only change code below this line -->\n      <div>\n        <!-- Stacked bar chart will go here -->\n        <br>\n        <p>Breakdown per week of time to spend training in stealth, combat, and weapons.</p>\n      </div>\n      <!-- Only change code above this line -->\n\n    </section>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <main>\n    <section>\n      <figure>\n        <!-- Stacked bar chart will go here -->\n        <br>\n        <figcaption>Breakdown per week of time to spend training in stealth, combat, and weapons.</figcaption>\n      </figure>\n    </section>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <main>\n    <section>\n      <figure>\n        <!-- Stacked bar chart will go here -->\n        <br>\n        <figcaption>Breakdown per week of time to spend training in stealth, combat, and weapons.</figcaption>\n      </figure>\n    </section>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"}]],"tests":[{"text":"<p>Your code should have one <code>figure</code> tag.</p>","testString":"assert($('figure').length == 1);"},{"text":"<p>Your code should have one <code>figcaption</code> tag.</p>","testString":"assert($('figcaption').length == 1);"},{"text":"<p>Your code should not have any <code>div</code> tags.</p>","testString":"assert($('div').length == 0);"},{"text":"<p>Your code should not have any <code>p</code> tags.</p>","testString":"assert($('p').length == 0);"},{"text":"<p>The <code>figcaption</code> should be a child of the <code>figure</code> tag.</p>","testString":"assert($('figure').children('figcaption').length == 1);"},{"text":"<p>Your <code>figure</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/figure>/g) &&\n    code.match(/<\\/figure>/g).length === code.match(/<figure>/g).length\n);"}],"description":"<section id=\"description\">\n<p>HTML5 introduced the <code>figure</code> element and the related <code>figcaption</code>. Used together, these items wrap a visual representation (like an image, diagram, or chart) along with its caption. Wrapping these elements together gives a two-fold accessibility boost by semantically grouping related content and providing a text alternative explaining the <code>figure</code>.</p>\n<p>For data visualizations like charts, the caption can be used to briefly note the trends or conclusions for users with visual impairments. Another challenge covers how to move a table version of the chart's data off-screen (using CSS) for screen reader users.</p>\n<p>Here's an example - note that the <code>figcaption</code> goes inside the <code>figure</code> tags and can be combined with other elements:</p>\n<pre><code class=\"language-html\">&#x3C;figure>\n  &#x3C;img src=\"roundhouseDestruction.jpeg\" alt=\"Photo of Camper Cat executing a roundhouse kick\">\n  &#x3C;br>\n  &#x3C;figcaption>\n    Master Camper Cat demonstrates proper form of a roundhouse kick.\n  &#x3C;/figcaption>\n&#x3C;/figure>\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat is hard at work creating a stacked bar chart showing the amount of time per week to spend training in stealth, combat, and weapons. Help him structure his page better by changing the <code>div</code> tag he used to a <code>figure</code> tag, and the <code>p</code> tag that surrounds the caption to a <code>figcaption</code> tag.</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":9,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d778a367417b2b2512aa6","title":"Improve Form Field Accessibility with the label Element","challengeType":0,"videoUrl":"https://scrimba.com/c/cGJMMAN","forumTopicId":301016,"dashedName":"improve-form-field-accessibility-with-the-label-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <section>\n    <form>\n      <p>Sign up to receive Camper Cat's blog posts by email here!</p>\n\n\n      <label>Email:</label>\n      <input type=\"text\" id=\"email\" name=\"email\">\n\n\n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form>\n  </section>\n  <article>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <section>\n    <form>\n      <p>Sign up to receive Camper Cat's blog posts by email here!</p>\n\n\n      <label>Email:</label>\n      <input type=\"text\" id=\"email\" name=\"email\">\n\n\n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form>\n  </section>\n  <article>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <section>\n    <form>\n      <p>Sign up to receive Camper Cat's blog posts by email here!</p>\n\n\n      <label for=\"email\">Email:</label>\n      <input type=\"text\" id=\"email\" name=\"email\">\n\n\n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form>\n  </section>\n  <article>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <section>\n    <form>\n      <p>Sign up to receive Camper Cat's blog posts by email here!</p>\n\n\n      <label for=\"email\">Email:</label>\n      <input type=\"text\" id=\"email\" name=\"email\">\n\n\n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form>\n  </section>\n  <article>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"}]],"tests":[{"text":"<p>Your code should have a <code>for</code> attribute on the <code>label</code> tag that is not empty.</p>","testString":"assert($('label').attr('for'));"},{"text":"<p>Your <code>for</code> attribute value should match the <code>id</code> value on the email <code>input</code>.</p>","testString":"assert($('label').attr('for') == 'email');"}],"description":"<section id=\"description\">\n<p>Improving accessibility with semantic HTML markup applies to using both appropriate tag names and attributes. The next several challenges cover some important scenarios using attributes in forms.</p>\n<p>The <code>label</code> tag wraps the text for a specific form control item, usually the name or label for a choice. This ties meaning to the item and makes the form more readable. The <code>for</code> attribute on a <code>label</code> tag explicitly associates that <code>label</code> with the form control and is used by screen readers.</p>\n<p>You learned about radio buttons and their labels in a lesson in the Basic HTML section. In that lesson, we wrapped the radio button input element inside a <code>label</code> element along with the label text in order to make the text clickable. Another way to achieve this is by using the <code>for</code> attribute, as explained in this lesson.</p>\n<p>The value of the <code>for</code> attribute must be the same as the value of the <code>id</code> attribute of the form control. Here's an example:</p>\n<pre><code class=\"language-html\">&#x3C;form>\n  &#x3C;label for=\"name\">Name:&#x3C;/label>\n  &#x3C;input type=\"text\" id=\"name\" name=\"name\">\n&#x3C;/form>\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat expects a lot of interest in his thoughtful blog posts and wants to include an email sign up form. Add a <code>for</code> attribute on the email <code>label</code> that matches the <code>id</code> on its <code>input</code> field.</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":10,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d778e367417b2b2512aab","title":"Improve Readability with High Contrast Text","challengeType":0,"videoUrl":"https://scrimba.com/c/cKb3nCq","forumTopicId":301017,"dashedName":"improve-readability-with-high-contrast-text","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<head>\n  <style>\n  body {\n    color: #D3D3D3;\n    background-color: #FFF;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>A Word on the Recent Catnip Doping Scandal</h2>\n    <p>The influence that catnip has on feline behavior is well-documented, and its use as an herbal supplement in competitive ninja circles remains controversial. Once again, the debate to ban the substance is brought to the public's attention after the high-profile win of Kittytron, a long-time proponent and user of the green stuff, at the Claw of Fury tournament.</p>\n    <p>As I've stated in the past, I firmly believe a true ninja's skills must come from within, with no external influences. My own catnip use shall continue as purely recreational.</p>\n  </article>\n</body>","error":null,"seed":"<head>\n  <style>\n  body {\n    color: #D3D3D3;\n    background-color: #FFF;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>A Word on the Recent Catnip Doping Scandal</h2>\n    <p>The influence that catnip has on feline behavior is well-documented, and its use as an herbal supplement in competitive ninja circles remains controversial. Once again, the debate to ban the substance is brought to the public's attention after the high-profile win of Kittytron, a long-time proponent and user of the green stuff, at the Claw of Fury tournament.</p>\n    <p>As I've stated in the past, I firmly believe a true ninja's skills must come from within, with no external influences. My own catnip use shall continue as purely recreational.</p>\n  </article>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<head>\n  <style>\n  body {\n    color: #636363;\n    background-color: #FFF;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>A Word on the Recent Catnip Doping Scandal</h2>\n    <p>The influence that catnip has on feline behavior is well-documented, and its use as an herbal supplement in competitive ninja circles remains controversial. Once again, the debate to ban the substance is brought to the public's attention after the high-profile win of Kittytron, a long-time proponent and user of the green stuff, at the Claw of Fury tournament.</p>\n    <p>As I've stated in the past, I firmly believe a true ninja's skills must come from within, with no external influences. My own catnip use shall continue as purely recreational.</p>\n  </article>\n</body>","error":null,"seed":"<head>\n  <style>\n  body {\n    color: #636363;\n    background-color: #FFF;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n    <h2>A Word on the Recent Catnip Doping Scandal</h2>\n    <p>The influence that catnip has on feline behavior is well-documented, and its use as an herbal supplement in competitive ninja circles remains controversial. Once again, the debate to ban the substance is brought to the public's attention after the high-profile win of Kittytron, a long-time proponent and user of the green stuff, at the Claw of Fury tournament.</p>\n    <p>As I've stated in the past, I firmly believe a true ninja's skills must come from within, with no external influences. My own catnip use shall continue as purely recreational.</p>\n  </article>\n</body>"}]],"tests":[{"text":"<p>Your code should change the text <code>color</code> for the <code>body</code> to the darker gray.</p>","testString":"assert($('body').css('color') == 'rgb(99, 99, 99)');"},{"text":"<p>Your code should not change the <code>background-color</code> for the <code>body</code>.</p>","testString":"assert($('body').css('background-color') == 'rgb(255, 255, 255)');"}],"description":"<section id=\"description\">\n<p>Low contrast between the foreground and background colors can make text difficult to read. Sufficient contrast improves your content's readability, but what exactly does \"sufficient\" mean?</p>\n<p>The Web Content Accessibility Guidelines (WCAG) recommend at least a 4.5 to 1 contrast ratio for normal text. The ratio is calculated by comparing the relative luminance values of two colors. This ranges from 1:1 for the same color, or no contrast, to 21:1 for white against black, the most substantial contrast. There are many contrast checking tools available online that calculate this ratio for you.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat's choice of light gray text on a white background for his recent blog post has a 1.5:1 contrast ratio, making it hard to read. Change the <code>color</code> of the text from the current gray (<code>#D3D3D3</code>) to a darker gray (<code>#636363</code>) to improve the contrast ratio to 6:1.</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":15,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d774e367417b2b2512a9f","title":"Jump Straight to the Content Using the main Element","challengeType":0,"videoUrl":"https://scrimba.com/c/cPp7zuE","forumTopicId":301018,"dashedName":"jump-straight-to-the-content-using-the-main-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<header>\n  <h1>Weapons of the Ninja</h1>\n</header>\n\n\n\n<footer></footer>","error":null,"seed":"<header>\n  <h1>Weapons of the Ninja</h1>\n</header>\n\n\n\n<footer></footer>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<header>\n  <h1>Weapons of the Ninja</h1>\n</header>\n<main>\n\n</main>\n<footer></footer>","error":null,"seed":"<header>\n  <h1>Weapons of the Ninja</h1>\n</header>\n<main>\n\n</main>\n<footer></footer>"}]],"tests":[{"text":"<p>Your code should have one <code>main</code> tag.</p>","testString":"assert($('main').length == 1);"},{"text":"<p>The <code>main</code> tags should be between the closing <code>header</code> tag and the opening <code>footer</code> tag.</p>","testString":"assert(code.match(/<\\/header>\\s*?<main>\\s*?<\\/main>/gi));"}],"description":"<section id=\"description\">\n<p>HTML5 introduced several new elements that give developers more options while also incorporating accessibility features. These tags include <code>main</code>, <code>header</code>, <code>footer</code>, <code>nav</code>, <code>article</code>, and <code>section</code>, among others.</p>\n<p>By default, a browser renders these elements similar to the humble <code>div</code>. However, using them where appropriate gives additional meaning to your markup. The tag name alone can indicate the type of information it contains, which adds semantic meaning to that content. Assistive technologies can access this information to provide better page summary or navigation options to their users.</p>\n<p>The <code>main</code> element is used to wrap (you guessed it) the main content, and there should be only one per page. It's meant to surround the information related to your page's central topic. It's not meant to include items that repeat across pages, like navigation links or banners.</p>\n<p>The <code>main</code> tag also has an embedded landmark feature that assistive technology can use to navigate to the main content quickly. If you've ever seen a \"Jump to Main Content\" link at the top of a page, using the <code>main</code> tag automatically gives assistive devices that functionality.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat has some big ideas for his ninja weapons page. Help him set up his markup by adding opening and closing <code>main</code> tags between the <code>header</code> and <code>footer</code> (covered in other challenges). Keep the <code>main</code> tags empty for now.</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":3,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d774c367417b2b2512a9d","title":"Know When Alt Text Should be Left Blank","challengeType":0,"videoUrl":"https://scrimba.com/c/cM9P4t2","forumTopicId":301019,"dashedName":"know-when-alt-text-should-be-left-blank","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h1>Deep Thoughts with Master Camper Cat</h1>\n<article>\n  <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n  <p>To Come...</p>\n</article>\n\n<img src=\"samuraiSwords.jpeg\">\n\n<article>\n  <h2>Is Chuck Norris a Cat Person?</h2>\n  <p>To Come...</p>\n</article>","error":null,"seed":"<h1>Deep Thoughts with Master Camper Cat</h1>\n<article>\n  <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n  <p>To Come...</p>\n</article>\n\n<img src=\"samuraiSwords.jpeg\">\n\n<article>\n  <h2>Is Chuck Norris a Cat Person?</h2>\n  <p>To Come...</p>\n</article>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h1>Deep Thoughts with Master Camper Cat</h1>\n<article>\n  <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n  <p>To Come...</p>\n</article>\n\n<img src=\"samuraiSwords.jpeg\" alt=\"\">\n\n<article>\n  <h2>Is Chuck Norris a Cat Person?</h2>\n  <p>To Come...</p>\n</article>","error":null,"seed":"<h1>Deep Thoughts with Master Camper Cat</h1>\n<article>\n  <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n  <p>To Come...</p>\n</article>\n\n<img src=\"samuraiSwords.jpeg\" alt=\"\">\n\n<article>\n  <h2>Is Chuck Norris a Cat Person?</h2>\n  <p>To Come...</p>\n</article>"}]],"tests":[{"text":"<p>Your <code>img</code> tag should have an <code>alt</code> attribute.</p>","testString":"assert(!($('img').attr('alt') == undefined));"},{"text":"<p>The <code>alt</code> attribute should be set to an empty string.</p>","testString":"assert($('img').attr('alt') == '');"}],"description":"<section id=\"description\">\n<p>In the last challenge, you learned that including an <code>alt</code> attribute when using <code>img</code> tags is mandatory. However, sometimes images are grouped with a caption already describing them, or are used for decoration only. In these cases, <code>alt</code> text may seem redundant or unnecessary.</p>\n<p>When an image is already explained with text content or does not add meaning to a page, the <code>img</code> still needs an <code>alt</code> attribute, but it can be set to an empty string. Here's an example:</p>\n<pre><code class=\"language-html\">&#x3C;img src=\"visualDecoration.jpeg\" alt=\"\">\n</code></pre>\n<p>Background images usually fall under the 'decorative' label as well. However, they are typically applied with CSS rules, and therefore not part of the markup screen readers process.</p>\n<p><strong>Note:</strong> For images with a caption, you may still want to include <code>alt</code> text since it helps search engines catalog the image's content.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat has coded a skeleton page for the blog part of his website. He's planning to add a visual break between his two articles with a decorative image of a samurai sword. Add an <code>alt</code> attribute to the <code>img</code> tag and set it to an empty string. (Note that the image <code>src</code> doesn't link to an actual file - don't worry that there are no swords showing in the display.)</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":1,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d778d367417b2b2512aaa","title":"Make Elements Only Visible to a Screen Reader by Using Custom CSS","challengeType":0,"videoUrl":"https://scrimba.com/c/cJ8QGkhJ","forumTopicId":301020,"dashedName":"make-elements-only-visible-to-a-screen-reader-by-using-custom-css","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<head>\n  <style>\n  .sr-only {\n    position: ;\n    left: ;\n    width: ;\n    height: ;\n    top: auto;\n    overflow: hidden;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <section>\n    <h2>Master Camper Cat's Beginner Three Week Training Program</h2>\n    <figure>\n      <!-- Stacked bar chart of weekly training -->\n      <p>[Stacked bar chart]</p>\n      <br />\n      <figcaption>Breakdown per week of time to spend training in stealth, combat, and weapons.</figcaption>\n    </figure>\n    <table class=\"sr-only\">\n      <caption>Hours of Weekly Training in Stealth, Combat, and Weapons</caption>\n      <thead>\n        <tr>\n          <th></th>\n          <th scope=\"col\">Stealth &amp; Agility</th>\n          <th scope=\"col\">Combat</th>\n          <th scope=\"col\">Weapons</th>\n          <th scope=\"col\">Total</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <th scope=\"row\">Week One</th>\n          <td>3</td>\n          <td>5</td>\n          <td>2</td>\n          <td>10</td>\n        </tr>\n        <tr>\n          <th scope=\"row\">Week Two</th>\n          <td>4</td>\n          <td>5</td>\n          <td>3</td>\n          <td>12</td>\n        </tr>\n        <tr>\n          <th scope=\"row\">Week Three</th>\n          <td>4</td>\n          <td>6</td>\n          <td>3</td>\n          <td>13</td>\n        </tr>\n      </tbody>\n    </table>\n  </section>\n  <section id=\"stealth\">\n    <h2>Stealth &amp; Agility Training</h2>\n    <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n    <article><h3>No training is NP-complete without parkour</h3></article>\n  </section>\n  <section id=\"combat\">\n    <h2>Combat Training</h2>\n    <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n    <article><h3>Goodbye, world: 5 proven ways to knock out an opponent</h3></article>\n  </section>\n  <section id=\"weapons\">\n    <h2>Weapons Training</h2>\n    <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n    <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n  </section>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>","error":null,"seed":"<head>\n  <style>\n  .sr-only {\n    position: ;\n    left: ;\n    width: ;\n    height: ;\n    top: auto;\n    overflow: hidden;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <section>\n    <h2>Master Camper Cat's Beginner Three Week Training Program</h2>\n    <figure>\n      <!-- Stacked bar chart of weekly training -->\n      <p>[Stacked bar chart]</p>\n      <br />\n      <figcaption>Breakdown per week of time to spend training in stealth, combat, and weapons.</figcaption>\n    </figure>\n    <table class=\"sr-only\">\n      <caption>Hours of Weekly Training in Stealth, Combat, and Weapons</caption>\n      <thead>\n        <tr>\n          <th></th>\n          <th scope=\"col\">Stealth &amp; Agility</th>\n          <th scope=\"col\">Combat</th>\n          <th scope=\"col\">Weapons</th>\n          <th scope=\"col\">Total</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <th scope=\"row\">Week One</th>\n          <td>3</td>\n          <td>5</td>\n          <td>2</td>\n          <td>10</td>\n        </tr>\n        <tr>\n          <th scope=\"row\">Week Two</th>\n          <td>4</td>\n          <td>5</td>\n          <td>3</td>\n          <td>12</td>\n        </tr>\n        <tr>\n          <th scope=\"row\">Week Three</th>\n          <td>4</td>\n          <td>6</td>\n          <td>3</td>\n          <td>13</td>\n        </tr>\n      </tbody>\n    </table>\n  </section>\n  <section id=\"stealth\">\n    <h2>Stealth &amp; Agility Training</h2>\n    <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n    <article><h3>No training is NP-complete without parkour</h3></article>\n  </section>\n  <section id=\"combat\">\n    <h2>Combat Training</h2>\n    <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n    <article><h3>Goodbye, world: 5 proven ways to knock out an opponent</h3></article>\n  </section>\n  <section id=\"weapons\">\n    <h2>Weapons Training</h2>\n    <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n    <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n  </section>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<head>\n  <style>\n  .sr-only {\n    position: absolute;\n    left: -10000px;\n    width: 1px;\n    height: 1px;\n    top: auto;\n    overflow: hidden;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <section>\n    <h2>Master Camper Cat's Beginner Three Week Training Program</h2>\n    <figure>\n      <!-- Stacked bar chart of weekly training -->\n      <p>[Stacked bar chart]</p>\n      <br />\n      <figcaption>Breakdown per week of time to spend training in stealth, combat, and weapons.</figcaption>\n    </figure>\n    <table class=\"sr-only\">\n      <caption>Hours of Weekly Training in Stealth, Combat, and Weapons</caption>\n      <thead>\n        <tr>\n          <th></th>\n          <th scope=\"col\">Stealth &amp; Agility</th>\n          <th scope=\"col\">Combat</th>\n          <th scope=\"col\">Weapons</th>\n          <th scope=\"col\">Total</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <th scope=\"row\">Week One</th>\n          <td>3</td>\n          <td>5</td>\n          <td>2</td>\n          <td>10</td>\n        </tr>\n        <tr>\n          <th scope=\"row\">Week Two</th>\n          <td>4</td>\n          <td>5</td>\n          <td>3</td>\n          <td>12</td>\n        </tr>\n        <tr>\n          <th scope=\"row\">Week Three</th>\n          <td>4</td>\n          <td>6</td>\n          <td>3</td>\n          <td>13</td>\n        </tr>\n      </tbody>\n    </table>\n  </section>\n  <section id=\"stealth\">\n    <h2>Stealth &amp; Agility Training</h2>\n    <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n    <article><h3>No training is NP-complete without parkour</h3></article>\n  </section>\n  <section id=\"combat\">\n    <h2>Combat Training</h2>\n    <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n    <article><h3>Goodbye, world: 5 proven ways to knock out an opponent</h3></article>\n  </section>\n  <section id=\"weapons\">\n    <h2>Weapons Training</h2>\n    <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n    <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n  </section>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>","error":null,"seed":"<head>\n  <style>\n  .sr-only {\n    position: absolute;\n    left: -10000px;\n    width: 1px;\n    height: 1px;\n    top: auto;\n    overflow: hidden;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <section>\n    <h2>Master Camper Cat's Beginner Three Week Training Program</h2>\n    <figure>\n      <!-- Stacked bar chart of weekly training -->\n      <p>[Stacked bar chart]</p>\n      <br />\n      <figcaption>Breakdown per week of time to spend training in stealth, combat, and weapons.</figcaption>\n    </figure>\n    <table class=\"sr-only\">\n      <caption>Hours of Weekly Training in Stealth, Combat, and Weapons</caption>\n      <thead>\n        <tr>\n          <th></th>\n          <th scope=\"col\">Stealth &amp; Agility</th>\n          <th scope=\"col\">Combat</th>\n          <th scope=\"col\">Weapons</th>\n          <th scope=\"col\">Total</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <th scope=\"row\">Week One</th>\n          <td>3</td>\n          <td>5</td>\n          <td>2</td>\n          <td>10</td>\n        </tr>\n        <tr>\n          <th scope=\"row\">Week Two</th>\n          <td>4</td>\n          <td>5</td>\n          <td>3</td>\n          <td>12</td>\n        </tr>\n        <tr>\n          <th scope=\"row\">Week Three</th>\n          <td>4</td>\n          <td>6</td>\n          <td>3</td>\n          <td>13</td>\n        </tr>\n      </tbody>\n    </table>\n  </section>\n  <section id=\"stealth\">\n    <h2>Stealth &amp; Agility Training</h2>\n    <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n    <article><h3>No training is NP-complete without parkour</h3></article>\n  </section>\n  <section id=\"combat\">\n    <h2>Combat Training</h2>\n    <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n    <article><h3>Goodbye, world: 5 proven ways to knock out an opponent</h3></article>\n  </section>\n  <section id=\"weapons\">\n    <h2>Weapons Training</h2>\n    <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n    <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n  </section>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"}]],"tests":[{"text":"<p>Your code should set the <code>position</code> property of the <code>sr-only</code> class to a value of <code>absolute</code>.</p>","testString":"assert($('.sr-only').css('position') == 'absolute');"},{"text":"<p>Your code should set the <code>left</code> property of the <code>sr-only</code> class to a value of <code>-10000px</code>.</p>","testString":"assert($('.sr-only').css('left') == '-10000px');"},{"text":"<p>Your code should set the <code>width</code> property of the <code>sr-only</code> class to a value of <code>1</code> pixel.</p>","testString":"assert(code.match(/width:\\s*?1px/gi));"},{"text":"<p>Your code should set the <code>height</code> property of the <code>sr-only</code> class to a value of <code>1</code> pixel.</p>","testString":"assert(code.match(/height:\\s*?1px/gi));"}],"description":"<section id=\"description\">\n<p>Have you noticed that all of the applied accessibility challenges so far haven't used any CSS? This shows the importance of using a logical document outline and semantically meaningful tags around your content before introducing the visual design aspect.</p>\n<p>However, CSS's magic can also improve accessibility on your page when you want to visually hide content meant only for screen readers. This happens when information is in a visual format (like a chart), but screen reader users need an alternative presentation (like a table) to access the data. CSS is used to position the screen reader-only elements off the visual area of the browser window.</p>\n<p>Here's an example of the CSS rules that accomplish this:</p>\n<pre><code class=\"language-css\">.sr-only {\n  position: absolute;\n  left: -10000px;\n  width: 1px;\n  height: 1px;\n  top: auto;\n  overflow: hidden;\n}\n</code></pre>\n<p><strong>Note:</strong> The following CSS approaches will NOT do the same thing:</p>\n<ul>\n<li><code>display: none;</code> or <code>visibility: hidden;</code> hides content for everyone, including screen reader users</li>\n<li>Zero values for pixel sizes, such as <code>width: 0px; height: 0px;</code> removes that element from the flow of your document, meaning screen readers will ignore it</li>\n</ul>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat created a really cool stacked bar chart for his training page, and put the data into a table for his visually impaired users. The table already has an <code>sr-only</code> class, but the CSS rules aren't filled in yet. Give the <code>position</code> an <code>absolute</code> value, the <code>left</code> a <code>-10000px</code> value, and the <code>width</code> and <code>height</code> both <code>1px</code> values.</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":14,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d7790367417b2b2512aaf","title":"Make Links Navigable with HTML Access Keys","challengeType":0,"videoUrl":"https://scrimba.com/c/cQvmaTp","forumTopicId":301021,"dashedName":"make-links-navigable-with-html-access-keys","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n\n\n    <h2><a id=\"first\" href=\"#\">The Garfield Files: Lasagna as Training Fuel?</a></h2>\n\n\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <article>\n\n\n    <h2><a id=\"second\" href=\"#\">Is Chuck Norris a Cat Person?</a></h2>\n\n\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n\n\n    <h2><a id=\"first\" href=\"#\">The Garfield Files: Lasagna as Training Fuel?</a></h2>\n\n\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <article>\n\n\n    <h2><a id=\"second\" href=\"#\">Is Chuck Norris a Cat Person?</a></h2>\n\n\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n\n\n    <h2><a id=\"first\" accesskey=\"g\" href=\"#\">The Garfield Files: Lasagna as Training Fuel?</a></h2>\n\n\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <article>\n\n\n    <h2><a id=\"second\" accesskey=\"c\" href=\"#\">Is Chuck Norris a Cat Person?</a></h2>\n\n\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <article>\n\n\n    <h2><a id=\"first\" accesskey=\"g\" href=\"#\">The Garfield Files: Lasagna as Training Fuel?</a></h2>\n\n\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <article>\n\n\n    <h2><a id=\"second\" accesskey=\"c\" href=\"#\">Is Chuck Norris a Cat Person?</a></h2>\n\n\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"}]],"tests":[{"text":"<p>Your code should add an <code>accesskey</code> attribute to the <code>a</code> tag with the <code>id</code> of <code>first</code>.</p>","testString":"assert($('#first').attr('accesskey'));"},{"text":"<p>Your code should add an <code>accesskey</code> attribute to the <code>a</code> tag with the <code>id</code> of <code>second</code>.</p>","testString":"assert($('#second').attr('accesskey'));"},{"text":"<p>Your code should set the <code>accesskey</code> attribute on the <code>a</code> tag with the <code>id</code> of <code>first</code> to <code>g</code>. Note that case matters.</p>","testString":"assert($('#first').attr('accesskey') == 'g');"},{"text":"<p>Your code should set the <code>accesskey</code> attribute on the <code>a</code> tag with the <code>id</code> of <code>second</code> to <code>c</code>. Note that case matters.</p>","testString":"assert($('#second').attr('accesskey') == 'c');"}],"description":"<section id=\"description\">\n<p>HTML offers the <code>accesskey</code> attribute to specify a shortcut key to activate or bring focus to an element. Adding an <code>accesskey</code> attribute can make navigation more efficient for keyboard-only users.</p>\n<p>HTML5 allows this attribute to be used on any element, but it's particularly useful when it's used with interactive ones. This includes links, buttons, and form controls.</p>\n<p>Here's an example:</p>\n<pre><code class=\"language-html\">&#x3C;button accesskey=\"b\">Important Button&#x3C;/button>\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat wants the links around the two blog article titles to have keyboard shortcuts so his site's users can quickly navigate to the full story. Add an <code>accesskey</code> attribute to both links and set the first one to <code>g</code> (for Garfield) and the second one to <code>c</code> (for Chuck Norris).</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":19,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d7788367417b2b2512aa3","title":"Make Screen Reader Navigation Easier with the footer Landmark","challengeType":0,"videoUrl":"https://scrimba.com/c/crVrDh8","forumTopicId":301022,"dashedName":"make-screen-reader-navigation-easier-with-the-footer-landmark","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n\n\n  <div>&copy; 2018 Camper Cat</div>\n\n\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n\n\n  <div>&copy; 2018 Camper Cat</div>\n\n\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n\n\n  <footer>&copy; 2018 Camper Cat</footer>\n\n\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Training</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n  </header>\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n\n\n  <footer>&copy; 2018 Camper Cat</footer>\n\n\n</body>"}]],"tests":[{"text":"<p>Your code should have one <code>footer</code> tag.</p>","testString":"assert($('footer').length == 1);"},{"text":"<p>Your code should not have any <code>div</code> tags.</p>","testString":"assert($('div').length == 0);"},{"text":"<p>Your code should have an opening and closing <code>footer</code> tag.</p>","testString":"assert(code.match(/<footer>\\s*&copy; 2018 Camper Cat\\s*<\\/footer>/g));"}],"description":"<section id=\"description\">\n<p>Similar to <code>header</code> and <code>nav</code>, the <code>footer</code> element has a built-in landmark feature that allows assistive devices to quickly navigate to it. It's primarily used to contain copyright information or links to related documents that usually sit at the bottom of a page.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat's training page is making good progress. Change the <code>div</code> he used to wrap his copyright information at the bottom of the page to a <code>footer</code> element.</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":7,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d7787367417b2b2512aa1","title":"Make Screen Reader Navigation Easier with the header Landmark","challengeType":0,"videoUrl":"https://scrimba.com/c/cB76vtv","forumTopicId":301023,"dashedName":"make-screen-reader-navigation-easier-with-the-header-landmark","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n\n  <div>\n    <h1>Training with Camper Cat</h1>\n  </div>\n\n\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n</body>","error":null,"seed":"<body>\n\n  <div>\n    <h1>Training with Camper Cat</h1>\n  </div>\n\n\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n\n  <header>\n    <h1>Training with Camper Cat</h1>\n  </header>\n\n\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n</body>","error":null,"seed":"<body>\n\n  <header>\n    <h1>Training with Camper Cat</h1>\n  </header>\n\n\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n</body>"}]],"tests":[{"text":"<p>Your code should have one <code>header</code> tag.</p>","testString":"assert($('header').length == 1);"},{"text":"<p>Your <code>header</code> tags should wrap around the <code>h1</code>.</p>","testString":"assert($('header').children('h1').length == 1);"},{"text":"<p>Your code should not have any <code>div</code> tags.</p>","testString":"assert($('div').length == 0);"},{"text":"<p>Your <code>header</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/header>/g) &&\n    code.match(/<\\/header>/g).length === code.match(/<header>/g).length\n);"}],"description":"<section id=\"description\">\n<p>The next HTML5 element that adds semantic meaning and improves accessibility is the <code>header</code> tag. It's used to wrap introductory information or navigation links for its parent tag and works well around content that's repeated at the top on multiple pages.</p>\n<p><code>header</code> shares the embedded landmark feature you saw with <code>main</code>, allowing assistive technologies to quickly navigate to that content.</p>\n<p><strong>Note:</strong> The <code>header</code> is meant for use in the <code>body</code> tag of your HTML document. It is different than the <code>head</code> element, which contains the page's title, meta information, etc.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat is writing some great articles about ninja training, and wants to add a page for them to his site. Change the top <code>div</code> that currently contains the <code>h1</code> to a <code>header</code> tag instead.</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":5,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d7788367417b2b2512aa2","title":"Make Screen Reader Navigation Easier with the nav Landmark","challengeType":0,"videoUrl":"https://scrimba.com/c/czVwWSv","forumTopicId":301024,"dashedName":"make-screen-reader-navigation-easier-with-the-nav-landmark","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Training with Camper Cat</h1>\n\n    <div>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </div>\n\n  </header>\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Training with Camper Cat</h1>\n\n    <div>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </div>\n\n  </header>\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Training with Camper Cat</h1>\n\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n\n  </header>\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Training with Camper Cat</h1>\n\n    <nav>\n      <ul>\n        <li><a href=\"#stealth\">Stealth &amp; Agility</a></li>\n        <li><a href=\"#combat\">Combat</a></li>\n        <li><a href=\"#weapons\">Weapons</a></li>\n      </ul>\n    </nav>\n\n  </header>\n  <main>\n    <section id=\"stealth\">\n      <h2>Stealth &amp; Agility Training</h2>\n      <article><h3>Climb foliage quickly using a minimum spanning tree approach</h3></article>\n      <article><h3>No training is NP-complete without parkour</h3></article>\n    </section>\n    <section id=\"combat\">\n      <h2>Combat Training</h2>\n      <article><h3>Dispatch multiple enemies with multithreaded tactics</h3></article>\n      <article><h3>Goodbye world: 5 proven ways to knock out an opponent</h3></article>\n    </section>\n    <section id=\"weapons\">\n      <h2>Weapons Training</h2>\n      <article><h3>Swords: the best tool to literally divide and conquer</h3></article>\n      <article><h3>Breadth-first or depth-first in multi-weapon training?</h3></article>\n    </section>\n  </main>\n</body>"}]],"tests":[{"text":"<p>Your code should have one <code>nav</code> tag.</p>","testString":"assert($('nav').length == 1);"},{"text":"<p>Your <code>nav</code> tags should wrap around the <code>ul</code> and its list items.</p>","testString":"assert($('nav').children('ul').length == 1);"},{"text":"<p>Your code should not have any <code>div</code> tags.</p>","testString":"assert($('div').length == 0);"},{"text":"<p>Your <code>nav</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/nav>/g) &&\n    code.match(/<\\/nav>/g).length === code.match(/<nav>/g).length\n);"}],"description":"<section id=\"description\">\n<p>The <code>nav</code> element is another HTML5 item with the embedded landmark feature for easy screen reader navigation. This tag is meant to wrap around the main navigation links in your page.</p>\n<p>If there are repeated site links at the bottom of the page, it isn't necessary to markup those with a <code>nav</code> tag as well. Using a <code>footer</code> (covered in the next challenge) is sufficient.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat included navigation links at the top of his training page, but wrapped them in a <code>div</code>. Change the <code>div</code> to a <code>nav</code> tag to improve the accessibility on his page.</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":6,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d778c367417b2b2512aa9","title":"Standardize Times with the HTML5 datetime Attribute","challengeType":0,"videoUrl":"https://scrimba.com/c/cmzMgtz","forumTopicId":301025,"dashedName":"standardize-times-with-the-html5-datetime-attribute","challengeFiles":[{"head":"","tail":"<script>\nconst pElement = [...document.querySelectorAll(\"article > p\")]\n  .filter(x => x?.textContent?.includes(\"Thank you to everyone for responding to Master Camper Cat's survey.\"));\nconst timeElement = pElement[0] ? pElement[0].querySelector(\"time\") : null;\nconst datetimeAttr = timeElement?.getAttribute(\"datetime\");\n</script>","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Tournaments</h1>\n  </header>\n  <article>\n    <h2>Mortal Kombat Tournament Survey Results</h2>\n\n    <!-- Only change code below this line -->\n\n    <p>Thank you to everyone for responding to Master Camper Cat's survey. The best day to host the vaunted Mortal Kombat tournament is Thursday, September 15<sup>th</sup>. May the best ninja win!</p>\n\n    <!-- Only change code above this line -->\n\n    <section>\n      <h3>Comments:</h3>\n      <article>\n        <p>Posted by: Sub-Zero on <time datetime=\"2016-08-13T20:01Z\">August 13<sup>th</sup></time></p>\n        <p>Johnny Cage better be there, I'll finish him!</p>\n      </article>\n      <article>\n        <p>Posted by: Doge on <time datetime=\"2016-08-15T08:12Z\">August 15<sup>th</sup></time></p>\n        <p>Wow, much combat, so mortal.</p>\n      </article>\n      <article>\n        <p>Posted by: The Grim Reaper on <time datetime=\"2016-08-16T00:00Z\">August 16<sup>th</sup></time></p>\n        <p>Looks like I'll be busy that day.</p>\n      </article>\n    </section>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Tournaments</h1>\n  </header>\n  <article>\n    <h2>Mortal Kombat Tournament Survey Results</h2>\n\n    <!-- Only change code below this line -->\n\n    <p>Thank you to everyone for responding to Master Camper Cat's survey. The best day to host the vaunted Mortal Kombat tournament is Thursday, September 15<sup>th</sup>. May the best ninja win!</p>\n\n    <!-- Only change code above this line -->\n\n    <section>\n      <h3>Comments:</h3>\n      <article>\n        <p>Posted by: Sub-Zero on <time datetime=\"2016-08-13T20:01Z\">August 13<sup>th</sup></time></p>\n        <p>Johnny Cage better be there, I'll finish him!</p>\n      </article>\n      <article>\n        <p>Posted by: Doge on <time datetime=\"2016-08-15T08:12Z\">August 15<sup>th</sup></time></p>\n        <p>Wow, much combat, so mortal.</p>\n      </article>\n      <article>\n        <p>Posted by: The Grim Reaper on <time datetime=\"2016-08-16T00:00Z\">August 16<sup>th</sup></time></p>\n        <p>Looks like I'll be busy that day.</p>\n      </article>\n    </section>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Tournaments</h1>\n  </header>\n  <article>\n    <h2>Mortal Kombat Tournament Survey Results</h2>\n\n    <p>Thank you to everyone for responding to Master Camper Cat's survey. The best day to host the vaunted Mortal Kombat tournament is <time datetime=\"2016-09-15\">Thursday, September 15<sup>th</sup></time>. May the best ninja win!</p>\n\n    <section>\n      <h3>Comments:</h3>\n      <article>\n        <p>Posted by: Sub-Zero on <time datetime=\"2016-08-13T20:01Z\">August 13<sup>th</sup></time></p>\n        <p>Johnny Cage better be there, I'll finish him!</p>\n      </article>\n      <article>\n        <p>Posted by: Doge on <time datetime=\"2016-08-15T08:12Z\">August 15<sup>th</sup></time></p>\n        <p>Wow, much combat, so mortal.</p>\n      </article>\n      <article>\n        <p>Posted by: The Grim Reaper on <time datetime=\"2016-08-16T00:00Z\">August 16<sup>th</sup></time></p>\n        <p>Looks like I'll be busy that day.</p>\n      </article>\n    </section>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Tournaments</h1>\n  </header>\n  <article>\n    <h2>Mortal Kombat Tournament Survey Results</h2>\n\n    <p>Thank you to everyone for responding to Master Camper Cat's survey. The best day to host the vaunted Mortal Kombat tournament is <time datetime=\"2016-09-15\">Thursday, September 15<sup>th</sup></time>. May the best ninja win!</p>\n\n    <section>\n      <h3>Comments:</h3>\n      <article>\n        <p>Posted by: Sub-Zero on <time datetime=\"2016-08-13T20:01Z\">August 13<sup>th</sup></time></p>\n        <p>Johnny Cage better be there, I'll finish him!</p>\n      </article>\n      <article>\n        <p>Posted by: Doge on <time datetime=\"2016-08-15T08:12Z\">August 15<sup>th</sup></time></p>\n        <p>Wow, much combat, so mortal.</p>\n      </article>\n      <article>\n        <p>Posted by: The Grim Reaper on <time datetime=\"2016-08-16T00:00Z\">August 16<sup>th</sup></time></p>\n        <p>Looks like I'll be busy that day.</p>\n      </article>\n    </section>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"}]],"tests":[{"text":"<p>Your code should have a <code>p</code> element which includes the text <code>Thank you to everyone for responding to Master Camper Cat's survey.</code> and include a <code>time</code> element.</p>","testString":"assert(timeElement);"},{"text":"<p>Your added <code>time</code> tags should wrap around the text <code>Thursday, September 15&#x3C;sup>th&#x3C;/sup></code>.</p>","testString":"assert(\n  timeElement &&\n    timeElement?.innerHTML?.trim() === 'Thursday, September 15<sup>th</sup>'\n);"},{"text":"<p>Your added <code>time</code> tag should have a <code>datetime</code> attribute that is not empty.</p>","testString":"assert(datetimeAttr && datetimeAttr?.length);"},{"text":"<p>Your added <code>datetime</code> attribute should be set to a value of <code>2016-09-15</code>.</p>","testString":"assert(datetimeAttr === '2016-09-15');"}],"description":"<section id=\"description\">\n<p>Continuing with the date theme, HTML5 also introduced the <code>time</code> element along with a <code>datetime</code> attribute to standardize times. The <code>time</code> element is an inline element that can wrap a date or time on a page. A <code>datetime</code> attribute holds a valid format of that date. This is the value accessed by assistive devices. It helps avoid confusion by stating a standardized version of a time, even if it's informally or colloquially written in the text.</p>\n<p>Here's an example:</p>\n<pre><code class=\"language-html\">&#x3C;p>Master Camper Cat officiated the cage match between Goro and Scorpion &#x3C;time datetime=\"2013-02-13\">last Wednesday&#x3C;/time>, which ended in a draw.&#x3C;/p>\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat's Mortal Kombat survey results are in! Wrap a <code>time</code> tag around the text <code>Thursday, September 15&#x3C;sup>th&#x3C;/sup></code> and add a <code>datetime</code> attribute to it set to <code>2016-09-15</code>.</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":13,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d774d367417b2b2512a9e","title":"Use Headings to Show Hierarchical Relationships of Content","challengeType":0,"videoUrl":"https://scrimba.com/c/cqVEktm","forumTopicId":301026,"dashedName":"use-headings-to-show-hierarchical-relationships-of-content","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h1>How to Become a Ninja</h1>\n<main>\n  <h2>Learn the Art of Moving Stealthily</h2>\n  <h5>How to Hide in Plain Sight</h5>\n  <h5>How to Climb a Wall</h5>\n\n  <h2>Learn the Art of Battle</h2>\n  <h5>How to Strengthen your Body</h5>\n  <h5>How to Fight like a Ninja</h5>\n\n  <h2>Learn the Art of Living with Honor</h2>\n  <h5>How to Breathe Properly</h5>\n  <h5>How to Simplify your Life</h5>\n</main>","error":null,"seed":"<h1>How to Become a Ninja</h1>\n<main>\n  <h2>Learn the Art of Moving Stealthily</h2>\n  <h5>How to Hide in Plain Sight</h5>\n  <h5>How to Climb a Wall</h5>\n\n  <h2>Learn the Art of Battle</h2>\n  <h5>How to Strengthen your Body</h5>\n  <h5>How to Fight like a Ninja</h5>\n\n  <h2>Learn the Art of Living with Honor</h2>\n  <h5>How to Breathe Properly</h5>\n  <h5>How to Simplify your Life</h5>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h1>How to Become a Ninja</h1>\n<main>\n  <h2>Learn the Art of Moving Stealthily</h2>\n  <h3>How to Hide in Plain Sight</h3>\n  <h3>How to Climb a Wall</h3>\n\n  <h2>Learn the Art of Battle</h2>\n  <h3>How to Strengthen your Body</h3>\n  <h3>How to Fight like a Ninja</h3>\n\n  <h2>Learn the Art of Living with Honor</h2>\n  <h3>How to Breathe Properly</h3>\n  <h3>How to Simplify your Life</h3>\n</main>","error":null,"seed":"<h1>How to Become a Ninja</h1>\n<main>\n  <h2>Learn the Art of Moving Stealthily</h2>\n  <h3>How to Hide in Plain Sight</h3>\n  <h3>How to Climb a Wall</h3>\n\n  <h2>Learn the Art of Battle</h2>\n  <h3>How to Strengthen your Body</h3>\n  <h3>How to Fight like a Ninja</h3>\n\n  <h2>Learn the Art of Living with Honor</h2>\n  <h3>How to Breathe Properly</h3>\n  <h3>How to Simplify your Life</h3>\n</main>"}]],"tests":[{"text":"<p>Your code should have 6 <code>h3</code> elements.</p>","testString":"assert($('h3').length === 6);"},{"text":"<p>Your code should have 6 <code>h3</code> closing tags.</p>","testString":"assert((code.match(/\\/h3/g) || []).length === 6);"},{"text":"<p>Your code should not have any <code>h5</code> elements.</p>","testString":"assert($('h5').length === 0);"},{"text":"<p>Your code should not have any <code>h5</code> closing tags.</p>","testString":"assert(/\\/h5/.test(code) === false);"}],"description":"<section id=\"description\">\n<p>Headings (<code>h1</code> through <code>h6</code> elements) are workhorse tags that help provide structure and labeling to your content. Screen readers can be set to read only the headings on a page so the user gets a summary. This means it is important for the heading tags in your markup to have semantic meaning and relate to each other, not be picked merely for their size values.</p>\n<p><em>Semantic meaning</em> means that the tag you use around content indicates the type of information it contains.</p>\n<p>If you were writing a paper with an introduction, a body, and a conclusion, it wouldn't make much sense to put the conclusion as a subsection of the body in your outline. It should be its own section. Similarly, the heading tags in a webpage need to go in order and indicate the hierarchical relationships of your content.</p>\n<p>Headings with equal (or higher) rank start new implied sections, headings with lower rank start subsections of the previous one.</p>\n<p>As an example, a page with an <code>h2</code> element followed by several subsections labeled with <code>h4</code> elements would confuse a screen reader user. With six choices, it's tempting to use a tag because it looks better in a browser, but you can use CSS to edit the relative sizing.</p>\n<p>One final point, each page should always have one (and only one) <code>h1</code> element, which is the main subject of your content. This and the other headings are used in part by search engines to understand the topic of the page.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat wants a page on his site dedicated to becoming a ninja. Help him fix the headings so his markup gives semantic meaning to the content, and shows the proper parent-child relationships of his sections. Change all the <code>h5</code> tags to the proper heading level to indicate they are subsections of the <code>h2</code> ones. Use <code>h3</code> tags for the purpose.</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":2,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d7790367417b2b2512ab0","title":"Use tabindex to Add Keyboard Focus to an Element","challengeType":0,"videoUrl":"https://scrimba.com/c/cmzMDHW","forumTopicId":301027,"dashedName":"use-tabindex-to-add-keyboard-focus-to-an-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<head>\n  <style>\n  p:focus {\n    background-color: yellow;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Ninja Survey</h1>\n  </header>\n  <section>\n    <form>\n\n\n      <p>Instructions: Fill in ALL your information then click <b>Submit</b></p>\n\n\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\"><br>\n      <fieldset>\n        <legend>What level ninja are you?</legend>\n        <input id=\"newbie\" type=\"radio\" name=\"levels\" value=\"newbie\">\n        <label for=\"newbie\">Newbie Kitten</label><br>\n        <input id=\"intermediate\" type=\"radio\" name=\"levels\" value=\"intermediate\">\n        <label for=\"intermediate\">Developing Student</label><br>\n        <input id=\"master\" type=\"radio\" name=\"levels\" value=\"master\">\n        <label for=\"master\">9th Life Master</label>\n      </fieldset>\n      <br>\n      <fieldset>\n      <legend>Select your favorite weapons:</legend>\n      <input id=\"stars\" type=\"checkbox\" name=\"weapons\" value=\"stars\">\n      <label for=\"stars\">Throwing Stars</label><br>\n      <input id=\"nunchucks\" type=\"checkbox\" name=\"weapons\" value=\"nunchucks\">\n      <label for=\"nunchucks\">Nunchucks</label><br>\n      <input id=\"sai\" type=\"checkbox\" name=\"weapons\" value=\"sai\">\n      <label for=\"sai\">Sai Set</label><br>\n      <input id=\"sword\" type=\"checkbox\" name=\"weapons\" value=\"sword\">\n      <label for=\"sword\">Sword</label>\n      </fieldset>\n      <br>\n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form><br>\n  </section>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>","error":null,"seed":"<head>\n  <style>\n  p:focus {\n    background-color: yellow;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Ninja Survey</h1>\n  </header>\n  <section>\n    <form>\n\n\n      <p>Instructions: Fill in ALL your information then click <b>Submit</b></p>\n\n\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\"><br>\n      <fieldset>\n        <legend>What level ninja are you?</legend>\n        <input id=\"newbie\" type=\"radio\" name=\"levels\" value=\"newbie\">\n        <label for=\"newbie\">Newbie Kitten</label><br>\n        <input id=\"intermediate\" type=\"radio\" name=\"levels\" value=\"intermediate\">\n        <label for=\"intermediate\">Developing Student</label><br>\n        <input id=\"master\" type=\"radio\" name=\"levels\" value=\"master\">\n        <label for=\"master\">9th Life Master</label>\n      </fieldset>\n      <br>\n      <fieldset>\n      <legend>Select your favorite weapons:</legend>\n      <input id=\"stars\" type=\"checkbox\" name=\"weapons\" value=\"stars\">\n      <label for=\"stars\">Throwing Stars</label><br>\n      <input id=\"nunchucks\" type=\"checkbox\" name=\"weapons\" value=\"nunchucks\">\n      <label for=\"nunchucks\">Nunchucks</label><br>\n      <input id=\"sai\" type=\"checkbox\" name=\"weapons\" value=\"sai\">\n      <label for=\"sai\">Sai Set</label><br>\n      <input id=\"sword\" type=\"checkbox\" name=\"weapons\" value=\"sword\">\n      <label for=\"sword\">Sword</label>\n      </fieldset>\n      <br>\n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form><br>\n  </section>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<head>\n  <style>\n  p:focus {\n    background-color: yellow;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Ninja Survey</h1>\n  </header>\n  <section>\n    <form>\n\n\n      <p tabindex=\"0\">Instructions: Fill in ALL your information then click <b>Submit</b></p>\n\n\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\"><br>\n      <fieldset>\n        <legend>What level ninja are you?</legend>\n        <input id=\"newbie\" type=\"radio\" name=\"levels\" value=\"newbie\">\n        <label for=\"newbie\">Newbie Kitten</label><br>\n        <input id=\"intermediate\" type=\"radio\" name=\"levels\" value=\"intermediate\">\n        <label for=\"intermediate\">Developing Student</label><br>\n        <input id=\"master\" type=\"radio\" name=\"levels\" value=\"master\">\n        <label for=\"master\">9th Life Master</label>\n      </fieldset>\n      <br>\n      <fieldset>\n      <legend>Select your favorite weapons:</legend>\n      <input id=\"stars\" type=\"checkbox\" name=\"weapons\" value=\"stars\">\n      <label for=\"stars\">Throwing Stars</label><br>\n      <input id=\"nunchucks\" type=\"checkbox\" name=\"weapons\" value=\"nunchucks\">\n      <label for=\"nunchucks\">Nunchucks</label><br>\n      <input id=\"sai\" type=\"checkbox\" name=\"weapons\" value=\"sai\">\n      <label for=\"sai\">Sai Set</label><br>\n      <input id=\"sword\" type=\"checkbox\" name=\"weapons\" value=\"sword\">\n      <label for=\"sword\">Sword</label>\n      </fieldset>\n      <br>\n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form><br>\n  </section>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>","error":null,"seed":"<head>\n  <style>\n  p:focus {\n    background-color: yellow;\n  }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Ninja Survey</h1>\n  </header>\n  <section>\n    <form>\n\n\n      <p tabindex=\"0\">Instructions: Fill in ALL your information then click <b>Submit</b></p>\n\n\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" name=\"username\"><br>\n      <fieldset>\n        <legend>What level ninja are you?</legend>\n        <input id=\"newbie\" type=\"radio\" name=\"levels\" value=\"newbie\">\n        <label for=\"newbie\">Newbie Kitten</label><br>\n        <input id=\"intermediate\" type=\"radio\" name=\"levels\" value=\"intermediate\">\n        <label for=\"intermediate\">Developing Student</label><br>\n        <input id=\"master\" type=\"radio\" name=\"levels\" value=\"master\">\n        <label for=\"master\">9th Life Master</label>\n      </fieldset>\n      <br>\n      <fieldset>\n      <legend>Select your favorite weapons:</legend>\n      <input id=\"stars\" type=\"checkbox\" name=\"weapons\" value=\"stars\">\n      <label for=\"stars\">Throwing Stars</label><br>\n      <input id=\"nunchucks\" type=\"checkbox\" name=\"weapons\" value=\"nunchucks\">\n      <label for=\"nunchucks\">Nunchucks</label><br>\n      <input id=\"sai\" type=\"checkbox\" name=\"weapons\" value=\"sai\">\n      <label for=\"sai\">Sai Set</label><br>\n      <input id=\"sword\" type=\"checkbox\" name=\"weapons\" value=\"sword\">\n      <label for=\"sword\">Sword</label>\n      </fieldset>\n      <br>\n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form><br>\n  </section>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"}]],"tests":[{"text":"<p>Your code should add a <code>tabindex</code> attribute to the <code>p</code> tag that holds the form instructions.</p>","testString":"assert($('p').attr('tabindex'));"},{"text":"<p>Your code should set the <code>tabindex</code> attribute on the <code>p</code> tag to a value of 0.</p>","testString":"assert($('p').attr('tabindex') == '0');"}],"description":"<section id=\"description\">\n<p>The HTML <code>tabindex</code> attribute has three distinct functions relating to an element's keyboard focus. When it's on a tag, it indicates that the element can be focused on. The value (an integer that's positive, negative, or zero) determines the behavior.</p>\n<p>Certain elements, such as links and form controls, automatically receive keyboard focus when a user tabs through a page. It's in the same order as the elements come in the HTML source markup. This same functionality can be given to other elements, such as <code>div</code>, <code>span</code>, and <code>p</code>, by placing a <code>tabindex=\"0\"</code> attribute on them. Here's an example:</p>\n<pre><code class=\"language-html\">&#x3C;div tabindex=\"0\">I need keyboard focus!&#x3C;/div>\n</code></pre>\n<p><strong>Note:</strong> A negative <code>tabindex</code> value (typically -1) indicates that an element is focusable, but is not reachable by the keyboard. This method is generally used to bring focus to content programmatically (like when a <code>div</code> used for a pop-up window is activated), and is beyond the scope of these challenges.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat created a new survey to collect information about his users. He knows input fields automatically get keyboard focus, but he wants to make sure his keyboard users pause at the instructions while tabbing through the items. Add a <code>tabindex</code> attribute to the <code>p</code> tag and set its value to <code>0</code>. Bonus - using <code>tabindex</code> also enables the CSS pseudo-class <code>:focus</code> to work on the <code>p</code> tag.</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":20,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d7790367417b2b2512ab1","title":"Use tabindex to Specify the Order of Keyboard Focus for Several Elements","challengeType":0,"videoUrl":"https://scrimba.com/c/cmzRRcb","forumTopicId":301028,"dashedName":"use-tabindex-to-specify-the-order-of-keyboard-focus-for-several-elements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <div tabindex=\"1\" class=\"overlay\"></div>\n  <header>\n    <h1>Even Deeper Thoughts with Master Camper Cat</h1>\n    <nav>\n      <ul>\n        <li><a href=\"\">Home</a></li>\n        <li><a href=\"\">Blog</a></li>\n        <li><a href=\"\">Training</a></li>\n      </ul>\n    </nav>\n  </header>\n  <form>\n    <label for=\"search\">Search:</label>\n\n\n    <input type=\"search\" name=\"search\" id=\"search\">\n    <input type=\"submit\" name=\"submit\" value=\"Submit\" id=\"submit\">\n\n\n  </form>\n  <h2>Inspirational Quotes</h2>\n  <blockquote>\n    <p>&ldquo;There's no Theory of Evolution, just a list of creatures I've allowed to live.&rdquo;<br>\n    - Chuck Norris</p>\n  </blockquote>\n  <blockquote>\n    <p>&ldquo;Wise men say forgiveness is divine, but never pay full price for late pizza.&rdquo;<br>\n    - TMNT</p>\n  </blockquote>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>\n<style>\n  body {\n    height: 100%;\n    margin: 0 !important;\n    padding: 8px;\n  }\n  .overlay {\n    margin: -8px;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n</style>","error":null,"seed":"<body>\n  <div tabindex=\"1\" class=\"overlay\"></div>\n  <header>\n    <h1>Even Deeper Thoughts with Master Camper Cat</h1>\n    <nav>\n      <ul>\n        <li><a href=\"\">Home</a></li>\n        <li><a href=\"\">Blog</a></li>\n        <li><a href=\"\">Training</a></li>\n      </ul>\n    </nav>\n  </header>\n  <form>\n    <label for=\"search\">Search:</label>\n\n\n    <input type=\"search\" name=\"search\" id=\"search\">\n    <input type=\"submit\" name=\"submit\" value=\"Submit\" id=\"submit\">\n\n\n  </form>\n  <h2>Inspirational Quotes</h2>\n  <blockquote>\n    <p>&ldquo;There's no Theory of Evolution, just a list of creatures I've allowed to live.&rdquo;<br>\n    - Chuck Norris</p>\n  </blockquote>\n  <blockquote>\n    <p>&ldquo;Wise men say forgiveness is divine, but never pay full price for late pizza.&rdquo;<br>\n    - TMNT</p>\n  </blockquote>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>\n<style>\n  body {\n    height: 100%;\n    margin: 0 !important;\n    padding: 8px;\n  }\n  .overlay {\n    margin: -8px;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n</style>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <div tabindex=\"1\" class=\"overlay\"></div>\n  <header>\n    <h1>Even Deeper Thoughts with Master Camper Cat</h1>\n    <nav>\n      <ul>\n        <li><a href=\"\">Home</a></li>\n        <li><a href=\"\">Blog</a></li>\n        <li><a href=\"\">Training</a></li>\n      </ul>\n    </nav>\n  </header>\n  <form>\n    <label for=\"search\">Search:</label>\n\n\n    <input tabindex=\"1\" type=\"search\" name=\"search\" id=\"search\">\n    <input tabindex=\"2\" type=\"submit\" name=\"submit\" value=\"Submit\" id=\"submit\">\n\n\n  </form>\n  <h2>Inspirational Quotes</h2>\n  <blockquote>\n    <p>&ldquo;There's no Theory of Evolution, just a list of creatures I've allowed to live.&rdquo;<br>\n    - Chuck Norris</p>\n  </blockquote>\n  <blockquote>\n    <p>&ldquo;Wise men say forgiveness is divine, but never pay full price for late pizza.&rdquo;<br>\n    - TMNT</p>\n  </blockquote>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>\n<style>\n  body {\n    height: 100%;\n    margin: 0 !important;\n    padding: 8px;\n  }\n  .overlay {\n    margin: -8px;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n</style>","error":null,"seed":"<body>\n  <div tabindex=\"1\" class=\"overlay\"></div>\n  <header>\n    <h1>Even Deeper Thoughts with Master Camper Cat</h1>\n    <nav>\n      <ul>\n        <li><a href=\"\">Home</a></li>\n        <li><a href=\"\">Blog</a></li>\n        <li><a href=\"\">Training</a></li>\n      </ul>\n    </nav>\n  </header>\n  <form>\n    <label for=\"search\">Search:</label>\n\n\n    <input tabindex=\"1\" type=\"search\" name=\"search\" id=\"search\">\n    <input tabindex=\"2\" type=\"submit\" name=\"submit\" value=\"Submit\" id=\"submit\">\n\n\n  </form>\n  <h2>Inspirational Quotes</h2>\n  <blockquote>\n    <p>&ldquo;There's no Theory of Evolution, just a list of creatures I've allowed to live.&rdquo;<br>\n    - Chuck Norris</p>\n  </blockquote>\n  <blockquote>\n    <p>&ldquo;Wise men say forgiveness is divine, but never pay full price for late pizza.&rdquo;<br>\n    - TMNT</p>\n  </blockquote>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>\n<style>\n  body {\n    height: 100%;\n    margin: 0 !important;\n    padding: 8px;\n  }\n  .overlay {\n    margin: -8px;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n</style>"}]],"tests":[{"text":"<p>Your code should add a <code>tabindex</code> attribute to the <code>search</code> <code>input</code> tag.</p>","testString":"assert($('#search').attr('tabindex'));"},{"text":"<p>Your code should add a <code>tabindex</code> attribute to the <code>submit</code> <code>input</code> tag.</p>","testString":"assert($('#submit').attr('tabindex'));"},{"text":"<p>Your code should set the <code>tabindex</code> attribute on the <code>search</code> <code>input</code> tag to a value of 1.</p>","testString":"assert($('#search').attr('tabindex') == '1');"},{"text":"<p>Your code should set the <code>tabindex</code> attribute on the <code>submit</code> <code>input</code> tag to a value of 2.</p>","testString":"assert($('#submit').attr('tabindex') == '2');"}],"description":"<section id=\"description\">\n<p>The <code>tabindex</code> attribute also specifies the exact tab order of elements. This is achieved when the attribute's value is set to a positive number of 1 or higher.</p>\n<p>Setting a <code>tabindex=\"1\"</code> will bring keyboard focus to that element first. Then it cycles through the sequence of specified <code>tabindex</code> values (2, 3, etc.), before moving to default and <code>tabindex=\"0\"</code> items.</p>\n<p>It's important to note that when the tab order is set this way, it overrides the default order (which uses the HTML source). This may confuse users who are expecting to start navigation from the top of the page. This technique may be necessary in some circumstances, but in terms of accessibility, take care before applying it.</p>\n<p>Here's an example:</p>\n<pre><code class=\"language-html\">&#x3C;div tabindex=\"1\">I get keyboard focus, and I get it first!&#x3C;/div>\n</code></pre>\n<pre><code class=\"language-html\">&#x3C;div tabindex=\"2\">I get keyboard focus, and I get it second!&#x3C;/div>\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat has a search field on his Inspirational Quotes page that he plans to position in the upper right corner with CSS. He wants the search <code>input</code> and submit <code>input</code> form controls to be the first two items in the tab order. Add a <code>tabindex</code> attribute set to <code>1</code> to the <code>search</code> <code>input</code>, and a <code>tabindex</code> attribute set to <code>2</code> to the <code>submit</code> <code>input</code>.</p>\n<p>Another thing to note is that some browsers may place you in the middle of your tab order when an element is clicked. An element has been added to the page that ensures you will always start at the beginning of your tab order.</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":21,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d774e367417b2b2512aa0","title":"Wrap Content in the article Element","challengeType":0,"videoUrl":"https://scrimba.com/c/cPp79S3","forumTopicId":301029,"dashedName":"wrap-content-in-the-article-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h1>Deep Thoughts with Master Camper Cat</h1>\n<main>\n  <div>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </div>\n\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n</main>","error":null,"seed":"<h1>Deep Thoughts with Master Camper Cat</h1>\n<main>\n  <div>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </div>\n\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h1>Deep Thoughts with Master Camper Cat</h1>\n<main>\n  <article>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n</main>","error":null,"seed":"<h1>Deep Thoughts with Master Camper Cat</h1>\n<main>\n  <article>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n</main>"}]],"tests":[{"text":"<p>Your code should have three <code>article</code> tags.</p>","testString":"assert($('article').length == 3);"},{"text":"<p>Your code should not have any <code>div</code> tags.</p>","testString":"assert($('div').length == 0);"}],"description":"<section id=\"description\">\n<p><code>article</code> is another one of the new HTML5 elements that add semantic meaning to your markup. <code>article</code> is a sectioning element and is used to wrap independent, self-contained content. The tag works well with blog entries, forum posts, or news articles.</p>\n<p>Determining whether content can stand alone is usually a judgment call, but you can use a couple of simple tests. Ask yourself if you removed all surrounding context, would that content still make sense? Similarly, for text, would the content hold up if it were in an RSS feed?</p>\n<p>Remember that folks using assistive technologies rely on organized, semantically meaningful markup to better understand your work.</p>\n<p><strong>Note:</strong> The <code>section</code> element is also new with HTML5, and has a slightly different semantic meaning than <code>article</code>. An <code>article</code> is for standalone content, and a <code>section</code> is for grouping thematically related content. They can be used within each other, as needed. For example, if a book is the <code>article</code>, then each chapter is a <code>section</code>. When there's no relationship between groups of content, then use a <code>div</code>.</p>\n<p><code>&#x3C;div></code> - groups content\n<code>&#x3C;section></code> - groups related content\n<code>&#x3C;article></code> - groups independent, self-contained content</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat used <code>article</code> tags to wrap the posts on his blog page, but he forgot to use them around the top one. Change the <code>div</code> tag to use an <code>article</code> tag instead.</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":4,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d778b367417b2b2512aa7","title":"Wrap Radio Buttons in a fieldset Element for Better Accessibility","challengeType":0,"videoUrl":"https://scrimba.com/c/cVJVefw","forumTopicId":301030,"dashedName":"wrap-radio-buttons-in-a-fieldset-element-for-better-accessibility","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <section>\n    <form>\n      <p>Sign up to receive Camper Cat's blog posts by email here!</p>\n      <label for=\"email\">Email:</label>\n      <input type=\"text\" id=\"email\" name=\"email\">\n\n\n      <!-- Only change code below this line -->\n      <div>\n        <p>What level ninja are you?</p>\n        <input id=\"newbie\" type=\"radio\" name=\"levels\" value=\"newbie\">\n        <label for=\"newbie\">Newbie Kitten</label><br>\n        <input id=\"intermediate\" type=\"radio\" name=\"levels\" value=\"intermediate\">\n        <label for=\"intermediate\">Developing Student</label><br>\n        <input id=\"master\" type=\"radio\" name=\"levels\" value=\"master\">\n        <label for=\"master\">Master</label>\n      </div>\n      <!-- Only change code above this line -->\n\n\n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form>\n  </section>\n  <article>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <section>\n    <form>\n      <p>Sign up to receive Camper Cat's blog posts by email here!</p>\n      <label for=\"email\">Email:</label>\n      <input type=\"text\" id=\"email\" name=\"email\">\n\n\n      <!-- Only change code below this line -->\n      <div>\n        <p>What level ninja are you?</p>\n        <input id=\"newbie\" type=\"radio\" name=\"levels\" value=\"newbie\">\n        <label for=\"newbie\">Newbie Kitten</label><br>\n        <input id=\"intermediate\" type=\"radio\" name=\"levels\" value=\"intermediate\">\n        <label for=\"intermediate\">Developing Student</label><br>\n        <input id=\"master\" type=\"radio\" name=\"levels\" value=\"master\">\n        <label for=\"master\">Master</label>\n      </div>\n      <!-- Only change code above this line -->\n\n\n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form>\n  </section>\n  <article>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <section>\n    <form>\n      <p>Sign up to receive Camper Cat's blog posts by email here!</p>\n      <label for=\"email\">Email:</label>\n      <input type=\"text\" id=\"email\" name=\"email\">\n\n      <fieldset>\n        <legend>What level ninja are you?</legend>\n        <input id=\"newbie\" type=\"radio\" name=\"levels\" value=\"newbie\">\n        <label for=\"newbie\">Newbie Kitten</label><br>\n        <input id=\"intermediate\" type=\"radio\" name=\"levels\" value=\"intermediate\">\n        <label for=\"intermediate\">Developing Student</label><br>\n        <input id=\"master\" type=\"radio\" name=\"levels\" value=\"master\">\n        <label for=\"master\">Master</label>\n      </fieldset>\n\n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form>\n  </section>\n  <article>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>","error":null,"seed":"<body>\n  <header>\n    <h1>Deep Thoughts with Master Camper Cat</h1>\n  </header>\n  <section>\n    <form>\n      <p>Sign up to receive Camper Cat's blog posts by email here!</p>\n      <label for=\"email\">Email:</label>\n      <input type=\"text\" id=\"email\" name=\"email\">\n\n      <fieldset>\n        <legend>What level ninja are you?</legend>\n        <input id=\"newbie\" type=\"radio\" name=\"levels\" value=\"newbie\">\n        <label for=\"newbie\">Newbie Kitten</label><br>\n        <input id=\"intermediate\" type=\"radio\" name=\"levels\" value=\"intermediate\">\n        <label for=\"intermediate\">Developing Student</label><br>\n        <input id=\"master\" type=\"radio\" name=\"levels\" value=\"master\">\n        <label for=\"master\">Master</label>\n      </fieldset>\n\n      <input type=\"submit\" name=\"submit\" value=\"Submit\">\n    </form>\n  </section>\n  <article>\n    <h2>The Garfield Files: Lasagna as Training Fuel?</h2>\n    <p>The internet is littered with varying opinions on nutritional paradigms, from catnip paleo to hairball cleanses. But let's turn our attention to an often overlooked fitness fuel, and examine the protein-carb-NOM trifecta that is lasagna...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Defeating your Foe: the Red Dot is Ours!</h2>\n    <p>Felines the world over have been waging war on the most persistent of foes. This red nemesis combines both cunning stealth and lightning speed. But chin up, fellow fighters, our time for victory may soon be near...</p>\n  </article>\n  <img src=\"samuraiSwords.jpeg\" alt=\"\">\n  <article>\n    <h2>Is Chuck Norris a Cat Person?</h2>\n    <p>Chuck Norris is widely regarded as the premier martial artist on the planet, and it's a complete coincidence that anyone who disagrees with this fact mysteriously disappears soon after. But the real question is, is he a cat person?...</p>\n  </article>\n  <footer>&copy; 2018 Camper Cat</footer>\n</body>"}]],"tests":[{"text":"<p>Your code should have a <code>fieldset</code> tag around the radio button set.</p>","testString":"assert($('fieldset').length == 1);"},{"text":"<p>The <code>fieldset</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/fieldset>/g) &&\n    code.match(/<\\/fieldset>/g).length === code.match(/<fieldset>/g).length\n);"},{"text":"<p>Your code should have a <code>legend</code> tag around the text asking what level ninja a user is.</p>","testString":"assert($('legend').length == 1);"},{"text":"<p>Your code should not have any <code>div</code> tags.</p>","testString":"assert($('div').length == 0);"},{"text":"<p>Your code should no longer have a <code>p</code> tag around the text asking what level ninja a user is.</p>","testString":"assert($('p').length == 4);"}],"description":"<section id=\"description\">\n<p>The next form topic covers the accessibility of radio buttons. Each choice is given a <code>label</code> with a <code>for</code> attribute tying to the <code>id</code> of the corresponding item as covered in the last challenge. Since radio buttons often come in a group where the user must choose one, there's a way to semantically show the choices are part of a set.</p>\n<p>The <code>fieldset</code> tag surrounds the entire grouping of radio buttons to achieve this. It often uses a <code>legend</code> tag to provide a description for the grouping, which screen readers read for each choice in the <code>fieldset</code> element.</p>\n<p>The <code>fieldset</code> wrapper and <code>legend</code> tag are not necessary when the choices are self-explanatory, like a gender selection. Using a <code>label</code> with the <code>for</code> attribute for each radio button is sufficient.</p>\n<p>Here's an example:</p>\n<pre><code class=\"language-html\">&#x3C;form>\n  &#x3C;fieldset>\n    &#x3C;legend>Choose one of these three items:&#x3C;/legend>\n    &#x3C;input id=\"one\" type=\"radio\" name=\"items\" value=\"one\">\n    &#x3C;label for=\"one\">Choice One&#x3C;/label>&#x3C;br>\n    &#x3C;input id=\"two\" type=\"radio\" name=\"items\" value=\"two\">\n    &#x3C;label for=\"two\">Choice Two&#x3C;/label>&#x3C;br>\n    &#x3C;input id=\"three\" type=\"radio\" name=\"items\" value=\"three\">\n    &#x3C;label for=\"three\">Choice Three&#x3C;/label>\n  &#x3C;/fieldset>\n&#x3C;/form>\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Camper Cat wants information about the ninja level of his users when they sign up for his email list. He's added a set of radio buttons and learned from our last lesson to use <code>label</code> tags with <code>for</code> attributes for each choice. Go Camper Cat! However, his code still needs some help. Change the <code>div</code> tag surrounding the radio buttons to a <code>fieldset</code> tag, and change the <code>p</code> tag inside it to a <code>legend</code>.</p>\n</section>","block":"applied-accessibility","hasEditableBoundaries":false,"order":3,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":11,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false}]},"applied-visual-design":{"meta":{"name":"Applied Visual Design","isUpcomingChange":false,"dashedName":"applied-visual-design","order":2,"time":"5 hours","template":"","required":[],"superBlock":"responsive-web-design","challengeOrder":[["587d7791367417b2b2512ab3","Create Visual Balance Using the text-align Property"],["587d7791367417b2b2512ab4","Adjust the Width of an Element Using the width Property"],["587d7791367417b2b2512ab5","Adjust the Height of an Element Using the height Property"],["587d781a367417b2b2512ab7","Use the strong Tag to Make Text Bold"],["587d781a367417b2b2512ab8","Use the u Tag to Underline Text"],["587d781a367417b2b2512ab9","Use the em Tag to Italicize Text"],["587d781b367417b2b2512aba","Use the s Tag to Strikethrough Text"],["587d781b367417b2b2512abb","Create a Horizontal Line Using the hr Element"],["587d781b367417b2b2512abc","Adjust the background-color Property of Text"],["587d781b367417b2b2512abd","Adjust the Size of a Heading Element Versus a Paragraph Element"],["587d781b367417b2b2512abe","Add a box-shadow to a Card-like Element"],["587d781c367417b2b2512abf","Decrease the Opacity of an Element"],["587d781c367417b2b2512ac0","Use the text-transform Property to Make Text Uppercase"],["587d781c367417b2b2512ac2","Set the font-size for Multiple Heading Elements"],["587d781c367417b2b2512ac3","Set the font-weight for Multiple Heading Elements"],["587d781c367417b2b2512ac4","Set the font-size of Paragraph Text"],["587d781d367417b2b2512ac5","Set the line-height of Paragraphs"],["587d781d367417b2b2512ac8","Adjust the Hover State of an Anchor Tag"],["587d781e367417b2b2512ac9","Change an Element's Relative Position"],["587d781e367417b2b2512aca","Move a Relatively Positioned Element with CSS Offsets"],["587d781e367417b2b2512acb","Lock an Element to its Parent with Absolute Positioning"],["587d781e367417b2b2512acc","Lock an Element to the Browser Window with Fixed Positioning"],["587d78a3367417b2b2512ace","Push Elements Left or Right with the float Property"],["587d78a3367417b2b2512acf","Change the Position of Overlapping Elements with the z-index Property"],["587d78a3367417b2b2512ad0","Center an Element Horizontally Using the margin Property"],["587d78a3367417b2b2512ad1","Learn about Complementary Colors"],["587d78a4367417b2b2512ad2","Learn about Tertiary Colors"],["587d78a4367417b2b2512ad3","Adjust the Color of Various Elements to Complementary Colors"],["587d78a4367417b2b2512ad4","Adjust the Hue of a Color"],["587d78a4367417b2b2512ad5","Adjust the Tone of a Color"],["587d78a5367417b2b2512ad6","Create a Gradual CSS Linear Gradient"],["587d78a5367417b2b2512ad7","Use a CSS Linear Gradient to Create a Striped Element"],["587d78a5367417b2b2512ad8","Create Texture by Adding a Subtle Pattern as a Background Image"],["587d78a5367417b2b2512ad9","Use the CSS Transform scale Property to Change the Size of an Element"],["587d78a5367417b2b2512ada","Use the CSS Transform scale Property to Scale an Element on Hover"],["587d78a6367417b2b2512adb","Use the CSS Transform Property skewX to Skew an Element Along the X-Axis"],["587d78a6367417b2b2512adc","Use the CSS Transform Property skewY to Skew an Element Along the Y-Axis"],["587d78a6367417b2b2512add","Create a Graphic Using CSS"],["587d78a6367417b2b2512ade","Create a More Complex Shape Using CSS and HTML"],["587d78a7367417b2b2512adf","Learn How the CSS @keyframes and animation Properties Work"],["587d78a7367417b2b2512ae0","Use CSS Animation to Change the Hover State of a Button"],["58a7a6ebf9a6318348e2d5aa","Modify Fill Mode of an Animation"],["587d78a7367417b2b2512ae1","Create Movement Using CSS Animation"],["587d78a7367417b2b2512ae2","Create Visual Direction by Fading an Element from Left to Right"],["587d78a8367417b2b2512ae3","Animate Elements Continually Using an Infinite Animation Count"],["587d78a8367417b2b2512ae4","Make a CSS Heartbeat using an Infinite Animation Count"],["587d78a8367417b2b2512ae5","Animate Elements at Variable Rates"],["587d78a8367417b2b2512ae6","Animate Multiple Elements at Variable Rates"],["587d78a8367417b2b2512ae7","Change Animation Timing with Keywords"],["587d78a9367417b2b2512ae8","Learn How Bezier Curves Work"],["587d78a9367417b2b2512ae9","Use a Bezier Curve to Move a Graphic"],["587d78a9367417b2b2512aea","Make Motion More Natural Using a Bezier Curve"]]},"challenges":[{"id":"587d781b367417b2b2512abe","title":"Add a box-shadow to a Card-like Element","challengeType":0,"videoUrl":"https://scrimba.com/c/cvVZdUd","forumTopicId":301031,"dashedName":"add-a-box-shadow-to-a-card-like-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n\n\n\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n\n\n\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  #thumbnail {\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  #thumbnail {\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>Your code should add a <code>box-shadow</code> property for the <code>thumbnail</code> id.</p>","testString":"assert(code.match(/#thumbnail\\s*?{\\s*?box-shadow/g));"},{"text":"<p>You should use the given CSS for the <code>box-shadow</code> value.</p>","testString":"assert(\n  code.match(\n    /box-shadow:\\s*?0\\s+?10px\\s+?20px\\s+?rgba\\(\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0?\\.19\\)\\s*?,\\s*?0\\s+?6px\\s+?6px\\s+?rgba\\(\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0\\s*?,\\s*?0?\\.23\\)/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p>The <code>box-shadow</code> property applies one or more shadows to an element.</p>\n<p>The <code>box-shadow</code> property takes the following values, in order:</p>\n<ul>\n  <li><code>offset-x</code> (how far to push the shadow horizontally from the element)</li>\n  <li><code>offset-y</code> (how far to push the shadow vertically from the element)</li>\n  <li><code>blur-radius</code></li>\n  <li><code>spread-radius</code></li>\n  <li><code>color</code></li>\n</ul>\n<p>The <code>blur-radius</code> and <code>spread-radius</code> values are optional.</p>\n<p>Multiple box-shadows can be created by using commas to separate properties of each <code>box-shadow</code> element.</p>\n<p>Here's an example of the CSS to create multiple shadows with some blur, at mostly-transparent black colors:</p>\n<pre><code class=\"language-css\">box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>The element now has an id of <code>thumbnail</code>. With this selector, use the example CSS values above to place a <code>box-shadow</code> on the card.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":10,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d781b367417b2b2512abc","title":"Adjust the background-color Property of Text","challengeType":0,"videoUrl":"https://scrimba.com/c/cEDqwA6","forumTopicId":301032,"dashedName":"adjust-the-background-color-property-of-text","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n\n\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n\n\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    padding: 10px;\n    background-color: rgba(45, 45, 45, 0.1);\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    padding: 10px;\n    background-color: rgba(45, 45, 45, 0.1);\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>Your code should add a <code>background-color</code> property to the <code>h4</code> element set to <code>rgba(45, 45, 45, 0.1)</code>.</p>","testString":"assert(\n  /(background-color|background):rgba\\(45,45,45,0?\\.1\\)(;?}|;)/gi.test(\n    code.replace(/\\s/g, '')\n  )\n);"},{"text":"<p>Your code should add a <code>padding</code> property to the <code>h4</code> element and set it to 10 pixels.</p>","testString":"assert(\n  $('h4').css('padding-top') == '10px' &&\n    $('h4').css('padding-right') == '10px' &&\n    $('h4').css('padding-bottom') == '10px' &&\n    $('h4').css('padding-left') == '10px'\n);"},{"text":"<p>The <code>height</code> property on the <code>h4</code> element should be removed.</p>","testString":"assert(!($('h4').css('height') == '25px'));"}],"description":"<section id=\"description\">\n<p>Instead of adjusting your overall background or the color of the text to make the foreground easily readable, you can add a <code>background-color</code> to the element holding the text you want to emphasize. This challenge uses <code>rgba()</code> instead of <code>hex</code> codes or normal <code>rgb()</code>.</p>\n<blockquote>rgba stands for:<br>  r = red<br>  g = green<br>  b = blue<br>  a = alpha/level of opacity</blockquote>\n<p>The RGB values can range from 0 to 255. The alpha value can range from 1, which is fully opaque or a solid color, to 0, which is fully transparent or clear. <code>rgba()</code> is great to use in this case, as it allows you to adjust the opacity. This means you don't have to completely block out the background.</p>\n<p>You'll use <code>background-color: rgba(45, 45, 45, 0.1)</code> for this challenge. It produces a dark gray color that is nearly transparent given the low opacity value of 0.1.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>To make the text stand out more, adjust the <code>background-color</code> of the <code>h4</code> element to the given <code>rgba()</code> value.</p>\n<p>Also for the <code>h4</code>, remove the <code>height</code> property and add <code>padding</code> of 10px.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":8,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a4367417b2b2512ad3","title":"Adjust the Color of Various Elements to Complementary Colors","challengeType":0,"videoUrl":"https://scrimba.com/c/cWmPpud","forumTopicId":301033,"dashedName":"adjust-the-color-of-various-elements-to-complementary-colors","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: white;\n  }\n  header {\n    background-color: black;\n    color: white;\n    padding: 0.25em;\n  }\n  h2 {\n    color: black;\n  }\n  button {\n    background-color: white;\n  }\n  footer {\n    background-color: black;\n    color: white;\n    padding: 0.5em;\n  }\n</style>\n<header>\n  <h1>Cooking with FCC!</h1>\n</header>\n<main>\n  <article>\n    <h2>Machine Learning in the Kitchen</h2>\n    <p>Join this two day workshop that walks through how to implement cutting-edge snack-getting algorithms with a command line interface. Coding usually involves writing exact instructions, but sometimes you need your computer to execute flexible commands, like <code>fetch Pringles</code>.</p>\n    <button>Sign Up</button>\n  </article>\n  <article>\n    <h2>Bisection Vegetable Chopping</h2>\n    <p>This week-long retreat will level-up your coding ninja skills to actual ninja skills. No longer is the humble bisection search limited to sorted arrays or coding interview questions, applying its concepts in the kitchen will have you chopping carrots in O(log n) time before you know it.</p>\n    <button>Sign Up</button>\n  </article>\n</main>\n<br>\n<footer>&copy; 2018 FCC Kitchen</footer>","error":null,"seed":"<style>\n  body {\n    background-color: white;\n  }\n  header {\n    background-color: black;\n    color: white;\n    padding: 0.25em;\n  }\n  h2 {\n    color: black;\n  }\n  button {\n    background-color: white;\n  }\n  footer {\n    background-color: black;\n    color: white;\n    padding: 0.5em;\n  }\n</style>\n<header>\n  <h1>Cooking with FCC!</h1>\n</header>\n<main>\n  <article>\n    <h2>Machine Learning in the Kitchen</h2>\n    <p>Join this two day workshop that walks through how to implement cutting-edge snack-getting algorithms with a command line interface. Coding usually involves writing exact instructions, but sometimes you need your computer to execute flexible commands, like <code>fetch Pringles</code>.</p>\n    <button>Sign Up</button>\n  </article>\n  <article>\n    <h2>Bisection Vegetable Chopping</h2>\n    <p>This week-long retreat will level-up your coding ninja skills to actual ninja skills. No longer is the humble bisection search limited to sorted arrays or coding interview questions, applying its concepts in the kitchen will have you chopping carrots in O(log n) time before you know it.</p>\n    <button>Sign Up</button>\n  </article>\n</main>\n<br>\n<footer>&copy; 2018 FCC Kitchen</footer>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: white;\n  }\n  header {\n    background-color: #09A7A1;\n    color: white;\n    padding: 0.25em;\n  }\n  h2 {\n    color: #09A7A1;\n  }\n  button {\n    background-color: #FF790E;\n  }\n  footer {\n    background-color: #09A7A1;\n    color: white;\n    padding: 0.5em;\n  }\n</style>\n<header>\n  <h1>Cooking with FCC!</h1>\n</header>\n<main>\n  <article>\n    <h2>Machine Learning in the Kitchen</h2>\n    <p>Join this two day workshop that walks through how to implement cutting-edge snack-getting algorithms with a command line interface. Coding usually involves writing exact instructions, but sometimes you need your computer to execute flexible commands, like <code>fetch Pringles</code>.</p>\n    <button>Sign Up</button>\n  </article>\n  <article>\n    <h2>Bisection Vegetable Chopping</h2>\n    <p>This week-long retreat will level-up your coding ninja skills to actual ninja skills. No longer is the humble bisection search limited to sorted arrays or coding interview questions, applying its concepts in the kitchen will have you chopping carrots in O(log n) time before you know it.</p>\n    <button>Sign Up</button>\n  </article>\n</main>\n<br>\n<footer>&copy; 2018 FCC Kitchen</footer>","error":null,"seed":"<style>\n  body {\n    background-color: white;\n  }\n  header {\n    background-color: #09A7A1;\n    color: white;\n    padding: 0.25em;\n  }\n  h2 {\n    color: #09A7A1;\n  }\n  button {\n    background-color: #FF790E;\n  }\n  footer {\n    background-color: #09A7A1;\n    color: white;\n    padding: 0.5em;\n  }\n</style>\n<header>\n  <h1>Cooking with FCC!</h1>\n</header>\n<main>\n  <article>\n    <h2>Machine Learning in the Kitchen</h2>\n    <p>Join this two day workshop that walks through how to implement cutting-edge snack-getting algorithms with a command line interface. Coding usually involves writing exact instructions, but sometimes you need your computer to execute flexible commands, like <code>fetch Pringles</code>.</p>\n    <button>Sign Up</button>\n  </article>\n  <article>\n    <h2>Bisection Vegetable Chopping</h2>\n    <p>This week-long retreat will level-up your coding ninja skills to actual ninja skills. No longer is the humble bisection search limited to sorted arrays or coding interview questions, applying its concepts in the kitchen will have you chopping carrots in O(log n) time before you know it.</p>\n    <button>Sign Up</button>\n  </article>\n</main>\n<br>\n<footer>&copy; 2018 FCC Kitchen</footer>"}]],"tests":[{"text":"<p>The <code>header</code> element should have a <code>background-color</code> of #09A7A1.</p>","testString":"assert($('header').css('background-color') == 'rgb(9, 167, 161)');"},{"text":"<p>The <code>footer</code> element should have a <code>background-color</code> of #09A7A1.</p>","testString":"assert($('footer').css('background-color') == 'rgb(9, 167, 161)');"},{"text":"<p>The <code>h2</code> element should have a <code>color</code> of #09A7A1.</p>","testString":"assert($('h2').css('color') == 'rgb(9, 167, 161)');"},{"text":"<p>The <code>button</code> element should have a <code>background-color</code> of #FF790E.</p>","testString":"assert($('button').css('background-color') == 'rgb(255, 121, 14)');"}],"description":"<section id=\"description\">\n<p>The Complementary Colors challenge showed that opposite colors on the color wheel can make each other appear more vibrant when placed side-by-side. However, the strong visual contrast can be jarring if it's overused on a website, and can sometimes make text harder to read if it's placed on a complementary-colored background. In practice, one of the colors is usually dominant and the complement is used to bring visual attention to certain content on the page.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>This page will use a shade of teal (<code>#09A7A1</code>) as the dominant color, and its orange (<code>#FF790E</code>) complement to visually highlight the sign-up buttons. Change the <code>background-color</code> of both the <code>header</code> and <code>footer</code> from black to the teal color. Then change the <code>h2</code> text <code>color</code> to teal as well. Finally, change the <code>background-color</code> of the <code>button</code> to the orange color.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":27,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d7791367417b2b2512ab5","title":"Adjust the Height of an Element Using the height Property","challengeType":0,"videoUrl":"https://scrimba.com/c/cEDaDTN","forumTopicId":301034,"dashedName":"adjust-the-height-of-an-element-using-the-height-property","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    margin-right: 20px;\n    text-align: left;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    margin-right: 20px;\n    text-align: left;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    margin-right: 20px;\n    text-align: left;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    margin-right: 20px;\n    text-align: left;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>Your code should change the <code>h4</code> <code>height</code> property to a value of 25 pixels.</p>","testString":"assert(\n  Math.round(document.querySelector('h4').getBoundingClientRect().height) ===\n    25 &&\n    /h4{\\S*height:25px(;\\S*}|})/.test($('style').text().replace(/\\s/g, ''))\n);"}],"description":"<section id=\"description\">\n<p>You can specify the height of an element using the <code>height</code> property in CSS, similar to the <code>width</code> property. Here's an example that changes the height of an image to 20px:</p>\n<pre><code class=\"language-css\">img {\n  height: 20px;\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add a <code>height</code> property to the <code>h4</code> tag and set it to 25px.</p>\n<p><strong>Note:</strong> You may need to be at 100% zoom to pass the test on this challenge.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":2,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d781d367417b2b2512ac8","title":"Adjust the Hover State of an Anchor Tag","challengeType":0,"videoUrl":"https://scrimba.com/c/cakRGcm","forumTopicId":301035,"dashedName":"adjust-the-hover-state-of-an-anchor-tag","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  a {\n    color: #000;\n  }\n\n\n\n</style>\n<a href=\"https://freecatphotoapp.com/\" target=\"_blank\">CatPhotoApp</a>","error":null,"seed":"<style>\n  a {\n    color: #000;\n  }\n\n\n\n</style>\n<a href=\"https://freecatphotoapp.com/\" target=\"_blank\">CatPhotoApp</a>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  a {\n    color: #000;\n  }\n  a:hover {\n    color: rgba(0,0,255,1);\n  }\n</style>\n<a href=\"https://freecatphotoapp.com/\" target=\"_blank\">CatPhotoApp</a>","error":null,"seed":"<style>\n  a {\n    color: #000;\n  }\n  a:hover {\n    color: rgba(0,0,255,1);\n  }\n</style>\n<a href=\"https://freecatphotoapp.com/\" target=\"_blank\">CatPhotoApp</a>"}]],"tests":[{"text":"<p>The anchor tag <code>color</code> should remain black, only add CSS rules for the <code>:hover</code> state.</p>","testString":"assert($('a').css('color') == 'rgb(0, 0, 0)');"},{"text":"<p>The anchor tag should have a <code>color</code> of blue on hover.</p>","testString":"assert(\n  code.match(\n    /a:hover\\s*?{\\s*?color:\\s*?(blue|rgba\\(\\s*?0\\s*?,\\s*?0\\s*?,\\s*?255\\s*?,\\s*?1\\s*?\\)|#00F|rgb\\(\\s*?0\\s*?,\\s*?0\\s*?,\\s*?255\\s*?\\))\\s*?;\\s*?}/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p>This challenge will touch on the usage of pseudo-classes. A pseudo-class is a keyword that can be added to selectors, in order to select a specific state of the element.</p>\n<p>For example, the styling of an anchor tag can be changed for its hover state using the <code>:hover</code> pseudo-class selector. Here's the CSS to change the <code>color</code> of the anchor tag to red during its hover state:</p>\n<pre><code class=\"language-css\">a:hover {\n  color: red;\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>The code editor has a CSS rule to style all <code>a</code> tags black. Add a rule so that when the user hovers over the <code>a</code> tag, the <code>color</code> is blue.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":17,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a4367417b2b2512ad4","title":"Adjust the Hue of a Color","challengeType":0,"videoUrl":"https://scrimba.com/c/cPp38TZ","forumTopicId":301036,"dashedName":"adjust-the-hue-of-a-color","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: #FFFFFF;\n  }\n\n  .green {\n    background-color: #000000;\n  }\n\n  .cyan {\n    background-color: #000000;\n  }\n\n  .blue {\n    background-color: #000000;\n  }\n\n  div {\n    display: inline-block;\n    height: 100px;\n    width: 100px;\n  }\n</style>\n\n<div class=\"green\"></div>\n<div class=\"cyan\"></div>\n<div class=\"blue\"></div>","error":null,"seed":"<style>\n  body {\n    background-color: #FFFFFF;\n  }\n\n  .green {\n    background-color: #000000;\n  }\n\n  .cyan {\n    background-color: #000000;\n  }\n\n  .blue {\n    background-color: #000000;\n  }\n\n  div {\n    display: inline-block;\n    height: 100px;\n    width: 100px;\n  }\n</style>\n\n<div class=\"green\"></div>\n<div class=\"cyan\"></div>\n<div class=\"blue\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: #FFFFFF;\n  }\n\n  .green {\n    background-color: hsl(120, 100%, 50%);\n  }\n\n  .cyan {\n    background-color:   hsl(180, 100%, 50%);\n  }\n\n  .blue {\n    background-color: hsl(240, 100%, 50%);\n  }\n\n  div {\n    display: inline-block;\n    height: 100px;\n    width: 100px;\n  }\n</style>\n<div class=\"green\"></div>\n<div class=\"cyan\"></div>\n<div class=\"blue\"></div>","error":null,"seed":"<style>\n  body {\n    background-color: #FFFFFF;\n  }\n\n  .green {\n    background-color: hsl(120, 100%, 50%);\n  }\n\n  .cyan {\n    background-color:   hsl(180, 100%, 50%);\n  }\n\n  .blue {\n    background-color: hsl(240, 100%, 50%);\n  }\n\n  div {\n    display: inline-block;\n    height: 100px;\n    width: 100px;\n  }\n</style>\n<div class=\"green\"></div>\n<div class=\"cyan\"></div>\n<div class=\"blue\"></div>"}]],"tests":[{"text":"<p>Your code should use the <code>hsl()</code> function to declare the color green.</p>","testString":"assert(code.match(/\\.green\\s*?{\\s*?background-color\\s*:\\s*?hsl/gi));"},{"text":"<p>Your code should use the <code>hsl()</code> function to declare the color cyan.</p>","testString":"assert(code.match(/\\.cyan\\s*?{\\s*?background-color\\s*:\\s*?hsl/gi));"},{"text":"<p>Your code should use the <code>hsl()</code> function to declare the color blue.</p>","testString":"assert(code.match(/\\.blue\\s*?{\\s*?background-color\\s*:\\s*?hsl/gi));"},{"text":"<p>The <code>div</code> element with class <code>green</code> should have a <code>background-color</code> of green.</p>","testString":"assert($('.green').css('background-color') == 'rgb(0, 255, 0)');"},{"text":"<p>The <code>div</code> element with class <code>cyan</code> should have a <code>background-color</code> of cyan.</p>","testString":"assert($('.cyan').css('background-color') == 'rgb(0, 255, 255)');"},{"text":"<p>The <code>div</code> element with class <code>blue</code> should have a <code>background-color</code> of blue.</p>","testString":"assert($('.blue').css('background-color') == 'rgb(0, 0, 255)');"}],"description":"<section id=\"description\">\n<p>Colors have several characteristics including hue, saturation, and lightness. CSS3 introduced the <code>hsl()</code> function as an alternative way to pick a color by directly stating these characteristics.</p>\n<p><strong>Hue</strong> is what people generally think of as 'color'. If you picture a spectrum of colors starting with red on the left, moving through green in the middle, and blue on right, the hue is where a color fits along this line. In <code>hsl()</code>, hue uses a color wheel concept instead of the spectrum, where the angle of the color on the circle is given as a value between 0 and 360.</p>\n<p><strong>Saturation</strong> is the amount of gray in a color. A fully saturated color has no gray in it, and a minimally saturated color is almost completely gray. This is given as a percentage with 100% being fully saturated.</p>\n<p><strong>Lightness</strong> is the amount of white or black in a color. A percentage is given ranging from 0% (black) to 100% (white), where 50% is the normal color.</p>\n<p>Here are a few examples of using <code>hsl()</code> with fully-saturated, normal lightness colors:</p>\n<table class='table table-striped'><thead><tr><th>Color</th><th>HSL</th></tr></thead><tbody><tr><td>red</td><td>hsl(0, 100%, 50%)</td></tr><tr><td>yellow</td><td>hsl(60, 100%, 50%)</td></tr><tr><td>green</td><td>hsl(120, 100%, 50%)</td></tr><tr><td>cyan</td><td>hsl(180, 100%, 50%)</td></tr><tr><td>blue</td><td>hsl(240, 100%, 50%)</td></tr><tr><td>magenta</td><td>hsl(300, 100%, 50%)</td></tr></tbody></table>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the <code>background-color</code> of each <code>div</code> element based on the class names (<code>green</code>, <code>cyan</code>, or <code>blue</code>) using <code>hsl()</code>. All three should have full saturation and normal lightness.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":28,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d781b367417b2b2512abd","title":"Adjust the Size of a Heading Element Versus a Paragraph Element","challengeType":0,"videoUrl":"https://scrimba.com/c/c3bRPTz","forumTopicId":301037,"dashedName":"adjust-the-size-of-a-heading-element-versus-a-paragraph-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>Your code should add a <code>font-size</code> property to the <code>h4</code> element set to 27 pixels.</p>","testString":"assert($('h4').css('font-size') == '27px');"}],"description":"<section id=\"description\">\n<p>The font size of heading elements (<code>h1</code> through <code>h6</code>) should generally be larger than the font size of paragraph tags. This makes it easier for the user to visually understand the layout and level of importance of everything on the page. You use the <code>font-size</code> property to adjust the size of the text in an element.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>To make the heading significantly larger than the paragraph, change the <code>font-size</code> of the <code>h4</code> element to 27 pixels.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":9,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a4367417b2b2512ad5","title":"Adjust the Tone of a Color","challengeType":0,"videoUrl":"https://scrimba.com/c/cEDJvT7","forumTopicId":301038,"dashedName":"adjust-the-tone-of-a-color","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  header {\n    background-color: hsl(180, 90%, 35%);\n    color: #FFFFFF;\n  }\n\n  nav {\n\n  }\n\n  h1 {\n    text-indent: 10px;\n    padding-top: 10px;\n  }\n\n  nav ul {\n    margin: 0px;\n    padding: 5px 0px 5px 30px;\n  }\n\n  nav li {\n    display: inline;\n    margin-right: 20px;\n  }\n\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n</style>\n\n<header>\n  <h1>Cooking with FCC!</h1>\n  <nav>\n    <ul>\n      <li><a href=\"#\">Home</a></li>\n      <li><a href=\"#\">Classes</a></li>\n      <li><a href=\"#\">Contact</a></li>\n    </ul>\n  </nav>\n</header>","error":null,"seed":"<style>\n  header {\n    background-color: hsl(180, 90%, 35%);\n    color: #FFFFFF;\n  }\n\n  nav {\n\n  }\n\n  h1 {\n    text-indent: 10px;\n    padding-top: 10px;\n  }\n\n  nav ul {\n    margin: 0px;\n    padding: 5px 0px 5px 30px;\n  }\n\n  nav li {\n    display: inline;\n    margin-right: 20px;\n  }\n\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n</style>\n\n<header>\n  <h1>Cooking with FCC!</h1>\n  <nav>\n    <ul>\n      <li><a href=\"#\">Home</a></li>\n      <li><a href=\"#\">Classes</a></li>\n      <li><a href=\"#\">Contact</a></li>\n    </ul>\n  </nav>\n</header>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  header {\n    background-color: hsl(180, 90%, 35%);\n    color: #FFFFFF;\n  }\n\n  nav {\n    background-color: hsl(180, 80%, 25%);\n  }\n\n  h1 {\n    text-indent: 10px;\n    padding-top: 10px;\n  }\n\n  nav ul {\n    margin: 0px;\n    padding: 5px 0px 5px 30px;\n  }\n\n  nav li {\n    display: inline;\n    margin-right: 20px;\n  }\n\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n</style>\n<header>\n  <h1>Cooking with FCC!</h1>\n  <nav>\n    <ul>\n      <li><a href=\"#\">Home</a></li>\n      <li><a href=\"#\">Classes</a></li>\n      <li><a href=\"#\">Contact</a></li>\n    </ul>\n  </nav>\n</header>","error":null,"seed":"<style>\n  header {\n    background-color: hsl(180, 90%, 35%);\n    color: #FFFFFF;\n  }\n\n  nav {\n    background-color: hsl(180, 80%, 25%);\n  }\n\n  h1 {\n    text-indent: 10px;\n    padding-top: 10px;\n  }\n\n  nav ul {\n    margin: 0px;\n    padding: 5px 0px 5px 30px;\n  }\n\n  nav li {\n    display: inline;\n    margin-right: 20px;\n  }\n\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n</style>\n<header>\n  <h1>Cooking with FCC!</h1>\n  <nav>\n    <ul>\n      <li><a href=\"#\">Home</a></li>\n      <li><a href=\"#\">Classes</a></li>\n      <li><a href=\"#\">Contact</a></li>\n    </ul>\n  </nav>\n</header>"}]],"tests":[{"text":"<p>The <code>nav</code> element should have a <code>background-color</code> of the adjusted cyan tone using the <code>hsl()</code> property.</p>","testString":"// Computed style of hsl(180, 80%, 25%) results in rgb(13,115,115)\nassert.equal(\n  new __helpers.CSSHelp(document).getStyle('nav').getPropVal('background-color', true), \n  'rgb(13,115,115)'\n)"}],"description":"<section id=\"description\">\n<p>The <code>hsl()</code> option in CSS also makes it easy to adjust the tone of a color. Mixing white with a pure hue creates a tint of that color, and adding black will make a shade. Alternatively, a tone is produced by adding gray or by both tinting and shading. Recall that the 's' and 'l' of <code>hsl()</code> stand for saturation and lightness, respectively. The saturation percent changes the amount of gray and the lightness percent determines how much white or black is in the color. This is useful when you have a base hue you like, but need different variations of it.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>All elements have a default <code>background-color</code> of <code>transparent</code>. Our <code>nav</code> element currently appears to have a <code>cyan</code> background, because the element behind it has a <code>background-color</code> set to <code>cyan</code>. Add a <code>background-color</code> to the <code>nav</code> element so it uses the same <code>cyan</code> hue, but has <code>80%</code> saturation and <code>25%</code> lightness values to change its tone and shade.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":29,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d7791367417b2b2512ab4","title":"Adjust the Width of an Element Using the width Property","challengeType":0,"videoUrl":"https://scrimba.com/c/cvVLPtN","forumTopicId":301039,"dashedName":"adjust-the-width-of-an-element-using-the-width-property","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    margin-right: 20px;\n    text-align: left;\n  }\n  .fullCard {\n\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    margin-right: 20px;\n    text-align: left;\n  }\n  .fullCard {\n\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    margin-right: 20px;\n    text-align: left;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    margin-right: 20px;\n    text-align: left;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>Your code should change the <code>width</code> property of the card to 245 pixels by using the <code>fullCard</code> class selector.</p>","testString":"const fullCard = code.match(/\\.fullCard\\s*{[\\s\\S]+?[^}]}/g);\nassert(\n  fullCard &&\n    /width\\s*:\\s*245px\\s*(;|})/gi.test(fullCard[0]) &&\n    $('.fullCard').css('maxWidth') === 'none'\n);"}],"description":"<section id=\"description\">\n<p>You can specify the width of an element using the <code>width</code> property in CSS. Values can be given in relative length units (such as <code>em</code>), absolute length units (such as <code>px</code>), or as a percentage of its containing parent element. Here's an example that changes the width of an image to 220px:</p>\n<pre><code class=\"language-css\">img {\n  width: 220px;\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add a <code>width</code> property to the entire card and set it to an absolute value of 245px. Use the <code>fullCard</code> class to select the element.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":1,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a8367417b2b2512ae5","title":"Animate Elements at Variable Rates","challengeType":0,"videoUrl":"https://scrimba.com/c/cZ89WA4","forumTopicId":301040,"dashedName":"animate-elements-at-variable-rates","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .stars {\n    background-color: white;\n    height: 30px;\n    width: 30px;\n    border-radius: 50%;\n    animation-iteration-count: infinite;\n  }\n\n  .star-1 {\n    margin-top: 15%;\n    margin-left: 60%;\n    animation-name: twinkle-1;\n    animation-duration: 1s;\n  }\n\n  .star-2 {\n    margin-top: 25%;\n    margin-left: 25%;\n    animation-name: twinkle-2;\n    animation-duration: 1s;\n  }\n\n  @keyframes twinkle-1 {\n    20% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  @keyframes twinkle-2 {\n    20% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  #back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);\n  }\n</style>\n\n<div id=\"back\"></div>\n<div class=\"star-1 stars\"></div>\n<div class=\"star-2 stars\"></div>","error":null,"seed":"<style>\n  .stars {\n    background-color: white;\n    height: 30px;\n    width: 30px;\n    border-radius: 50%;\n    animation-iteration-count: infinite;\n  }\n\n  .star-1 {\n    margin-top: 15%;\n    margin-left: 60%;\n    animation-name: twinkle-1;\n    animation-duration: 1s;\n  }\n\n  .star-2 {\n    margin-top: 25%;\n    margin-left: 25%;\n    animation-name: twinkle-2;\n    animation-duration: 1s;\n  }\n\n  @keyframes twinkle-1 {\n    20% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  @keyframes twinkle-2 {\n    20% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  #back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);\n  }\n</style>\n\n<div id=\"back\"></div>\n<div class=\"star-1 stars\"></div>\n<div class=\"star-2 stars\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .stars {\n    background-color: white;\n    height: 30px;\n    width: 30px;\n    border-radius: 50%;\n    animation-iteration-count: infinite;\n  }\n\n  .star-1 {\n    margin-top: 15%;\n    margin-left: 60%;\n    animation-name: twinkle-1;\n    animation-duration: 1s;\n  }\n\n  .star-2 {\n    margin-top: 25%;\n    margin-left: 25%;\n    animation-name: twinkle-2;\n    animation-duration: 1s;\n  }\n\n  @keyframes twinkle-1 {\n    50% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  @keyframes twinkle-2 {\n    20% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  #back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);\n  }\n</style>\n<div id=\"back\"></div>\n<div class=\"star-1 stars\"></div>\n<div class=\"star-2 stars\"></div>","error":null,"seed":"<style>\n  .stars {\n    background-color: white;\n    height: 30px;\n    width: 30px;\n    border-radius: 50%;\n    animation-iteration-count: infinite;\n  }\n\n  .star-1 {\n    margin-top: 15%;\n    margin-left: 60%;\n    animation-name: twinkle-1;\n    animation-duration: 1s;\n  }\n\n  .star-2 {\n    margin-top: 25%;\n    margin-left: 25%;\n    animation-name: twinkle-2;\n    animation-duration: 1s;\n  }\n\n  @keyframes twinkle-1 {\n    50% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  @keyframes twinkle-2 {\n    20% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  #back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);\n  }\n</style>\n<div id=\"back\"></div>\n<div class=\"star-1 stars\"></div>\n<div class=\"star-2 stars\"></div>"}]],"tests":[{"text":"<p>The <code>@keyframes</code> rule for the <code>star-1</code> class should be 50%.</p>","testString":"assert(code.match(/twinkle-1\\s*?{\\s*?50%/g));"}],"description":"<section id=\"description\">\n<p>There are a variety of ways to alter the animation rates of similarly animated elements. So far, this has been achieved by applying an <code>animation-iteration-count</code> property and setting <code>@keyframes</code> rules.</p>\n<p>To illustrate, the animation on the right consists of two stars that each decrease in size and opacity at the 20% mark in the <code>@keyframes</code> rule, which creates the twinkle animation. You can change the <code>@keyframes</code> rule for one of the elements so the stars twinkle at different rates.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Alter the animation rate for the element with the class name of <code>star-1</code> by changing its <code>@keyframes</code> rule to 50%.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":46,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a8367417b2b2512ae3","title":"Animate Elements Continually Using an Infinite Animation Count","challengeType":0,"videoUrl":"https://scrimba.com/c/cVJDVfq","forumTopicId":301041,"dashedName":"animate-elements-continually-using-an-infinite-animation-count","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n\n  #ball {\n    width: 100px;\n    height: 100px;\n    margin: 50px auto;\n    position: relative;\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    animation-name: bounce;\n    animation-duration: 1s;\n    animation-iteration-count: 3;\n  }\n\n  @keyframes bounce{\n    0% {\n      top: 0px;\n    }\n    50% {\n      top: 249px;\n      width: 130px;\n      height: 70px;\n    }\n    100% {\n      top: 0px;\n    }\n  }\n</style>\n<div id=\"ball\"></div>","error":null,"seed":"<style>\n\n  #ball {\n    width: 100px;\n    height: 100px;\n    margin: 50px auto;\n    position: relative;\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    animation-name: bounce;\n    animation-duration: 1s;\n    animation-iteration-count: 3;\n  }\n\n  @keyframes bounce{\n    0% {\n      top: 0px;\n    }\n    50% {\n      top: 249px;\n      width: 130px;\n      height: 70px;\n    }\n    100% {\n      top: 0px;\n    }\n  }\n</style>\n<div id=\"ball\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #ball {\n    width: 100px;\n    height: 100px;\n    margin: 50px auto;\n    position: relative;\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    animation-name: bounce;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n  }\n\n  @keyframes bounce{\n    0% {\n      top: 0px;\n    }\n    50% {\n      top: 249px;\n      width: 130px;\n      height: 70px;\n    }\n    100% {\n      top: 0px;\n    }\n  }\n</style>\n<div id=\"ball\"></div>","error":null,"seed":"<style>\n  #ball {\n    width: 100px;\n    height: 100px;\n    margin: 50px auto;\n    position: relative;\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    animation-name: bounce;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n  }\n\n  @keyframes bounce{\n    0% {\n      top: 0px;\n    }\n    50% {\n      top: 249px;\n      width: 130px;\n      height: 70px;\n    }\n    100% {\n      top: 0px;\n    }\n  }\n</style>\n<div id=\"ball\"></div>"}]],"tests":[{"text":"<p>The <code>animation-iteration-count</code> property should have a value of <code>infinite</code>.</p>","testString":"assert($('#ball').css('animation-iteration-count') == 'infinite');"}],"description":"<section id=\"description\">\n<p>The previous challenges covered how to use some of the animation properties and the <code>@keyframes</code> rule. Another animation property is the <code>animation-iteration-count</code>, which allows you to control how many times you would like to loop through the animation. Here's an example:</p>\n<pre><code class=\"language-css\">animation-iteration-count: 3;\n</code></pre>\n<p>In this case the animation will stop after running 3 times, but it's possible to make the animation run continuously by setting that value to <code>infinite</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>To keep the ball bouncing on the right on a continuous loop, change the <code>animation-iteration-count</code> property to <code>infinite</code>.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":44,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a8367417b2b2512ae6","title":"Animate Multiple Elements at Variable Rates","challengeType":0,"videoUrl":"https://scrimba.com/c/cnpWZc9","forumTopicId":301042,"dashedName":"animate-multiple-elements-at-variable-rates","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .stars {\n    background-color: white;\n    height: 30px;\n    width: 30px;\n    border-radius: 50%;\n    animation-iteration-count: infinite;\n  }\n\n  .star-1 {\n    margin-top: 15%;\n    margin-left: 60%;\n    animation-duration: 1s;\n    animation-name: twinkle;\n  }\n\n  .star-2 {\n    margin-top: 25%;\n    margin-left: 25%;\n    animation-duration: 1s;\n    animation-name: twinkle;\n  }\n\n  .star-3 {\n    margin-top: 10%;\n    margin-left: 50%;\n    animation-duration: 1s;\n    animation-name: twinkle;\n  }\n\n  @keyframes twinkle {\n    20% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  #back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);\n  }\n</style>\n\n<div id=\"back\"></div>\n<div class=\"star-1 stars\"></div>\n<div class=\"star-2 stars\"></div>\n<div class=\"star-3 stars\"></div>","error":null,"seed":"<style>\n  .stars {\n    background-color: white;\n    height: 30px;\n    width: 30px;\n    border-radius: 50%;\n    animation-iteration-count: infinite;\n  }\n\n  .star-1 {\n    margin-top: 15%;\n    margin-left: 60%;\n    animation-duration: 1s;\n    animation-name: twinkle;\n  }\n\n  .star-2 {\n    margin-top: 25%;\n    margin-left: 25%;\n    animation-duration: 1s;\n    animation-name: twinkle;\n  }\n\n  .star-3 {\n    margin-top: 10%;\n    margin-left: 50%;\n    animation-duration: 1s;\n    animation-name: twinkle;\n  }\n\n  @keyframes twinkle {\n    20% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  #back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);\n  }\n</style>\n\n<div id=\"back\"></div>\n<div class=\"star-1 stars\"></div>\n<div class=\"star-2 stars\"></div>\n<div class=\"star-3 stars\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .stars {\n    background-color: white;\n    height: 30px;\n    width: 30px;\n    border-radius: 50%;\n    animation-iteration-count: infinite;\n  }\n\n  .star-1 {\n    margin-top: 15%;\n    margin-left: 60%;\n    animation-duration: 1s;\n    animation-name: twinkle;\n  }\n\n  .star-2 {\n    margin-top: 25%;\n    margin-left: 25%;\n    animation-duration: 0.9s;\n    animation-name: twinkle;\n  }\n\n  .star-3 {\n    margin-top: 10%;\n    margin-left: 50%;\n    animation-duration: 1.1s;\n    animation-name: twinkle;\n  }\n\n  @keyframes twinkle {\n    20% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  #back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);\n  }\n</style>\n<div id=\"back\"></div>\n<div class=\"star-1 stars\"></div>\n<div class=\"star-2 stars\"></div>\n<div class=\"star-3 stars\"></div>","error":null,"seed":"<style>\n  .stars {\n    background-color: white;\n    height: 30px;\n    width: 30px;\n    border-radius: 50%;\n    animation-iteration-count: infinite;\n  }\n\n  .star-1 {\n    margin-top: 15%;\n    margin-left: 60%;\n    animation-duration: 1s;\n    animation-name: twinkle;\n  }\n\n  .star-2 {\n    margin-top: 25%;\n    margin-left: 25%;\n    animation-duration: 0.9s;\n    animation-name: twinkle;\n  }\n\n  .star-3 {\n    margin-top: 10%;\n    margin-left: 50%;\n    animation-duration: 1.1s;\n    animation-name: twinkle;\n  }\n\n  @keyframes twinkle {\n    20% {\n      transform: scale(0.5);\n      opacity: 0.5;\n    }\n  }\n\n  #back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);\n  }\n</style>\n<div id=\"back\"></div>\n<div class=\"star-1 stars\"></div>\n<div class=\"star-2 stars\"></div>\n<div class=\"star-3 stars\"></div>"}]],"tests":[{"text":"<p>The <code>animation-duration</code> property for the star with class <code>star-1</code> should remain at 1s.</p>","testString":"assert($('.star-1').css('animation-duration') == '1s');"},{"text":"<p>The <code>animation-duration</code> property for the star with class <code>star-2</code> should be 0.9s.</p>","testString":"assert($('.star-2').css('animation-duration') == '0.9s');"},{"text":"<p>The <code>animation-duration</code> property for the star with class <code>star-3</code> should be 1.1s.</p>","testString":"assert($('.star-3').css('animation-duration') == '1.1s');"}],"description":"<section id=\"description\">\n<p>In the previous challenge, you changed the animation rates for two similarly animated elements by altering their <code>@keyframes</code> rules. You can achieve the same goal by manipulating the <code>animation-duration</code> of multiple elements.</p>\n<p>In the animation running in the code editor, there are three stars in the sky that twinkle at the same rate on a continuous loop. To make them twinkle at different rates, you can set the <code>animation-duration</code> property to different values for each element.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Set the <code>animation-duration</code> of the elements with the classes <code>star-1</code>, <code>star-2</code>, and <code>star-3</code> to 1s, 0.9s, and 1.1s, respectively.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":47,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a3367417b2b2512ad0","title":"Center an Element Horizontally Using the margin Property","challengeType":0,"videoUrl":"https://scrimba.com/c/cyLJqU4","forumTopicId":301043,"dashedName":"center-an-element-horizontally-using-the-margin-property","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  div {\n    background-color: blue;\n    height: 100px;\n    width: 100px;\n\n  }\n</style>\n<div></div>","error":null,"seed":"<style>\n  div {\n    background-color: blue;\n    height: 100px;\n    width: 100px;\n\n  }\n</style>\n<div></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  div {\n    background-color: blue;\n    height: 100px;\n    width: 100px;\n    margin: auto;\n  }\n</style>\n<div></div>","error":null,"seed":"<style>\n  div {\n    background-color: blue;\n    height: 100px;\n    width: 100px;\n    margin: auto;\n  }\n</style>\n<div></div>"}]],"tests":[{"text":"<p>The <code>div</code> should have a <code>margin</code> set to <code>auto</code>.</p>","testString":"assert(new __helpers.CSSHelp(document).getStyle('div')?.margin === 'auto');"}],"description":"<section id=\"description\">\n<p>Another positioning technique is to center a block element horizontally. One way to do this is to set its <code>margin</code> to a value of auto.</p>\n<p>This method works for images, too. Images are inline elements by default, but can be changed to block elements when you set the <code>display</code> property to <code>block</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Center the <code>div</code> on the page by adding a <code>margin</code> property with a value of <code>auto</code>.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":24,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d781e367417b2b2512ac9","title":"Change an Element's Relative Position","challengeType":0,"videoUrl":"https://scrimba.com/c/czVmMtZ","forumTopicId":301044,"dashedName":"change-an-elements-relative-position","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h2 {\n\n\n  }\n</style>\n<body>\n  <h1>On Being Well-Positioned</h1>\n  <h2>Move me!</h2>\n  <p>I still think the h2 is where it normally sits.</p>\n</body>","error":null,"seed":"<style>\n  h2 {\n\n\n  }\n</style>\n<body>\n  <h1>On Being Well-Positioned</h1>\n  <h2>Move me!</h2>\n  <p>I still think the h2 is where it normally sits.</p>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h2 {\n    position: relative;\n    top: 15px;\n  }\n</style>\n<body>\n  <h1>On Being Well-Positioned</h1>\n  <h2>Move me!</h2>\n  <p>I still think the h2 is where it normally sits.</p>\n</body>","error":null,"seed":"<style>\n  h2 {\n    position: relative;\n    top: 15px;\n  }\n</style>\n<body>\n  <h1>On Being Well-Positioned</h1>\n  <h2>Move me!</h2>\n  <p>I still think the h2 is where it normally sits.</p>\n</body>"}]],"tests":[{"text":"<p>The <code>h2</code> element should have a <code>position</code> property set to <code>relative</code>.</p>","testString":"assert($('h2').css('position') == 'relative');"},{"text":"<p>Your code should use a CSS offset to relatively position the <code>h2</code> 15px away from the <code>top</code> of where it normally sits.</p>","testString":"assert($('h2').css('top') == '15px');"}],"description":"<section id=\"description\">\n<p>CSS treats each HTML element as its own box, which is usually referred to as the <dfn>CSS Box Model</dfn>. Block-level items automatically start on a new line (think headings, paragraphs, and divs) while inline items sit within surrounding content (like images or spans). The default layout of elements in this way is called the <dfn>normal flow</dfn> of a document, but CSS offers the position property to override it.</p>\n<p>When the position of an element is set to <code>relative</code>, it allows you to specify how CSS should move it <em>relative</em> to its current position in the normal flow of the page. It pairs with the CSS offset properties of <code>left</code> or <code>right</code>, and <code>top</code> or <code>bottom</code>. These say how many pixels, percentages, or ems to move the item <em>away</em> from where it is normally positioned. The following example moves the paragraph 10 pixels away from the bottom:</p>\n<pre><code class=\"language-css\">p {\n  position: relative;\n  bottom: 10px;\n}\n</code></pre>\n<p>Changing an element's position to relative does not remove it from the normal flow - other elements around it still behave as if that item were in its default position.</p>\n<p><strong>Note:</strong> Positioning gives you a lot of flexibility and power over the visual layout of a page. It's good to remember that no matter the position of elements, the underlying HTML markup should be organized and make sense when read from top to bottom. This is how users with visual impairments (who rely on assistive devices like screen readers) access your content.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the <code>position</code> of the <code>h2</code> to <code>relative</code>, and use a CSS offset to move it 15 pixels away from the <code>top</code> of where it sits in the normal flow. Notice there is no impact on the positions of the surrounding h1 and p elements.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":18,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a8367417b2b2512ae7","title":"Change Animation Timing with Keywords","challengeType":0,"videoUrl":"https://scrimba.com/c/cJKvwCM","forumTopicId":301045,"dashedName":"change-animation-timing-with-keywords","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n\n  .balls {\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #ball1 {\n    left:27%;\n\n  }\n  #ball2 {\n    left:56%;\n\n  }\n\n  @keyframes bounce {\n    0% {\n      top: 0px;\n    }\n    100% {\n      top: 249px;\n    }\n  }\n\n</style>\n\n<div class=\"balls\" id=\"ball1\"></div>\n<div class=\"balls\" id=\"ball2\"></div>","error":null,"seed":"<style>\n\n  .balls {\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #ball1 {\n    left:27%;\n\n  }\n  #ball2 {\n    left:56%;\n\n  }\n\n  @keyframes bounce {\n    0% {\n      top: 0px;\n    }\n    100% {\n      top: 249px;\n    }\n  }\n\n</style>\n\n<div class=\"balls\" id=\"ball1\"></div>\n<div class=\"balls\" id=\"ball2\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .balls {\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #ball1 {\n    left:27%;\n    animation-timing-function: linear;\n  }\n  #ball2 {\n    left:56%;\n    animation-timing-function: ease-out;\n  }\n\n  @keyframes bounce {\n    0% {\n      top: 0px;\n    }\n    100% {\n      top: 249px;\n    }\n  }\n</style>\n<div class=\"balls\" id=\"ball1\"></div>\n<div class=\"balls\" id=\"ball2\"></div>","error":null,"seed":"<style>\n  .balls {\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #ball1 {\n    left:27%;\n    animation-timing-function: linear;\n  }\n  #ball2 {\n    left:56%;\n    animation-timing-function: ease-out;\n  }\n\n  @keyframes bounce {\n    0% {\n      top: 0px;\n    }\n    100% {\n      top: 249px;\n    }\n  }\n</style>\n<div class=\"balls\" id=\"ball1\"></div>\n<div class=\"balls\" id=\"ball2\"></div>"}]],"tests":[{"text":"<p>The value of the <code>animation-timing-function</code> property for the element with the id <code>ball1</code> should be <code>linear</code>.</p>","testString":"const ball1Animation = __helpers.removeWhiteSpace(\n  $('#ball1').css('animation-timing-function')\n);\nassert(ball1Animation == 'linear' || ball1Animation == 'cubic-bezier(0,0,1,1)');"},{"text":"<p>The value of the <code>animation-timing-function</code> property for the element with the id <code>ball2</code> should be <code>ease-out</code>.</p>","testString":"const ball2Animation = __helpers.removeWhiteSpace(\n  $('#ball2').css('animation-timing-function')\n);\nassert(\n  ball2Animation == 'ease-out' || ball2Animation == 'cubic-bezier(0,0,0.58,1)'\n);"}],"description":"<section id=\"description\">\n<p>In CSS animations, the <code>animation-timing-function</code> property controls how quickly an animated element changes over the duration of the animation. If the animation is a car moving from point A to point B in a given time (your <code>animation-duration</code>), the <code>animation-timing-function</code> says how the car accelerates and decelerates over the course of the drive.</p>\n<p>There are a number of predefined keywords available for popular options. For example, the default value is <code>ease</code>, which starts slow, speeds up in the middle, and then slows down again in the end. Other options include <code>ease-out</code>, which is quick in the beginning then slows down, <code>ease-in</code>, which is slow in the beginning, then speeds up at the end, or <code>linear</code>, which applies a constant animation speed throughout.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>For the elements with id of <code>ball1</code> and <code>ball2</code>, add an <code>animation-timing-function</code> property to each, and set <code>#ball1</code> to <code>linear</code>, and <code>#ball2</code> to <code>ease-out</code>. Notice the difference between how the elements move during the animation but end together, since they share the same <code>animation-duration</code> of 2 seconds.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":48,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a3367417b2b2512acf","title":"Change the Position of Overlapping Elements with the z-index Property","challengeType":0,"videoUrl":"https://scrimba.com/c/cM94aHk","forumTopicId":301046,"dashedName":"change-the-position-of-overlapping-elements-with-the-z-index-property","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  div {\n    width: 60%;\n    height: 200px;\n    margin-top: 20px;\n  }\n\n  .first {\n    background-color: red;\n    position: absolute;\n\n  }\n  .second {\n    background-color: blue;\n    position: absolute;\n    left: 40px;\n    top: 50px;\n    z-index: 1;\n  }\n</style>\n\n<div class=\"first\"></div>\n<div class=\"second\"></div>","error":null,"seed":"<style>\n  div {\n    width: 60%;\n    height: 200px;\n    margin-top: 20px;\n  }\n\n  .first {\n    background-color: red;\n    position: absolute;\n\n  }\n  .second {\n    background-color: blue;\n    position: absolute;\n    left: 40px;\n    top: 50px;\n    z-index: 1;\n  }\n</style>\n\n<div class=\"first\"></div>\n<div class=\"second\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  div {\n    width: 60%;\n    height: 200px;\n    margin-top: 20px;\n  }\n\n  .first {\n    background-color: red;\n    position: absolute;\n    z-index: 2;\n  }\n  .second {\n    background-color: blue;\n    position: absolute;\n    left: 40px;\n    top: 50px;\n    z-index: 1;\n  }\n</style>\n<div class=\"first\"></div>\n<div class=\"second\"></div>","error":null,"seed":"<style>\n  div {\n    width: 60%;\n    height: 200px;\n    margin-top: 20px;\n  }\n\n  .first {\n    background-color: red;\n    position: absolute;\n    z-index: 2;\n  }\n  .second {\n    background-color: blue;\n    position: absolute;\n    left: 40px;\n    top: 50px;\n    z-index: 1;\n  }\n</style>\n<div class=\"first\"></div>\n<div class=\"second\"></div>"}]],"tests":[{"text":"<p>The element with class <code>first</code> should have a <code>z-index</code> value of 2.</p>","testString":"assert($('.first').css('z-index') == '2');"}],"description":"<section id=\"description\">\n<p>When elements are positioned to overlap (i.e. using <code>position: absolute | relative | fixed | sticky</code>), the element coming later in the HTML markup will, by default, appear on the top of the other elements. However, the <code>z-index</code> property can specify the order of how elements are stacked on top of one another. It must be an integer (i.e. a whole number and not a decimal), and higher values for the <code>z-index</code> property of an element move it higher in the stack than those with lower values.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add a <code>z-index</code> property to the element with the class name of <code>first</code> (the red rectangle) and set it to a value of 2 so it covers the other element (blue rectangle).</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":23,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a5367417b2b2512ad6","title":"Create a Gradual CSS Linear Gradient","challengeType":0,"videoUrl":"https://scrimba.com/c/cg4dpt9","forumTopicId":301047,"dashedName":"create-a-gradual-css-linear-gradient","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  div {\n    border-radius: 20px;\n    width: 70%;\n    height: 400px;\n    margin: 50px auto;\n\n  }\n\n</style>\n\n<div></div>","error":null,"seed":"<style>\n  div {\n    border-radius: 20px;\n    width: 70%;\n    height: 400px;\n    margin: 50px auto;\n\n  }\n\n</style>\n\n<div></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  div {\n    border-radius: 20px;\n    width: 70%;\n    height: 400px;\n    margin: 50px auto;\n    background: linear-gradient(35deg, #CCFFFF, #FFCCCC);\n  }\n</style>\n<div></div>","error":null,"seed":"<style>\n  div {\n    border-radius: 20px;\n    width: 70%;\n    height: 400px;\n    margin: 50px auto;\n    background: linear-gradient(35deg, #CCFFFF, #FFCCCC);\n  }\n</style>\n<div></div>"}]],"tests":[{"text":"<p>The <code>div</code> element should have a <code>linear-gradient</code> <code>background</code> with the specified direction and colors.</p>","testString":"assert(\n  $('div')\n    .css('background-image')\n    .match(\n      /linear-gradient\\(35deg, rgb\\(204, 255, 255\\), rgb\\(255, 204, 204\\)\\)/gi\n    )\n);"}],"description":"<section id=\"description\">\n<p>Applying a color on HTML elements is not limited to one flat hue. CSS provides the ability to use color transitions, otherwise known as gradients, on elements. This is accessed through the <code>background</code> property's <code>linear-gradient()</code> function. Here is the general syntax:</p>\n<pre><code class=\"language-css\">background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);\n</code></pre>\n<p>The first argument specifies the direction from which color transition starts - it can be stated as a degree, where <code>90deg</code> makes a horizontal gradient (from left to right) and <code>45deg</code> makes a diagonal gradient (from bottom left to top right). The following arguments specify the order of colors used in the gradient.</p>\n<p>Example:</p>\n<pre><code class=\"language-css\">background: linear-gradient(90deg, red, yellow, rgb(204, 204, 255));\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use a <code>linear-gradient()</code> for the <code>div</code> element's <code>background</code>, and set it from a direction of 35 degrees to change the color from <code>#CCFFFF</code> to <code>#FFCCCC</code>.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":30,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a6367417b2b2512add","title":"Create a Graphic Using CSS","challengeType":0,"videoUrl":"https://scrimba.com/c/cEDWPs6","forumTopicId":301048,"dashedName":"create-a-graphic-using-css","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .center {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100px;\n    height: 100px;\n    background-color: blue;\n    border-radius: 0px;\n    box-shadow: 25px 10px 10px 10px green;\n  }\n\n</style>\n<div class=\"center\"></div>","error":null,"seed":"<style>\n  .center {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100px;\n    height: 100px;\n    background-color: blue;\n    border-radius: 0px;\n    box-shadow: 25px 10px 10px 10px green;\n  }\n\n</style>\n<div class=\"center\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .center {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100px;\n    height: 100px;\n    background-color: transparent;\n    border-radius: 50%;\n    box-shadow: 25px 10px 0 0 blue;\n  }\n</style>\n<div class=\"center\"></div>","error":null,"seed":"<style>\n  .center {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100px;\n    height: 100px;\n    background-color: transparent;\n    border-radius: 50%;\n    box-shadow: 25px 10px 0 0 blue;\n  }\n</style>\n<div class=\"center\"></div>"}]],"tests":[{"text":"<p>The value of the <code>background-color</code> property should be set to <code>transparent</code>.</p>","testString":"assert(code.match(/background-color:\\s*?transparent;/gi));"},{"text":"<p>The value of the <code>border-radius</code> property should be set to <code>50%</code>.</p>","testString":"assert(code.match(/border-radius:\\s*?50%;/gi));"},{"text":"<p>The value of the <code>box-shadow</code> property should be set to 25px for <code>offset-x</code>, 10px for <code>offset-y</code>, 0 for <code>blur-radius</code>, 0 for <code>spread-radius</code>, and finally <code>blue</code> for the <code>color</code>.</p>","testString":"assert(\n  code.match(/box-shadow:\\s*?25px\\s+?10px\\s+?0(px)?\\s+?0(px)?\\s+?blue\\s*?;/gi)\n);"}],"description":"<section id=\"description\">\n<p>By manipulating different selectors and properties, you can make interesting shapes. One of the easier ones to try is a crescent moon shape. For this challenge you need to work with the <code>box-shadow</code> property that sets the shadow of an element, along with the <code>border-radius</code> property that controls the roundness of the element's corners.</p>\n<p>You will create a round, transparent object with a crisp shadow that is slightly offset to the side - the shadow is actually going to be the moon shape you see.</p>\n<p>In order to create a round object, the <code>border-radius</code> property should be set to a value of 50%.</p>\n<p>You may recall from an earlier challenge that the <code>box-shadow</code> property takes values for <code>offset-x</code>, <code>offset-y</code>, <code>blur-radius</code>, <code>spread-radius</code> and a <code>color</code> value in that order. The <code>blur-radius</code> and <code>spread-radius</code> values are optional.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Manipulate the square element in the editor to create the moon shape. First, change the <code>background-color</code> to <code>transparent</code>, then set the <code>border-radius</code> property to 50% to make the circular shape. Finally, change the <code>box-shadow</code> property to set the <code>offset-x</code> to 25px, the <code>offset-y</code> to 10px, <code>blur-radius</code> to 0, <code>spread-radius</code> to 0, and <code>color</code> to <code>blue</code>.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":37,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d781b367417b2b2512abb","title":"Create a Horizontal Line Using the hr Element","challengeType":0,"videoUrl":"https://scrimba.com/c/c3bR8t7","forumTopicId":301049,"dashedName":"create-a-horizontal-line-using-the-hr-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4><s>Google</s>Alphabet</h4>\n\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4><s>Google</s>Alphabet</h4>\n\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4><s>Google</s>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4><s>Google</s>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>Your code should add an <code>hr</code> tag to the markup.</p>","testString":"assert($('hr').length == 1);"},{"text":"<p>The <code>hr</code> tag should come between the title and the paragraph.</p>","testString":"assert(code.match(/<\\/h4>\\s*?<hr(>|\\s*?\\/>)\\s*?<p>/gi));"}],"description":"<section id=\"description\">\n<p>You can use the <code>hr</code> tag to add a horizontal line across the width of its containing element. This can be used to define a change in topic or to visually separate groups of content.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add an <code>hr</code> tag underneath the <code>h4</code> which contains the card title.</p>\n<p><strong>Note:</strong> In HTML, <code>hr</code> is a self-closing tag, and therefore doesn't need a separate closing tag.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":7,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a6367417b2b2512ade","title":"Create a More Complex Shape Using CSS and HTML","challengeType":0,"videoUrl":"https://scrimba.com/c/cPpz4fr","forumTopicId":301050,"dashedName":"create-a-more-complex-shape-using-css-and-html","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .heart {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 50px;\n    width: 50px;\n    transform: ;\n  }\n  .heart::after {\n    background-color: blue;\n    content: \"\";\n    border-radius: 25%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: 0px;\n    left: 25px;\n  }\n  .heart::before {\n    content: ;\n    background-color: pink;\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: -25px;\n    left: 0px;\n  }\n</style>\n<div class=\"heart\"></div>","error":null,"seed":"<style>\n  .heart {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 50px;\n    width: 50px;\n    transform: ;\n  }\n  .heart::after {\n    background-color: blue;\n    content: \"\";\n    border-radius: 25%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: 0px;\n    left: 25px;\n  }\n  .heart::before {\n    content: ;\n    background-color: pink;\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: -25px;\n    left: 0px;\n  }\n</style>\n<div class=\"heart\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .heart {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 50px;\n    width: 50px;\n    transform: rotate(-45deg);\n  }\n  .heart::after {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: 0px;\n    left: 25px;\n  }\n  .heart::before {\n    content: \"\";\n    background-color: pink;\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: -25px;\n    left: 0px;\n  }\n</style>\n<div class=\"heart\"></div>","error":null,"seed":"<style>\n  .heart {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 50px;\n    width: 50px;\n    transform: rotate(-45deg);\n  }\n  .heart::after {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: 0px;\n    left: 25px;\n  }\n  .heart::before {\n    content: \"\";\n    background-color: pink;\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: -25px;\n    left: 0px;\n  }\n</style>\n<div class=\"heart\"></div>"}]],"tests":[{"text":"<p>The <code>background-color</code> property of the <code>.heart::after</code> selector should be <code>pink</code>.</p>","testString":"const heartAfter = code.match(/\\.heart::after\\s*{[\\s\\S]+?[^\\}]}/g)[0];\nassert(\n  /({|;)\\s*background-color\\s*:\\s*pink\\s*(;|})/g.test(heartAfter)\n);"},{"text":"<p>The <code>border-radius</code> of the <code>.heart::after</code> selector should be 50%.</p>","testString":"assert(code.match(/border-radius\\s*?:\\s*?50%/gi).length == 2);"},{"text":"<p>The <code>transform</code> property for the <code>heart</code> class should use a <code>rotate()</code> function set to -45 degrees.</p>","testString":"assert(code.match(/transform\\s*?:\\s*?rotate\\(\\s*?-45deg\\s*?\\)/gi));"},{"text":"<p>The <code>content</code> of the <code>.heart::before</code> selector should be an empty string.</p>","testString":"assert(code.match(/\\.heart::before\\s*?{\\s*?content\\s*?:\\s*?(\"|')\\1\\s*?;/gi));"}],"description":"<section id=\"description\">\n<p>One of the most popular shapes in the world is the heart shape, and in this challenge you'll create one using pure CSS. But first, you need to understand the <code>::before</code> and <code>::after</code> pseudo-elements. <code>::before</code> creates a pseudo-element that is the first child of the selected element; <code>::after</code> creates a pseudo-element that is the last child of the selected element. In the following example, a <code>::before</code> pseudo-element is used to add a rectangle to an element with the class <code>heart</code>:</p>\n<pre><code class=\"language-css\">.heart::before {\n  content: \"\";\n  background-color: yellow;\n  border-radius: 25%;\n  position: absolute;\n  height: 50px;\n  width: 70px;\n  top: -50px;\n  left: 5px;\n}\n</code></pre>\n<p>For the <code>::before</code> and <code>::after</code> pseudo-elements to function properly, they must have a defined <code>content</code> property. This property is usually used to add things like a photo or text to the selected element. When the <code>::before</code> and <code>::after</code> pseudo-elements are used to make shapes, the <code>content</code> property is still required, but it's set to an empty string. In the above example, the element with the class of <code>heart</code> has a <code>::before</code> pseudo-element that produces a yellow rectangle with height and width of <code>50px</code> and <code>70px</code>, respectively. This rectangle has round corners due to its 25% <code>border-radius</code> and is positioned absolutely at <code>5px</code> from the left and <code>50px</code> above the top of the element.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Transform the element on the screen to a heart. In the <code>.heart::after</code> selector, change the <code>background-color</code> to <code>pink</code> and the <code>border-radius</code> to 50%.</p>\n<p>Next, target the element with the class <code>heart</code> (just <code>heart</code>) and fill in the <code>transform</code> property. Use the <code>rotate()</code> function with -45 degrees.</p>\n<p>Finally, in the <code>.heart::before</code> selector, set its <code>content</code> property to an empty string.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":38,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a7367417b2b2512ae1","title":"Create Movement Using CSS Animation","challengeType":0,"videoUrl":"https://scrimba.com/c/c7amZfW","forumTopicId":301051,"dashedName":"create-movement-using-css-animation","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  div {\n    height: 40px;\n    width: 70%;\n    background: black;\n    margin: 50px auto;\n    border-radius: 5px;\n    position: relative;\n  }\n\n  #rect {\n    animation-name: rainbow;\n    animation-duration: 4s;\n  }\n\n  @keyframes rainbow {\n    0% {\n      background-color: blue;\n      top: 0px;\n\n    }\n    50% {\n      background-color: green;\n      top: 50px;\n\n    }\n    100% {\n      background-color: yellow;\n      top: 0px;\n\n    }\n  }\n</style>\n\n<div id=\"rect\"></div>","error":null,"seed":"<style>\n  div {\n    height: 40px;\n    width: 70%;\n    background: black;\n    margin: 50px auto;\n    border-radius: 5px;\n    position: relative;\n  }\n\n  #rect {\n    animation-name: rainbow;\n    animation-duration: 4s;\n  }\n\n  @keyframes rainbow {\n    0% {\n      background-color: blue;\n      top: 0px;\n\n    }\n    50% {\n      background-color: green;\n      top: 50px;\n\n    }\n    100% {\n      background-color: yellow;\n      top: 0px;\n\n    }\n  }\n</style>\n\n<div id=\"rect\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  div {\n    height: 40px;\n    width: 70%;\n    background: black;\n    margin: 50px auto;\n    border-radius: 5px;\n    position: relative;\n  }\n\n  #rect {\n    animation-name: rainbow;\n    animation-duration: 4s;\n  }\n\n  @keyframes rainbow {\n    0% {\n      background-color: blue;\n      top: 0px;\n      left: 0px;\n    }\n    50% {\n      background-color: green;\n      top: 50px;\n      left: 25px;\n    }\n    100% {\n      background-color: yellow;\n      top: 0px;\n      left: -25px;\n    }\n  }\n</style>\n<div id=\"rect\"></div>","error":null,"seed":"<style>\n  div {\n    height: 40px;\n    width: 70%;\n    background: black;\n    margin: 50px auto;\n    border-radius: 5px;\n    position: relative;\n  }\n\n  #rect {\n    animation-name: rainbow;\n    animation-duration: 4s;\n  }\n\n  @keyframes rainbow {\n    0% {\n      background-color: blue;\n      top: 0px;\n      left: 0px;\n    }\n    50% {\n      background-color: green;\n      top: 50px;\n      left: 25px;\n    }\n    100% {\n      background-color: yellow;\n      top: 0px;\n      left: -25px;\n    }\n  }\n</style>\n<div id=\"rect\"></div>"}]],"tests":[{"text":"<p>The <code>@keyframes</code> rule for <code>0%</code> should use the <code>left</code> offset of 0px.</p>","testString":"assert(code.match(/[^50]0%\\s*?{[\\s\\S]*?left:\\s*?0px(;[\\s\\S]*?|\\s*?)}/gi));"},{"text":"<p>The <code>@keyframes</code> rule for <code>50%</code> should use the <code>left</code> offset of 25px.</p>","testString":"assert(code.match(/50%\\s*?{[\\s\\S]*?left:\\s*?25px(;[\\s\\S]*?|\\s*?)}/gi));"},{"text":"<p>The <code>@keyframes</code> rule for <code>100%</code> should use the <code>left</code> offset of -25px.</p>","testString":"assert(code.match(/100%\\s*?{[\\s\\S]*?left:\\s*?-25px(;[\\s\\S]*?|\\s*?)}/gi));"}],"description":"<section id=\"description\">\n<p>When elements have a specified <code>position</code>, such as <code>fixed</code> or <code>relative</code>, the CSS offset properties <code>right</code>, <code>left</code>, <code>top</code>, and <code>bottom</code> can be used in animation rules to create movement.</p>\n<p>As shown in the example below, you can push the item downwards then upwards by setting the <code>top</code> property of the <code>50%</code> keyframe to 50px, but having it set to 0px for the first (<code>0%</code>) and the last (<code>100%</code>) keyframe.</p>\n<pre><code class=\"language-css\">@keyframes rainbow {\n  0% {\n    background-color: blue;\n    top: 0px;\n  }\n  50% {\n    background-color: green;\n    top: 50px;\n  }\n  100% {\n    background-color: yellow;\n    top: 0px;\n  }\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add a horizontal motion to the <code>div</code> animation. Using the <code>left</code> offset property, add to the <code>@keyframes</code> rule so rainbow starts at 0 pixels at <code>0%</code>, moves to 25 pixels at <code>50%</code>, and ends at -25 pixels at <code>100%</code>. Don't replace the <code>top</code> property in the editor - the animation should have both vertical and horizontal motion.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":42,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a5367417b2b2512ad8","title":"Create Texture by Adding a Subtle Pattern as a Background Image","challengeType":0,"videoUrl":"https://scrimba.com/c/cQdwJC8","forumTopicId":301052,"dashedName":"create-texture-by-adding-a-subtle-pattern-as-a-background-image","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n\n  }\n</style>","error":null,"seed":"<style>\n  body {\n\n  }\n</style>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background: url(\"https://cdn-media-1.freecodecamp.org/imgr/MJAkxbh.png\");\n  }\n</style>","error":null,"seed":"<style>\n  body {\n    background: url(\"https://cdn-media-1.freecodecamp.org/imgr/MJAkxbh.png\");\n  }\n</style>"}]],"tests":[{"text":"<p>Your <code>body</code> element should have a <code>background</code> property set to a <code>url()</code> with the given link.</p>","testString":"assert(\n  code.match(\n    /background(-image)?:\\s*?url\\(\\s*(\"|'|)https:\\/\\/cdn-media-1\\.freecodecamp\\.org\\/imgr\\/MJAkxbh\\.png\\2\\s*\\)/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p>One way to add texture and interest to a background and have it stand out more is to add a subtle pattern. The key is balance, as you don't want the background to stand out too much, and take away from the foreground. The <code>background</code> property supports the <code>url()</code> function in order to link to an image of the chosen texture or pattern. The link address is wrapped in quotes inside the parentheses.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Using the url of <code>https://cdn-media-1.freecodecamp.org/imgr/MJAkxbh.png</code>, set the <code>background</code> of the whole page with the <code>body</code> selector.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":32,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d7791367417b2b2512ab3","title":"Create Visual Balance Using the text-align Property","challengeType":0,"videoUrl":"https://scrimba.com/c/c3b4EAp","forumTopicId":301053,"dashedName":"create-visual-balance-using-the-text-align-property","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n\n  }\n  p {\n\n  }\n  .links {\n    margin-right: 20px;\n\n  }\n  .fullCard {\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n\n  }\n  p {\n\n  }\n  .links {\n    margin-right: 20px;\n\n  }\n  .fullCard {\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    margin-right: 20px;\n\n  }\n  .fullCard {\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    margin-right: 20px;\n\n  }\n  .fullCard {\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>Your code should use the text-align property on the <code>h4</code> tag to set it to <code>center</code>.</p>","testString":"assert($('h4').css('text-align') == 'center');"},{"text":"<p>Your code should use the text-align property on the <code>p</code> tag to set it to <code>justify</code>.</p>","testString":"assert($('p').css('text-align') == 'justify');"}],"description":"<section id=\"description\">\n<p>This section of the curriculum focuses on Applied Visual Design. The first group of challenges build on the given card layout to show a number of core principles.</p>\n<p>Text is often a large part of web content. CSS has several options for how to align it with the <code>text-align</code> property.</p>\n<p><code>text-align: justify;</code> spaces the text so that each line has equal width.</p>\n<p><code>text-align: center;</code> centers the text</p>\n<p><code>text-align: right;</code> right-aligns the text</p>\n<p>And <code>text-align: left;</code> (the default) left-aligns the text.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Align the <code>h4</code> tag's text, which says \"Google\", to the center. Then justify the paragraph tag which contains information about how Google was founded.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":0,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a7367417b2b2512ae2","title":"Create Visual Direction by Fading an Element from Left to Right","challengeType":0,"videoUrl":"https://scrimba.com/c/cGJqqAE","forumTopicId":301054,"dashedName":"create-visual-direction-by-fading-an-element-from-left-to-right","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n\n  #ball {\n    width: 70px;\n    height: 70px;\n    margin: 50px auto;\n    position: fixed;\n    left: 20%;\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    animation-name: fade;\n    animation-duration: 3s;\n  }\n\n  @keyframes fade {\n    50% {\n      left: 60%;\n\n    }\n  }\n\n</style>\n\n<div id=\"ball\"></div>","error":null,"seed":"<style>\n\n  #ball {\n    width: 70px;\n    height: 70px;\n    margin: 50px auto;\n    position: fixed;\n    left: 20%;\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    animation-name: fade;\n    animation-duration: 3s;\n  }\n\n  @keyframes fade {\n    50% {\n      left: 60%;\n\n    }\n  }\n\n</style>\n\n<div id=\"ball\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #ball {\n    width: 70px;\n    height: 70px;\n    margin: 50px auto;\n    position: fixed;\n    left: 20%;\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    animation-name: fade;\n    animation-duration: 3s;\n  }\n\n  @keyframes fade {\n    50% {\n      left: 60%;\n      opacity: 0.1;\n    }\n  }\n</style>\n<div id=\"ball\"></div>","error":null,"seed":"<style>\n  #ball {\n    width: 70px;\n    height: 70px;\n    margin: 50px auto;\n    position: fixed;\n    left: 20%;\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    animation-name: fade;\n    animation-duration: 3s;\n  }\n\n  @keyframes fade {\n    50% {\n      left: 60%;\n      opacity: 0.1;\n    }\n  }\n</style>\n<div id=\"ball\"></div>"}]],"tests":[{"text":"<p>The <code>keyframes</code> rule for fade should set the <code>opacity</code> property to 0.1 at 50%.</p>","testString":"assert(\n  code.match(\n    /@keyframes fade\\s*?{\\s*?50%\\s*?{\\s*?(?:left:\\s*?60%;\\s*?opacity:\\s*?0?\\.1;|opacity:\\s*?0?\\.1;\\s*?left:\\s*?60%;)/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p>For this challenge, you'll change the <code>opacity</code> of an animated element so it gradually fades as it reaches the right side of the screen.</p>\n<p>In the displayed animation, the round element with the gradient background moves to the right by the 50% mark of the animation per the <code>@keyframes</code> rule.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Target the element with the id of <code>ball</code> and add the <code>opacity</code> property set to 0.1 at <code>50%</code>, so the element fades as it moves to the right.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":43,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d781c367417b2b2512abf","title":"Decrease the Opacity of an Element","challengeType":0,"videoUrl":"https://scrimba.com/c/c7aKqu4","forumTopicId":301055,"dashedName":"decrease-the-opacity-of-an-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n\n  }\n  #thumbnail {\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n\n  }\n  #thumbnail {\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n    opacity: 0.7;\n  }\n  #thumbnail {\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n    opacity: 0.7;\n  }\n  #thumbnail {\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>Your code should set the <code>opacity</code> property to 0.7 on the anchor tags by selecting the class of <code>links</code>.</p>","testString":"assert(\n  /\\.links\\s*{([\\s\\S]*?;)*\\s*opacity\\s*:\\s*0*\\.70*\\s*(;[\\s\\S]*?|\\s*)}/.test(\n    $('style').text()\n  )\n);"}],"description":"<section id=\"description\">\n<p>The <code>opacity</code> property in CSS is used to adjust the opacity, or conversely, the transparency for an item.</p>\n<blockquote>A value of 1 is opaque, which isn't transparent at all.<br>A value of 0.5 is half see-through.<br>A value of 0 is completely transparent.</blockquote>\n<p>The value given will apply to the entire element, whether that's an image with some transparency, or the foreground and background colors for a block of text.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Set the <code>opacity</code> of the anchor tags to 0.7 using <code>links</code> class to select them.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":11,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a3367417b2b2512ad1","title":"Learn about Complementary Colors","challengeType":0,"videoUrl":"https://scrimba.com/c/c2MD3Tr","forumTopicId":301056,"dashedName":"learn-about-complementary-colors","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: #FFFFFF;\n  }\n  .blue {\n    background-color: #000000;\n  }\n  .yellow {\n    background-color: #000000;\n  }\n  div {\n    display: inline-block;\n    height: 100px;\n    width: 100px;\n  }\n</style>\n<div class=\"blue\"></div>\n<div class=\"yellow\"></div>","error":null,"seed":"<style>\n  body {\n    background-color: #FFFFFF;\n  }\n  .blue {\n    background-color: #000000;\n  }\n  .yellow {\n    background-color: #000000;\n  }\n  div {\n    display: inline-block;\n    height: 100px;\n    width: 100px;\n  }\n</style>\n<div class=\"blue\"></div>\n<div class=\"yellow\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: #FFFFFF;\n  }\n  .blue {\n    background-color: blue;\n  }\n  .yellow {\n    background-color: yellow;\n  }\n  div {\n    display: inline-block;\n    height: 100px;\n    width: 100px;\n  }\n</style>\n<div class=\"blue\"></div>\n<div class=\"yellow\"></div>","error":null,"seed":"<style>\n  body {\n    background-color: #FFFFFF;\n  }\n  .blue {\n    background-color: blue;\n  }\n  .yellow {\n    background-color: yellow;\n  }\n  div {\n    display: inline-block;\n    height: 100px;\n    width: 100px;\n  }\n</style>\n<div class=\"blue\"></div>\n<div class=\"yellow\"></div>"}]],"tests":[{"text":"<p>The <code>div</code> element with class <code>blue</code> should have a <code>background-color</code> of blue.</p>","testString":"assert($('.blue').css('background-color') == 'rgb(0, 0, 255)');"},{"text":"<p>The <code>div</code> element with class <code>yellow</code> should have a <code>background-color</code> of yellow.</p>","testString":"assert($('.yellow').css('background-color') == 'rgb(255, 255, 0)');"}],"description":"<section id=\"description\">\n<p>Color theory and its impact on design is a deep topic and only the basics are covered in the following challenges. On a website, color can draw attention to content, evoke emotions, or create visual harmony. Using different combinations of colors can really change the look of a website, and a lot of thought can go into picking a color palette that works with your content.</p>\n<p>The color wheel is a useful tool to visualize how colors relate to each other - it's a circle where similar hues are neighbors and different hues are farther apart. When two colors are opposite each other on the wheel, they are called complementary colors. They have the characteristic that if they are combined, they \"cancel\" each other out and create a gray color. However, when placed side-by-side, these colors appear more vibrant and produce a strong visual contrast.</p>\n<p>Some examples of complementary colors with their hex codes are:</p>\n<blockquote>red (#FF0000) and cyan (#00FFFF)<br>green (#00FF00) and magenta (#FF00FF)<br>blue (#0000FF) and yellow (#FFFF00)</blockquote>\n<p>This is different than the outdated RYB color model that many of us were taught in school, which has different primary and complementary colors. Modern color theory uses the additive RGB model (like on a computer screen) and the subtractive CMY(K) model (like in printing).</p>\n<p>There are many color picking tools available online that have an option to find the complement of a color.</p>\n<p><strong>Note:</strong> Using color can be a powerful way to add visual interest to a page. However, color alone should not be used as the only way to convey important information because users with visual impairments may not understand that content. This issue will be covered in more detail in the Applied Accessibility challenges.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the <code>background-color</code> property of the <code>blue</code> and <code>yellow</code> classes to their respective colors. Notice how the colors look different next to each other than they do compared against the white background.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":25,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a4367417b2b2512ad2","title":"Learn about Tertiary Colors","challengeType":0,"forumTopicId":301057,"dashedName":"learn-about-tertiary-colors","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: #FFFFFF;\n  }\n\n  .orange {\n    background-color: #000000;\n  }\n\n  .cyan {\n    background-color: #000000;\n  }\n\n  .raspberry {\n    background-color: #000000;\n  }\n\n  div {\n    height: 100px;\n    width: 100px;\n    margin-bottom: 5px;\n  }\n</style>\n\n<div class=\"orange\"></div>\n<div class=\"cyan\"></div>\n<div class=\"raspberry\"></div>","error":null,"seed":"<style>\n  body {\n    background-color: #FFFFFF;\n  }\n\n  .orange {\n    background-color: #000000;\n  }\n\n  .cyan {\n    background-color: #000000;\n  }\n\n  .raspberry {\n    background-color: #000000;\n  }\n\n  div {\n    height: 100px;\n    width: 100px;\n    margin-bottom: 5px;\n  }\n</style>\n\n<div class=\"orange\"></div>\n<div class=\"cyan\"></div>\n<div class=\"raspberry\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: #FFFFFF;\n  }\n\n  .orange {\n    background-color: #FF7F00;\n  }\n\n  .cyan {\n    background-color: #00FFFF;\n  }\n\n  .raspberry {\n    background-color: #FF007F;\n  }\n\n  div {\n    height: 100px;\n    width: 100px;\n    margin-bottom: 5px;\n  }\n</style>\n<div class=\"orange\"></div>\n<div class=\"cyan\"></div>\n<div class=\"raspberry\"></div>","error":null,"seed":"<style>\n  body {\n    background-color: #FFFFFF;\n  }\n\n  .orange {\n    background-color: #FF7F00;\n  }\n\n  .cyan {\n    background-color: #00FFFF;\n  }\n\n  .raspberry {\n    background-color: #FF007F;\n  }\n\n  div {\n    height: 100px;\n    width: 100px;\n    margin-bottom: 5px;\n  }\n</style>\n<div class=\"orange\"></div>\n<div class=\"cyan\"></div>\n<div class=\"raspberry\"></div>"}]],"tests":[{"text":"<p>The <code>div</code> element with class <code>orange</code> should have a <code>background-color</code> of orange.</p>","testString":"assert($('.orange').css('background-color') == 'rgb(255, 127, 0)');"},{"text":"<p>The <code>div</code> element with class <code>cyan</code> should have a <code>background-color</code> of cyan.</p>","testString":"assert($('.cyan').css('background-color') == 'rgb(0, 255, 255)');"},{"text":"<p>The <code>div</code> element with class <code>raspberry</code> should have a <code>background-color</code> of raspberry.</p>","testString":"assert($('.raspberry').css('background-color') == 'rgb(255, 0, 127)');"},{"text":"<p>All <code>background-color</code> values for the color classes should be hex codes and not color names.</p>","testString":"assert(!/background-color:\\s(orange|cyan|raspberry)/.test(code));"}],"description":"<section id=\"description\">\n<p>Computer monitors and device screens create different colors by combining amounts of red, green, and blue light. This is known as the RGB additive color model in modern color theory. Red (R), green (G), and blue (B) are called primary colors. Mixing two primary colors creates the secondary colors cyan (G + B), magenta (R + B) and yellow (R + G). You saw these colors in the Complementary Colors challenge. These secondary colors happen to be the complement to the primary color not used in their creation, and are opposite to that primary color on the color wheel. For example, magenta is made with red and blue, and is the complement to green.</p>\n<p>Tertiary colors are the result of combining a primary color with one of its secondary color neighbors. For example, within the RGB color model, red (primary) and yellow (secondary) make orange (tertiary). This adds six more colors to a simple color wheel for a total of twelve.</p>\n<p>There are various methods of selecting different colors that result in a harmonious combination in design. One example that can use tertiary colors is called the split-complementary color scheme. This scheme starts with a base color, then pairs it with the two colors that are adjacent to its complement. The three colors provide strong visual contrast in a design, but are more subtle than using two complementary colors.</p>\n<p>Here are three colors created using the split-complement scheme:</p>\n<table class='table table-striped'><thead><tr><th>Color</th><th>Hex Code</th></tr></thead><thead></thead><tbody><tr><td>orange</td><td>#FF7F00</td></tr><tr><td>cyan</td><td>#00FFFF</td></tr><tr><td>raspberry</td><td>#FF007F</td></tr></tbody></table>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the <code>background-color</code> property of the <code>orange</code>, <code>cyan</code>, and <code>raspberry</code> classes to their respective colors. Make sure to use the hex codes and not the color names.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":26,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a9367417b2b2512ae8","title":"Learn How Bezier Curves Work","challengeType":0,"videoUrl":"https://scrimba.com/c/c9bDrs8","forumTopicId":301058,"dashedName":"learn-how-bezier-curves-work","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n\n  .balls{\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #ball1 {\n    left: 27%;\n    animation-timing-function: linear;\n  }\n  #ball2 {\n    left: 56%;\n    animation-timing-function: ease-out;\n  }\n\n  @keyframes bounce {\n    0% {\n      top: 0px;\n    }\n    100% {\n      top: 249px;\n    }\n  }\n\n</style>\n\n<div class=\"balls\" id=\"ball1\"></div>\n<div class=\"balls\" id=\"ball2\"></div>","error":null,"seed":"<style>\n\n  .balls{\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #ball1 {\n    left: 27%;\n    animation-timing-function: linear;\n  }\n  #ball2 {\n    left: 56%;\n    animation-timing-function: ease-out;\n  }\n\n  @keyframes bounce {\n    0% {\n      top: 0px;\n    }\n    100% {\n      top: 249px;\n    }\n  }\n\n</style>\n\n<div class=\"balls\" id=\"ball1\"></div>\n<div class=\"balls\" id=\"ball2\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n\n  .balls{\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #ball1 {\n    left: 27%;\n    animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);\n  }\n  #ball2 {\n    left: 56%;\n    animation-timing-function: ease-out;\n  }\n\n  @keyframes bounce {\n    0% {\n      top: 0px;\n    }\n    100% {\n      top: 249px;\n    }\n  }\n</style>\n<div class=\"balls\" id=\"ball1\"></div>\n<div class=\"balls\" id=\"ball2\"></div>","error":null,"seed":"<style>\n\n  .balls{\n    border-radius: 50%;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #ball1 {\n    left: 27%;\n    animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);\n  }\n  #ball2 {\n    left: 56%;\n    animation-timing-function: ease-out;\n  }\n\n  @keyframes bounce {\n    0% {\n      top: 0px;\n    }\n    100% {\n      top: 249px;\n    }\n  }\n</style>\n<div class=\"balls\" id=\"ball1\"></div>\n<div class=\"balls\" id=\"ball2\"></div>"}]],"tests":[{"text":"<p>The value of the <code>animation-timing-function</code> property for the element with the id <code>ball1</code> should be the linear-equivalent <code>cubic-bezier</code> function.</p>","testString":"assert(\n  $('#ball1').css('animation-timing-function') ==\n    'cubic-bezier(0.25, 0.25, 0.75, 0.75)'\n);"},{"text":"<p>The value of the <code>animation-timing-function</code> property for the element with the id <code>ball2</code> should not change.</p>","testString":"const ball2Animation = __helpers.removeWhiteSpace(\n  $('#ball2').css('animation-timing-function')\n);\nassert(\n  ball2Animation == 'ease-out' || ball2Animation == 'cubic-bezier(0,0,0.58,1)'\n);"}],"description":"<section id=\"description\">\n<p>The last challenge introduced the <code>animation-timing-function</code> property and a few keywords that change the speed of an animation over its duration. CSS offers an option other than keywords that provides even finer control over how the animation plays out, through the use of Bezier curves.</p>\n<p>In CSS animations, Bezier curves are used with the <code>cubic-bezier</code> function. The shape of the curve represents how the animation plays out. The curve lives on a 1 by 1 coordinate system. The X-axis of this coordinate system is the duration of the animation (think of it as a time scale), and the Y-axis is the change in the animation.</p>\n<p>The <code>cubic-bezier</code> function consists of four main points that sit on this 1 by 1 grid: <code>p0</code>, <code>p1</code>, <code>p2</code>, and <code>p3</code>. <code>p0</code> and <code>p3</code> are set for you - they are the beginning and end points which are always located respectively at the origin (0, 0) and (1, 1). You set the x and y values for the other two points, and where you place them in the grid dictates the shape of the curve for the animation to follow. This is done in CSS by declaring the x and y values of the <code>p1</code> and <code>p2</code> \"anchor\" points in the form: <code>(x1, y1, x2, y2)</code>. Pulling it all together, here's an example of a Bezier curve in CSS code:</p>\n<pre><code class=\"language-css\">animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);\n</code></pre>\n<p>In the example above, the x and y values are equivalent for each point (x1 = 0.25 = y1 and x2 = 0.75 = y2), which if you remember from geometry class, results in a line that extends from the origin to point (1, 1). This animation is a linear change of an element during the length of an animation, and is the same as using the <code>linear</code> keyword. In other words, it changes at a constant speed.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>For the element with the id of <code>ball1</code>, change the value of the <code>animation-timing-function</code> property from <code>linear</code> to its equivalent <code>cubic-bezier</code> function value. Use the point values given in the example above.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":49,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a7367417b2b2512adf","title":"Learn How the CSS @keyframes and animation Properties Work","challengeType":0,"videoUrl":"https://scrimba.com/c/cakprhv","forumTopicId":301059,"dashedName":"learn-how-the-css-keyframes-and-animation-properties-work","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  div {\n    height: 40px;\n    width: 70%;\n    background: black;\n    margin: 50px auto;\n    border-radius: 5px;\n  }\n\n  #rect {\n\n\n  }\n\n\n\n\n</style>\n<div id=\"rect\"></div>","error":null,"seed":"<style>\n  div {\n    height: 40px;\n    width: 70%;\n    background: black;\n    margin: 50px auto;\n    border-radius: 5px;\n  }\n\n  #rect {\n\n\n  }\n\n\n\n\n</style>\n<div id=\"rect\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  div {\n    height: 40px;\n    width: 70%;\n    background: black;\n    margin: 50px auto;\n    border-radius: 5px;\n  }\n\n  #rect {\n    animation-name: rainbow;\n    animation-duration: 4s;\n  }\n\n  @keyframes rainbow {\n    0% {\n      background-color: blue;\n    }\n    50% {\n      background-color: green;\n    }\n    100% {\n      background-color: yellow;\n    }\n  }\n</style>\n<div id=\"rect\"></div>","error":null,"seed":"<style>\n  div {\n    height: 40px;\n    width: 70%;\n    background: black;\n    margin: 50px auto;\n    border-radius: 5px;\n  }\n\n  #rect {\n    animation-name: rainbow;\n    animation-duration: 4s;\n  }\n\n  @keyframes rainbow {\n    0% {\n      background-color: blue;\n    }\n    50% {\n      background-color: green;\n    }\n    100% {\n      background-color: yellow;\n    }\n  }\n</style>\n<div id=\"rect\"></div>"}]],"tests":[{"text":"<p>The element with id of <code>rect</code> should have an <code>animation-name</code> property with a value of <code>rainbow</code>.</p>","testString":"assert($('#rect').css('animation-name') == 'rainbow');"},{"text":"<p>The element with id of <code>rect</code> should have an <code>animation-duration</code> property with a value of 4s.</p>","testString":"assert($('#rect').css('animation-duration') == '4s');"},{"text":"<p>The <code>@keyframes</code> rule should use the <code>animation-name</code> of <code>rainbow</code>.</p>","testString":"assert(code.match(/@keyframes\\s+?rainbow\\s*?{/g));"},{"text":"<p>The <code>@keyframes</code> rule for <code>rainbow</code> should use a <code>background-color</code> of <code>blue</code> at 0%.</p>","testString":"assert(code.match(/0%\\s*?{\\s*?background-color:\\s*?blue;\\s*?}/gi));"},{"text":"<p>The <code>@keyframes</code> rule for <code>rainbow</code> should use a <code>background-color</code> of <code>green</code> at 50%.</p>","testString":"assert(code.match(/50%\\s*?{\\s*?background-color:\\s*?green;\\s*?}/gi));"},{"text":"<p>The <code>@keyframes</code> rule for rainbow should use a <code>background-color</code> of <code>yellow</code> at 100%.</p>","testString":"assert(code.match(/100%\\s*?{\\s*?background-color:\\s*?yellow;\\s*?}/gi));"}],"description":"<section id=\"description\">\n<p>To animate an element, you need to know about the animation properties and the <code>@keyframes</code> rule. The animation properties control how the animation should behave and the <code>@keyframes</code> rule controls what happens during that animation. There are eight animation properties in total. This challenge will keep it simple and cover the two most important ones first:</p>\n<p><code>animation-name</code> sets the name of the animation, which is later used by <code>@keyframes</code> to tell CSS which rules go with which animations.</p>\n<p><code>animation-duration</code> sets the length of time for the animation.</p>\n<p><code>@keyframes</code> is how to specify exactly what happens within the animation over the duration. This is done by giving CSS properties for specific \"frames\" during the animation, with percentages ranging from 0% to 100%. If you compare this to a movie, the CSS properties for 0% is how the element displays in the opening scene. The CSS properties for 100% is how the element appears at the end, right before the credits roll. Then CSS applies the magic to transition the element over the given duration to act out the scene. Here's an example to illustrate the usage of <code>@keyframes</code> and the animation properties:</p>\n<pre><code class=\"language-css\">#anim {\n  animation-name: colorful;\n  animation-duration: 3s;\n}\n\n@keyframes colorful {\n  0% {\n    background-color: blue;\n  }\n  100% {\n    background-color: yellow;\n  }\n}\n</code></pre>\n<p>For the element with the <code>anim</code> id, the code snippet above sets the <code>animation-name</code> to <code>colorful</code> and sets the <code>animation-duration</code> to 3 seconds. Then the <code>@keyframes</code> rule links to the animation properties with the name <code>colorful</code>. It sets the color to blue at the beginning of the animation (0%) which will transition to yellow by the end of the animation (100%). You aren't limited to only beginning-end transitions, you can set properties for the element for any percentage between 0% and 100%.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create an animation for the element with the id <code>rect</code>, by setting the <code>animation-name</code> to <code>rainbow</code> and the <code>animation-duration</code> to 4 seconds. Next, declare a <code>@keyframes</code> rule, and set the <code>background-color</code> at the beginning of the animation (<code>0%</code>) to blue, the middle of the animation (<code>50%</code>) to green, and the end of the animation (<code>100%</code>) to yellow.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":39,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d781e367417b2b2512acb","title":"Lock an Element to its Parent with Absolute Positioning","challengeType":0,"videoUrl":"https://scrimba.com/c/cyLJ7c3","forumTopicId":301060,"dashedName":"lock-an-element-to-its-parent-with-absolute-positioning","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #searchbar {\n\n\n\n  }\n  section {\n    position: relative;\n  }\n</style>\n<body>\n  <h1>Welcome!</h1>\n  <section>\n    <form id=\"searchbar\">\n      <label for=\"search\">Search:</label>\n      <input type=\"search\" id=\"search\" name=\"search\">\n      <input type=\"submit\" name=\"submit\" value=\"Go!\">\n    </form>\n  </section>\n</body>","error":null,"seed":"<style>\n  #searchbar {\n\n\n\n  }\n  section {\n    position: relative;\n  }\n</style>\n<body>\n  <h1>Welcome!</h1>\n  <section>\n    <form id=\"searchbar\">\n      <label for=\"search\">Search:</label>\n      <input type=\"search\" id=\"search\" name=\"search\">\n      <input type=\"submit\" name=\"submit\" value=\"Go!\">\n    </form>\n  </section>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #searchbar {\n    position: absolute;\n    top: 50px;\n    right: 50px;\n  }\n  section {\n    position: relative;\n  }\n</style>\n<body>\n  <h1>Welcome!</h1>\n  <section>\n    <form id=\"searchbar\">\n      <label for=\"search\">Search:</label>\n      <input type=\"search\" id=\"search\" name=\"search\">\n      <input type=\"submit\" name=\"submit\" value=\"Go!\">\n    </form>\n  </section>\n</body>","error":null,"seed":"<style>\n  #searchbar {\n    position: absolute;\n    top: 50px;\n    right: 50px;\n  }\n  section {\n    position: relative;\n  }\n</style>\n<body>\n  <h1>Welcome!</h1>\n  <section>\n    <form id=\"searchbar\">\n      <label for=\"search\">Search:</label>\n      <input type=\"search\" id=\"search\" name=\"search\">\n      <input type=\"submit\" name=\"submit\" value=\"Go!\">\n    </form>\n  </section>\n</body>"}]],"tests":[{"text":"<p>The <code>#searchbar</code> element should have a <code>position</code> set to <code>absolute</code>.</p>","testString":"assert($('#searchbar').css('position') == 'absolute');"},{"text":"<p>Your code should use the <code>top</code> CSS offset of 50 pixels on the <code>#searchbar</code> element.</p>","testString":"assert($('#searchbar').css('top') == '50px');"},{"text":"<p>Your code should use the <code>right</code> CSS offset of 50 pixels on the <code>#searchbar</code> element.</p>","testString":"assert($('#searchbar').css('right') == '50px');"}],"description":"<section id=\"description\">\n<p>The next option for the CSS <code>position</code> property is <code>absolute</code>, which locks the element in place relative to its parent container. Unlike the <code>relative</code> position, this removes the element from the normal flow of the document, so surrounding items ignore it. The CSS offset properties (top or bottom and left or right) are used to adjust the position.</p>\n<p>One nuance with absolute positioning is that it will be locked relative to its closest <em>positioned</em> ancestor. If you forget to add a position rule to the parent item, (this is typically done using <code>position: relative;</code>), the browser will keep looking up the chain and ultimately default to the <code>body</code> tag.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Lock the <code>#searchbar</code> element to the top-right of its <code>section</code> parent by declaring its <code>position</code> as <code>absolute</code>. Give it <code>top</code> and <code>right</code> offsets of 50 pixels each.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":20,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d781e367417b2b2512acc","title":"Lock an Element to the Browser Window with Fixed Positioning","challengeType":0,"videoUrl":"https://scrimba.com/c/c2MDNUR","forumTopicId":301061,"dashedName":"lock-an-element-to-the-browser-window-with-fixed-positioning","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    min-height: 150vh;\n  }\n  #navbar {\n\n\n\n    width: 100%;\n    background-color: #767676;\n  }\n  nav ul {\n    margin: 0px;\n    padding: 5px 0px 5px 30px;\n  }\n  nav li {\n    display: inline;\n    margin-right: 20px;\n  }\n  a {\n    text-decoration: none;\n  }\n</style>\n<body>\n  <header>\n    <h1>Welcome!</h1>\n    <nav id=\"navbar\">\n      <ul>\n        <li><a href=\"\">Home</a></li>\n        <li><a href=\"\">Contact</a></li>\n      </ul>\n    </nav>\n  </header>\n  <p>I shift up when the #navbar is fixed to the browser window.</p>\n</body>","error":null,"seed":"<style>\n  body {\n    min-height: 150vh;\n  }\n  #navbar {\n\n\n\n    width: 100%;\n    background-color: #767676;\n  }\n  nav ul {\n    margin: 0px;\n    padding: 5px 0px 5px 30px;\n  }\n  nav li {\n    display: inline;\n    margin-right: 20px;\n  }\n  a {\n    text-decoration: none;\n  }\n</style>\n<body>\n  <header>\n    <h1>Welcome!</h1>\n    <nav id=\"navbar\">\n      <ul>\n        <li><a href=\"\">Home</a></li>\n        <li><a href=\"\">Contact</a></li>\n      </ul>\n    </nav>\n  </header>\n  <p>I shift up when the #navbar is fixed to the browser window.</p>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    min-height: 150vh;\n  }\n  #navbar {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    background-color: #767676;\n  }\n  nav ul {\n    margin: 0px;\n    padding: 5px 0px 5px 30px;\n  }\n  nav li {\n    display: inline;\n    margin-right: 20px;\n  }\n  a {\n    text-decoration: none;\n  }\n</style>\n<body>\n  <header>\n    <h1>Welcome!</h1>\n    <nav id=\"navbar\">\n      <ul>\n        <li><a href=\"\">Home</a></li>\n        <li><a href=\"\">Contact</a></li>\n      </ul>\n    </nav>\n  </header>\n  <p>I shift up when the #navbar is fixed to the browser window.</p>\n</body>","error":null,"seed":"<style>\n  body {\n    min-height: 150vh;\n  }\n  #navbar {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    background-color: #767676;\n  }\n  nav ul {\n    margin: 0px;\n    padding: 5px 0px 5px 30px;\n  }\n  nav li {\n    display: inline;\n    margin-right: 20px;\n  }\n  a {\n    text-decoration: none;\n  }\n</style>\n<body>\n  <header>\n    <h1>Welcome!</h1>\n    <nav id=\"navbar\">\n      <ul>\n        <li><a href=\"\">Home</a></li>\n        <li><a href=\"\">Contact</a></li>\n      </ul>\n    </nav>\n  </header>\n  <p>I shift up when the #navbar is fixed to the browser window.</p>\n</body>"}]],"tests":[{"text":"<p>The <code>#navbar</code> element should have a <code>position</code> set to <code>fixed</code>.</p>","testString":"assert($('#navbar').css('position') == 'fixed');"},{"text":"<p>Your code should use the <code>top</code> CSS offset of 0 pixels on the <code>#navbar</code> element.</p>","testString":"assert($('#navbar').css('top') == '0px');"},{"text":"<p>Your code should use the <code>left</code> CSS offset of 0 pixels on the <code>#navbar</code> element.</p>","testString":"assert($('#navbar').css('left') == '0px');"}],"description":"<section id=\"description\">\n<p>The next layout scheme that CSS offers is the <code>fixed</code> position, which is a type of absolute positioning that locks an element relative to the browser window. Similar to absolute positioning, it's used with the CSS offset properties and also removes the element from the normal flow of the document. Other items no longer \"realize\" where it is positioned, which may require some layout adjustments elsewhere.</p>\n<p>One key difference between the <code>fixed</code> and <code>absolute</code> positions is that an element with a fixed position won't move when the user scrolls.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The navigation bar in the code is labeled with an id of <code>navbar</code>. Change its <code>position</code> to <code>fixed</code>, and offset it 0 pixels from the <code>top</code> and 0 pixels from the <code>left</code>. After you have added the code, scroll the preview window to see how the navigation stays in place.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":21,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a8367417b2b2512ae4","title":"Make a CSS Heartbeat using an Infinite Animation Count","challengeType":0,"videoUrl":"https://scrimba.com/c/cDZpDUr","forumTopicId":301062,"dashedName":"make-a-css-heartbeat-using-an-infinite-animation-count","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: white;\n    animation-name: backdiv;\n    animation-duration: 1s;\n\n  }\n\n  .heart {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 50px;\n    width: 50px;\n    transform: rotate(-45deg);\n    animation-name: beat;\n    animation-duration: 1s;\n\n  }\n  .heart:after {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: 0px;\n    left: 25px;\n  }\n  .heart:before {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: -25px;\n    left: 0px;\n  }\n\n  @keyframes backdiv {\n    50% {\n      background: #ffe6f2;\n    }\n  }\n\n  @keyframes beat {\n    0% {\n      transform: scale(1) rotate(-45deg);\n    }\n    50% {\n      transform: scale(0.6) rotate(-45deg);\n    }\n  }\n\n</style>\n<div class=\"back\"></div>\n<div class=\"heart\"></div>","error":null,"seed":"<style>\n  .back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: white;\n    animation-name: backdiv;\n    animation-duration: 1s;\n\n  }\n\n  .heart {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 50px;\n    width: 50px;\n    transform: rotate(-45deg);\n    animation-name: beat;\n    animation-duration: 1s;\n\n  }\n  .heart:after {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: 0px;\n    left: 25px;\n  }\n  .heart:before {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: -25px;\n    left: 0px;\n  }\n\n  @keyframes backdiv {\n    50% {\n      background: #ffe6f2;\n    }\n  }\n\n  @keyframes beat {\n    0% {\n      transform: scale(1) rotate(-45deg);\n    }\n    50% {\n      transform: scale(0.6) rotate(-45deg);\n    }\n  }\n\n</style>\n<div class=\"back\"></div>\n<div class=\"heart\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: white;\n    animation-name: backdiv;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n  }\n\n  .heart {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 50px;\n    width: 50px;\n    transform: rotate(-45deg);\n    animation-name: beat;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n  }\n  .heart:after {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: 0px;\n    left: 25px;\n  }\n  .heart:before {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: -25px;\n    left: 0px;\n  }\n\n  @keyframes backdiv {\n    50% {\n      background: #ffe6f2;\n    }\n  }\n\n  @keyframes beat {\n    0% {\n      transform: scale(1) rotate(-45deg);\n    }\n    50% {\n      transform: scale(0.6) rotate(-45deg);\n    }\n  }\n</style>\n<div class=\"back\"></div>\n<div class=\"heart\"></div>","error":null,"seed":"<style>\n  .back {\n    position: fixed;\n    padding: 0;\n    margin: 0;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: white;\n    animation-name: backdiv;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n  }\n\n  .heart {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 50px;\n    width: 50px;\n    transform: rotate(-45deg);\n    animation-name: beat;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n  }\n  .heart:after {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: 0px;\n    left: 25px;\n  }\n  .heart:before {\n    background-color: pink;\n    content: \"\";\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: -25px;\n    left: 0px;\n  }\n\n  @keyframes backdiv {\n    50% {\n      background: #ffe6f2;\n    }\n  }\n\n  @keyframes beat {\n    0% {\n      transform: scale(1) rotate(-45deg);\n    }\n    50% {\n      transform: scale(0.6) rotate(-45deg);\n    }\n  }\n</style>\n<div class=\"back\"></div>\n<div class=\"heart\"></div>"}]],"tests":[{"text":"<p>The <code>animation-iteration-count</code> property for the <code>heart</code> class should have a value of <code>infinite</code>.</p>","testString":"assert($('.heart').css('animation-iteration-count') == 'infinite');"},{"text":"<p>The <code>animation-iteration-count</code> property for the <code>back</code> class should have a value of <code>infinite</code>.</p>","testString":"assert($('.back').css('animation-iteration-count') == 'infinite');"}],"description":"<section id=\"description\">\n<p>Here's one more continuous animation example with the <code>animation-iteration-count</code> property that uses the heart you designed in a previous challenge.</p>\n<p>The one-second long heartbeat animation consists of two animated pieces. The <code>heart</code> elements (including the <code>:before</code> and <code>:after</code> pieces) are animated to change size using the <code>transform</code> property, and the background <code>div</code> is animated to change its color using the <code>background</code> property.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Keep the heart beating by adding the <code>animation-iteration-count</code> property for both the <code>back</code> class and the <code>heart</code> class and setting the value to <code>infinite</code>. The <code>heart:before</code> and <code>heart:after</code> selectors do not need any animation properties.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":45,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a9367417b2b2512aea","title":"Make Motion More Natural Using a Bezier Curve","challengeType":0,"videoUrl":"https://scrimba.com/c/c7akWUv","forumTopicId":301063,"dashedName":"make-motion-more-natural-using-a-bezier-curve","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .balls {\n    border-radius: 50%;\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    top: 60%;\n    animation-name: jump;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #red {\n    background: red;\n    left: 25%;\n    animation-timing-function: linear;\n  }\n  #blue {\n    background: blue;\n    left: 50%;\n    animation-timing-function: ease-out;\n  }\n  #green {\n    background: green;\n    left: 75%;\n    animation-timing-function: cubic-bezier(0.69, 0.1, 1, 0.1);\n  }\n\n  @keyframes jump {\n    50% {\n      top: 10%;\n    }\n  }\n</style>\n<div class=\"balls\" id=\"red\"></div>\n<div class=\"balls\" id=\"blue\"></div>\n<div class=\"balls\" id=\"green\"></div>","error":null,"seed":"<style>\n  .balls {\n    border-radius: 50%;\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    top: 60%;\n    animation-name: jump;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #red {\n    background: red;\n    left: 25%;\n    animation-timing-function: linear;\n  }\n  #blue {\n    background: blue;\n    left: 50%;\n    animation-timing-function: ease-out;\n  }\n  #green {\n    background: green;\n    left: 75%;\n    animation-timing-function: cubic-bezier(0.69, 0.1, 1, 0.1);\n  }\n\n  @keyframes jump {\n    50% {\n      top: 10%;\n    }\n  }\n</style>\n<div class=\"balls\" id=\"red\"></div>\n<div class=\"balls\" id=\"blue\"></div>\n<div class=\"balls\" id=\"green\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .balls {\n    border-radius: 50%;\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    top: 60%;\n    animation-name: jump;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #red {\n    background: red;\n    left: 25%;\n    animation-timing-function: linear;\n  }\n  #blue {\n    background: blue;\n    left: 50%;\n    animation-timing-function: ease-out;\n  }\n  #green {\n    background: green;\n    left: 75%;\n    animation-timing-function: cubic-bezier(0.311, 0.441, 0.444, 1.649);\n  }\n\n  @keyframes jump {\n    50% {\n      top: 10%;\n    }\n  }\n</style>\n<div class=\"balls\" id=\"red\"></div>\n<div class=\"balls\" id=\"blue\"></div>\n<div class=\"balls\" id=\"green\"></div>","error":null,"seed":"<style>\n  .balls {\n    border-radius: 50%;\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    top: 60%;\n    animation-name: jump;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #red {\n    background: red;\n    left: 25%;\n    animation-timing-function: linear;\n  }\n  #blue {\n    background: blue;\n    left: 50%;\n    animation-timing-function: ease-out;\n  }\n  #green {\n    background: green;\n    left: 75%;\n    animation-timing-function: cubic-bezier(0.311, 0.441, 0.444, 1.649);\n  }\n\n  @keyframes jump {\n    50% {\n      top: 10%;\n    }\n  }\n</style>\n<div class=\"balls\" id=\"red\"></div>\n<div class=\"balls\" id=\"blue\"></div>\n<div class=\"balls\" id=\"green\"></div>"}]],"tests":[{"text":"<p>The value of the <code>animation-timing-function</code> property for the element with the id <code>green</code> should be a <code>cubic-bezier</code> function with x1, y1, x2, y2 values as specified.</p>","testString":"assert(\n  $('#green').css('animation-timing-function') ==\n    'cubic-bezier(0.311, 0.441, 0.444, 1.649)'\n);"}],"description":"<section id=\"description\">\n<p>This challenge animates an element to replicate the movement of a ball being juggled. Prior challenges covered the <code>linear</code> and <code>ease-out</code> cubic Bezier curves, however neither depicts the juggling movement accurately. You need to customize a Bezier curve for this.</p>\n<p>The <code>animation-timing-function</code> automatically loops at every keyframe when the <code>animation-iteration-count</code> is set to infinite. Since there is a keyframe rule set in the middle of the animation duration (at <code>50%</code>), it results in two identical animation progressions at the upward and downward movement of the ball.</p>\n<p>The following cubic Bezier curve simulates a juggling movement:</p>\n<pre><code class=\"language-css\">cubic-bezier(0.3, 0.4, 0.5, 1.6);\n</code></pre>\n<p>Notice that the value of y2 is larger than 1. Although the cubic Bezier curve is mapped on a 1 by 1 coordinate system, and it can only accept x values from 0 to 1, the y value can be set to numbers larger than one. This results in a bouncing movement that is ideal for simulating the juggling ball.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change value of the <code>animation-timing-function</code> of the element with the id of <code>green</code> to a <code>cubic-bezier</code> function with x1, y1, x2, y2 values set respectively to 0.311, 0.441, 0.444, 1.649.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":51,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"58a7a6ebf9a6318348e2d5aa","title":"Modify Fill Mode of an Animation","challengeType":0,"videoUrl":"https://scrimba.com/c/cVJDmcE","forumTopicId":301064,"dashedName":"modify-fill-mode-of-an-animation","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  button {\n    border-radius: 5px;\n    color: white;\n    background-color: #0F5897;\n    padding: 5px 10px 8px 10px;\n  }\n  button:hover {\n    animation-name: background-color;\n    animation-duration: 500ms;\n    /* Only change code below this line */\n\n    /* Only change code above this line */\n  }\n  @keyframes background-color {\n    100% {\n      background-color: #4791d0;\n    }\n  }\n</style>\n<button>Register</button>","error":null,"seed":"<style>\n  button {\n    border-radius: 5px;\n    color: white;\n    background-color: #0F5897;\n    padding: 5px 10px 8px 10px;\n  }\n  button:hover {\n    animation-name: background-color;\n    animation-duration: 500ms;\n    /* Only change code below this line */\n\n    /* Only change code above this line */\n  }\n  @keyframes background-color {\n    100% {\n      background-color: #4791d0;\n    }\n  }\n</style>\n<button>Register</button>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  button {\n    border-radius: 5px;\n    color: white;\n    background-color: #0F5897;\n    padding: 5px 10px 8px 10px;\n  }\n  button:hover {\n    animation-name: background-color;\n    animation-duration: 500ms;\n    animation-fill-mode: forwards;\n  }\n  @keyframes background-color {\n    100% {\n      background-color: #4791d0;\n    }\n  }\n</style>\n<button>Register</button>","error":null,"seed":"<style>\n  button {\n    border-radius: 5px;\n    color: white;\n    background-color: #0F5897;\n    padding: 5px 10px 8px 10px;\n  }\n  button:hover {\n    animation-name: background-color;\n    animation-duration: 500ms;\n    animation-fill-mode: forwards;\n  }\n  @keyframes background-color {\n    100% {\n      background-color: #4791d0;\n    }\n  }\n</style>\n<button>Register</button>"}]],"tests":[{"text":"<p><code>button:hover</code> should have a <code>animation-fill-mode</code> property with a value of <code>forwards</code>.</p>","testString":"assert(\n  code.match(\n    /button\\s*?:\\s*?hover\\s*?{[\\s\\S]*animation-fill-mode\\s*?:\\s*?forwards\\s*?;[\\s\\S]*}/gi\n  ) &&\n    code.match(\n      /button\\s*?:\\s*?hover\\s*?{[\\s\\S]*animation-name\\s*?:\\s*?background-color\\s*?;[\\s\\S]*}/gi\n    ) &&\n    code.match(\n      /button\\s*?:\\s*?hover\\s*?{[\\s\\S]*animation-duration\\s*?:\\s*?500ms\\s*?;[\\s\\S]*}/gi\n    )\n);"}],"description":"<section id=\"description\">\n<p>That's great, but it doesn't work right yet. Notice how the animation resets after <code>500ms</code> has passed, causing the button to revert back to the original color. You want the button to stay highlighted.</p>\n<p>This can be done by setting the <code>animation-fill-mode</code> property to <code>forwards</code>. The <code>animation-fill-mode</code> specifies the style applied to an element when the animation has finished. You can set it like so:</p>\n<pre><code class=\"language-css\">animation-fill-mode: forwards;\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Set the <code>animation-fill-mode</code> property of <code>button:hover</code> to <code>forwards</code> so the button stays highlighted when a user hovers over it.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":41,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d781e367417b2b2512aca","title":"Move a Relatively Positioned Element with CSS Offsets","challengeType":0,"videoUrl":"https://scrimba.com/c/c9bQEA4","forumTopicId":301065,"dashedName":"move-a-relatively-positioned-element-with-css-offsets","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<head>\n<style>\n  h2 {\n    position: relative;\n\n\n  }\n</style>\n</head>\n<body>\n  <h1>On Being Well-Positioned</h1>\n  <h2>Move me!</h2>\n  <p>I still think the h2 is where it normally sits.</p>\n</body>","error":null,"seed":"<head>\n<style>\n  h2 {\n    position: relative;\n\n\n  }\n</style>\n</head>\n<body>\n  <h1>On Being Well-Positioned</h1>\n  <h2>Move me!</h2>\n  <p>I still think the h2 is where it normally sits.</p>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<head>\n<style>\n  h2 {\n    position: relative;\n    left: 15px;\n    bottom: 10px;\n  }\n</style>\n</head>\n<body>\n  <h1>On Being Well-Positioned</h1>\n  <h2>Move me!</h2>\n  <p>I still think the h2 is where it normally sits.</p>\n</body>","error":null,"seed":"<head>\n<style>\n  h2 {\n    position: relative;\n    left: 15px;\n    bottom: 10px;\n  }\n</style>\n</head>\n<body>\n  <h1>On Being Well-Positioned</h1>\n  <h2>Move me!</h2>\n  <p>I still think the h2 is where it normally sits.</p>\n</body>"}]],"tests":[{"text":"<p>Your code should use a CSS offset to relatively position the <code>h2</code> 10px upwards. In other words, move it 10px away from the <code>bottom</code> of where it normally sits.</p>","testString":"assert($('h2').css('bottom') == '10px');"},{"text":"<p>Your code should use a CSS offset to relatively position the <code>h2</code> 15px towards the right. In other words, move it 15px away from the <code>left</code> of where it normally sits.</p>","testString":"assert($('h2').css('left') == '15px');"}],"description":"<section id=\"description\">\n<p>The CSS offsets of <code>top</code> or <code>bottom</code>, and <code>left</code> or <code>right</code> tell the browser how far to offset an item relative to where it would sit in the normal flow of the document. You're offsetting an element away from a given spot, which moves the element away from the referenced side (effectively, the opposite direction). As you saw in the last challenge, using the <code>top</code> offset moved the <code>h2</code> downwards. Likewise, using a <code>left</code> offset moves an item to the right.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use CSS offsets to move the <code>h2</code> 15 pixels to the right and 10 pixels up.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":19,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a3367417b2b2512ace","title":"Push Elements Left or Right with the float Property","challengeType":0,"videoUrl":"https://scrimba.com/c/c2MDqu2","forumTopicId":301066,"dashedName":"push-elements-left-or-right-with-the-float-property","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<head>\n  <style>\n    #left {\n\n      width: 50%;\n    }\n    #right {\n\n      width: 40%;\n    }\n    aside, section {\n      padding: 2px;\n      background-color: #ccc;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Welcome!</h1>\n  </header>\n  <section id=\"left\">\n    <h2>Content</h2>\n    <p>Good stuff</p>\n  </section>\n  <aside id=\"right\">\n    <h2>Sidebar</h2>\n    <p>Links</p>\n  </aside>\n</body>","error":null,"seed":"<head>\n  <style>\n    #left {\n\n      width: 50%;\n    }\n    #right {\n\n      width: 40%;\n    }\n    aside, section {\n      padding: 2px;\n      background-color: #ccc;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Welcome!</h1>\n  </header>\n  <section id=\"left\">\n    <h2>Content</h2>\n    <p>Good stuff</p>\n  </section>\n  <aside id=\"right\">\n    <h2>Sidebar</h2>\n    <p>Links</p>\n  </aside>\n</body>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<head>\n  <style>\n    #left {\n      float: left;\n      width: 50%;\n    }\n    #right {\n      float: right;\n      width: 40%;\n    }\n    aside, section {\n      padding: 2px;\n      background-color: #ccc;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Welcome!</h1>\n  </header>\n  <section id=\"left\">\n    <h2>Content</h2>\n    <p>Good stuff</p>\n  </section>\n  <aside id=\"right\">\n    <h2>Sidebar</h2>\n    <p>Links</p>\n  </aside>\n</body>","error":null,"seed":"<head>\n  <style>\n    #left {\n      float: left;\n      width: 50%;\n    }\n    #right {\n      float: right;\n      width: 40%;\n    }\n    aside, section {\n      padding: 2px;\n      background-color: #ccc;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <h1>Welcome!</h1>\n  </header>\n  <section id=\"left\">\n    <h2>Content</h2>\n    <p>Good stuff</p>\n  </section>\n  <aside id=\"right\">\n    <h2>Sidebar</h2>\n    <p>Links</p>\n  </aside>\n</body>"}]],"tests":[{"text":"<p>The element with id <code>left</code> should have a <code>float</code> value of <code>left</code>.</p>","testString":"assert($('#left').css('float') == 'left');"},{"text":"<p>The element with id <code>right</code> should have a <code>float</code> value of <code>right</code>.</p>","testString":"assert($('#right').css('float') == 'right');"}],"description":"<section id=\"description\">\n<p>The next positioning tool does not actually use <code>position</code>, but sets the <code>float</code> property of an element. Floating elements are removed from the normal flow of a document and pushed to either the <code>left</code> or <code>right</code> of their containing parent element. It's commonly used with the <code>width</code> property to specify how much horizontal space the floated element requires.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The given markup would work well as a two-column layout, with the <code>section</code> and <code>aside</code> elements next to each other. Give the <code>#left</code> item a <code>float</code> of <code>left</code> and the <code>#right</code> item a <code>float</code> of <code>right</code>.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":22,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d781c367417b2b2512ac2","title":"Set the font-size for Multiple Heading Elements","challengeType":0,"videoUrl":"https://scrimba.com/c/cPpQNT3","forumTopicId":301067,"dashedName":"set-the-font-size-for-multiple-heading-elements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n\n\n\n\n\n\n</style>\n<h1>This is h1 text</h1>\n<h2>This is h2 text</h2>\n<h3>This is h3 text</h3>\n<h4>This is h4 text</h4>\n<h5>This is h5 text</h5>\n<h6>This is h6 text</h6>","error":null,"seed":"<style>\n\n\n\n\n\n\n</style>\n<h1>This is h1 text</h1>\n<h2>This is h2 text</h2>\n<h3>This is h3 text</h3>\n<h4>This is h4 text</h4>\n<h5>This is h5 text</h5>\n<h6>This is h6 text</h6>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h1 {\n    font-size: 68px;\n  }\n  h2 {\n    font-size: 52px;\n  }\n  h3 {\n    font-size: 40px;\n  }\n  h4 {\n    font-size: 32px;\n  }\n  h5 {\n    font-size: 21px;\n  }\n  h6 {\n    font-size: 14px;\n  }\n</style>\n<h1>This is h1 text</h1>\n<h2>This is h2 text</h2>\n<h3>This is h3 text</h3>\n<h4>This is h4 text</h4>\n<h5>This is h5 text</h5>\n<h6>This is h6 text</h6>","error":null,"seed":"<style>\n  h1 {\n    font-size: 68px;\n  }\n  h2 {\n    font-size: 52px;\n  }\n  h3 {\n    font-size: 40px;\n  }\n  h4 {\n    font-size: 32px;\n  }\n  h5 {\n    font-size: 21px;\n  }\n  h6 {\n    font-size: 14px;\n  }\n</style>\n<h1>This is h1 text</h1>\n<h2>This is h2 text</h2>\n<h3>This is h3 text</h3>\n<h4>This is h4 text</h4>\n<h5>This is h5 text</h5>\n<h6>This is h6 text</h6>"}]],"tests":[{"text":"<p>Your code should set the <code>font-size</code> property for the <code>h1</code> tag to 68 pixels.</p>","testString":" const fontSizeOfh1 = new __helpers.CSSHelp(document).getStyle('h1')?.getPropertyValue('font-size');\n assert(fontSizeOfh1 === '68px');"},{"text":"<p>Your code should set the <code>font-size</code> property for the <code>h2</code> tag to 52 pixels.</p>","testString":" const fontSizeOfh2 = new __helpers.CSSHelp(document).getStyle('h2')?.getPropertyValue('font-size');\n assert(fontSizeOfh2 === '52px');"},{"text":"<p>Your code should set the <code>font-size</code> property for the <code>h3</code> tag to 40 pixels.</p>","testString":" const fontSizeOfh3 = new __helpers.CSSHelp(document).getStyle('h3')?.getPropertyValue('font-size');\n assert(fontSizeOfh3 === '40px');"},{"text":"<p>Your code should set the <code>font-size</code> property for the <code>h4</code> tag to 32 pixels.</p>","testString":" const fontSizeOfh4 = new __helpers.CSSHelp(document).getStyle('h4')?.getPropertyValue('font-size');\n assert(fontSizeOfh4 === '32px');"},{"text":"<p>Your code should set the <code>font-size</code> property for the <code>h5</code> tag to 21 pixels.</p>","testString":" const fontSizeOfh5 = new __helpers.CSSHelp(document).getStyle('h5')?.getPropertyValue('font-size');\n assert(fontSizeOfh5 === '21px');"},{"text":"<p>Your code should set the <code>font-size</code> property for the <code>h6</code> tag to 14 pixels.</p>","testString":" const fontSizeOfh6 = new __helpers.CSSHelp(document).getStyle('h6')?.getPropertyValue('font-size');\n assert(fontSizeOfh6 === '14px');"}],"description":"<section id=\"description\">\n<p>The <code>font-size</code> property is used to specify how large the text is in a given element. This rule can be used for multiple elements to create visual consistency of text on a page. In this challenge, you'll set the values for all <code>h1</code> through <code>h6</code> tags to balance the heading sizes.</p>\n</section>","instructions":"<section id=\"instructions\">\n  <p>In the <code>style</code> tags, set the <code>font-size</code> of the:</p>\n  <ul>\n    <li><code>h1</code> tag to 68px.</li>\n    <li><code>h2</code> tag to 52px.</li>\n    <li><code>h3</code> tag to 40px.</li>\n    <li><code>h4</code> tag to 32px.</li>\n    <li><code>h5</code> tag to 21px.</li>\n    <li><code>h6</code> tag to 14px.</li>\n  </ul>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":13,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d781c367417b2b2512ac4","title":"Set the font-size of Paragraph Text","challengeType":0,"videoUrl":"https://scrimba.com/c/cVJ36Cr","forumTopicId":301068,"dashedName":"set-the-font-size-of-paragraph-text","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  p {\n    font-size: 10px;\n  }\n</style>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n</p>","error":null,"seed":"<style>\n  p {\n    font-size: 10px;\n  }\n</style>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n</p>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  p {\n    font-size: 16px;\n  }\n</style>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n</p>","error":null,"seed":"<style>\n  p {\n    font-size: 16px;\n  }\n</style>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n</p>"}]],"tests":[{"text":"<p>Your <code>p</code> tag should have a <code>font-size</code> of 16 pixels.</p>","testString":"assert($('p').css('font-size') == '16px');"}],"description":"<section id=\"description\">\n<p>The <code>font-size</code> property in CSS is not limited to headings, it can be applied to any element containing text.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the value of the <code>font-size</code> property for the paragraph to 16px to make it more visible.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":15,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d781c367417b2b2512ac3","title":"Set the font-weight for Multiple Heading Elements","challengeType":0,"videoUrl":"https://scrimba.com/c/crVWRHq","forumTopicId":301069,"dashedName":"set-the-font-weight-for-multiple-heading-elements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h1 {\n    font-size: 68px;\n\n  }\n  h2 {\n    font-size: 52px;\n\n  }\n  h3 {\n    font-size: 40px;\n\n  }\n  h4 {\n    font-size: 32px;\n\n  }\n  h5 {\n    font-size: 21px;\n\n  }\n  h6 {\n    font-size: 14px;\n\n  }\n</style>\n<h1>This is h1 text</h1>\n<h2>This is h2 text</h2>\n<h3>This is h3 text</h3>\n<h4>This is h4 text</h4>\n<h5>This is h5 text</h5>\n<h6>This is h6 text</h6>","error":null,"seed":"<style>\n  h1 {\n    font-size: 68px;\n\n  }\n  h2 {\n    font-size: 52px;\n\n  }\n  h3 {\n    font-size: 40px;\n\n  }\n  h4 {\n    font-size: 32px;\n\n  }\n  h5 {\n    font-size: 21px;\n\n  }\n  h6 {\n    font-size: 14px;\n\n  }\n</style>\n<h1>This is h1 text</h1>\n<h2>This is h2 text</h2>\n<h3>This is h3 text</h3>\n<h4>This is h4 text</h4>\n<h5>This is h5 text</h5>\n<h6>This is h6 text</h6>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h1 {\n    font-size: 68px;\n    font-weight: 800;\n  }\n  h2 {\n    font-size: 52px;\n    font-weight: 600;\n  }\n  h3 {\n    font-size: 40px;\n    font-weight: 500;\n  }\n  h4 {\n    font-size: 32px;\n    font-weight: 400;\n  }\n  h5 {\n    font-size: 21px;\n    font-weight: 300;\n  }\n  h6 {\n    font-size: 14px;\n    font-weight: 200;\n  }\n</style>\n<h1>This is h1 text</h1>\n<h2>This is h2 text</h2>\n<h3>This is h3 text</h3>\n<h4>This is h4 text</h4>\n<h5>This is h5 text</h5>\n<h6>This is h6 text</h6>","error":null,"seed":"<style>\n  h1 {\n    font-size: 68px;\n    font-weight: 800;\n  }\n  h2 {\n    font-size: 52px;\n    font-weight: 600;\n  }\n  h3 {\n    font-size: 40px;\n    font-weight: 500;\n  }\n  h4 {\n    font-size: 32px;\n    font-weight: 400;\n  }\n  h5 {\n    font-size: 21px;\n    font-weight: 300;\n  }\n  h6 {\n    font-size: 14px;\n    font-weight: 200;\n  }\n</style>\n<h1>This is h1 text</h1>\n<h2>This is h2 text</h2>\n<h3>This is h3 text</h3>\n<h4>This is h4 text</h4>\n<h5>This is h5 text</h5>\n<h6>This is h6 text</h6>"}]],"tests":[{"text":"<p>Your code should set the <code>font-weight</code> property for the <code>h1</code> tag to 800.</p>","testString":"assert($('h1').css('font-weight') == '800');"},{"text":"<p>Your code should set the <code>font-weight</code> property for the <code>h2</code> tag to 600.</p>","testString":"assert($('h2').css('font-weight') == '600');"},{"text":"<p>Your code should set the <code>font-weight</code> property for the <code>h3</code> tag to 500.</p>","testString":"assert($('h3').css('font-weight') == '500');"},{"text":"<p>Your code should set the <code>font-weight</code> property for the <code>h4</code> tag to 400.</p>","testString":"assert($('h4').css('font-weight') == '400');"},{"text":"<p>Your code should set the <code>font-weight</code> property for the <code>h5</code> tag to 300.</p>","testString":"assert($('h5').css('font-weight') == '300');"},{"text":"<p>Your code should set the <code>font-weight</code> property for the <code>h6</code> tag to 200.</p>","testString":"assert($('h6').css('font-weight') == '200');"}],"description":"<section id=\"description\">\n<p>You set the <code>font-size</code> of each heading tag in the last challenge, here you'll adjust the <code>font-weight</code>.</p>\n<p>The <code>font-weight</code> property sets how thick or thin characters are in a section of text.</p>\n</section>","instructions":"<section id=\"instructions\">\n<ul><li>Set the <code>font-weight</code> of the <code>h1</code> tag to 800.</li><li>Set the <code>font-weight</code> of the <code>h2</code> tag to 600.</li><li>Set the <code>font-weight</code> of the <code>h3</code> tag to 500.</li><li>Set the <code>font-weight</code> of the <code>h4</code> tag to 400.</li><li>Set the <code>font-weight</code> of the <code>h5</code> tag to 300.</li><li>Set the <code>font-weight</code> of the <code>h6</code> tag to 200.</li></ul>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":14,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d781d367417b2b2512ac5","title":"Set the line-height of Paragraphs","challengeType":0,"videoUrl":"https://scrimba.com/c/crVWdcv","forumTopicId":301070,"dashedName":"set-the-line-height-of-paragraphs","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  p {\n    font-size: 16px;\n\n  }\n</style>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n</p>","error":null,"seed":"<style>\n  p {\n    font-size: 16px;\n\n  }\n</style>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n</p>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  p {\n    font-size: 16px;\n    line-height: 25px;\n  }\n</style>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n</p>","error":null,"seed":"<style>\n  p {\n    font-size: 16px;\n    line-height: 25px;\n  }\n</style>\n<p>\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n</p>"}]],"tests":[{"text":"<p>Your code should set the <code>line-height</code> of the <code>p</code> tag to 25 pixels.</p>","testString":"assert($('p').css('line-height') == '25px');"}],"description":"<section id=\"description\">\n<p>CSS offers the <code>line-height</code> property to change the height of each line in a block of text. As the name suggests, it changes the amount of vertical space that each line of text gets.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add a <code>line-height</code> property to the <code>p</code> tag and set it to 25px.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":16,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a9367417b2b2512ae9","title":"Use a Bezier Curve to Move a Graphic","challengeType":0,"videoUrl":"https://scrimba.com/c/c6bnRCK","forumTopicId":301071,"dashedName":"use-a-bezier-curve-to-move-a-graphic","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .balls{\n    border-radius: 50%;\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #red {\n    background: red;\n    left: 27%;\n    animation-timing-function: linear;\n  }\n  #blue {\n    background: blue;\n    left: 56%;\n    animation-timing-function: ease-out;\n  }\n  @keyframes bounce {\n    0% {\n      top: 0px;\n    }\n    100% {\n      top: 249px;\n    }\n  }\n</style>\n<div class=\"balls\" id= \"red\"></div>\n<div class=\"balls\" id= \"blue\"></div>","error":null,"seed":"<style>\n  .balls{\n    border-radius: 50%;\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #red {\n    background: red;\n    left: 27%;\n    animation-timing-function: linear;\n  }\n  #blue {\n    background: blue;\n    left: 56%;\n    animation-timing-function: ease-out;\n  }\n  @keyframes bounce {\n    0% {\n      top: 0px;\n    }\n    100% {\n      top: 249px;\n    }\n  }\n</style>\n<div class=\"balls\" id= \"red\"></div>\n<div class=\"balls\" id= \"blue\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .balls{\n    border-radius: 50%;\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #red {\n    background: red;\n    left: 27%;\n    animation-timing-function: cubic-bezier(0, 0, 0.58, 1);\n  }\n  #blue {\n    background: blue;\n    left: 56%;\n    animation-timing-function: ease-out;\n  }\n  @keyframes bounce {\n    0% {\n      top: 0px;\n    }\n    100% {\n      top: 249px;\n    }\n  }\n</style>\n<div class=\"balls\" id= \"red\"></div>\n<div class=\"balls\" id= \"blue\"></div>","error":null,"seed":"<style>\n  .balls{\n    border-radius: 50%;\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    margin-top: 50px;\n    animation-name: bounce;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #red {\n    background: red;\n    left: 27%;\n    animation-timing-function: cubic-bezier(0, 0, 0.58, 1);\n  }\n  #blue {\n    background: blue;\n    left: 56%;\n    animation-timing-function: ease-out;\n  }\n  @keyframes bounce {\n    0% {\n      top: 0px;\n    }\n    100% {\n      top: 249px;\n    }\n  }\n</style>\n<div class=\"balls\" id= \"red\"></div>\n<div class=\"balls\" id= \"blue\"></div>"}]],"tests":[{"text":"<p>The value of the <code>animation-timing-function</code> property of the element with the id <code>red</code> should be a <code>cubic-bezier</code> function with x1, y1, x2, y2 values set respectively to 0, 0, 0.58, 1 .</p>","testString":"assert(\n  $('#red').css('animation-timing-function') == 'cubic-bezier(0, 0, 0.58, 1)'\n);"},{"text":"<p>The element with the id <code>red</code> should no longer have the <code>animation-timing-function</code> property of <code>linear</code>.</p>","testString":"assert($('#red').css('animation-timing-function') !== 'linear');"},{"text":"<p>The value of the <code>animation-timing-function</code> property for the element with the id <code>blue</code> should not change.</p>","testString":"const blueBallAnimation = __helpers.removeWhiteSpace(\n  $('#blue').css('animation-timing-function')\n);\nassert(\n  blueBallAnimation == 'ease-out' ||\n    blueBallAnimation == 'cubic-bezier(0,0,0.58,1)'\n);"}],"description":"<section id=\"description\">\n<p>A previous challenge discussed the <code>ease-out</code> keyword that describes an animation change that speeds up first and then slows down at the end of the animation. On the right, the difference between the <code>ease-out</code> keyword (for the blue element) and <code>linear</code> keyword (for the red element) is demonstrated. Similar animation progressions to the <code>ease-out</code> keyword can be achieved by using a custom cubic Bezier curve function.</p>\n<p>In general, changing the <code>p1</code> and <code>p2</code> anchor points drives the creation of different Bezier curves, which controls how the animation progresses through time. Here's an example of a Bezier curve using values to mimic the <code>ease-out</code> style:</p>\n<pre><code class=\"language-css\">animation-timing-function: cubic-bezier(0, 0, 0.58, 1);\n</code></pre>\n<p>Remember that all <code>cubic-bezier</code> functions start with <code>p0</code> at (0, 0) and end with <code>p3</code> at (1, 1). In this example, the curve moves faster through the Y-axis (starts at 0, goes to <code>p1</code> y value of 0, then goes to <code>p2</code> y value of 1) than it moves through the X-axis (0 to start, then 0 for <code>p1</code>, up to 0.58 for <code>p2</code>). As a result, the change in the animated element progresses faster than the time of the animation for that segment. Towards the end of the curve, the relationship between the change in x and y values reverses - the y value moves from 1 to 1 (no change), and the x values move from 0.58 to 1, making the animation changes progress slower compared to the animation duration.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>To see the effect of this Bezier curve in action, change the <code>animation-timing-function</code> of the element with id of <code>red</code> to a <code>cubic-bezier</code> function with x1, y1, x2, y2 set respectively to <code>0, 0, 0.58, 1</code> as the values. This will make both elements progress through the animation similarly.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":50,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a5367417b2b2512ad7","title":"Use a CSS Linear Gradient to Create a Striped Element","challengeType":0,"videoUrl":"https://scrimba.com/c/c6bmQh2","forumTopicId":301072,"dashedName":"use-a-css-linear-gradient-to-create-a-striped-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n\n  div{\n    border-radius: 20px;\n    width: 70%;\n    height: 400px;\n    margin:  50 auto;\n    background: repeating-linear-gradient(\n      90deg,\n      yellow 0px,\n      blue 40px,\n      green 40px,\n      red 80px\n    );\n  }\n\n</style>\n\n<div></div>","error":null,"seed":"<style>\n\n  div{\n    border-radius: 20px;\n    width: 70%;\n    height: 400px;\n    margin:  50 auto;\n    background: repeating-linear-gradient(\n      90deg,\n      yellow 0px,\n      blue 40px,\n      green 40px,\n      red 80px\n    );\n  }\n\n</style>\n\n<div></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  div{\n    border-radius: 20px;\n    width: 70%;\n    height: 400px;\n    margin:  50 auto;\n    background: repeating-linear-gradient(\n      45deg,\n      yellow 0px,\n      yellow 40px,\n      black 40px,\n      black 80px\n    );\n  }\n</style>\n<div></div>","error":null,"seed":"<style>\n  div{\n    border-radius: 20px;\n    width: 70%;\n    height: 400px;\n    margin:  50 auto;\n    background: repeating-linear-gradient(\n      45deg,\n      yellow 0px,\n      yellow 40px,\n      black 40px,\n      black 80px\n    );\n  }\n</style>\n<div></div>"}]],"tests":[{"text":"<p>The angle of the <code>repeating-linear-gradient()</code> should be 45deg.</p>","testString":"assert(code.match(/background:\\s*?repeating-linear-gradient\\(\\s*?45deg/gi));"},{"text":"<p>The angle of the <code>repeating-linear-gradient()</code> should no longer be 90deg</p>","testString":"assert(!code.match(/90deg/gi));"},{"text":"<p>The color stop at 0 pixels should be <code>yellow</code>.</p>","testString":"assert(code.match(/yellow\\s+?0(px)?/gi));"},{"text":"<p>The first color stop at 40 pixels should be <code>yellow</code>.</p>","testString":"assert(code.match(/yellow\\s+?40px/gi));"},{"text":"<p>The second color stop at 40 pixels should be <code>black</code>.</p>","testString":"assert(code.match(/yellow\\s+?40px,\\s*?black\\s+?40px/gi));"},{"text":"<p>The last color stop at 80 pixels should be <code>black</code>.</p>","testString":"assert(code.match(/black\\s+?80px/gi));"}],"description":"<section id=\"description\">\n<p>The <code>repeating-linear-gradient()</code> function is very similar to <code>linear-gradient()</code> with the major difference that it repeats the specified gradient pattern. <code>repeating-linear-gradient()</code> accepts a variety of values, but for simplicity, you'll work with an angle value and color stop values in this challenge.</p>\n<p>The angle value is the direction of the gradient. Color stops are like width values that mark where a transition takes place, and are given with a percentage or a number of pixels.</p>\n<p>In the example demonstrated in the code editor, the gradient starts with the color <code>yellow</code> at 0 pixels which blends into the second color <code>blue</code> at 40 pixels away from the start. Since the next color stop is also at 40 pixels, the gradient immediately changes to the third color <code>green</code>, which itself blends into the fourth color value <code>red</code> as that is 80 pixels away from the beginning of the gradient.</p>\n<p>For this example, it helps to think about the color stops as pairs where every two colors blend together.</p>\n<pre><code class=\"language-css\">0px [yellow -- blend -- blue] 40px [green -- blend -- red] 80px\n</code></pre>\n<p>If every two color stop values are the same color, the blending isn't noticeable because it's between the same color, followed by a hard transition to the next color, so you end up with stripes.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Make stripes by changing the <code>repeating-linear-gradient()</code> to use a gradient angle of <code>45deg</code>, then set the first two color stops to <code>yellow</code>, and finally the second two color stops to <code>black</code>.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":31,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a7367417b2b2512ae0","title":"Use CSS Animation to Change the Hover State of a Button","challengeType":0,"videoUrl":"https://scrimba.com/c/cg4vZAa","forumTopicId":301073,"dashedName":"use-css-animation-to-change-the-hover-state-of-a-button","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  button {\n    border-radius: 5px;\n    color: white;\n    background-color: #0F5897;\n    padding: 5px 10px 8px 10px;\n  }\n\n  button:hover {\n    animation-name: background-color;\n    animation-duration: 500ms;\n  }\n\n\n</style>\n\n<button>Register</button>","error":null,"seed":"<style>\n  button {\n    border-radius: 5px;\n    color: white;\n    background-color: #0F5897;\n    padding: 5px 10px 8px 10px;\n  }\n\n  button:hover {\n    animation-name: background-color;\n    animation-duration: 500ms;\n  }\n\n\n</style>\n\n<button>Register</button>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  button {\n    border-radius: 5px;\n    color: white;\n    background-color: #0F5897;\n    padding: 5px 10px 8px 10px;\n  }\n\n  button:hover {\n    animation-name: background-color;\n    animation-duration: 500ms;\n  }\n\n  @keyframes background-color {\n    100% {\n      background-color: #4791d0;\n    }\n  }\n</style>\n<button>Register</button>","error":null,"seed":"<style>\n  button {\n    border-radius: 5px;\n    color: white;\n    background-color: #0F5897;\n    padding: 5px 10px 8px 10px;\n  }\n\n  button:hover {\n    animation-name: background-color;\n    animation-duration: 500ms;\n  }\n\n  @keyframes background-color {\n    100% {\n      background-color: #4791d0;\n    }\n  }\n</style>\n<button>Register</button>"}]],"tests":[{"text":"<p>The @keyframes rule should use the <code>animation-name</code> background-color.</p>","testString":"assert(code.match(/@keyframes\\s+?background-color\\s*?{/g));"},{"text":"<p>There should be one rule under <code>@keyframes</code> that changes the <code>background-color</code> to <code>#4791d0</code> at 100%.</p>","testString":"assert(code.match(/100%\\s*?{\\s*?background-color:\\s*?#4791d0;\\s*?}/gi));"}],"description":"<section id=\"description\">\n<p>You can use CSS <code>@keyframes</code> to change the color of a button in its hover state.</p>\n<p>Here's an example of changing the width of an image on hover:</p>\n<pre><code class=\"language-html\">&#x3C;style>\n  img {\n    width: 30px;\n  }\n  img:hover {\n    animation-name: width;\n    animation-duration: 500ms;\n  }\n\n  @keyframes width {\n    100% {\n      width: 40px;\n    }\n  }\n&#x3C;/style>\n\n&#x3C;img src=\"https://cdn.freecodecamp.org/curriculum/applied-visual-design/google-logo.png\" alt=\"Google's Logo\" />\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Note that <code>ms</code> stands for milliseconds, where 1000ms is equal to 1s.</p>\n<p>Use CSS <code>@keyframes</code> to change the <code>background-color</code> of the <code>button</code> element so it becomes <code>#4791d0</code> when a user hovers over it. The <code>@keyframes</code> rule should only have an entry for <code>100%</code>.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":40,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a6367417b2b2512adb","title":"Use the CSS Transform Property skewX to Skew an Element Along the X-Axis","challengeType":0,"videoUrl":"https://scrimba.com/c/cyLP8Sr","forumTopicId":301074,"dashedName":"use-the-css-transform-property-skewx-to-skew-an-element-along-the-x-axis","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  div {\n    width: 70%;\n    height: 100px;\n    margin:  50px auto;\n  }\n  #top {\n    background-color: red;\n  }\n  #bottom {\n    background-color: blue;\n\n  }\n</style>\n\n<div id=\"top\"></div>\n<div id=\"bottom\"></div>","error":null,"seed":"<style>\n  div {\n    width: 70%;\n    height: 100px;\n    margin:  50px auto;\n  }\n  #top {\n    background-color: red;\n  }\n  #bottom {\n    background-color: blue;\n\n  }\n</style>\n\n<div id=\"top\"></div>\n<div id=\"bottom\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  div {\n    width: 70%;\n    height: 100px;\n    margin:  50px auto;\n  }\n  #top {\n    background-color: red;\n  }\n  #bottom {\n    background-color: blue;\n    transform: skewX(24deg);\n  }\n</style>\n<div id=\"top\"></div>\n<div id=\"bottom\"></div>","error":null,"seed":"<style>\n  div {\n    width: 70%;\n    height: 100px;\n    margin:  50px auto;\n  }\n  #top {\n    background-color: red;\n  }\n  #bottom {\n    background-color: blue;\n    transform: skewX(24deg);\n  }\n</style>\n<div id=\"top\"></div>\n<div id=\"bottom\"></div>"}]],"tests":[{"text":"<p>The element with id <code>bottom</code> should be skewed by 24 degrees along its X-axis.</p>","testString":"assert(code.match(/#bottom\\s*?{\\s*?.*?\\s*?transform:\\s*?skewX\\(24deg\\);/g));"}],"description":"<section id=\"description\">\n<p>The next function of the <code>transform</code> property is <code>skewX()</code>, which skews the selected element along its X (horizontal) axis by a given degree.</p>\n<p>The following code skews the paragraph element by -32 degrees along the X-axis.</p>\n<pre><code class=\"language-css\">p {\n  transform: skewX(-32deg);\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Skew the element with the id of <code>bottom</code> by 24 degrees along the X-axis by using the <code>transform</code> property.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":35,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a6367417b2b2512adc","title":"Use the CSS Transform Property skewY to Skew an Element Along the Y-Axis","challengeType":0,"videoUrl":"https://scrimba.com/c/c2MZ2uB","forumTopicId":301075,"dashedName":"use-the-css-transform-property-skewy-to-skew-an-element-along-the-y-axis","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  div {\n    width: 70%;\n    height: 100px;\n    margin: 50px auto;\n  }\n  #top {\n    background-color: red;\n\n  }\n  #bottom {\n    background-color: blue;\n    transform: skewX(24deg);\n  }\n</style>\n\n<div id=\"top\"></div>\n<div id=\"bottom\"></div>","error":null,"seed":"<style>\n  div {\n    width: 70%;\n    height: 100px;\n    margin: 50px auto;\n  }\n  #top {\n    background-color: red;\n\n  }\n  #bottom {\n    background-color: blue;\n    transform: skewX(24deg);\n  }\n</style>\n\n<div id=\"top\"></div>\n<div id=\"bottom\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  div {\n    width: 70%;\n    height: 100px;\n    margin: 50px auto;\n  }\n  #top {\n    background-color: red;\n    transform: skewY(-10deg);\n  }\n  #bottom {\n    background-color: blue;\n    transform: skewX(24deg);\n  }\n</style>\n<div id=\"top\"></div>\n<div id=\"bottom\"></div>","error":null,"seed":"<style>\n  div {\n    width: 70%;\n    height: 100px;\n    margin: 50px auto;\n  }\n  #top {\n    background-color: red;\n    transform: skewY(-10deg);\n  }\n  #bottom {\n    background-color: blue;\n    transform: skewX(24deg);\n  }\n</style>\n<div id=\"top\"></div>\n<div id=\"bottom\"></div>"}]],"tests":[{"text":"<p>The element with id <code>top</code> should be skewed by -10 degrees along its Y-axis.</p>","testString":"assert(code.match(/#top\\s*?{\\s*?.*?\\s*?transform:\\s*?skewY\\(-10deg\\);/g));"}],"description":"<section id=\"description\">\n<p>Given that the <code>skewX()</code> function skews the selected element along the X-axis by a given degree, it is no surprise that the <code>skewY()</code> property skews an element along the Y (vertical) axis.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Skew the element with the id of <code>top</code> -10 degrees along the Y-axis by using the <code>transform</code> property.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":36,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a5367417b2b2512ad9","title":"Use the CSS Transform scale Property to Change the Size of an Element","challengeType":0,"videoUrl":"https://scrimba.com/c/c2MZVSg","forumTopicId":301076,"dashedName":"use-the-css-transform-scale-property-to-change-the-size-of-an-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .ball {\n    width: 40px;\n    height: 40px;\n    margin: 50 auto;\n    position: fixed;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    border-radius: 50%;\n  }\n  #ball1 {\n    left: 20%;\n  }\n  #ball2 {\n    left: 65%;\n\n  }\n\n\n</style>\n\n<div class=\"ball\" id= \"ball1\"></div>\n<div class=\"ball\" id= \"ball2\"></div>","error":null,"seed":"<style>\n  .ball {\n    width: 40px;\n    height: 40px;\n    margin: 50 auto;\n    position: fixed;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    border-radius: 50%;\n  }\n  #ball1 {\n    left: 20%;\n  }\n  #ball2 {\n    left: 65%;\n\n  }\n\n\n</style>\n\n<div class=\"ball\" id= \"ball1\"></div>\n<div class=\"ball\" id= \"ball2\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .ball {\n    width: 40px;\n    height: 40px;\n    margin: 50 auto;\n    position: fixed;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    border-radius: 50%;\n  }\n  #ball1 {\n    left: 20%;\n  }\n  #ball2 {\n    left: 65%;\n    transform: scale(1.5);\n  }\n</style>\n<div class=\"ball\" id= \"ball1\"></div>\n<div class=\"ball\" id= \"ball2\"></div>","error":null,"seed":"<style>\n  .ball {\n    width: 40px;\n    height: 40px;\n    margin: 50 auto;\n    position: fixed;\n    background: linear-gradient(\n      35deg,\n      #ccffff,\n      #ffcccc\n    );\n    border-radius: 50%;\n  }\n  #ball1 {\n    left: 20%;\n  }\n  #ball2 {\n    left: 65%;\n    transform: scale(1.5);\n  }\n</style>\n<div class=\"ball\" id= \"ball1\"></div>\n<div class=\"ball\" id= \"ball2\"></div>"}]],"tests":[{"text":"<p>The <code>transform</code> property for <code>#ball2</code> should be set to scale it to 1.5 times its size.</p>","testString":"assert(\n  code.match(\n    /#ball2\\s*?{\\s*?left:\\s*?65%;\\s*?transform:\\s*?scale\\(1\\.5\\);\\s*?}|#ball2\\s*?{\\s*?transform:\\s*?scale\\(1\\.5\\);\\s*?left:\\s*?65%;\\s*?}/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p>To change the scale of an element, CSS has the <code>transform</code> property, along with its <code>scale()</code> function. The following code example doubles the size of all the paragraph elements on the page:</p>\n<pre><code class=\"language-css\">p {\n  transform: scale(2);\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Increase the size of the element with the id of <code>ball2</code> to 1.5 times its original size.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":33,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78a5367417b2b2512ada","title":"Use the CSS Transform scale Property to Scale an Element on Hover","challengeType":0,"videoUrl":"https://scrimba.com/c/cyLPJuM","forumTopicId":301077,"dashedName":"use-the-css-transform-scale-property-to-scale-an-element-on-hover","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  div {\n    width: 70%;\n    height: 100px;\n    margin:  50px auto;\n    background: linear-gradient(\n      53deg,\n      #ccfffc,\n      #ffcccf\n    );\n  }\n\n\n\n</style>\n\n<div></div>","error":null,"seed":"<style>\n  div {\n    width: 70%;\n    height: 100px;\n    margin:  50px auto;\n    background: linear-gradient(\n      53deg,\n      #ccfffc,\n      #ffcccf\n    );\n  }\n\n\n\n</style>\n\n<div></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  div {\n    width: 70%;\n    height: 100px;\n    margin:  50px auto;\n    background: linear-gradient(\n      53deg,\n      #ccfffc,\n      #ffcccf\n    );\n  }\n  div:hover {\n    transform: scale(1.1);\n  }\n</style>\n<div></div>","error":null,"seed":"<style>\n  div {\n    width: 70%;\n    height: 100px;\n    margin:  50px auto;\n    background: linear-gradient(\n      53deg,\n      #ccfffc,\n      #ffcccf\n    );\n  }\n  div:hover {\n    transform: scale(1.1);\n  }\n</style>\n<div></div>"}]],"tests":[{"text":"<p>The size of the <code>div</code> element should scale 1.1 times when the user hovers over it.</p>","testString":"assert(code.match(/div:hover\\s*?{\\s*?transform:\\s*?scale\\(1\\.1\\);/gi));"}],"description":"<section id=\"description\">\n<p>The <code>transform</code> property has a variety of functions that let you scale, move, rotate, skew, etc., your elements. When used with pseudo-classes such as <code>:hover</code> that specify a certain state of an element, the <code>transform</code> property can easily add interactivity to your elements.</p>\n<p>Here's an example to scale the paragraph elements to 2.1 times their original size when a user hovers over them:</p>\n<pre><code class=\"language-css\">p:hover {\n  transform: scale(2.1);\n}\n</code></pre>\n<p><strong>Note:</strong> Applying a transform to a <code>div</code> element will also affect any child elements contained in the div.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add a CSS rule for the <code>hover</code> state of the <code>div</code> and use the <code>transform</code> property to scale the <code>div</code> element to 1.1 times its original size when a user hovers over it.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":34,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d781a367417b2b2512ab9","title":"Use the em Tag to Italicize Text","challengeType":0,"videoUrl":"https://scrimba.com/c/cVJRBtp","forumTopicId":301078,"dashedName":"use-the-em-tag-to-italicize-text","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>Your code should add an <code>em</code> tag to the markup.</p>","testString":"assert($('em').length == 1);"},{"text":"<p>The <code>em</code> tag should wrap around the contents of the <code>p</code> tag but not the <code>p</code> tag itself.</p>","testString":"assert($('p').children().length == 1 && $('em').children().length == 2);"}],"description":"<section id=\"description\">\n<p>To emphasize text, you can use the <code>em</code> tag. This displays text as italicized, as the browser applies the CSS of <code>font-style: italic;</code> to the element.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Wrap an <code>em</code> tag around the contents of the paragraph tag to give it emphasis.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":5,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d781b367417b2b2512aba","title":"Use the s Tag to Strikethrough Text","challengeType":0,"videoUrl":"","forumTopicId":301079,"dashedName":"use-the-s-tag-to-strikethrough-text","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4><s>Google</s> Alphabet</h4>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4><s>Google</s> Alphabet</h4>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>Your code should add one <code>s</code> tag to the markup.</p>","testString":"assert($('s').length == 1);"},{"text":"<p>A <code>s</code> tag should wrap around the <code>Google</code> text in the <code>h4</code> tag. It should not contain the word <code>Alphabet</code>.</p>","testString":"assert(\n  $('h4 > s')\n    .text()\n    .match(/Google/gi) &&\n    !$('h4 > s')\n      .text()\n      .match(/Alphabet/gi)\n);"},{"text":"<p>You should include the word <code>Alphabet</code> in the <code>h4</code> tag, without strikethrough formatting.</p>","testString":"assert(\n  $('h4')\n    .html()\n    .match(/Alphabet/gi)\n);"}],"description":"<section id=\"description\">\n<p>To strikethrough text, which is when a horizontal line cuts across the characters, you can use the <code>s</code> tag. It shows that a section of text is no longer valid. With the <code>s</code> tag, the browser applies the CSS of <code>text-decoration: line-through;</code> to the element.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Wrap the <code>s</code> tag around <code>Google</code> inside the <code>h4</code> tag and then add the word <code>Alphabet</code> beside it without the strikethrough formatting.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":6,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d781a367417b2b2512ab7","title":"Use the strong Tag to Make Text Bold","challengeType":0,"videoUrl":"https://scrimba.com/c/ceJNBSb","forumTopicId":301080,"dashedName":"use-the-strong-tag-to-make-text-bold","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at <strong>Stanford University</strong>.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at <strong>Stanford University</strong>.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>Your code should add one <code>strong</code> tag to the markup.</p>","testString":"assert($('strong').length == 1);"},{"text":"<p>The <code>strong</code> tag should be inside the <code>p</code> tag.</p>","testString":"assert($('p').children('strong').length == 1);"},{"text":"<p>The <code>strong</code> tag should wrap around the words <code>Stanford University</code>.</p>","testString":"assert(\n  $('strong')\n    .text()\n    .match(/^Stanford University\\.?$/gi)\n);"}],"description":"<section id=\"description\">\n<p>To make text bold, you can use the <code>strong</code> tag. This is often used to draw attention to text and symbolize that it is important. With the <code>strong</code> tag, the browser applies the CSS of <code>font-weight: bold;</code> to the element.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Wrap a <code>strong</code> tag around the text <code>Stanford University</code> inside the <code>p</code> tag (do not include the period).</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":3,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d781c367417b2b2512ac0","title":"Use the text-transform Property to Make Text Uppercase","challengeType":0,"videoUrl":"https://scrimba.com/c/cvVZQSP","forumTopicId":301081,"dashedName":"use-the-text-transform-property-to-make-text-uppercase","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n    opacity: 0.7;\n  }\n  #thumbnail {\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n    opacity: 0.7;\n  }\n  #thumbnail {\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n    text-transform: uppercase;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n    opacity: 0.7;\n  }\n  #thumbnail {\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    background-color: rgba(45, 45, 45, 0.1);\n    padding: 10px;\n    font-size: 27px;\n    text-transform: uppercase;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n    opacity: 0.7;\n  }\n  #thumbnail {\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\" id=\"thumbnail\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Alphabet</h4>\n      <hr>\n      <p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>The <code>h4</code> text should be <code>uppercase</code>.</p>","testString":"assert($('h4').css('text-transform') === 'uppercase');"},{"text":"<p>The original text of the h4 should not be changed.</p>","testString":"assert($('h4').text() !== $('h4').text().toUpperCase());"}],"description":"<section id=\"description\">\n<p>The <code>text-transform</code> property in CSS is used to change the appearance of text. It's a convenient way to make sure text on a webpage appears consistently, without having to change the text content of the actual HTML elements.</p>\n<p>The following table shows how the different <code>text-transform</code>values change the example text \"Transform me\".</p>\n<table class='table table-striped'><thead><tr><th>Value</th><th>Result</th></tr></thead><tbody><tr><td><code>lowercase</code></td><td>\"transform me\"</td></tr><tr><td><code>uppercase</code></td><td>\"TRANSFORM ME\"</td></tr><tr><td><code>capitalize</code></td><td>\"Transform Me\"</td></tr><tr><td><code>initial</code></td><td>Use the default value</td></tr><tr><td><code>inherit</code></td><td>Use the <code>text-transform</code> value from the parent element</td></tr><tr><td><code>none</code></td><td><strong>Default:</strong> Use the original text</td></tr></tbody></table>\n</section>","instructions":"<section id=\"instructions\">\n<p>Transform the text of the <code>h4</code> to be uppercase using the <code>text-transform</code> property.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":12,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d781a367417b2b2512ab8","title":"Use the u Tag to Underline Text","challengeType":0,"videoUrl":"https://scrimba.com/c/cN6aQCL","forumTopicId":301082,"dashedName":"use-the-u-tag-to-underline-text","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at <strong>Stanford University</strong>.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at <strong>Stanford University</strong>.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>","error":null,"seed":"<style>\n  h4 {\n    text-align: center;\n    height: 25px;\n  }\n  p {\n    text-align: justify;\n  }\n  .links {\n    text-align: left;\n    color: black;\n  }\n  .fullCard {\n    width: 245px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 5px;\n    padding: 4px;\n  }\n  .cardContent {\n    padding: 10px;\n  }\n  .cardText {\n    margin-bottom: 30px;\n  }\n</style>\n<div class=\"fullCard\">\n  <div class=\"cardContent\">\n    <div class=\"cardText\">\n      <h4>Google</h4>\n      <p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p>\n    </div>\n    <div class=\"cardLinks\">\n      <a href=\"https://en.wikipedia.org/wiki/Larry_Page\" target=\"_blank\" class=\"links\">Larry Page</a><br><br>\n      <a href=\"https://en.wikipedia.org/wiki/Sergey_Brin\" target=\"_blank\" class=\"links\">Sergey Brin</a>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>Your code should add a <code>u</code> tag to the markup.</p>","testString":"assert($('u').length === 1);"},{"text":"<p>The <code>u</code> tag should wrap around the text <code>Ph.D. students</code>.</p>","testString":"assert($('u').text() === 'Ph.D. students');"}],"description":"<section id=\"description\">\n<p>To underline text, you can use the <code>u</code> tag. This is often used to signify that a section of text is important, or something to remember. With the <code>u</code> tag, the browser applies the CSS of <code>text-decoration: underline;</code> to the element.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Wrap the <code>u</code> tag only around the text <code>Ph.D. students</code>.</p>\n<p><strong>Note:</strong> Try to avoid using the <code>u</code> tag when it could be confused for a link. Anchor tags also have a default underlined formatting.</p>\n</section>","block":"applied-visual-design","hasEditableBoundaries":false,"order":2,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":4,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false}]},"basic-css":{"meta":{"name":"Basic CSS","isUpcomingChange":false,"dashedName":"basic-css","order":1,"time":"5 hours","template":"","required":[],"superBlock":"responsive-web-design","challengeOrder":[["bad87fee1348bd9aedf08803","Change the Color of Text"],["bad87fee1348bd9aedf08805","Use CSS Selectors to Style Elements"],["bad87fee1348bd9aecf08806","Use a CSS Class to Style an Element"],["bad87fee1348bd9aefe08806","Style Multiple Elements with a CSS Class"],["bad87fee1348bd9aedf08806","Change the Font Size of an Element"],["bad87fee1348bd9aede08807","Set the Font Family of an Element"],["bad87fee1348bd9aedf08807","Import a Google Font"],["bad87fee1348bd9aedf08808","Specify How Fonts Should Degrade"],["bad87fee1348bd9acdf08812","Size Your Images"],["bad87fee1348bd9bedf08813","Add Borders Around Your Elements"],["bad87fee1348bd9aedf08814","Add Rounded Corners with border-radius"],["bad87fee1348bd9aedf08815","Make Circular Images with a border-radius"],["bad87fed1348bd9aede07836","Give a Background Color to a div Element"],["bad87eee1348bd9aede07836","Set the id of an Element"],["bad87dee1348bd9aede07836","Use an id Attribute to Style an Element"],["bad88fee1348bd9aedf08825","Adjust the Padding of an Element"],["bad87fee1348bd9aedf08822","Adjust the Margin of an Element"],["bad87fee1348bd9aedf08823","Add a Negative Margin to an Element"],["bad87fee1348bd9aedf08824","Add Different Padding to Each Side of an Element"],["bad87fee1248bd9aedf08824","Add Different Margins to Each Side of an Element"],["bad87fee1348bd9aedf08826","Use Clockwise Notation to Specify the Padding of an Element"],["bad87fee1348bd9afdf08726","Use Clockwise Notation to Specify the Margin of an Element"],["58c383d33e2e3259241f3076","Use Attribute Selectors to Style Elements"],["bad82fee1322bd9aedf08721","Understand Absolute versus Relative Units"],["bad87fee1348bd9aedf08736","Style the HTML Body Element"],["bad87fee1348bd9aedf08746","Inherit Styles from the Body Element"],["bad87fee1348bd9aedf08756","Prioritize One Style Over Another"],["bad87fee1348bd9aedf04756","Override Styles in Subsequent CSS"],["bad87fee1348bd8aedf06756","Override Class Declarations by Styling ID Attributes"],["bad87fee1348bd9aedf06756","Override Class Declarations with Inline Styles"],["bad87fee1348bd9aedf07756","Override All Other Styles by using Important"],["bad87fee1348bd9aedf08726","Use Hex Code for Specific Colors"],["bad87fee1348bd9aedf08721","Use Hex Code to Mix Colors"],["bad87fee1348bd9aedf08719","Use Abbreviated Hex Code"],["bad87fee1348bd9aede08718","Use RGB values to Color Elements"],["bad82fee1348bd9aedf08721","Use RGB to Mix Colors"],["5a9d725e424fe3d0e10cad10","Use CSS Variables to change several elements at once"],["5a9d726c424fe3d0e10cad11","Create a custom CSS Variable"],["5a9d727a424fe3d0e10cad12","Use a custom CSS Variable"],["5a9d7286424fe3d0e10cad13","Attach a Fallback value to a CSS Variable"],["5b7d72c338cd7e35b63f3e14","Improve Compatibility with Browser Fallbacks"],["5a9d7295424fe3d0e10cad14","Inherit CSS Variables"],["5a9d72a1424fe3d0e10cad15","Change a variable for a specific area"],["5a9d72ad424fe3d0e10cad16","Use a media query to change a variable"]]},"challenges":[{"id":"bad87fee1348bd9aedf08823","title":"Add a Negative Margin to an Element","challengeType":0,"videoUrl":"https://scrimba.com/c/cnpyGs3","forumTopicId":16166,"dashedName":"add-a-negative-margin-to-an-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n    margin: -15px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n    margin: 20px;\n  }\n</style>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>","error":null,"seed":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n    margin: -15px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n    margin: 20px;\n  }\n</style>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n    margin: -15px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n    margin: 20px;\n    margin-top: -15px;\n  }\n</style>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>","error":null,"seed":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n    margin: -15px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n    margin: 20px;\n    margin-top: -15px;\n  }\n</style>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"}]],"tests":[{"text":"<p>Your <code>blue-box</code> class should give elements <code>-15px</code> of <code>margin</code>.</p>","testString":"assert($('.blue-box').css('margin-top') === '-15px');"}],"description":"<section id=\"description\">\n<p>An element's <code>margin</code> controls the amount of space between an element's <code>border</code> and surrounding elements.</p>\n<p>If you set an element's <code>margin</code> to a negative value, the element will grow larger.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Try to set the <code>margin</code> to a negative value like the one for the red box.</p>\n<p>Change the <code>margin</code> of the blue box to <code>-15px</code>, so it fills the entire horizontal width of the yellow box around it.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":17,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9bedf08813","title":"Add Borders Around Your Elements","challengeType":0,"videoUrl":"https://scrimba.com/c/c2MvnHZ","forumTopicId":16630,"dashedName":"add-borders-around-your-elements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .thick-green-border {\n    border-width: 10px;\n    border-color: green;\n    border-style: solid;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .thick-green-border {\n    border-width: 10px;\n    border-color: green;\n    border-style: solid;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>Your <code>img</code> element should have the class <code>smaller-image</code>.</p>","testString":"assert($('img').hasClass('smaller-image'));"},{"text":"<p>Your <code>img</code> element should have the class <code>thick-green-border</code>.</p>","testString":"assert($('img').hasClass('thick-green-border'));"},{"text":"<p>Your image should have a border width of <code>10px</code>.</p>","testString":"assert(\n  $('img').hasClass('thick-green-border') &&\n    parseInt($('img').css('border-top-width'), 10) >= 8 &&\n    parseInt($('img').css('border-top-width'), 10) <= 12\n);"},{"text":"<p>Your image should have a border style of <code>solid</code>.</p>","testString":"assert($('img').css('border-right-style') === 'solid');"},{"text":"<p>The border around your <code>img</code> element should be green.</p>","testString":"assert($('img').css('border-left-color') === 'rgb(0, 128, 0)');"}],"description":"<section id=\"description\">\n<p>CSS borders have properties like <code>style</code>, <code>color</code> and <code>width</code>.</p>\n<p>For example, if we wanted to create a red, 5 pixel border around an HTML element, we could use this class:</p>\n<pre><code class=\"language-html\">&#x3C;style>\n  .thin-red-border {\n    border-color: red;\n    border-width: 5px;\n    border-style: solid;\n  }\n&#x3C;/style>\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create a class called <code>thick-green-border</code>. This class should add a 10px, solid, green border around an HTML element. Apply the class to your cat photo.</p>\n<p>Remember that you can apply multiple classes to an element using its <code>class</code> attribute, by separating each class name with a space. For example:</p>\n<pre><code class=\"language-html\">&#x3C;img class=\"class1 class2\">\n</code></pre>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":9,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1248bd9aedf08824","title":"Add Different Margins to Each Side of an Element","challengeType":0,"videoUrl":"https://scrimba.com/c/cg4RWh4","forumTopicId":16633,"dashedName":"add-different-margins-to-each-side-of-an-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    margin-top: 40px;\n    margin-right: 20px;\n    margin-bottom: 20px;\n    margin-left: 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>","error":null,"seed":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    margin-top: 40px;\n    margin-right: 20px;\n    margin-bottom: 20px;\n    margin-left: 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    margin-top: 40px;\n    margin-right: 20px;\n    margin-bottom: 20px;\n    margin-left: 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    margin-top: 40px;\n    margin-right: 20px;\n    margin-bottom: 20px;\n    margin-left: 40px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>","error":null,"seed":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    margin-top: 40px;\n    margin-right: 20px;\n    margin-bottom: 20px;\n    margin-left: 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    margin-top: 40px;\n    margin-right: 20px;\n    margin-bottom: 20px;\n    margin-left: 40px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"}]],"tests":[{"text":"<p>Your <code>blue-box</code> class should give the top of elements <code>40px</code> of <code>margin</code>.</p>","testString":"assert($('.blue-box').css('margin-top') === '40px');"},{"text":"<p>Your <code>blue-box</code> class should give the right of elements <code>20px</code> of <code>margin</code>.</p>","testString":"assert($('.blue-box').css('margin-right') === '20px');"},{"text":"<p>Your <code>blue-box</code> class should give the bottom of elements <code>20px</code> of <code>margin</code>.</p>","testString":"assert($('.blue-box').css('margin-bottom') === '20px');"},{"text":"<p>Your <code>blue-box</code> class should give the left of elements <code>40px</code> of <code>margin</code>.</p>","testString":"assert($('.blue-box').css('margin-left') === '40px');"}],"description":"<section id=\"description\">\n<p>Sometimes you will want to customize an element so that it has a different <code>margin</code> on each of its sides.</p>\n<p>CSS allows you to control the <code>margin</code> of all four individual sides of an element with the <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, and <code>margin-left</code> properties.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Give the blue box a <code>margin</code> of <code>40px</code> on its top and left side, but only <code>20px</code> on its bottom and right side.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":19,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08824","title":"Add Different Padding to Each Side of an Element","challengeType":0,"videoUrl":"https://scrimba.com/c/cB7mwUw","forumTopicId":16634,"dashedName":"add-different-padding-to-each-side-of-an-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding-top: 40px;\n    padding-right: 20px;\n    padding-bottom: 20px;\n    padding-left: 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>","error":null,"seed":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding-top: 40px;\n    padding-right: 20px;\n    padding-bottom: 20px;\n    padding-left: 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding-top: 40px;\n    padding-right: 20px;\n    padding-bottom: 20px;\n    padding-left: 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding-top: 40px;\n    padding-right: 20px;\n    padding-bottom: 20px;\n    padding-left: 40px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>","error":null,"seed":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding-top: 40px;\n    padding-right: 20px;\n    padding-bottom: 20px;\n    padding-left: 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding-top: 40px;\n    padding-right: 20px;\n    padding-bottom: 20px;\n    padding-left: 40px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"}]],"tests":[{"text":"<p>Your <code>blue-box</code> class should give the top of the elements <code>40px</code> of <code>padding</code>.</p>","testString":"assert($('.blue-box').css('padding-top') === '40px');"},{"text":"<p>Your <code>blue-box</code> class should give the right of the elements <code>20px</code> of <code>padding</code>.</p>","testString":"assert($('.blue-box').css('padding-right') === '20px');"},{"text":"<p>Your <code>blue-box</code> class should give the bottom of the elements <code>20px</code> of <code>padding</code>.</p>","testString":"assert($('.blue-box').css('padding-bottom') === '20px');"},{"text":"<p>Your <code>blue-box</code> class should give the left of the elements <code>40px</code> of <code>padding</code>.</p>","testString":"assert($('.blue-box').css('padding-left') === '40px');"}],"description":"<section id=\"description\">\n<p>Sometimes you will want to customize an element so that it has different amounts of <code>padding</code> on each of its sides.</p>\n<p>CSS allows you to control the <code>padding</code> of all four individual sides of an element with the <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, and <code>padding-left</code> properties.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Give the blue box a <code>padding</code> of <code>40px</code> on its top and left side, but only <code>20px</code> on its bottom and right side.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":18,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08814","title":"Add Rounded Corners with border-radius","challengeType":0,"videoUrl":"https://scrimba.com/c/cbZm2hg","forumTopicId":16649,"dashedName":"add-rounded-corners-with-border-radius","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n  }\n\n  .smaller-image {\n    width: 100px;\n    border-radius: 10px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n  }\n\n  .smaller-image {\n    width: 100px;\n    border-radius: 10px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>Your image element should have the class <code>thick-green-border</code>.</p>","testString":"assert($('img').hasClass('thick-green-border'));"},{"text":"<p>Your image should have a border radius of <code>10px</code>.</p>","testString":"assert(\n  $('img').css('border-top-left-radius') === '10px' &&\n    $('img').css('border-top-right-radius') === '10px' &&\n    $('img').css('border-bottom-left-radius') === '10px' &&\n    $('img').css('border-bottom-right-radius') === '10px'\n);"}],"description":"<section id=\"description\">\n<p>Your cat photo currently has sharp corners. We can round out those corners with a CSS property called <code>border-radius</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>You can specify a <code>border-radius</code> with pixels. Give your cat photo a <code>border-radius</code> of <code>10px</code>.</p>\n<p><strong>Note:</strong> This challenge allows for multiple possible solutions. For example, you may add <code>border-radius</code> to either the <code>.thick-green-border</code> class or the <code>.smaller-image</code> class.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":10,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08822","title":"Adjust the Margin of an Element","challengeType":0,"videoUrl":"https://scrimba.com/c/cVJarHW","forumTopicId":16654,"dashedName":"adjust-the-margin-of-an-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n    margin: 20px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n    margin: 10px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>","error":null,"seed":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n    margin: 20px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n    margin: 10px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n    margin: 20px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n    margin: 20px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>","error":null,"seed":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n    margin: 20px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n    margin: 20px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"}]],"tests":[{"text":"<p>Your <code>blue-box</code> class should give elements <code>20px</code> of <code>margin</code>.</p>","testString":"assert($('.blue-box').css('margin-top') === '20px');"}],"description":"<section id=\"description\">\n<p>An element's <code>margin</code> controls the amount of space between an element's <code>border</code> and surrounding elements.</p>\n<p>Here, we can see that the blue box and the red box are nested within the yellow box. Note that the red box has a bigger <code>margin</code> than the blue box, making it appear smaller.</p>\n<p>When you increase the blue box's <code>margin</code>, it will increase the distance between its border and surrounding elements.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the <code>margin</code> of the blue box to match that of the red box.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":16,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad88fee1348bd9aedf08825","title":"Adjust the Padding of an Element","challengeType":0,"videoUrl":"https://scrimba.com/c/cED8ZC2","forumTopicId":301083,"dashedName":"adjust-the-padding-of-an-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 10px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>","error":null,"seed":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 10px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>","error":null,"seed":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"}]],"tests":[{"text":"<p>Your <code>blue-box</code> class should give elements <code>20px</code> of <code>padding</code>.</p>","testString":"assert($('.blue-box').css('padding-top') === '20px');"}],"description":"<section id=\"description\">\n<p>Now let's put our Cat Photo App away for a little while and learn more about styling HTML.</p>\n<p>You may have already noticed this, but all HTML elements are essentially little rectangles.</p>\n<p>Three important properties control the space that surrounds each HTML element: <code>padding</code>, <code>border</code>, and <code>margin</code>.</p>\n<p>An element's <code>padding</code> controls the amount of space between the element's content and its <code>border</code>.</p>\n<p>Here, we can see that the blue box and the red box are nested within the yellow box. Note that the red box has more <code>padding</code> than the blue box.</p>\n<p>When you increase the blue box's <code>padding</code>, it will increase the distance (<code>padding</code>) between the text and the border around it.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the <code>padding</code> of your blue box to match that of your red box.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":15,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a9d7286424fe3d0e10cad13","title":"Attach a Fallback value to a CSS Variable","challengeType":0,"videoUrl":"https://scrimba.com/c/c6bDNfp","forumTopicId":301084,"dashedName":"attach-a-fallback-value-to-a-css-variable","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .penguin {\n    --penguin-skin: black;\n    --penguin-belly: gray;\n    --penguin-beak: yellow;\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n\n    /* Change code below this line */\n    background: var(--pengiun-skin);\n    /* Change code above this line */\n\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n\n    /* Change code below this line */\n    background: var(--pengiun-skin);\n    /* Change code above this line */\n\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: var(--penguin-skin, black);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, black);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, white);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  body {\n    background: #c6faf1;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>","error":null,"seed":"<style>\n  .penguin {\n    --penguin-skin: black;\n    --penguin-belly: gray;\n    --penguin-beak: yellow;\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n\n    /* Change code below this line */\n    background: var(--pengiun-skin);\n    /* Change code above this line */\n\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n\n    /* Change code below this line */\n    background: var(--pengiun-skin);\n    /* Change code above this line */\n\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: var(--penguin-skin, black);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, black);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, white);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  body {\n    background: #c6faf1;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .penguin-top {\n    background: var(--pengiun-skin, black);\n  }\n  .penguin-bottom {\n    background: var(--pengiun-skin, black);\n  }\n</style>","error":null,"seed":"<style>\n  .penguin-top {\n    background: var(--pengiun-skin, black);\n  }\n  .penguin-bottom {\n    background: var(--pengiun-skin, black);\n  }\n</style>"}]],"tests":[{"text":"<p>The fallback value of <code>black</code> should be used in the <code>background</code> property of the <code>penguin-top</code> class.</p>","testString":"assert(\n  code.match(\n    /.penguin-top\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\(\\s*?--pengiun-skin\\s*?,\\s*?black\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.penguin-bottom\\s{/gi\n  )\n);"},{"text":"<p>The fallback value of <code>black</code> should be used in <code>background</code> property of the <code>penguin-bottom</code> class.</p>","testString":"assert(\n  code.match(\n    /.penguin-bottom\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\(\\s*?--pengiun-skin\\s*?,\\s*?black\\s*?\\)\\s*?;[\\s\\S]*}/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p>When using your variable as a CSS property value, you can attach a fallback value that your browser will revert to if the given variable is invalid.</p>\n<p><strong>Note:</strong> This fallback is not used to increase browser compatibility, and it will not work on IE browsers. Rather, it is used so that the browser has a color to display if it cannot find your variable.</p>\n<p>Here's how you do it:</p>\n<pre><code class=\"language-css\">background: var(--penguin-skin, black);\n</code></pre>\n<p>This will set background to <code>black</code> if your variable wasn't set. Note that this can be useful for debugging.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>It looks like there is a problem with the variables supplied to the <code>.penguin-top</code> and <code>.penguin-bottom</code> classes. Rather than fix the typo, add a fallback value of <code>black</code> to the <code>background</code> property of the <code>.penguin-top</code> and <code>.penguin-bottom</code> classes.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":39,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a9d72a1424fe3d0e10cad15","title":"Change a variable for a specific area","challengeType":0,"videoUrl":"https://scrimba.com/c/cdRwbuW","forumTopicId":301085,"dashedName":"change-a-variable-for-a-specific-area","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  :root {\n    --penguin-skin: gray;\n    --penguin-belly: pink;\n    --penguin-beak: orange;\n  }\n\n  body {\n    background: var(--penguin-belly, #c6faf1);\n  }\n\n  .penguin {\n    /* Only change code below this line */\n\n    /* Only change code above this line */\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, pink);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, pink);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, pink);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>","error":null,"seed":"<style>\n  :root {\n    --penguin-skin: gray;\n    --penguin-belly: pink;\n    --penguin-beak: orange;\n  }\n\n  body {\n    background: var(--penguin-belly, #c6faf1);\n  }\n\n  .penguin {\n    /* Only change code below this line */\n\n    /* Only change code above this line */\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, pink);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, pink);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, pink);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n.penguin {--penguin-belly: white;}\n</style>","error":null,"seed":"<style>\n.penguin {--penguin-belly: white;}\n</style>"}]],"tests":[{"text":"<p>The <code>penguin</code> class should reassign the <code>--penguin-belly</code> variable to <code>white</code>.</p>","testString":"assert(\n  code.match(/\\.penguin\\s*?{[\\s\\S]*--penguin-belly\\s*?:\\s*?white\\s*?;[\\s\\S]*}/gi)\n);"},{"text":"<p>The <code>penguin</code> class should not contain the <code>background-color</code> property.</p>","testString":"assert(\n  code.match(/^((?!background-color\\s*?:\\s*?)[\\s\\S])*$/g)\n);"}],"description":"<section id=\"description\">\n<p>When you create your variables in <code>:root</code> they will set the value of that variable for the whole page.</p>\n<p>You can then overwrite these variables by setting them again within a specific selector.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the value of <code>--penguin-belly</code> to <code>white</code> in the <code>penguin</code> class.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":42,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08803","title":"Change the Color of Text","challengeType":0,"videoUrl":"https://scrimba.com/c/cRkVmSm","forumTopicId":16775,"dashedName":"change-the-color-of-text","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2 style=\"color: red;\">CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<h2 style=\"color: red;\">CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>Your <code>h2</code> element should have a <code>style</code> declaration.</p>","testString":"assert($('h2').attr('style'));"},{"text":"<p>Your <code>h2</code> element should have color set to <code>red</code>.</p>","testString":"assert($('h2')[0].style.color === 'red');"},{"text":"<p>Your <code>style</code> declaration should end with a <code>;</code> .</p>","testString":"assert($('h2').attr('style') && $('h2').attr('style').endsWith(';'));"}],"description":"<section id=\"description\">\n<p>Now let's change the color of some of our text.</p>\n<p>We can do this by changing the <code>style</code> of your <code>h2</code> element.</p>\n<p>The property that is responsible for the color of an element's text is the <code>color</code> style property.</p>\n<p>Here's how you would set your <code>h2</code> element's text color to blue:</p>\n<pre><code class=\"language-html\">&#x3C;h2 style=\"color: blue;\">CatPhotoApp&#x3C;/h2>\n</code></pre>\n<p>Note that it is a good practice to end inline <code>style</code> declarations with a <code>;</code> .</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change your <code>h2</code> element's style so that its text color is red.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":0,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08806","title":"Change the Font Size of an Element","challengeType":0,"videoUrl":"https://scrimba.com/c/c3bvDc8","forumTopicId":16777,"dashedName":"change-the-font-size-of-an-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .red-text {\n    color: red;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<style>\n  .red-text {\n    color: red;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .red-text {\n    color: red;\n  }\n  p {\n    font-size: 16px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<style>\n  .red-text {\n    color: red;\n  }\n  p {\n    font-size: 16px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>Between the <code>style</code> tags, give the <code>p</code> elements <code>font-size</code> of <code>16px</code>. Browser and Text zoom should be at 100%.</p>","testString":"assert(code.match(/p\\s*{\\s*font-size\\s*:\\s*16\\s*px\\s*;\\s*}/i));"}],"description":"<section id=\"description\">\n<p>Font size is controlled by the <code>font-size</code> CSS property, like this:</p>\n<pre><code class=\"language-css\">h1 {\n  font-size: 30px;\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Inside the same <code>&#x3C;style></code> tag that contains your <code>red-text</code> class, create an entry for <code>p</code> elements and set the <code>font-size</code> to 16 pixels (<code>16px</code>).</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":4,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a9d726c424fe3d0e10cad11","title":"Create a custom CSS Variable","challengeType":0,"videoUrl":"https://scrimba.com/c/cQd27Hr","forumTopicId":301086,"dashedName":"create-a-custom-css-variable","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .penguin {\n    /* Only change code below this line */\n\n    /* Only change code above this line */\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: black;\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: black;\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: black;\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: black;\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: white;\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: white;\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: white;\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: orange;\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: orange;\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: orange;\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: orange;\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  body {\n    background:#c6faf1;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>","error":null,"seed":"<style>\n  .penguin {\n    /* Only change code below this line */\n\n    /* Only change code above this line */\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: black;\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: black;\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: black;\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: black;\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: white;\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: white;\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: white;\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: orange;\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: orange;\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: orange;\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: orange;\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  body {\n    background:#c6faf1;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.penguin {--penguin-skin: gray;}</style>","error":null,"seed":"<style>.penguin {--penguin-skin: gray;}</style>"}]],"tests":[{"text":"<p><code>penguin</code> class should declare the <code>--penguin-skin</code> variable and assign it to <code>gray</code>.</p>","testString":"assert(\n  code.match(/\\.penguin\\s*\\{[^{}]*?--penguin-skin\\s*:\\s*gr[ae]y\\s*;[^{}]*?\\}/gi)\n);"}],"description":"<section id=\"description\">\n<p>To create a CSS variable, you just need to give it a name with two hyphens in front of it and assign it a value like this:</p>\n<pre><code class=\"language-css\">--penguin-skin: gray;\n</code></pre>\n<p>This will create a variable named <code>--penguin-skin</code> and assign it the value of <code>gray</code>. Now you can use that variable elsewhere in your CSS to change the value of other properties to gray.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>In the <code>penguin</code> class, create a variable name <code>--penguin-skin</code> and give it a value of <code>gray</code>.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":37,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fed1348bd9aede07836","title":"Give a Background Color to a div Element","challengeType":0,"videoUrl":"https://scrimba.com/c/cdRKMCk","forumTopicId":18190,"dashedName":"give-a-background-color-to-a-div-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>Your<code>div</code> element should have the class <code>silver-background</code>.</p>","testString":"assert($('div').hasClass('silver-background'));"},{"text":"<p>Your <code>div</code> element should have a silver background.</p>","testString":"assert($('div').css('background-color') === 'rgb(192, 192, 192)');"},{"text":"<p>A class named <code>silver-background</code> should be defined within the <code>style</code> element and the value of <code>silver</code> should be assigned to the <code>background-color</code> property.</p>","testString":"assert(code.match(/\\.silver-background\\s*{\\s*background-color\\s*:\\s*silver\\s*;?\\s*}/));"}],"description":"<section id=\"description\">\n<p>You can set an element's background color with the <code>background-color</code> property.</p>\n<p>For example, if you wanted an element's background color to be <code>green</code>, you'd put this within your <code>style</code> element:</p>\n<pre><code class=\"language-css\">.green-background {\n  background-color: green;\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create a class called <code>silver-background</code> with the <code>background-color</code> of <code>silver</code>. Assign this class to your <code>div</code> element.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":12,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08807","title":"Import a Google Font","challengeType":0,"videoUrl":"https://scrimba.com/c/cM9MRsJ","forumTopicId":18200,"dashedName":"import-a-google-font","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .red-text {\n    color: red;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<style>\n  .red-text {\n    color: red;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  h2 {\n    font-family: Lobster;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  h2 {\n    font-family: Lobster;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>You should import the <code>Lobster</code> font.</p>","testString":"assert($('link[href*=\"googleapis\" i]').length);"},{"text":"<p>Your <code>h2</code> element should use the font <code>Lobster</code>.</p>","testString":"assert(\n  $('h2')\n    .css('font-family')\n    .match(/lobster/i)\n);"},{"text":"<p>You should only use an <code>h2</code> element selector to change the font.</p>","testString":"assert(\n  /\\s*[^\\.]h2\\s*\\{\\s*font-family\\s*:\\s*('|\"|)Lobster\\1\\s*(,\\s*('|\"|)[a-z -]+\\3\\s*)?(;\\s*\\}|\\})/gi.test(\n    code\n  )\n);"},{"text":"<p>Your <code>p</code> element should still use the font <code>monospace</code>.</p>","testString":"assert(\n  $('p')\n    .css('font-family')\n    .match(/monospace/i)\n);"}],"description":"<section id=\"description\">\n<p>In addition to specifying common fonts that are found on most operating systems, we can also specify non-standard, custom web fonts for use on our website. There are many sources for web fonts on the Internet. For this example we will focus on the Google Fonts library.</p>\n<p>Google Fonts is a free library of web fonts that you can use in your CSS by referencing the font's URL.</p>\n<p>So, let's go ahead and import and apply a Google font (note that if Google is blocked in your country, you will need to skip this challenge).</p>\n<p>To import a Google Font, you can copy the font's URL from the Google Fonts library and then paste it in your HTML. For this challenge, we'll import the <code>Lobster</code> font. To do this, copy the following code snippet and paste it into the top of your code editor (before the opening <code>style</code> element):</p>\n<pre><code class=\"language-html\">&#x3C;link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n</code></pre>\n<p>Now you can use the <code>Lobster</code> font in your CSS by using <code>Lobster</code> as the FAMILY_NAME as in the following example:</p>\n<pre><code class=\"language-css\">font-family: FAMILY_NAME, GENERIC_NAME;\n</code></pre>\n<p>The GENERIC_NAME is optional, and is a fallback font in case the other specified font is not available. This is covered in the next challenge.</p>\n<p>Family names are case-sensitive and need to be wrapped in quotes if there is a space in the name. For example, you need quotes to use the <code>\"Open Sans\"</code> font, but not to use the <code>Lobster</code> font.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Import the <code>Lobster</code> font to your web page. Then, use an element selector to set <code>Lobster</code> as the <code>font-family</code> for your <code>h2</code> element.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":6,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5b7d72c338cd7e35b63f3e14","title":"Improve Compatibility with Browser Fallbacks","challengeType":0,"videoUrl":"","forumTopicId":301087,"dashedName":"improve-compatibility-with-browser-fallbacks","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  :root {\n    --red-color: red;\n  }\n  .red-box {\n\n    background: var(--red-color);\n    height: 200px;\n    width:200px;\n  }\n</style>\n<div class=\"red-box\"></div>","error":null,"seed":"<style>\n  :root {\n    --red-color: red;\n  }\n  .red-box {\n\n    background: var(--red-color);\n    height: 200px;\n    width:200px;\n  }\n</style>\n<div class=\"red-box\"></div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  :root {\n    --red-color: red;\n  }\n  .red-box {\n    background: red;\n    background: var(--red-color);\n    height: 200px;\n    width:200px;\n  }\n</style>\n<div class=\"red-box\"></div>","error":null,"seed":"<style>\n  :root {\n    --red-color: red;\n  }\n  .red-box {\n    background: red;\n    background: var(--red-color);\n    height: 200px;\n    width:200px;\n  }\n</style>\n<div class=\"red-box\"></div>"}]],"tests":[{"text":"<p>Your <code>.red-box</code> rule should include a fallback with the <code>background</code> set to <code>red</code> immediately before the existing <code>background</code> declaration.</p>","testString":"assert(\n  code\n    .replace(/\\s/g, '')\n    .match(\n      /\\.red-box{background:(red|#ff0000|#f00|rgb\\(255,0,0\\)|rgb\\(100%,0%,0%\\)|hsl\\(0,100%,50%\\));background:var\\(--red-color\\);height:200px;width:200px;}/gi\n    )\n);"}],"description":"<section id=\"description\">\n<p>When working with CSS you will likely run into browser compatibility issues at some point. This is why it's important to provide browser fallbacks to avoid potential problems.</p>\n<p>When your browser parses the CSS of a webpage, it ignores any properties that it doesn't recognize or support. For example, if you use a CSS variable to assign a background color on a site, Internet Explorer will ignore the background color because it does not support CSS variables. In that case, the browser will use whatever value it has for that property. If it can't find any other value set for that property, it will revert to the default value, which is typically not ideal.</p>\n<p>This means that if you do want to provide a browser fallback, it's as easy as providing another more widely supported value immediately before your declaration. That way an older browser will have something to fall back on, while a newer browser will just interpret whatever declaration comes later in the cascade.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>It looks like a variable is being used to set the background color of the <code>.red-box</code> class. Let's improve our browser compatibility by adding another <code>background</code> declaration right before the existing declaration and set its value to <code>red</code>.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":40,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a9d7295424fe3d0e10cad14","title":"Inherit CSS Variables","challengeType":0,"videoUrl":"https://scrimba.com/c/cyLZZhZ","forumTopicId":301088,"dashedName":"inherit-css-variables","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  :root {\n    /* Only change code below this line */\n\n    /* Only change code above this line */\n  }\n\n  body {\n    background: var(--penguin-belly, #c6faf1);\n  }\n\n  .penguin {\n    --penguin-skin: gray;\n    --penguin-beak: orange;\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, white);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>","error":null,"seed":"<style>\n  :root {\n    /* Only change code below this line */\n\n    /* Only change code above this line */\n  }\n\n  body {\n    background: var(--penguin-belly, #c6faf1);\n  }\n\n  .penguin {\n    --penguin-skin: gray;\n    --penguin-beak: orange;\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, white);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>:root {--penguin-belly: pink;}</style>","error":null,"seed":"<style>:root {--penguin-belly: pink;}</style>"}]],"tests":[{"text":"<p>The <code>--penguin-belly</code> variable should be declared in the <code>:root</code> and assigned the value <code>pink</code>.</p>","testString":"assert(\n  code.match(/:root\\s*?{[\\s\\S]*--penguin-belly\\s*?:\\s*?pink\\s*?;[\\s\\S]*}/gi)\n);"}],"description":"<section id=\"description\">\n<p>When you create a variable, it is available for you to use inside the selector in which you create it. It also is available in any of that selector's descendants. This happens because CSS variables are inherited, just like ordinary properties.</p>\n<p>To make use of inheritance, CSS variables are often defined in the <dfn>:root</dfn> element.</p>\n<p><code>:root</code> is a <dfn>pseudo-class</dfn> selector that matches the root element of the document, usually the <code>html</code> element. By creating your variables in <code>:root</code>, they will be available globally and can be accessed from any other selector in the style sheet.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Define a variable named <code>--penguin-belly</code> in the <code>:root</code> selector and give it the value of <code>pink</code>. You can then see that the variable is inherited and that all the child elements which use it get pink backgrounds.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":41,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08746","title":"Inherit Styles from the Body Element","challengeType":0,"videoUrl":"https://scrimba.com/c/c9bmdtR","forumTopicId":18204,"dashedName":"inherit-styles-from-the-body-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: black;\n  }\n\n</style>","error":null,"seed":"<style>\n  body {\n    background-color: black;\n  }\n\n</style>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n\n</style>\n<h1>Hello World!</h1>","error":null,"seed":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n\n</style>\n<h1>Hello World!</h1>"}]],"tests":[{"text":"<p>You should create an <code>h1</code> element.</p>","testString":"assert($('h1').length > 0);"},{"text":"<p>Your <code>h1</code> element should have the text <code>Hello World</code>.</p>","testString":"assert(\n  $('h1').length > 0 &&\n    $('h1')\n      .text()\n      .match(/hello world/i)\n);"},{"text":"<p>Your <code>h1</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/h1>/g) &&\n    code.match(/<h1/g) &&\n    code.match(/<\\/h1>/g).length === code.match(/<h1/g).length\n);"},{"text":"<p>Your <code>body</code> element should have the <code>color</code> property of <code>green</code>.</p>","testString":"assert($('body').css('color') === 'rgb(0, 128, 0)');"},{"text":"<p>Your <code>body</code> element should have the <code>font-family</code> property of <code>monospace</code>.</p>","testString":"assert(\n  $('body')\n    .css('font-family')\n    .match(/monospace/i)\n);"},{"text":"<p>Your <code>h1</code> element should inherit the font <code>monospace</code> from your <code>body</code> element.</p>","testString":"assert(\n  $('h1').length > 0 &&\n    $('h1')\n      .css('font-family')\n      .match(/monospace/i)\n);"},{"text":"<p>Your <code>h1</code> element should inherit the color <code>green</code> from your <code>body</code> element.</p>","testString":"assert($('h1').length > 0 && $('h1').css('color') === 'rgb(0, 128, 0)');"}],"description":"<section id=\"description\">\n<p>Now we've proven that every HTML page has a <code>body</code> element, and that its <code>body</code> element can also be styled with CSS.</p>\n<p>Remember, you can style your <code>body</code> element just like any other HTML element, and all your other elements will inherit your <code>body</code> element's styles.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>First, create a <code>h1</code> element with the text <code>Hello World</code></p>\n<p>Then, let's give all elements on your page the color of <code>green</code> by adding <code>color: green;</code> to your <code>body</code> element's style declaration.</p>\n<p>Finally, give your <code>body</code> element the font-family of <code>monospace</code> by adding <code>font-family: monospace;</code> to your <code>body</code> element's style declaration.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":25,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08815","title":"Make Circular Images with a border-radius","challengeType":0,"videoUrl":"https://scrimba.com/c/c2MvrcB","forumTopicId":18229,"dashedName":"make-circular-images-with-a-border-radius","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 10px;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 10px;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 10px;\n  }\n\n  .smaller-image {\n    width: 100px;\n    border-radius: 50%;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 10px;\n  }\n\n  .smaller-image {\n    width: 100px;\n    border-radius: 50%;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>Your image should have a border radius of <code>50%</code>, making it perfectly circular.</p>","testString":"assert(parseInt($('img').css('border-top-left-radius')) > 48);"},{"text":"<p>The <code>border-radius</code> value should use a percentage value of <code>50%</code>.</p>","testString":"assert(code.match(/50%/g));"}],"description":"<section id=\"description\">\n<p>In addition to pixels, you can also specify the <code>border-radius</code> using a percentage.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Give your cat photo a <code>border-radius</code> of <code>50%</code>.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":11,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf07756","title":"Override All Other Styles by using Important","challengeType":0,"videoUrl":"https://scrimba.com/c/cm24rcp","forumTopicId":18249,"dashedName":"override-all-other-styles-by-using-important","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 id=\"orange-text\" class=\"pink-text blue-text\" style=\"color: white\">Hello World!</h1>","error":null,"seed":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 id=\"orange-text\" class=\"pink-text blue-text\" style=\"color: white\">Hello World!</h1>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink !important;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 id=\"orange-text\" class=\"pink-text blue-text\" style=\"color: white\">Hello World!</h1>","error":null,"seed":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink !important;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 id=\"orange-text\" class=\"pink-text blue-text\" style=\"color: white\">Hello World!</h1>"}]],"tests":[{"text":"<p>Your <code>h1</code> element should have the class <code>pink-text</code>.</p>","testString":"assert($('h1').hasClass('pink-text'));"},{"text":"<p>Your <code>h1</code> element should have the class <code>blue-text</code>.</p>","testString":"assert($('h1').hasClass('blue-text'));"},{"text":"<p>Your <code>h1</code> element should have the <code>id</code> of <code>orange-text</code>.</p>","testString":"assert($('h1').attr('id') === 'orange-text');"},{"text":"<p>Your <code>h1</code> element should have the inline style of <code>color: white</code>.</p>","testString":"assert(code.match(/<h1.*style/gi) && code.match(/<h1.*style.*color\\s*?:/gi));"},{"text":"<p>Your <code>pink-text</code> class declaration should have the <code>!important</code> keyword to override all other declarations.</p>","testString":"assert(\n  code.match(/\\.pink-text\\s*?\\{[\\s\\S]*?color:.*pink.*!important\\s*;?[^\\.]*\\}/g)\n);"},{"text":"<p>Your <code>h1</code> element should be pink.</p>","testString":"assert($('h1').css('color') === 'rgb(255, 192, 203)');"}],"description":"<section id=\"description\">\n<p>Yay! We just proved that inline styles will override all the CSS declarations in your <code>style</code> element.</p>\n<p>But wait. There's one last way to override CSS. This is the most powerful method of all. But before we do it, let's talk about why you would ever want to override CSS.</p>\n<p>In many situations, you will use CSS libraries. These may accidentally override your own CSS. So when you absolutely need to be sure that an element has specific CSS, you can use <code>!important</code>.</p>\n<p>Let's go all the way back to our <code>pink-text</code> class declaration. Remember that our <code>pink-text</code> class was overridden by subsequent class declarations, id declarations, and inline styles.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Let's add the keyword <code>!important</code> to your pink-text element's color declaration to make 100% sure that your <code>h1</code> element will be pink.</p>\n<p>An example of how to do this is:</p>\n<pre><code class=\"language-css\">color: red !important;\n</code></pre>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":30,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd8aedf06756","title":"Override Class Declarations by Styling ID Attributes","challengeType":0,"videoUrl":"https://scrimba.com/c/cRkpDhB","forumTopicId":18251,"dashedName":"override-class-declarations-by-styling-id-attributes","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 class=\"pink-text blue-text\">Hello World!</h1>","error":null,"seed":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 class=\"pink-text blue-text\">Hello World!</h1>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n  #orange-text {\n    color: orange;\n  }  \n</style>\n<h1 id=\"orange-text\"  class=\"pink-text blue-text\">Hello World!</h1>","error":null,"seed":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n  #orange-text {\n    color: orange;\n  }  \n</style>\n<h1 id=\"orange-text\"  class=\"pink-text blue-text\">Hello World!</h1>"}]],"tests":[{"text":"<p>Your <code>h1</code> element should have the class <code>pink-text</code>.</p>","testString":"assert($('h1').hasClass('pink-text'));"},{"text":"<p>Your <code>h1</code> element should have the class <code>blue-text</code>.</p>","testString":"assert($('h1').hasClass('blue-text'));"},{"text":"<p>Your <code>h1</code> element should have the id of <code>orange-text</code>.</p>","testString":"assert($('h1').attr('id') === 'orange-text');"},{"text":"<p>There should be only one <code>h1</code> element.</p>","testString":"assert($('h1').length === 1);"},{"text":"<p>Your <code>orange-text</code> id should have a CSS declaration.</p>","testString":"assert(code.match(/#orange-text\\s*{/gi));"},{"text":"<p>Your <code>h1</code> should not have any <code>style</code> attributes.</p>","testString":"assert(!code.match(/<h1.*style.*>/gi));"},{"text":"<p>Your <code>h1</code> element should be orange.</p>","testString":"assert($('h1').css('color') === 'rgb(255, 165, 0)');"}],"description":"<section id=\"description\">\n<p>We just proved that browsers read CSS from top to bottom in order of their declaration. That means that, in the event of a conflict, the browser will use whichever CSS declaration came last. Notice that if we even had put <code>blue-text</code> before <code>pink-text</code> in our <code>h1</code> element's classes, it would still look at the declaration order and not the order of their use!</p>\n<p>But we're not done yet. There are other ways that you can override CSS. Do you remember id attributes?</p>\n<p>Let's override your <code>pink-text</code> and <code>blue-text</code> classes, and make your <code>h1</code> element orange, by giving the <code>h1</code> element an id and then styling that id.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Give your <code>h1</code> element the <code>id</code> attribute of <code>orange-text</code>. Remember, id styles look like this:</p>\n<pre><code class=\"language-html\">&#x3C;h1 id=\"orange-text\">\n</code></pre>\n<p>Leave the <code>blue-text</code> and <code>pink-text</code> classes on your <code>h1</code> element.</p>\n<p>Create a CSS declaration for your <code>orange-text</code> id in your <code>style</code> element. Here's an example of what this looks like:</p>\n<pre><code class=\"language-css\">#brown-text {\n  color: brown;\n}\n</code></pre>\n<p><strong>Note:</strong> It doesn't matter whether you declare this CSS above or below <code>pink-text</code> class, since the <code>id</code> attribute will always take precedence.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":28,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf06756","title":"Override Class Declarations with Inline Styles","challengeType":0,"videoUrl":"https://scrimba.com/c/cGJDRha","forumTopicId":18252,"dashedName":"override-class-declarations-with-inline-styles","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 id=\"orange-text\" class=\"pink-text blue-text\">Hello World!</h1>","error":null,"seed":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 id=\"orange-text\" class=\"pink-text blue-text\">Hello World!</h1>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 id=\"orange-text\" class=\"pink-text blue-text\" style=\"color: white\">Hello World!</h1>","error":null,"seed":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 id=\"orange-text\" class=\"pink-text blue-text\" style=\"color: white\">Hello World!</h1>"}]],"tests":[{"text":"<p>Your <code>h1</code> element should have the class <code>pink-text</code>.</p>","testString":"assert($('h1').hasClass('pink-text'));"},{"text":"<p>Your <code>h1</code> element should have the class <code>blue-text</code>.</p>","testString":"assert($('h1').hasClass('blue-text'));"},{"text":"<p>Your <code>h1</code> element should have the id of <code>orange-text</code>.</p>","testString":"assert($('h1').attr('id') === 'orange-text');"},{"text":"<p>Your <code>h1</code> element should have an inline style.</p>","testString":"assert(document.querySelector('h1[style]'));"},{"text":"<p>Your <code>h1</code> element should be white.</p>","testString":"assert($('h1').css('color') === 'rgb(255, 255, 255)');"}],"description":"<section id=\"description\">\n<p>So we've proven that id declarations override class declarations, regardless of where they are declared in your <code>style</code> element CSS.</p>\n<p>There are other ways that you can override CSS. Do you remember inline styles?</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use an inline style to try to make our <code>h1</code> element white. Remember, inline styles look like this:</p>\n<pre><code class=\"language-html\">&#x3C;h1 style=\"color: green;\">\n</code></pre>\n<p>Leave the <code>blue-text</code> and <code>pink-text</code> classes on your <code>h1</code> element.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":29,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf04756","title":"Override Styles in Subsequent CSS","challengeType":0,"videoUrl":"https://scrimba.com/c/cGJDQug","forumTopicId":18253,"dashedName":"override-styles-in-subsequent-css","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n</style>\n<h1 class=\"pink-text\">Hello World!</h1>","error":null,"seed":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n</style>\n<h1 class=\"pink-text\">Hello World!</h1>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n\n  .blue-text {\n    color: blue;\n  }  \n</style>\n<h1 class=\"pink-text blue-text\">Hello World!</h1>","error":null,"seed":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n\n  .blue-text {\n    color: blue;\n  }  \n</style>\n<h1 class=\"pink-text blue-text\">Hello World!</h1>"}]],"tests":[{"text":"<p>Your <code>h1</code> element should have the class <code>pink-text</code>.</p>","testString":"assert($('h1').hasClass('pink-text'));"},{"text":"<p>Your <code>h1</code> element should have the class <code>blue-text</code>.</p>","testString":"assert($('h1').hasClass('blue-text'));"},{"text":"<p>Both <code>blue-text</code> and <code>pink-text</code> should belong to the same <code>h1</code> element.</p>","testString":"assert($('.pink-text').hasClass('blue-text'));"},{"text":"<p>Your <code>h1</code> element should be blue.</p>","testString":"assert($('h1').css('color') === 'rgb(0, 0, 255)');"}],"description":"<section id=\"description\">\n<p>Our <code>pink-text</code> class overrode our <code>body</code> element's CSS declaration!</p>\n<p>We just proved that our classes will override the <code>body</code> element's CSS. So the next logical question is, what can we do to override our <code>pink-text</code> class?</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create an additional CSS class called <code>blue-text</code> that gives an element the color blue. Make sure it's below your <code>pink-text</code> class declaration.</p>\n<p>Apply the <code>blue-text</code> class to your <code>h1</code> element in addition to your <code>pink-text</code> class, and let's see which one wins.</p>\n<p>Applying multiple class attributes to a HTML element is done with a space between them like this:</p>\n<pre><code class=\"language-html\">class=\"class1 class2\"\n</code></pre>\n<p><strong>Note:</strong> It doesn't matter which order the classes are listed in the HTML element.</p>\n<p>However, the order of the <code>class</code> declarations in the <code>&#x3C;style></code> section is what is important. The second declaration will always take precedence over the first. Because <code>.blue-text</code> is declared second, it overrides the attributes of <code>.pink-text</code>.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":27,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08756","title":"Prioritize One Style Over Another","challengeType":0,"videoUrl":"https://scrimba.com/c/cZ8wnHv","forumTopicId":18258,"dashedName":"prioritize-one-style-over-another","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n</style>\n<h1>Hello World!</h1>","error":null,"seed":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n</style>\n<h1>Hello World!</h1>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n</style>\n<h1 class=\"pink-text\">Hello World!</h1>","error":null,"seed":"<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n</style>\n<h1 class=\"pink-text\">Hello World!</h1>"}]],"tests":[{"text":"<p>Your <code>h1</code> element should have the class <code>pink-text</code>.</p>","testString":"assert($('h1').hasClass('pink-text'));"},{"text":"<p>Your <code>&#x3C;style></code> should have a <code>pink-text</code> CSS class that changes the <code>color</code>.</p>","testString":"assert(code.match(/\\.pink-text\\s*\\{\\s*color\\s*:\\s*.+\\s*;?\\s*\\}/g));"},{"text":"<p>Your <code>h1</code> element should be pink.</p>","testString":"assert($('h1').css('color') === 'rgb(255, 192, 203)');"}],"description":"<section id=\"description\">\n<p>Sometimes your HTML elements will receive multiple styles that conflict with one another.</p>\n<p>For example, your <code>h1</code> element can't be both green and pink at the same time.</p>\n<p>Let's see what happens when we create a class that makes text pink, then apply it to an element. Will our class <em>override</em> the <code>body</code> element's <code>color: green;</code> CSS property?</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create a CSS class called <code>pink-text</code> that gives an element the color pink.</p>\n<p>Give your <code>h1</code> element the class of <code>pink-text</code>.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":26,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aede08807","title":"Set the Font Family of an Element","challengeType":0,"videoUrl":"https://scrimba.com/c/c3bvpCg","forumTopicId":18278,"dashedName":"set-the-font-family-of-an-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .red-text {\n    color: red;\n  }\n\n  p {\n    font-size: 16px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<style>\n  .red-text {\n    color: red;\n  }\n\n  p {\n    font-size: 16px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .red-text {\n    color: red;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<style>\n  .red-text {\n    color: red;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>Your <code>p</code> elements should use the font <code>monospace</code>.</p>","testString":"assert(\n  $('p')\n    .not('.red-text')\n    .css('font-family')\n    .match(/monospace/i)\n);"}],"description":"<section id=\"description\">\n<p>You can set which font an element should use, by using the <code>font-family</code> property.</p>\n<p>For example, if you wanted to set your <code>h2</code> element's font to <code>sans-serif</code>, you would use the following CSS:</p>\n<pre><code class=\"language-css\">h2 {\n  font-family: sans-serif;\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Make all of your <code>p</code> elements use the <code>monospace</code> font.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":5,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87eee1348bd9aede07836","title":"Set the id of an Element","challengeType":0,"videoUrl":"https://scrimba.com/c/cN6MEc2","forumTopicId":18279,"dashedName":"set-the-id-of-an-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\" id=\"cat-photo-form\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\" id=\"cat-photo-form\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>Your <code>form</code> element should have the id of <code>cat-photo-form</code>.</p>","testString":"assert($('form').attr('id') === 'cat-photo-form');"}],"description":"<section id=\"description\">\n<p>In addition to classes, each HTML element can also have an <code>id</code> attribute.</p>\n<p>There are several benefits to using <code>id</code> attributes: You can use an <code>id</code> to style a single element and later you'll learn that you can use them to select and modify specific elements with JavaScript.</p>\n<p><code>id</code> attributes should be unique. Browsers won't enforce this, but it is a widely agreed upon best practice. So please don't give more than one element the same <code>id</code> attribute.</p>\n<p>Here's an example of how you give your <code>h2</code> element the id of <code>cat-photo-app</code>:</p>\n<pre><code class=\"language-html\">&#x3C;h2 id=\"cat-photo-app\">\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Give your <code>form</code> element the id <code>cat-photo-form</code>.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":13,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9acdf08812","title":"Size Your Images","challengeType":0,"forumTopicId":18282,"dashedName":"size-your-images","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img class=\"smaller-image\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img class=\"smaller-image\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>Your <code>img</code> element should have the class <code>smaller-image</code>.</p>","testString":"assert(\n  $(\"img[src='https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg']\").attr('class')\n    .trim().split(/\\s+/g).includes('smaller-image')\n);"},{"text":"<p>Your image should be 100 pixels wide.</p>","testString":"assert(\n  $('img').width() < 200 &&\n    code.match(/\\.smaller-image\\s*{\\s*width\\s*:\\s*100px\\s*(;\\s*}|})/i)\n);"}],"description":"<section id=\"description\">\n<p>CSS has a property called <code>width</code> that controls an element's width. Just like with fonts, we'll use <code>px</code> (pixels) to specify the image's width.</p>\n<p>For example, if we wanted to create a CSS class called <code>larger-image</code> that gave HTML elements a width of 500 pixels, we'd use:</p>\n<pre><code class=\"language-html\">&#x3C;style>\n  .larger-image {\n    width: 500px;\n  }\n&#x3C;/style>\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create a class called <code>smaller-image</code> and use it to resize the image so that it's only 100 pixels wide.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":8,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08808","title":"Specify How Fonts Should Degrade","challengeType":0,"videoUrl":"https://scrimba.com/c/cpVKBfQ","forumTopicId":18304,"dashedName":"specify-how-fonts-should-degrade","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<!--<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">-->\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<!--<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">-->\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>Your h2 element should use the font <code>Lobster</code>.</p>","testString":"assert(\n  $('h2')\n    .css('font-family')\n    .match(/^\"?lobster/i)\n);"},{"text":"<p>Your h2 element should degrade to the font <code>monospace</code> when <code>Lobster</code> is not available.</p>","testString":"assert(\n  /\\s*h2\\s*\\{\\s*font-family\\s*\\:\\s*(\\'|\"|)Lobster\\1\\s*,\\s*monospace\\s*;?\\s*\\}/gi.test(\n    code\n  )\n);"},{"text":"<p>You should comment out your call to Google for the <code>Lobster</code> font by putting <code>&#x3C;!--</code> in front of it.</p>","testString":"assert(new RegExp('<!--[^fc]', 'gi').test(code));"},{"text":"<p>You should close your comment by adding <code>--></code>.</p>","testString":"assert(new RegExp('[^fc]-->', 'gi').test(code));"}],"description":"<section id=\"description\">\n<p>There are several default fonts that are available in all browsers. These generic font families include <code>monospace</code>, <code>serif</code> and <code>sans-serif</code>.</p>\n<p>When one font isn't available, you can tell the browser to \"degrade\" to another font.</p>\n<p>For example, if you wanted an element to use the <code>Helvetica</code> font, but degrade to the <code>sans-serif</code> font when <code>Helvetica</code> isn't available, you will specify it as follows:</p>\n<pre><code class=\"language-css\">p {\n  font-family: Helvetica, sans-serif;\n}\n</code></pre>\n<p>Generic font family names are not case-sensitive. Also, they do not need quotes because they are CSS keywords.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>To begin, apply the <code>monospace</code> font to the <code>h2</code> element, so that it now has two fonts - <code>Lobster</code> and <code>monospace</code>.</p>\n<p>In the last challenge, you imported the <code>Lobster</code> font using the <code>link</code> tag. Now comment out that import of the <code>Lobster</code> font (using the HTML comments you learned before) from Google Fonts so that it isn't available anymore. Notice how your <code>h2</code> element degrades to the <code>monospace</code> font.</p>\n<p><strong>Note:</strong> If you have the <code>Lobster</code> font installed on your computer, you won't see the degradation because your browser is able to find the font.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":7,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aefe08806","title":"Style Multiple Elements with a CSS Class","challengeType":0,"videoUrl":"https://scrimba.com/c/cRkVbsQ","forumTopicId":18311,"dashedName":"style-multiple-elements-with-a-css-class","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .red-text {\n    color: red;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<style>\n  .red-text {\n    color: red;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .red-text {\n    color: red;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<style>\n  .red-text {\n    color: red;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>Your <code>h2</code> element should be red.</p>","testString":"assert($('h2').css('color') === 'rgb(255, 0, 0)');"},{"text":"<p>Your <code>h2</code> element should have the class <code>red-text</code>.</p>","testString":"assert($('h2').hasClass('red-text'));"},{"text":"<p>Your first <code>p</code> element should be red.</p>","testString":"assert($('p:eq(0)').css('color') === 'rgb(255, 0, 0)');"},{"text":"<p>Your second and third <code>p</code> elements should not be red.</p>","testString":"assert(\n  !($('p:eq(1)').css('color') === 'rgb(255, 0, 0)') &&\n    !($('p:eq(2)').css('color') === 'rgb(255, 0, 0)')\n);"},{"text":"<p>Your first <code>p</code> element should have the class <code>red-text</code>.</p>","testString":"assert($('p:eq(0)').hasClass('red-text'));"}],"description":"<section id=\"description\">\n<p>Classes allow you to use the same CSS styles on multiple HTML elements. You can see this by applying your <code>red-text</code> class to the first <code>p</code> element.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":3,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08736","title":"Style the HTML Body Element","challengeType":0,"videoUrl":"https://scrimba.com/c/cB77PHW","forumTopicId":18313,"dashedName":"style-the-html-body-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n\n</style>","error":null,"seed":"<style>\n\n</style>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\nbody {\n  background-color: black;\n}\n</style>","error":null,"seed":"<style>\nbody {\n  background-color: black;\n}\n</style>"}]],"tests":[{"text":"<p>Your <code>body</code> element should have the <code>background-color</code> of black.</p>","testString":"assert($('body').css('background-color') === 'rgb(0, 0, 0)');"},{"text":"<p>Your CSS rule should be properly formatted with both opening and closing curly brackets.</p>","testString":"assert(\n  code.match(/<style>\\s*body\\s*\\{\\s*background.*\\s*:\\s*.*;\\s*\\}\\s*<\\/style>/i)\n);"},{"text":"<p>Your CSS rule should end with a semi-colon.</p>","testString":"assert(\n  code.match(/<style>\\s*body\\s*\\{\\s*background.*\\s*:\\s*.*;\\s*\\}\\s*<\\/style>/i)\n);"}],"description":"<section id=\"description\">\n<p>Now let's start fresh and talk about CSS inheritance.</p>\n<p>Every HTML page has a <code>body</code> element.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>We can prove that the <code>body</code> element exists here by giving it a <code>background-color</code> of black.</p>\n<p>We can do this by adding the following to our <code>style</code> element:</p>\n<pre><code class=\"language-css\">body {\n  background-color: black;\n}\n</code></pre>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":24,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad82fee1322bd9aedf08721","title":"Understand Absolute versus Relative Units","challengeType":0,"videoUrl":"https://scrimba.com/c/cN66JSL","forumTopicId":301089,"dashedName":"understand-absolute-versus-relative-units","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .red-box {\n    background-color: red;\n    margin: 20px 40px 20px 40px;\n\n  }\n\n  .green-box {\n    background-color: green;\n    margin: 20px 40px 20px 40px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box green-box\">padding</h5>\n</div>","error":null,"seed":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .red-box {\n    background-color: red;\n    margin: 20px 40px 20px 40px;\n\n  }\n\n  .green-box {\n    background-color: green;\n    margin: 20px 40px 20px 40px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box green-box\">padding</h5>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .red-box {\n    background-color: red;\n    margin: 20px 40px 20px 40px;\n    padding: 1.5em;\n  }\n\n  .green-box {\n    background-color: green;\n    margin: 20px 40px 20px 40px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box green-box\">padding</h5>\n</div>","error":null,"seed":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .red-box {\n    background-color: red;\n    margin: 20px 40px 20px 40px;\n    padding: 1.5em;\n  }\n\n  .green-box {\n    background-color: green;\n    margin: 20px 40px 20px 40px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box green-box\">padding</h5>\n</div>"}]],"tests":[{"text":"<p>Your <code>red-box</code> class should have a <code>padding</code> property.</p>","testString":"assert(\n  $('.red-box').css('padding-top') != '0px' &&\n    $('.red-box').css('padding-right') != '0px' &&\n    $('.red-box').css('padding-bottom') != '0px' &&\n    $('.red-box').css('padding-left') != '0px'\n);"},{"text":"<p>Your <code>red-box</code> class should give elements 1.5em of <code>padding</code>.</p>","testString":"assert(code.match(/\\.red-box\\s*?{[\\s\\S]*padding\\s*:\\s*?1\\.5em/gi));"}],"description":"<section id=\"description\">\n<p>The last several challenges all set an element's margin or padding with pixels (<code>px</code>). Pixels are a type of length unit, which is what tells the browser how to size or space an item. In addition to <code>px</code>, CSS has a number of different length unit options that you can use.</p>\n<p>The two main types of length units are absolute and relative. Absolute units tie to physical units of length. For example, <code>in</code> and <code>mm</code> refer to inches and millimeters, respectively. Absolute length units approximate the actual measurement on a screen, but there are some differences depending on a screen's resolution.</p>\n<p>Relative units, such as <code>em</code> or <code>rem</code>, are relative to another length value. For example, <code>em</code> is based on the size of an element's font. If you use it to set the <code>font-size</code> property itself, it's relative to the parent's <code>font-size</code>.</p>\n<p><strong>Note:</strong> There are several relative unit options that are tied to the size of the viewport. They are covered in the Responsive Web Design Principles section.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add a <code>padding</code> property to the element with class <code>red-box</code> and set it to <code>1.5em</code>.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":23,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aecf08806","title":"Use a CSS Class to Style an Element","challengeType":0,"videoUrl":"https://scrimba.com/c/c2MvDtV","forumTopicId":18337,"dashedName":"use-a-css-class-to-style-an-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h2 {\n    color: blue;\n  }\n</style>\n\n<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<style>\n  h2 {\n    color: blue;\n  }\n</style>\n\n<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .red-text {\n    color: red;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<style>\n  .red-text {\n    color: red;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>Your <code>h2</code> element should be red.</p>","testString":"assert($('h2').css('color') === 'rgb(255, 0, 0)');"},{"text":"<p>Your <code>h2</code> element should have the class <code>red-text</code>.</p>","testString":"assert($('h2').hasClass('red-text'));"},{"text":"<p>Your stylesheet should declare a <code>red-text</code> class and have its color set to <code>red</code>.</p>","testString":"assert(code.match(/\\.red-text\\s*\\{\\s*color\\s*:\\s*red;?\\s*\\}/g));"},{"text":"<p>You should not use inline style declarations like <code>style=\"color: red\"</code> in your <code>h2</code> element.</p>","testString":"assert($('h2').attr('style') === undefined);"}],"description":"<section id=\"description\">\n<p>Classes are reusable styles that can be added to HTML elements.</p>\n<p>Here's an example CSS class declaration:</p>\n<pre><code class=\"language-html\">&#x3C;style>\n  .blue-text {\n    color: blue;\n  }\n&#x3C;/style>\n</code></pre>\n<p>You can see that we've created a CSS class called <code>blue-text</code> within the <code>&#x3C;style></code> tag. You can apply a class to an HTML element like this: <code>&#x3C;h2 class=\"blue-text\">CatPhotoApp&#x3C;/h2></code>. Note that in your CSS <code>style</code> element, class names start with a period. In your HTML elements' class attribute, the class name does not include the period.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Inside your <code>style</code> element, change the <code>h2</code> selector to <code>.red-text</code> and update the color's value from <code>blue</code> to <code>red</code>.</p>\n<p>Give your <code>h2</code> element the <code>class</code> attribute with a value of <code>red-text</code>.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":2,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a9d727a424fe3d0e10cad12","title":"Use a custom CSS Variable","challengeType":0,"videoUrl":"https://scrimba.com/c/cM989ck","forumTopicId":301090,"dashedName":"use-a-custom-css-variable","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .penguin {\n    --penguin-skin: gray;\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n\n    /* Change code below this line */\n    background: black;\n    /* Change code above this line */\n\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n\n    /* Change code below this line */\n    background: black;\n    /* Change code above this line */\n\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 0%;\n    left: -5%;\n\n    /* Change code below this line */\n    background: black;\n    /* Change code above this line */\n\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n\n    /* Change code below this line */\n    background: black;\n    /* Change code above this line */\n\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: white;\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: white;\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: white;\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: orange;\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: orange;\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: orange;\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: orange;\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  body {\n    background:#c6faf1;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>","error":null,"seed":"<style>\n  .penguin {\n    --penguin-skin: gray;\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n\n    /* Change code below this line */\n    background: black;\n    /* Change code above this line */\n\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n\n    /* Change code below this line */\n    background: black;\n    /* Change code above this line */\n\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 0%;\n    left: -5%;\n\n    /* Change code below this line */\n    background: black;\n    /* Change code above this line */\n\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n\n    /* Change code below this line */\n    background: black;\n    /* Change code above this line */\n\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: white;\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: white;\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: white;\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: orange;\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: orange;\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: orange;\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: orange;\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  body {\n    background:#c6faf1;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.penguin-top {background: var(--penguin-skin);} .penguin-bottom {background: var(--penguin-skin);} .right-hand {background: var(--penguin-skin);} .left-hand {background: var(--penguin-skin);}</style>","error":null,"seed":"<style>.penguin-top {background: var(--penguin-skin);} .penguin-bottom {background: var(--penguin-skin);} .right-hand {background: var(--penguin-skin);} .left-hand {background: var(--penguin-skin);}</style>"}]],"tests":[{"text":"<p>The <code>--penguin-skin</code> variable should be applied to the <code>background</code> property of the <code>penguin-top</code> class.</p>","testString":"assert(\n  code.match(\n    /.penguin-top\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.penguin-bottom\\s{/gi\n  )\n);"},{"text":"<p>The <code>--penguin-skin</code> variable should be applied to the <code>background</code> property of the <code>penguin-bottom</code> class.</p>","testString":"assert(\n  code.match(\n    /.penguin-bottom\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.right-hand\\s{/gi\n  )\n);"},{"text":"<p>The <code>--penguin-skin</code> variable should be applied to the <code>background</code> property of the <code>right-hand</code> class.</p>","testString":"assert(\n  code.match(\n    /.right-hand\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}[\\s\\S]*.left-hand\\s{/gi\n  )\n);"},{"text":"<p>The <code>--penguin-skin</code> variable should be applied to the <code>background</code> property of the <code>left-hand</code> class.</p>","testString":"assert(\n  code.match(\n    /.left-hand\\s*?{[\\s\\S]*background\\s*?:\\s*?var\\s*?\\(\\s*?--penguin-skin\\s*?\\)\\s*?;[\\s\\S]*}/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p>After you create your variable, you can assign its value to other CSS properties by referencing the name you gave it.</p>\n<pre><code class=\"language-css\">background: var(--penguin-skin);\n</code></pre>\n<p>This will change the background of whatever element you are targeting to gray because that is the value of the <code>--penguin-skin</code> variable. Note that styles will not be applied unless the variable names are an exact match.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Apply the <code>--penguin-skin</code> variable to the <code>background</code> property of the <code>penguin-top</code>, <code>penguin-bottom</code>, <code>right-hand</code> and <code>left-hand</code> classes.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":38,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a9d72ad424fe3d0e10cad16","title":"Use a media query to change a variable","challengeType":0,"videoUrl":"https://scrimba.com/c/cWmL8UP","forumTopicId":301091,"dashedName":"use-a-media-query-to-change-a-variable","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  :root {\n    --penguin-size: 300px;\n    --penguin-skin: gray;\n    --penguin-belly: white;\n    --penguin-beak: orange;\n  }\n\n  @media (max-width: 350px) {\n    :root {\n      /* Only change code below this line */\n\n      /* Only change code above this line */\n    }\n  }\n\n  .penguin {\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: var(--penguin-size, 300px);\n    height: var(--penguin-size, 300px);\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, white);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 5%;\n    left: 25%;\n    background: var(--penguin-skin, black);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(130deg);\n    z-index: -1;\n    animation-duration: 3s;\n    animation-name: wave;\n    animation-iteration-count: infinite;\n    transform-origin:0% 0%;\n    animation-timing-function: linear;\n  }\n\n  @keyframes wave {\n      10% {\n        transform: rotate(110deg);\n      }\n      20% {\n        transform: rotate(130deg);\n      }\n      30% {\n        transform: rotate(110deg);\n      }\n      40% {\n        transform: rotate(130deg);\n      }\n    }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left:-23%;\n    background: white;\n    width: 150%;\n    height: 100%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  body {\n    background:#c6faf1;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>","error":null,"seed":"<style>\n  :root {\n    --penguin-size: 300px;\n    --penguin-skin: gray;\n    --penguin-belly: white;\n    --penguin-beak: orange;\n  }\n\n  @media (max-width: 350px) {\n    :root {\n      /* Only change code below this line */\n\n      /* Only change code above this line */\n    }\n  }\n\n  .penguin {\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: var(--penguin-size, 300px);\n    height: var(--penguin-size, 300px);\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, white);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 5%;\n    left: 25%;\n    background: var(--penguin-skin, black);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(130deg);\n    z-index: -1;\n    animation-duration: 3s;\n    animation-name: wave;\n    animation-iteration-count: infinite;\n    transform-origin:0% 0%;\n    animation-timing-function: linear;\n  }\n\n  @keyframes wave {\n      10% {\n        transform: rotate(110deg);\n      }\n      20% {\n        transform: rotate(130deg);\n      }\n      30% {\n        transform: rotate(110deg);\n      }\n      40% {\n        transform: rotate(130deg);\n      }\n    }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left:-23%;\n    background: white;\n    width: 150%;\n    height: 100%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  body {\n    background:#c6faf1;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>@media (max-width: 350px) {:root {--penguin-size: 200px; --penguin-skin: black;}}</style>","error":null,"seed":"<style>@media (max-width: 350px) {:root {--penguin-size: 200px; --penguin-skin: black;}}</style>"}]],"tests":[{"text":"<p><code>:root</code> should reassign the <code>--penguin-size</code> variable to <code>200px</code>.</p>","testString":"assert(\n  code.match(\n    /media\\s*?\\(\\s*?max-width\\s*?:\\s*?350px\\s*?\\)\\s*?{[\\s\\S]*:root\\s*?{[\\s\\S]*--penguin-size\\s*?:\\s*?200px\\s*?;[\\s\\S]*}[\\s\\S]*}/gi\n  )\n);"},{"text":"<p><code>:root</code> should reassign the <code>--penguin-skin</code> variable to <code>black</code>.</p>","testString":"assert(\n  code.match(\n    /media\\s*?\\(\\s*?max-width\\s*?:\\s*?350px\\s*?\\)\\s*?{[\\s\\S]*:root\\s*?{[\\s\\S]*--penguin-skin\\s*?:\\s*?black\\s*?;[\\s\\S]*}[\\s\\S]*}/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p>CSS Variables can simplify the way you use media queries.</p>\n<p>For instance, when your screen is smaller or larger than your media query break point, you can change the value of a variable, and it will apply its style wherever it is used.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>In the <code>:root</code> selector of the media query, change it so <code>--penguin-size</code> is redefined and given a value of <code>200px</code>. Also, redefine <code>--penguin-skin</code> and give it a value of <code>black</code>. Then resize the preview to see this change in action.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":43,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08719","title":"Use Abbreviated Hex Code","challengeType":0,"videoUrl":"https://scrimba.com/c/cRkpKAm","forumTopicId":18338,"dashedName":"use-abbreviated-hex-code","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .red-text {\n    color: #000000;\n  }\n  .fuchsia-text {\n    color: #000000;\n  }\n  .cyan-text {\n    color: #000000;\n  }\n  .green-text {\n    color: #000000;\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"fuchsia-text\">I am fuchsia!</h1>\n\n<h1 class=\"cyan-text\">I am cyan!</h1>\n\n<h1 class=\"green-text\">I am green!</h1>","error":null,"seed":"<style>\n  .red-text {\n    color: #000000;\n  }\n  .fuchsia-text {\n    color: #000000;\n  }\n  .cyan-text {\n    color: #000000;\n  }\n  .green-text {\n    color: #000000;\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"fuchsia-text\">I am fuchsia!</h1>\n\n<h1 class=\"cyan-text\">I am cyan!</h1>\n\n<h1 class=\"green-text\">I am green!</h1>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .red-text {\n    color: #F00;\n  }\n  .fuchsia-text {\n    color: #F0F;\n  }\n  .cyan-text {\n    color: #0FF;\n  }\n  .green-text {\n    color: #0F0;\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"fuchsia-text\">I am fuchsia!</h1>\n\n<h1 class=\"cyan-text\">I am cyan!</h1>\n\n<h1 class=\"green-text\">I am green!</h1>","error":null,"seed":"<style>\n  .red-text {\n    color: #F00;\n  }\n  .fuchsia-text {\n    color: #F0F;\n  }\n  .cyan-text {\n    color: #0FF;\n  }\n  .green-text {\n    color: #0F0;\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"fuchsia-text\">I am fuchsia!</h1>\n\n<h1 class=\"cyan-text\">I am cyan!</h1>\n\n<h1 class=\"green-text\">I am green!</h1>"}]],"tests":[{"text":"<p>Your <code>h1</code> element with the text <code>I am red!</code> should be given the <code>color</code> red.</p>","testString":"assert($('.red-text').css('color') === 'rgb(255, 0, 0)');"},{"text":"<p>The abbreviated hex code for the color red should be used instead of the hex code <code>#FF0000</code>.</p>","testString":"assert(code.match(/\\.red-text\\s*?{\\s*?color\\s*:\\s*?#F00\\s*?;?\\s*?}/gi));"},{"text":"<p>Your <code>h1</code> element with the text <code>I am green!</code> should be given the <code>color</code> green.</p>","testString":"assert($('.green-text').css('color') === 'rgb(0, 255, 0)');"},{"text":"<p>The abbreviated hex code for the color green should be used instead of the hex code <code>#00FF00</code>.</p>","testString":"assert(code.match(/\\.green-text\\s*?{\\s*?color\\s*:\\s*?#0F0\\s*?;?\\s*?}/gi));"},{"text":"<p>Your <code>h1</code> element with the text <code>I am cyan!</code> should be given the <code>color</code> cyan.</p>","testString":"assert($('.cyan-text').css('color') === 'rgb(0, 255, 255)');"},{"text":"<p>The abbreviated hex code for the color cyan should be used instead of the hex code <code>#00FFFF</code>.</p>","testString":"assert(code.match(/\\.cyan-text\\s*?{\\s*?color\\s*:\\s*?#0FF\\s*?;?\\s*?}/gi));"},{"text":"<p>Your <code>h1</code> element with the text <code>I am fuchsia!</code> should be given the <code>color</code> fuchsia.</p>","testString":"assert($('.fuchsia-text').css('color') === 'rgb(255, 0, 255)');"},{"text":"<p>The abbreviated hex code for the color fuchsia should be used instead of the hex code <code>#FF00FF</code>.</p>","testString":"assert(code.match(/\\.fuchsia-text\\s*?{\\s*?color\\s*:\\s*?#F0F\\s*?;?\\s*?}/gi));"}],"description":"<section id=\"description\">\n<p>Many people feel overwhelmed by the possibilities of more than 16 million colors. And it's difficult to remember hex code. Fortunately, you can shorten it.</p>\n<p>For example, red's hex code <code>#FF0000</code> can be shortened to <code>#F00</code>. This shortened form gives one digit for red, one digit for green, and one digit for blue.</p>\n<p>This reduces the total number of possible colors to around 4,000. But browsers will interpret <code>#FF0000</code> and <code>#F00</code> as exactly the same color.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Go ahead, try using the abbreviated hex codes to color the correct elements.</p>\n<table class='table table-striped'><tbody><tr><th>Color</th><th>Short Hex Code</th></tr><tr><td>Cyan</td><td><code>#0FF</code></td></tr><tr><td>Green</td><td><code>#0F0</code></td></tr><tr><td>Red</td><td><code>#F00</code></td></tr><tr><td>Fuchsia</td><td><code>#F0F</code></td></tr></tbody></table>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":33,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87dee1348bd9aede07836","title":"Use an id Attribute to Style an Element","challengeType":0,"videoUrl":"https://scrimba.com/c/cakyZfL","forumTopicId":18339,"dashedName":"use-an-id-attribute-to-style-an-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\" id=\"cat-photo-form\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\" id=\"cat-photo-form\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n\n  #cat-photo-form {\n    background-color: green;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\" id=\"cat-photo-form\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n\n  #cat-photo-form {\n    background-color: green;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\" id=\"cat-photo-form\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>Your <code>form</code> element should have the id of <code>cat-photo-form</code>.</p>","testString":"assert($('form').attr('id') === 'cat-photo-form');"},{"text":"<p>Your <code>form</code> element should have the <code>background-color</code> of green.</p>","testString":"assert($('#cat-photo-form').css('background-color') === 'rgb(0, 128, 0)');"},{"text":"<p>Your <code>form</code> element should have an <code>id</code> attribute.</p>","testString":"assert(\n  code.match(/<form.*cat-photo-form.*>/gi) &&\n    code.match(/<form.*cat-photo-form.*>/gi).length > 0\n);"},{"text":"<p>You should not give your <code>form</code> any <code>class</code> or <code>style</code> attributes.</p>","testString":"assert(!code.match(/<form.*style.*>/gi) && !code.match(/<form.*class.*>/gi));"}],"description":"<section id=\"description\">\n<p>One cool thing about <code>id</code> attributes is that, like classes, you can style them using CSS.</p>\n<p>However, an <code>id</code> is not reusable and should only be applied to one element. An <code>id</code> also has a higher specificity (importance) than a class so if both are applied to the same element and have conflicting styles, the styles of the <code>id</code> will be applied.</p>\n<p>Here's an example of how you can take your element with the <code>id</code> attribute of <code>cat-photo-element</code> and give it the background color of green. In your <code>style</code> element:</p>\n<pre><code class=\"language-css\">#cat-photo-element {\n  background-color: green;\n}\n</code></pre>\n<p>Note that inside your <code>style</code> element, you always reference classes by putting a <code>.</code> in front of their names. You always reference ids by putting a <code>#</code> in front of their names.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Try giving your form, which now has the <code>id</code> attribute of <code>cat-photo-form</code>, a green background.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":14,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"58c383d33e2e3259241f3076","title":"Use Attribute Selectors to Style Elements","challengeType":0,"videoUrl":"https://scrimba.com/c/cnpymfJ","forumTopicId":301092,"dashedName":"use-attribute-selectors-to-style-elements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\" id=\"cat-photo-form\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\" id=\"cat-photo-form\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n  [type='checkbox'] {\n    margin-top: 10px;\n    margin-bottom: 15px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\" id=\"cat-photo-form\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n\n  .silver-background {\n    background-color: silver;\n  }\n  [type='checkbox'] {\n    margin-top: 10px;\n    margin-bottom: 15px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n<main>\n  <p class=\"red-text\">Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <div class=\"silver-background\">\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  \n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\" id=\"cat-photo-form\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>The <code>type</code> attribute selector should be used to select the checkboxes.</p>","testString":"assert(\n  code.match(\n    /<style>[\\s\\S]*?\\[\\s*?type\\s*?=\\s*?(\"|')checkbox\\1\\s*?\\]\\s*?{[\\s\\S]*?}[\\s\\S]*?<\\/style>/gi\n  )\n);"},{"text":"<p>The top margins of the checkboxes should be 10px.</p>","testString":"assert(\n  (function () {\n    var count = 0;\n    $(\"[type='checkbox']\").each(function () {\n      if ($(this).css('marginTop') === '10px') {\n        count++;\n      }\n    });\n    return count === 3;\n  })()\n);"},{"text":"<p>The bottom margins of the checkboxes should be 15px.</p>","testString":"assert(\n  (function () {\n    var count = 0;\n    $(\"[type='checkbox']\").each(function () {\n      if ($(this).css('marginBottom') === '15px') {\n        count++;\n      }\n    });\n    return count === 3;\n  })()\n);"}],"description":"<section id=\"description\">\n<p>You have been adding <code>id</code> or <code>class</code> attributes to elements that you wish to specifically style. These are known as ID and class selectors. There are other CSS Selectors you can use to select custom groups of elements to style.</p>\n<p>Let's bring out CatPhotoApp again to practice using CSS Selectors.</p>\n<p>For this challenge, you will use the <code>[attr=value]</code> attribute selector to style the checkboxes in CatPhotoApp. This selector matches and styles elements with a specific attribute value. For example, the below code changes the margins of all elements with the attribute <code>type</code> and a corresponding value of <code>radio</code>:</p>\n<pre><code class=\"language-css\">[type='radio'] {\n  margin: 20px 0px 20px 0px;\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Using the <code>type</code> attribute selector, try to give the checkboxes in CatPhotoApp a top margin of 10px and a bottom margin of 15px.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":22,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9afdf08726","title":"Use Clockwise Notation to Specify the Margin of an Element","challengeType":0,"videoUrl":"https://scrimba.com/c/cnpybAd","forumTopicId":18345,"dashedName":"use-clockwise-notation-to-specify-the-margin-of-an-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    margin: 20px 40px 20px 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>","error":null,"seed":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    margin: 20px 40px 20px 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    margin: 20px 40px 20px 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    margin: 40px 20px 20px 40px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>","error":null,"seed":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    margin: 20px 40px 20px 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    margin: 40px 20px 20px 40px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"}]],"tests":[{"text":"<p>Your <code>blue-box</code> class should give the top of elements <code>40px</code> of <code>margin</code>.</p>","testString":"assert($('.blue-box').css('margin-top') === '40px');"},{"text":"<p>Your <code>blue-box</code> class should give the right of elements <code>20px</code> of <code>margin</code>.</p>","testString":"assert($('.blue-box').css('margin-right') === '20px');"},{"text":"<p>Your <code>blue-box</code> class should give the bottom of elements <code>20px</code> of <code>margin</code>.</p>","testString":"assert($('.blue-box').css('margin-bottom') === '20px');"},{"text":"<p>Your <code>blue-box</code> class should give the left of elements <code>40px</code> of <code>margin</code>.</p>","testString":"assert($('.blue-box').css('margin-left') === '40px');"},{"text":"<p>You should use the clockwise notation to set the margin of <code>blue-box</code> class.</p>","testString":"assert(\n  /\\.blue-box\\s*{[\\s\\S]*margin[\\s]*:\\s*\\d+px\\s+\\d+px\\s+\\d+px\\s+\\d+px(;\\s*[^}]+\\s*}|;?\\s*})/.test(\n    __helpers.removeCssComments($('style').text())\n  )\n);"}],"description":"<section id=\"description\">\n<p>Let's try this again, but with <code>margin</code> this time.</p>\n<p>Instead of specifying an element's <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, and <code>margin-left</code> properties individually, you can specify them all in one line, like this:</p>\n<pre><code class=\"language-css\">margin: 10px 20px 10px 20px;\n</code></pre>\n<p>These four values work like a clock: top, right, bottom, left, and will produce the exact same result as using the side-specific margin instructions.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use Clockwise Notation to give the element with the <code>blue-box</code> class a margin of <code>40px</code> on its top and left side, but only <code>20px</code> on its bottom and right side.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":21,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08826","title":"Use Clockwise Notation to Specify the Padding of an Element","challengeType":0,"videoUrl":"https://scrimba.com/c/cB7mBS9","forumTopicId":18346,"dashedName":"use-clockwise-notation-to-specify-the-padding-of-an-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>","error":null,"seed":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 40px 20px 20px 40px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>","error":null,"seed":"<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n\n  .yellow-box {\n    background-color: yellow;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px 40px 20px 40px;\n  }\n\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 40px 20px 20px 40px;\n  }\n</style>\n<h5 class=\"injected-text\">margin</h5>\n\n<div class=\"box yellow-box\">\n  <h5 class=\"box red-box\">padding</h5>\n  <h5 class=\"box blue-box\">padding</h5>\n</div>"}]],"tests":[{"text":"<p>Your <code>blue-box</code> class should give the top of elements <code>40px</code> of <code>padding</code>.</p>","testString":"assert($('.blue-box').css('padding-top') === '40px');"},{"text":"<p>Your <code>blue-box</code> class should give the right of elements <code>20px</code> of <code>padding</code>.</p>","testString":"assert($('.blue-box').css('padding-right') === '20px');"},{"text":"<p>Your <code>blue-box</code> class should give the bottom of elements <code>20px</code> of <code>padding</code>.</p>","testString":"assert($('.blue-box').css('padding-bottom') === '20px');"},{"text":"<p>Your <code>blue-box</code> class should give the left of elements <code>40px</code> of <code>padding</code>.</p>","testString":"assert($('.blue-box').css('padding-left') === '40px');"},{"text":"<p>You should use the clockwise notation to set the padding of <code>blue-box</code> class.</p>","testString":"assert(\n  /\\.blue-box\\s*{[\\s\\S]*padding[\\s]*:\\s*\\d+px\\s+\\d+px\\s+\\d+px\\s+\\d+px(;\\s*[^}]+\\s*}|;?\\s*})/.test(\n    __helpers.removeCssComments($('style').text())\n  )\n);"}],"description":"<section id=\"description\">\n<p>Instead of specifying an element's <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, and <code>padding-left</code> properties individually, you can specify them all in one line, like this:</p>\n<pre><code class=\"language-css\">padding: 10px 20px 10px 20px;\n</code></pre>\n<p>These four values work like a clock: top, right, bottom, left, and will produce the exact same result as using the side-specific padding instructions.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use Clockwise Notation to give the <code>.blue-box</code> class a <code>padding</code> of <code>40px</code> on its top and left side, but only <code>20px</code> on its bottom and right side.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":20,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08805","title":"Use CSS Selectors to Style Elements","challengeType":0,"videoUrl":"https://scrimba.com/c/cJKMBT2","forumTopicId":18349,"dashedName":"use-css-selectors-to-style-elements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2 style=\"color: red;\">CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<h2 style=\"color: red;\">CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h2 {\n    color: blue;\n  }\n</style>\n<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<style>\n  h2 {\n    color: blue;\n  }\n</style>\n<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\" checked> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label><input type=\"checkbox\" name=\"personality\" checked> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>The <code>style</code> attribute should be removed from your <code>h2</code> element.</p>","testString":"assert(!$('h2').attr('style'));"},{"text":"<p>You should create a <code>style</code> element.</p>","testString":"assert($('style') && $('style').length >= 1);"},{"text":"<p>Your <code>h2</code> element should be blue.</p>","testString":"assert($('h2').css('color') === 'rgb(0, 0, 255)');"},{"text":"<p>Your stylesheet <code>h2</code> declaration should be valid with a semicolon and closing brace.</p>","testString":"assert(code.match(/h2\\s*\\{\\s*color\\s*:.*;\\s*\\}/g));"},{"text":"<p>All your <code>style</code> elements should be valid and have closing tags.</p>","testString":"assert(\n  code.match(/<\\/style>/g) &&\n    code.match(/<\\/style>/g).length ===\n      (\n        code.match(\n          /<style((\\s)*((type|media|scoped|title|disabled)=\"[^\"]*\")?(\\s)*)*>/g\n        ) || []\n      ).length\n);"}],"description":"<section id=\"description\">\n<p>With CSS, there are hundreds of CSS properties that you can use to change the way an element looks on your page.</p>\n<p>When you entered <code>&#x3C;h2 style=\"color: red;\">CatPhotoApp&#x3C;/h2></code>, you were styling that individual <code>h2</code> element with inline CSS, which stands for Cascading Style Sheets.</p>\n<p>That's one way to specify the style of an element, but there's a better way to apply CSS.</p>\n<p>At the top of your code, create a <code>style</code> block like this:</p>\n<pre><code class=\"language-html\">&#x3C;style>\n&#x3C;/style>\n</code></pre>\n<p>Inside that style block, you can create a <dfn>CSS selector</dfn> for all <code>h2</code> elements. For example, if you wanted all <code>h2</code> elements to be red, you would add a style rule that looks like this:</p>\n<pre><code class=\"language-html\">&#x3C;style>\n  h2 {\n    color: red;\n  }\n&#x3C;/style>\n</code></pre>\n<p>Note that it's important to have both opening and closing curly braces (<code>{</code> and <code>}</code>) around each element's style rule(s). You also need to make sure that your element's style definition is between the opening and closing style tags. Finally, be sure to add a semicolon to the end of each of your element's style rules.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Delete your <code>h2</code> element's style attribute, and instead create a CSS <code>style</code> block. Add the necessary CSS to turn all <code>h2</code> elements blue.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":1,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a9d725e424fe3d0e10cad10","title":"Use CSS Variables to change several elements at once","challengeType":0,"videoUrl":"https://scrimba.com/c/c6bDECm","forumTopicId":301093,"dashedName":"use-css-variables-to-change-several-elements-at-once","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .penguin {\n\n    /* Only change code below this line */\n    --penguin-skin: black;\n    --penguin-belly: gray;\n    --penguin-beak: yellow;\n    /* Only change code above this line */\n\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, white);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  body {\n    background:#c6faf1;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>","error":null,"seed":"<style>\n  .penguin {\n\n    /* Only change code below this line */\n    --penguin-skin: black;\n    --penguin-belly: gray;\n    --penguin-beak: yellow;\n    /* Only change code above this line */\n\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n\n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, white);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n\n  body {\n    background:#c6faf1;\n  }\n\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class=\"penguin\">\n  <div class=\"penguin-bottom\">\n    <div class=\"right-hand\"></div>\n    <div class=\"left-hand\"></div>\n    <div class=\"right-feet\"></div>\n    <div class=\"left-feet\"></div>\n  </div>\n  <div class=\"penguin-top\">\n    <div class=\"right-cheek\"></div>\n    <div class=\"left-cheek\"></div>\n    <div class=\"belly\"></div>\n    <div class=\"right-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"left-eye\">\n      <div class=\"sparkle\"></div>\n    </div>\n    <div class=\"blush-right\"></div>\n    <div class=\"blush-left\"></div>\n    <div class=\"beak-top\"></div>\n    <div class=\"beak-bottom\"></div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.penguin {--penguin-skin: gray; --penguin-belly: white; --penguin-beak: orange;}</style>","error":null,"seed":"<style>.penguin {--penguin-skin: gray; --penguin-belly: white; --penguin-beak: orange;}</style>"}]],"tests":[{"text":"<p><code>penguin</code> class should declare the <code>--penguin-skin</code> variable and assign it to <code>gray</code>.</p>","testString":"assert(\n  code.match(/.penguin\\s*?{[\\s\\S]*--penguin-skin\\s*?:\\s*?gray\\s*?;[\\s\\S]*}/gi)\n);"},{"text":"<p><code>penguin</code> class should declare the <code>--penguin-belly</code> variable and assign it to <code>white</code>.</p>","testString":"assert(\n  code.match(/.penguin\\s*?{[\\s\\S]*--penguin-belly\\s*?:\\s*?white\\s*?;[\\s\\S]*}/gi)\n);"},{"text":"<p><code>penguin</code> class should declare the <code>--penguin-beak</code> variable and assign it to <code>orange</code>.</p>","testString":"assert(\n  code.match(/.penguin\\s*?{[\\s\\S]*--penguin-beak\\s*?:\\s*?orange\\s*?;[\\s\\S]*}/gi)\n);"}],"description":"<section id=\"description\">\n<p><dfn>CSS Variables</dfn> are a powerful way to change many CSS style properties at once by changing only one value.</p>\n<p>Follow the instructions below to see how changing just three values can change the styling of many elements.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>In the <code>penguin</code> class, change the <code>black</code> value to <code>gray</code>, the <code>gray</code> value to <code>white</code>, and the <code>yellow</code> value to <code>orange</code>.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":36,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08726","title":"Use Hex Code for Specific Colors","challengeType":0,"videoUrl":"https://scrimba.com/c/c8W9mHM","forumTopicId":18350,"dashedName":"use-hex-code-for-specific-colors","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: black;\n  }\n</style>","error":null,"seed":"<style>\n  body {\n    background-color: black;\n  }\n</style>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: #000000;\n  }\n</style>","error":null,"seed":"<style>\n  body {\n    background-color: #000000;\n  }\n</style>"}]],"tests":[{"text":"<p>Your <code>body</code> element should have the <code>background-color</code> of black.</p>","testString":"assert($('body').css('background-color') === 'rgb(0, 0, 0)');"},{"text":"<p>The hex code for the color black should be used instead of the word <code>black</code>.</p>","testString":"assert(\n  code.match(\n    /body\\s*{(([\\s\\S]*;\\s*?)|\\s*?)background.*\\s*:\\s*?#000(000)?((\\s*})|(;[\\s\\S]*?}))/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p>Did you know there are other ways to represent colors in CSS? One of these ways is called hexadecimal code, or hex code for short.</p>\n<p>We usually use <dfn>decimals</dfn>, or base 10 numbers, which use the symbols 0 to 9 for each digit. <dfn>Hexadecimals</dfn> (or <dfn>hex</dfn>) are base 16 numbers. This means it uses sixteen distinct symbols. Like decimals, the symbols 0-9 represent the values zero to nine. Then A,B,C,D,E,F represent the values ten to fifteen. Altogether, 0 to F can represent a digit in hexadecimal, giving us 16 total possible values. You can find more information about <a href=\"https://www.freecodecamp.org/news/hexadecimal-number-system/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">hexadecimal numbers here</a>.</p>\n<p>In CSS, we can use 6 hexadecimal digits to represent colors, two each for the red (R), green (G), and blue (B) components. For example, <code>#000000</code> is black and is also the lowest possible value. You can find more information about the <a href=\"https://www.freecodecamp.org/news/rgb-color-html-and-css-guide/#whatisthergbcolormodel\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">RGB color system here</a>.</p>\n<pre><code class=\"language-css\">body {\n  color: #000000;\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Replace the word <code>black</code> in our <code>body</code> element's background-color with its hex code representation, <code>#000000</code>.</p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":31,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08721","title":"Use Hex Code to Mix Colors","challengeType":0,"videoUrl":"https://scrimba.com/c/cK89PhP","forumTopicId":18359,"dashedName":"use-hex-code-to-mix-colors","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .red-text {\n    color: black;\n  }\n  .green-text {\n    color: black;\n  }\n  .dodger-blue-text {\n    color: black;\n  }\n  .orange-text {\n    color: black;\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"green-text\">I am green!</h1>\n\n<h1 class=\"dodger-blue-text\">I am dodger blue!</h1>\n\n<h1 class=\"orange-text\">I am orange!</h1>","error":null,"seed":"<style>\n  .red-text {\n    color: black;\n  }\n  .green-text {\n    color: black;\n  }\n  .dodger-blue-text {\n    color: black;\n  }\n  .orange-text {\n    color: black;\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"green-text\">I am green!</h1>\n\n<h1 class=\"dodger-blue-text\">I am dodger blue!</h1>\n\n<h1 class=\"orange-text\">I am orange!</h1>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .red-text {\n    color: #FF0000;\n  }\n  .green-text {\n    color: #00FF00;\n  }\n  .dodger-blue-text {\n    color: #1E90FF;\n  }\n  .orange-text {\n    color: #FFA500;\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"green-text\">I am green!</h1>\n\n<h1 class=\"dodger-blue-text\">I am dodger blue!</h1>\n\n<h1 class=\"orange-text\">I am orange!</h1>","error":null,"seed":"<style>\n  .red-text {\n    color: #FF0000;\n  }\n  .green-text {\n    color: #00FF00;\n  }\n  .dodger-blue-text {\n    color: #1E90FF;\n  }\n  .orange-text {\n    color: #FFA500;\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"green-text\">I am green!</h1>\n\n<h1 class=\"dodger-blue-text\">I am dodger blue!</h1>\n\n<h1 class=\"orange-text\">I am orange!</h1>"}]],"tests":[{"text":"<p>Your <code>h1</code> element with the text <code>I am red!</code> should be given the <code>color</code> red.</p>","testString":"assert($('.red-text').css('color') === 'rgb(255, 0, 0)');"},{"text":"<p>The <code>hex code</code> for the color red should be used instead of the word <code>red</code>.</p>","testString":"assert(code.match(/\\.red-text\\s*?{\\s*?color\\s*:\\s*?(#FF0000|#F00)\\s*?;?\\s*?}/gi));"},{"text":"<p>Your <code>h1</code> element with the text <code>I am green!</code> should be given the <code>color</code> green.</p>","testString":"assert($('.green-text').css('color') === 'rgb(0, 255, 0)');"},{"text":"<p>The <code>hex code</code> for the color green should be used instead of the word <code>green</code>.</p>","testString":"assert(code.match(/\\.green-text\\s*?{\\s*?color\\s*:\\s*?(#00FF00|#0F0)\\s*?;?\\s*?}/gi));"},{"text":"<p>Your <code>h1</code> element with the text <code>I am dodger blue!</code> should be given the <code>color</code> dodger blue.</p>","testString":"assert($('.dodger-blue-text').css('color') === 'rgb(30, 144, 255)');"},{"text":"<p>The <code>hex code</code> for the color dodger blue should be used instead of the word <code>dodgerblue</code>.</p>","testString":"assert(code.match(/\\.dodger-blue-text\\s*?{\\s*?color\\s*:\\s*?#1E90FF\\s*?;?\\s*?}/gi));"},{"text":"<p>Your <code>h1</code> element with the text <code>I am orange!</code> should be given the <code>color</code> orange.</p>","testString":"assert($('.orange-text').css('color') === 'rgb(255, 165, 0)');"},{"text":"<p>The <code>hex code</code> for the color orange should be used instead of the word <code>orange</code>.</p>","testString":"assert(code.match(/\\.orange-text\\s*?{\\s*?color\\s*:\\s*?#FFA500\\s*?;?\\s*?}/gi));"}],"description":"<section id=\"description\">\n<p>To review, hex codes use 6 hexadecimal digits to represent colors, two each for red (R), green (G), and blue (B) components.</p>\n<p>From these three pure colors (red, green, and blue), we can vary the amounts of each to create over 16 million other colors!</p>\n<p>For example, orange is pure red, mixed with some green, and no blue. In hex code, this translates to being <code>#FFA500</code>.</p>\n<p>The digit <code>0</code> is the lowest number in hex code, and represents a complete absence of color.</p>\n<p>The digit <code>F</code> is the highest number in hex code, and represents the maximum possible brightness.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Replace the color words in our <code>style</code> element with their correct hex codes.</p>\n<table class='table table-striped'><tbody><tr><th>Color</th><th>Hex Code</th></tr><tr><td>Dodger Blue</td><td><code>#1E90FF</code></td></tr><tr><td>Green</td><td><code>#00FF00</code></td></tr><tr><td>Orange</td><td><code>#FFA500</code></td></tr><tr><td>Red</td><td><code>#FF0000</code></td></tr></tbody></table>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":32,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad82fee1348bd9aedf08721","title":"Use RGB to Mix Colors","challengeType":0,"videoUrl":"https://scrimba.com/c/cm24JU6","forumTopicId":18368,"dashedName":"use-rgb-to-mix-colors","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .red-text {\n    color: #000000;\n  }\n  .orchid-text {\n    color: #000000;\n  }\n  .sienna-text {\n    color: #000000;\n  }\n  .blue-text {\n    color: #000000;\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"orchid-text\">I am orchid!</h1>\n\n<h1 class=\"sienna-text\">I am sienna!</h1>\n\n<h1 class=\"blue-text\">I am blue!</h1>","error":null,"seed":"<style>\n  .red-text {\n    color: #000000;\n  }\n  .orchid-text {\n    color: #000000;\n  }\n  .sienna-text {\n    color: #000000;\n  }\n  .blue-text {\n    color: #000000;\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"orchid-text\">I am orchid!</h1>\n\n<h1 class=\"sienna-text\">I am sienna!</h1>\n\n<h1 class=\"blue-text\">I am blue!</h1>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .red-text {\n    color: rgb(255, 0, 0);\n  }\n  .orchid-text {\n    color: rgb(218, 112, 214);\n  }\n  .sienna-text {\n    color: rgb(160, 82, 45);\n  }\n  .blue-text {\n    color:rgb(0, 0, 255);\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"orchid-text\">I am orchid!</h1>\n\n<h1 class=\"sienna-text\">I am sienna!</h1>\n\n<h1 class=\"blue-text\">I am blue!</h1>","error":null,"seed":"<style>\n  .red-text {\n    color: rgb(255, 0, 0);\n  }\n  .orchid-text {\n    color: rgb(218, 112, 214);\n  }\n  .sienna-text {\n    color: rgb(160, 82, 45);\n  }\n  .blue-text {\n    color:rgb(0, 0, 255);\n  }\n</style>\n\n<h1 class=\"red-text\">I am red!</h1>\n\n<h1 class=\"orchid-text\">I am orchid!</h1>\n\n<h1 class=\"sienna-text\">I am sienna!</h1>\n\n<h1 class=\"blue-text\">I am blue!</h1>"}]],"tests":[{"text":"<p>Your <code>h1</code> element with the text <code>I am red!</code> should have the <code>color</code> red.</p>","testString":"assert($('.red-text').css('color') === 'rgb(255, 0, 0)');"},{"text":"<p>You should use <code>rgb</code> for the color red.</p>","testString":"assert(\n  code.match(\n    /\\.red-text\\s*{\\s*color\\s*:\\s*rgb\\(\\s*255\\s*,\\s*0\\s*,\\s*0\\s*\\)\\s*;?\\s*}/gi\n  )\n);"},{"text":"<p>Your <code>h1</code> element with the text <code>I am orchid!</code> should have the <code>color</code> orchid.</p>","testString":"assert($('.orchid-text').css('color') === 'rgb(218, 112, 214)');"},{"text":"<p>You should use <code>rgb</code> for the color orchid.</p>","testString":"assert(\n  code.match(\n    /\\.orchid-text\\s*{\\s*color\\s*:\\s*rgb\\(\\s*218\\s*,\\s*112\\s*,\\s*214\\s*\\)\\s*;?\\s*}/gi\n  )\n);"},{"text":"<p>Your <code>h1</code> element with the text <code>I am blue!</code> should have the <code>color</code> blue.</p>","testString":"assert($('.blue-text').css('color') === 'rgb(0, 0, 255)');"},{"text":"<p>You should use <code>rgb</code> for the color blue.</p>","testString":"assert(\n  code.match(\n    /\\.blue-text\\s*{\\s*color\\s*:\\s*rgb\\(\\s*0\\s*,\\s*0\\s*,\\s*255\\s*\\)\\s*;?\\s*}/gi\n  )\n);"},{"text":"<p>Your <code>h1</code> element with the text <code>I am sienna!</code> should have the <code>color</code> sienna.</p>","testString":"assert($('.sienna-text').css('color') === 'rgb(160, 82, 45)');"},{"text":"<p>You should use <code>rgb</code> for the color sienna.</p>","testString":"assert(\n  code.match(\n    /\\.sienna-text\\s*{\\s*color\\s*:\\s*rgb\\(\\s*160\\s*,\\s*82\\s*,\\s*45\\s*\\)\\s*;?\\s*}/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p>Just like with hex code, you can mix colors in RGB by using combinations of different values.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Replace the hex codes in our <code>style</code> element with their correct RGB values.</p>\n<table class='table table-striped'><tbody><tr><th>Color</th><th>RGB</th></tr><tr><td>Blue</td><td><code>rgb(0, 0, 255)</code></td></tr><tr><td>Red</td><td><code>rgb(255, 0, 0)</code></td></tr><tr><td>Orchid</td><td><code>rgb(218, 112, 214)</code></td></tr><tr><td>Sienna</td><td><code>rgb(160, 82, 45)</code></td></tr></tbody></table>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":35,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aede08718","title":"Use RGB values to Color Elements","challengeType":0,"videoUrl":"https://scrimba.com/c/cRkp2fr","forumTopicId":18369,"dashedName":"use-rgb-values-to-color-elements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: #F00;\n  }\n</style>","error":null,"seed":"<style>\n  body {\n    background-color: #F00;\n  }\n</style>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    background-color: rgb(0, 0, 0);\n  }\n</style>","error":null,"seed":"<style>\n  body {\n    background-color: rgb(0, 0, 0);\n  }\n</style>"}]],"tests":[{"text":"<p>Your <code>body</code> element should have a black background.</p>","testString":"assert($('body').css('background-color') === 'rgb(0, 0, 0)');"},{"text":"<p>You should use <code>rgb</code> to give your <code>body</code> element a background of black.</p>","testString":"assert(code.match(/rgb\\s*\\(\\s*0\\s*,\\s*0\\s*,\\s*0\\s*\\)/gi));"}],"description":"<section id=\"description\">\n<p>Another way you can represent colors in CSS is by using <code>RGB</code> values.</p>\n<p>The <code>RGB</code> value for black looks like this:</p>\n<pre><code class=\"language-css\">rgb(0, 0, 0)\n</code></pre>\n<p>The <code>RGB</code> value for white looks like this:</p>\n<pre><code class=\"language-css\">rgb(255, 255, 255)\n</code></pre>\n<p>Instead of using six hexadecimal digits like you do with hex code, with <code>RGB</code> you specify the brightness of each color with a number between 0 and 255.</p>\n<p>If you do the math, the two digits for one color equal 16 times 16, which gives us 256 total values. So <code>RGB</code>, which starts counting from zero, has the exact same number of possible values as hex code.</p>\n<p>Here's an example of how you'd change the <code>body</code> background to orange using its RGB code.</p>\n<pre><code class=\"language-css\">body {\n  background-color: rgb(255, 165, 0);\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Let's replace the hex code in our <code>body</code> element's background color with the RGB value for black: <code>rgb(0, 0, 0)</code></p>\n</section>","block":"basic-css","hasEditableBoundaries":false,"order":1,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":34,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false}]},"basic-html-and-html5":{"meta":{"name":"Basic HTML and HTML5","isUpcomingChange":false,"dashedName":"basic-html-and-html5","order":0,"time":"5 hours","template":"","required":[],"superBlock":"responsive-web-design","challengeOrder":[["bd7123c8c441eddfaeb5bdef","Say Hello to HTML Elements"],["bad87fee1348bd9aedf0887a","Headline with the h2 Element"],["bad87fee1348bd9aedf08801","Inform with the Paragraph Element"],["bad87fee1348bd9aedf08833","Fill in the Blank with Placeholder Text"],["bad87fee1348bd9aedf08802","Uncomment HTML"],["bad87fee1348bd9aedf08804","Comment out HTML"],["bad87fed1348bd9aedf08833","Delete HTML Elements"],["bad87fee1348bd9aecf08801","Introduction to HTML5 Elements"],["bad87fee1348bd9aedf08812","Add Images to Your Website"],["bad87fee1348bd9aedf08816","Link to External Pages with Anchor Elements"],["bad88fee1348bd9aedf08816","Link to Internal Sections of a Page with Anchor Elements"],["bad87fee1348bd9aede08817","Nest an Anchor Element within a Paragraph"],["bad87fee1348bd9aedf08817","Make Dead Links Using the Hash Symbol"],["bad87fee1348bd9aedf08820","Turn an Image into a Link"],["bad87fee1348bd9aedf08827","Create a Bulleted Unordered List"],["bad87fee1348bd9aedf08828","Create an Ordered List"],["bad87fee1348bd9aedf08829","Create a Text Field"],["bad87fee1348bd9aedf08830","Add Placeholder Text to a Text Field"],["bad87fee1348bd9aede08830","Create a Form Element"],["bad87fee1348bd9aedd08830","Add a Submit Button to a Form"],["bad87fee1348bd9aedc08830","Use HTML5 to Require a Field"],["bad87fee1348bd9aedf08834","Create a Set of Radio Buttons"],["bad87fee1348bd9aedf08835","Create a Set of Checkboxes"],["5c6c06847491271903d37cfd","Use the value attribute with Radio Buttons and Checkboxes"],["bad87fee1348bd9aedd08835","Check Radio Buttons and Checkboxes by Default"],["bad87fee1348bd9aede08835","Nest Many Elements within a Single div Element"],["587d78aa367417b2b2512aed","Declare the Doctype of an HTML Document"],["587d78aa367417b2b2512aec","Define the Head and Body of an HTML Document"]]},"challenges":[{"id":"bad87fee1348bd9aedd08830","title":"Add a Submit Button to a Form","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/cp2Nkhz","forumTopicId":16627,"dashedName":"add-a-submit-button-to-a-form","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <input type=\"text\" placeholder=\"cat photo URL\">\n  </form>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <input type=\"text\" placeholder=\"cat photo URL\">\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <input type=\"text\" placeholder=\"cat photo URL\">\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <input type=\"text\" placeholder=\"cat photo URL\">\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>Your <code>form</code> should have a <code>button</code> inside it.</p>","testString":"assert($('form').children('button').length > 0);"},{"text":"<p>Your submit button should have the attribute <code>type</code> set to <code>submit</code>.</p>","testString":"assert($('button').attr('type') === 'submit');"},{"text":"<p>Your submit button should only have the text <code>Submit</code>.</p>","testString":"assert(\n  $('button')\n    .text()\n    .match(/^\\s*submit\\s*$/gi)\n);"},{"text":"<p>Your <code>button</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/button>/g) &&\n    code.match(/<button/g) &&\n    code.match(/<\\/button>/g).length === code.match(/<button/g).length\n);"}],"description":"<section id=\"description\">\n<p>Let's add a <code>submit</code> button to your form. Clicking this button will send the data from your form to the URL you specified with your form's <code>action</code> attribute.</p>\n<p>Here's an example submit button:</p>\n<pre><code class=\"language-html\">&#x3C;button type=\"submit\">this button submits the form&#x3C;/button>\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add a button as the last element of your <code>form</code> element with a type of <code>submit</code>, and <code>Submit</code> as its text.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":19,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08812","title":"Add Images to Your Website","challengeType":0,"forumTopicId":16640,"dashedName":"add-images-to-your-website","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"}]],"tests":[{"text":"<p>Your page should have an image element.</p>","testString":"assert($('img').length);"},{"text":"<p>Your image should have a <code>src</code> attribute that points to the kitten image.</p>","testString":"assert(/^https:\\/\\/cdn\\.freecodecamp\\.org\\/curriculum\\/cat-photo-app\\/relaxing-cat\\.jpg$/i.test($('img').attr('src')));"},{"text":"<p>Your image element's <code>alt</code> attribute should not be empty.</p>","testString":"assert(\n  $('img').attr('alt') &&\n    $('img').attr('alt').length &&\n    /<(?:img|IMG)\\S*alt=(['\"])(?!\\1|>)\\S+\\1\\S*\\/?>/.test(\n      __helpers.removeWhiteSpace(code)\n    )\n);"}],"description":"<section id=\"description\">\n<p>You can add images to your website by using the <code>img</code> element, and point to a specific image's URL using the <code>src</code> attribute.</p>\n<p>An example of this would be:</p>\n<pre><code class=\"language-html\">&#x3C;img src=\"https://www.freecatphotoapp.com/your-image.jpg\">\n</code></pre>\n<p>Note that <code>img</code> elements are self-closing.</p>\n<p>All <code>img</code> elements <strong>must</strong> have an <code>alt</code> attribute. The text inside an <code>alt</code> attribute is used for screen readers to improve accessibility and is displayed if the image fails to load.</p>\n<p><strong>Note:</strong> If the image is purely decorative, using an empty <code>alt</code> attribute is a best practice.</p>\n<p>Ideally the <code>alt</code> attribute should not contain special characters unless needed.</p>\n<p>Let's add an <code>alt</code> attribute to our <code>img</code> example above:</p>\n<pre><code class=\"language-html\">&#x3C;img src=\"https://www.freecatphotoapp.com/your-image.jpg\" alt=\"freeCodeCamp logo\">\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Let's try to add an image to our website:</p>\n<p>Within the existing <code>main</code> element, insert an <code>img</code> element before the existing <code>p</code> elements.</p>\n<p>Now set the <code>src</code> attribute so that it points to the url <code>https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg</code></p>\n<p>Finally, don't forget to give your <code>img</code> element an <code>alt</code> attribute with applicable text.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":8,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08830","title":"Add Placeholder Text to a Text Field","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/cKdJDhg","forumTopicId":16647,"dashedName":"add-placeholder-text-to-a-text-field","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <input type=\"text\">\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <input type=\"text\">\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <input type=\"text\" placeholder=\"cat photo URL\">\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <input type=\"text\" placeholder=\"cat photo URL\">\n</main>"}]],"tests":[{"text":"<p>You should add a <code>placeholder</code> attribute to the existing text <code>input</code> element.</p>","testString":"assert($('input[placeholder]').length > 0);"},{"text":"<p>You should set the value of your <code>placeholder</code> attribute to <code>cat photo URL</code>.</p>","testString":"assert(\n  $('input') &&\n    $('input').attr('placeholder') &&\n    $('input')\n      .attr('placeholder')\n      .match(/cat\\s+photo\\s+URL/gi)\n);"},{"text":"<p>The finished <code>input</code> element should not have a closing tag.</p>","testString":"assert(!code.match(/<input.*\\/?>.*<\\/input>/gi));"},{"text":"<p>The finished <code>input</code> element should have valid syntax.</p>","testString":"assert($('input[type=text]').length > 0);"}],"description":"<section id=\"description\">\n<p>Placeholder text is what is displayed in your <code>input</code> element before your user has inputted anything.</p>\n<p>You can create placeholder text like so:</p>\n<pre><code class=\"language-html\">&#x3C;input type=\"text\" placeholder=\"this is placeholder text\">\n</code></pre>\n<p><strong>Note:</strong> Remember that <code>input</code> elements are self-closing.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Set the <code>placeholder</code> value of your text <code>input</code> to \"cat photo URL\".</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":17,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedd08835","title":"Check Radio Buttons and Checkboxes by Default","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/cWk3Qh6","forumTopicId":301094,"dashedName":"check-radio-buttons-and-checkboxes-by-default","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\"> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label><br>\n    <label for=\"loving\"><input id=\"loving\" type=\"checkbox\" name=\"personality\" value=\"loving\"> Loving</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" name=\"personality\" value=\"lazy\"> Lazy</label>\n    <label for=\"energetic\"><input id=\"energetic\" type=\"checkbox\" name=\"personality\" value=\"energetic\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\"> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label><br>\n    <label for=\"loving\"><input id=\"loving\" type=\"checkbox\" name=\"personality\" value=\"loving\"> Loving</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" name=\"personality\" value=\"lazy\"> Lazy</label>\n    <label for=\"energetic\"><input id=\"energetic\" type=\"checkbox\" name=\"personality\" value=\"energetic\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\" checked> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label><br>\n    <label for=\"loving\"><input id=\"loving\" type=\"checkbox\" name=\"personality\" value=\"loving\" checked> Loving</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" name=\"personality\" value=\"lazy\"> Lazy</label>\n    <label for=\"energetic\"><input id=\"energetic\" type=\"checkbox\" name=\"personality\" value=\"energetic\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\" checked> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label><br>\n    <label for=\"loving\"><input id=\"loving\" type=\"checkbox\" name=\"personality\" value=\"loving\" checked> Loving</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" name=\"personality\" value=\"lazy\"> Lazy</label>\n    <label for=\"energetic\"><input id=\"energetic\" type=\"checkbox\" name=\"personality\" value=\"energetic\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>Your first radio button on your form should be checked by default.</p>","testString":"assert($('input[type=\"radio\"]').prop('checked'));"},{"text":"<p>Your first checkbox on your form should be checked by default.</p>","testString":"assert($('input[type=\"checkbox\"]').prop('checked'));"},{"text":"<p>You should not change the inner text of the <code>Indoor</code> label.</p>","testString":"assert.equal(document.querySelector('label[for=\"indoor\"]')?.innerText?.trim(), 'Indoor');"},{"text":"<p>You should not change the inner text of the <code>Loving</code> label.</p>","testString":"assert.equal(document.querySelector('label[for=\"loving\"]')?.innerText?.trim(), 'Loving');"}],"description":"<section id=\"description\">\n<p>You can set a checkbox or radio button to be checked by default using the <code>checked</code> attribute.</p>\n<p>To do this, just add the word <code>checked</code> to the inside of an <code>input</code> element. For example:</p>\n<pre><code class=\"language-html\">&#x3C;input type=\"radio\" name=\"test-name\" checked>\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Set the first of your radio buttons and the first of your checkboxes to both be checked by default.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":24,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08804","title":"Comment out HTML","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/cGyGbca","forumTopicId":16782,"dashedName":"comment-out-html","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<!--\n<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n-->","error":null,"seed":"<!--\n<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n-->"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<!--<h1>Hello World</h1>-->\n<h2>CatPhotoApp</h2> \n<!--<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p> -->","error":null,"seed":"<!--<h1>Hello World</h1>-->\n<h2>CatPhotoApp</h2> \n<!--<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p> -->"}]],"tests":[{"text":"<p>Your <code>h1</code> element should be commented out so that it is not visible on the page.</p>","testString":"assert($('h1').length === 0);"},{"text":"<p>Your <code>h2</code> element should not be commented out so that it is visible on the page.</p>","testString":"assert($('h2').length > 0);"},{"text":"<p>Your <code>p</code> element should be commented out so that it is not visible on the page.</p>","testString":"assert($('p').length === 0);"},{"text":"<p>Each of your comments should be closed with <code>--></code>.</p>","testString":"assert(code.match(/[^fc]-->/g).length > 1);"},{"text":"<p>You should not change the order of the <code>h1</code>, <code>h2</code>, or <code>p</code> elements in the code.</p>","testString":"assert(\n  code.match(/<([a-z0-9]){1,2}>/g)[0] === '<h1>' &&\n    code.match(/<([a-z0-9]){1,2}>/g)[1] === '<h2>' &&\n    code.match(/<([a-z0-9]){1,2}>/g)[2] === '<p>'\n);"}],"description":"<section id=\"description\">\n<p>Remember that in order to start a comment, you need to use <code>&#x3C;!--</code> and to end a comment, you need to use <code>--></code></p>\n<p>Here you'll need to end the comment before your <code>h2</code> element begins.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Comment out your <code>h1</code> element and your <code>p</code> element, but not your <code>h2</code> element.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":5,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08827","title":"Create a Bulleted Unordered List","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/cDKVPuv","forumTopicId":16814,"dashedName":"create-a-bulleted-unordered-list","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <ul>\n    <li>milk</li>\n    <li>mice</li>\n    <li>catnip</li>\n  </ul>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <ul>\n    <li>milk</li>\n    <li>mice</li>\n    <li>catnip</li>\n  </ul>\n</main>"}]],"tests":[{"text":"<p>Create a <code>ul</code> element.</p>","testString":"assert($('ul').length > 0);"},{"text":"<p>You should have three <code>li</code> elements within your <code>ul</code> element.</p>","testString":"assert($('ul li').length > 2);"},{"text":"<p>Your <code>ul</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/ul>/gi) &&\n    code.match(/<ul/gi) &&\n    code.match(/<\\/ul>/gi).length === code.match(/<ul/gi).length\n);"},{"text":"<p>Your <code>li</code> elements should have closing tags.</p>","testString":"assert(\n  code.match(/<\\/li>/gi) &&\n    code.match(/<li[\\s>]/gi) &&\n    code.match(/<\\/li>/gi).length === code.match(/<li[\\s>]/gi).length\n);"},{"text":"<p>Your <code>li</code> elements should not contain an empty string or only white-space.</p>","testString":"assert($('ul li').filter((_, item) => !$(item).text().trim()).length === 0);"}],"description":"<section id=\"description\">\n<p>HTML has a special element for creating <dfn>unordered lists</dfn>, or bullet point style lists.</p>\n<p>Unordered lists start with an opening <code>&#x3C;ul></code> element, followed by any number of <code>&#x3C;li></code> elements. Finally, unordered lists close with a <code>&#x3C;/ul></code>.</p>\n<p>For example:</p>\n<pre><code class=\"language-html\">&#x3C;ul>\n  &#x3C;li>milk&#x3C;/li>\n  &#x3C;li>cheese&#x3C;/li>\n&#x3C;/ul>\n</code></pre>\n<p>would create a bullet point style list of <code>milk</code> and <code>cheese</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Remove the last two <code>p</code> elements and create an unordered list of three things that cats love at the bottom of the page.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":14,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aede08830","title":"Create a Form Element","challengeType":0,"forumTopicId":16817,"dashedName":"create-a-form-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <input type=\"text\" placeholder=\"cat photo URL\">\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <input type=\"text\" placeholder=\"cat photo URL\">\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <input type=\"text\" placeholder=\"cat photo URL\">\n  </form>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <input type=\"text\" placeholder=\"cat photo URL\">\n  </form>\n</main>"}]],"tests":[{"text":"<p>The existing <code>input</code> element should be nested within a <code>form</code> element.</p>","testString":"const inputElem = document.querySelector('form input');\nassert(\n  inputElem.getAttribute('type') === 'text' &&\n    inputElem.getAttribute('placeholder') === 'cat photo URL'\n);"},{"text":"<p>Your <code>form</code> should have an <code>action</code> attribute which is set to <code>https://www.freecatphotoapp.com/submit-cat-photo</code>.</p>","testString":"const action = $('form').attr('action');\nassert(action.match(/^https:\\/\\/(www\\.)?freecatphotoapp\\.com\\/submit-cat-photo$/i))"},{"text":"<p>Your <code>form</code> element should have well-formed open and close tags.</p>","testString":"assert(\n  code.match(/<\\/form>/g) &&\n    code.match(/<form [^<]*>/g) &&\n    code.match(/<\\/form>/g).length === code.match(/<form [^<]*>/g).length\n);"}],"description":"<section id=\"description\">\n<p>You can build web forms that actually submit data to a server using nothing more than pure HTML. You can do this by specifying an <code>action</code> attribute on your <code>form</code> element.</p>\n<p>For example:</p>\n<pre><code class=\"language-html\">&#x3C;form action=\"url-where-you-want-to-submit-form-data\">\n  &#x3C;input>\n&#x3C;/form>\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Nest the existing <code>input</code> element inside a <code>form</code> element and assign <code>\"https://www.freecatphotoapp.com/submit-cat-photo\"</code> to the <code>action</code> attribute of the <code>form</code> element.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":18,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08835","title":"Create a Set of Checkboxes","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/cqrkJsp","forumTopicId":16821,"dashedName":"create-a-set-of-checkboxes","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label for=\"playful\"><input id=\"playful\" type=\"checkbox\" name=\"personality\">Playful</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" \nname=\"personality\">Lazy</label>\n    <label for=\"evil\"><input id=\"evil\" type=\"checkbox\" \nname=\"personality\">Evil</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label for=\"playful\"><input id=\"playful\" type=\"checkbox\" name=\"personality\">Playful</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" \nname=\"personality\">Lazy</label>\n    <label for=\"evil\"><input id=\"evil\" type=\"checkbox\" \nname=\"personality\">Evil</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>Your page should have three checkbox elements.</p>","testString":"assert($('input[type=\"checkbox\"]').length > 2);"},{"text":"<p>Each of your three checkbox elements should be nested in its own <code>label</code> element.</p>","testString":"assert($('label > input[type=\"checkbox\"]:only-child').length > 2);"},{"text":"<p>Make sure each of your <code>label</code> elements has a closing tag.</p>","testString":"assert(\n  code.match(/<\\/label>/g) &&\n    code.match(/<label/g) &&\n    code.match(/<\\/label>/g).length === code.match(/<label/g).length\n);"},{"text":"<p>Your checkboxes should be given the <code>name</code> attribute of <code>personality</code>.</p>","testString":"assert(\n  $('label > input[type=\"checkbox\"]').filter('[name=\"personality\"]').length > 2\n);"},{"text":"<p>Each of your checkboxes should be added within the <code>form</code> tag.</p>","testString":"assert($('label').parent().get(0).tagName.match('FORM'));"}],"description":"<section id=\"description\">\n<p>Forms commonly use <dfn>checkboxes</dfn> for questions that may have more than one answer.</p>\n<p>Checkboxes are a type of <code>input</code>.</p>\n<p>Each of your checkboxes can be nested within its own <code>label</code> element. By wrapping an <code>input</code> element inside of a <code>label</code> element it will automatically associate the checkbox input with the label element surrounding it.</p>\n<p>All related checkbox inputs should have the same <code>name</code> attribute.</p>\n<p>It is considered best practice to explicitly define the relationship between a checkbox <code>input</code> and its corresponding <code>label</code> by setting the <code>for</code> attribute on the <code>label</code> element to match the <code>id</code> attribute of the associated <code>input</code> element.</p>\n<p>Here's an example of a checkbox:</p>\n<pre><code class=\"language-html\">&#x3C;label for=\"loving\">&#x3C;input id=\"loving\" type=\"checkbox\" name=\"personality\"> Loving&#x3C;/label>\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add to your form a set of three checkboxes. Each checkbox should be nested within its own <code>label</code> element. All three should share the <code>name</code> attribute of <code>personality</code>.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":22,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08834","title":"Create a Set of Radio Buttons","challengeType":0,"forumTopicId":16822,"dashedName":"create-a-set-of-radio-buttons","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n   <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n   <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>Your page should have two <code>radio</code> button elements.</p>","testString":"assert($('input[type=\"radio\"]').length > 1);"},{"text":"<p>Your radio buttons should be given the <code>name</code> attribute of <code>indoor-outdoor</code>.</p>","testString":"assert($('input[type=\"radio\"]').filter(\"[name='indoor-outdoor']\").length > 1);"},{"text":"<p>Each of your two radio button elements should be nested in its own <code>label</code> element.</p>","testString":"assert($('label > input[type=\"radio\"]:only-child').length > 1);"},{"text":"<p>Each of your <code>label</code> elements should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/label>/g) &&\n    code.match(/<label/g) &&\n    code.match(/<\\/label>/g).length === code.match(/<label/g).length\n);"},{"text":"<p>One of your radio buttons should have the label <code>indoor</code>.</p>","testString":"assert(\n  $('label')\n    .text()\n    .match(/indoor/gi)\n);"},{"text":"<p>One of your radio buttons should have the label <code>outdoor</code>.</p>","testString":"assert(\n  $('label')\n    .text()\n    .match(/outdoor/gi)\n);"},{"text":"<p>Each of your radio button elements should be added within the <code>form</code> tag.</p>","testString":"assert($('label').parent().get(0).tagName.match('FORM'));"}],"description":"<section id=\"description\">\n<p>You can use <dfn>radio buttons</dfn> for questions where you want the user to only give you one answer out of multiple options.</p>\n<p>Radio buttons are a type of <code>input</code>.</p>\n<p>Each of your radio buttons can be nested within its own <code>label</code> element. By wrapping an <code>input</code> element inside of a <code>label</code> element it will automatically associate the radio button input with the label element surrounding it.</p>\n<p>All related radio buttons should have the same <code>name</code> attribute to create a radio button group. By creating a radio group, selecting any single radio button will automatically deselect the other buttons within the same group ensuring only one answer is provided by the user.</p>\n<p>Here's an example of a radio button:</p>\n<pre><code class=\"language-html\">&#x3C;label> \n  &#x3C;input type=\"radio\" name=\"indoor-outdoor\">Indoor \n&#x3C;/label>\n</code></pre>\n<p>It is considered best practice to set a <code>for</code> attribute on the <code>label</code> element, with a value that matches the value of the <code>id</code> attribute of the <code>input</code> element. This allows assistive technologies to create a linked relationship between the label and the related <code>input</code> element. For example:</p>\n<pre><code class=\"language-html\">&#x3C;input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\">\n&#x3C;label for=\"indoor\">Indoor&#x3C;/label>\n</code></pre>\n<p>We can also nest the <code>input</code> element within the <code>label</code> tags:</p>\n<pre><code class=\"language-html\">&#x3C;label for=\"indoor\"> \n  &#x3C;input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\">Indoor \n&#x3C;/label>\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add a pair of radio buttons to your form, each nested in its own <code>label</code> element. One should have the option of <code>indoor</code> and the other should have the option of <code>outdoor</code>. Both should share the <code>name</code> attribute of <code>indoor-outdoor</code> to create a radio group.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":21,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08829","title":"Create a Text Field","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/c2EVnf6","forumTopicId":16823,"dashedName":"create-a-text-field","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n\n\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n\n\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form>\n    <input type=\"text\">\n  </form>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form>\n    <input type=\"text\">\n  </form>\n</main>"}]],"tests":[{"text":"<p>Your app should have an <code>input</code> element of type <code>text</code>.</p>","testString":"assert($('input[type=text]').length > 0);"}],"description":"<section id=\"description\">\n<p>Now let's create a web form.</p>\n<p><code>input</code> elements are a convenient way to get input from your user.</p>\n<p>You can create a text input like this:</p>\n<pre><code class=\"language-html\">&#x3C;input type=\"text\">\n</code></pre>\n<p>Note that <code>input</code> elements are self-closing.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create an <code>input</code> element of type <code>text</code> below your lists.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":16,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08828","title":"Create an Ordered List","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/cQ3B8TM","forumTopicId":16824,"dashedName":"create-an-ordered-list","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>hate 1</li>\n    <li>hate 2</li>\n    <li>hate 3</li>\n  </ol>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>hate 1</li>\n    <li>hate 2</li>\n    <li>hate 3</li>\n  </ol>\n</main>"}]],"tests":[{"text":"<p>You should have an ordered list for <code>Top 3 things cats hate:</code></p>","testString":"assert(/Top 3 things cats hate:/i.test($('ol').prev().text()));"},{"text":"<p>You should have an unordered list for <code>Things cats love:</code></p>","testString":"assert(/Things cats love:/i.test($('ul').prev().text()));"},{"text":"<p>You should have only one <code>ul</code> element.</p>","testString":"assert.equal($('ul').length, 1);"},{"text":"<p>You should have only one <code>ol</code> element.</p>","testString":"assert.equal($('ol').length, 1);"},{"text":"<p>You should have three <code>li</code> elements within your <code>ul</code> element.</p>","testString":"assert.equal($('ul li').length, 3);"},{"text":"<p>You should have three <code>li</code> elements within your <code>ol</code> element.</p>","testString":"assert.equal($('ol li').length, 3);"},{"text":"<p>Your <code>ul</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/ul>/g) &&\n    code.match(/<\\/ul>/g).length === code.match(/<ul>/g).length\n);"},{"text":"<p>Your <code>ol</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/ol>/g) &&\n    code.match(/<\\/ol>/g).length === code.match(/<ol>/g).length\n);"},{"text":"<p>Your <code>li</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/li>/g) &&\n    code.match(/<li>/g) &&\n    code.match(/<\\/li>/g).length === code.match(/<li>/g).length\n);"},{"text":"<p>The <code>li</code> elements in your unordered list should not be empty.</p>","testString":"$('ul li').each((i, val) =>\n  assert(__helpers.removeWhiteSpace(val.textContent))\n);"},{"text":"<p>The <code>li</code> elements in your ordered list should not be empty.</p>","testString":"$('ol li').each((i, val) =>\n  assert(!!__helpers.removeWhiteSpace(val.textContent))\n);"}],"description":"<section id=\"description\">\n<p>HTML has another special element for creating <dfn>ordered lists</dfn>, or numbered lists.</p>\n<p>Ordered lists start with an opening <code>&#x3C;ol></code> element, followed by any number of <code>&#x3C;li></code> elements. Finally, ordered lists are closed with the <code>&#x3C;/ol></code> tag.</p>\n<p>For example:</p>\n<pre><code class=\"language-html\">&#x3C;ol>\n  &#x3C;li>Garfield&#x3C;/li>\n  &#x3C;li>Sylvester&#x3C;/li>\n&#x3C;/ol>\n</code></pre>\n<p>would create a numbered list of <code>Garfield</code> and <code>Sylvester</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create an ordered list of the top 3 things cats hate the most.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":15,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78aa367417b2b2512aed","title":"Declare the Doctype of an HTML Document","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/cra98AJ","forumTopicId":301095,"dashedName":"declare-the-doctype-of-an-html-document","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"","error":null,"seed":""}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<!DOCTYPE html>\n<html>\n  <h1> Hello world </h1>\n</html>","error":null,"seed":"<!DOCTYPE html>\n<html>\n  <h1> Hello world </h1>\n</html>"}]],"tests":[{"text":"<p>Your code should include a <code>&#x3C;!DOCTYPE html></code> tag.</p>","testString":"assert(code.match(/<!DOCTYPE\\s+?html\\s*?>/gi));"},{"text":"<p>There should be one <code>html</code> element.</p>","testString":"assert($('html').length == 1);"},{"text":"<p>The <code>html</code> tags should wrap around one <code>h1</code> element.</p>","testString":"assert(code.match(/<html>\\s*?<h1>\\s*?.*?\\s*?<\\/h1>\\s*?<\\/html>/gi));"}],"description":"<section id=\"description\">\n<p>The challenges so far have covered specific HTML elements and their uses. However, there are a few elements that give overall structure to your page, and should be included in every HTML document.</p>\n<p>At the top of your document, you need to tell the browser which version of HTML your page is using. HTML is an evolving language, and is updated regularly. Most major browsers support the latest specification, which is HTML5. However, older web pages may use previous versions of the language.</p>\n<p>You tell the browser this information by adding the <code>&#x3C;!DOCTYPE ...></code> tag on the first line, where the <code>...</code> part is the version of HTML. For HTML5, you use <code>&#x3C;!DOCTYPE html></code>.</p>\n<p>The <code>!</code> and uppercase <code>DOCTYPE</code> is important, especially for older browsers. The <code>html</code> is not case sensitive.</p>\n<p>Next, the rest of your HTML code needs to be wrapped in <code>html</code> tags. The opening <code>&#x3C;html></code> goes directly below the <code>&#x3C;!DOCTYPE html></code> line, and the closing <code>&#x3C;/html></code> goes at the end of the page.</p>\n<p>Here's an example of the page structure. Your HTML code would go in the space between the two <code>html</code> tags.</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n\n&#x3C;/html>\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add a <code>DOCTYPE</code> tag for HTML5 to the top of the blank HTML document in the code editor. Under it, add opening and closing <code>html</code> tags, which wrap around an <code>h1</code> element. The heading can include any text.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":26,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78aa367417b2b2512aec","title":"Define the Head and Body of an HTML Document","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/cra9bfP","forumTopicId":301096,"dashedName":"define-the-head-and-body-of-an-html-document","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<!DOCTYPE html>\n<html>\n  <title>The best page ever</title>\n\n  <h1>The best page ever</h1>\n  <p>Cat ipsum dolor sit amet, jump launch to pounce upon little yarn mouse, bare fangs at toy run hide in litter box until treats are fed. Go into a room to decide you didn't want to be in there anyway. I like big cats and i can not lie kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Meow i could pee on this if i had the energy for slap owner's face at 5am until human fills food dish yet scamper. Knock dish off table head butt cant eat out of my own dish scratch the furniture. Make meme, make cute face. Sleep in the bathroom sink chase laser but pee in the shoe. Paw at your fat belly licks your face and eat grass, throw it back up kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n\n</html>","error":null,"seed":"<!DOCTYPE html>\n<html>\n  <title>The best page ever</title>\n\n  <h1>The best page ever</h1>\n  <p>Cat ipsum dolor sit amet, jump launch to pounce upon little yarn mouse, bare fangs at toy run hide in litter box until treats are fed. Go into a room to decide you didn't want to be in there anyway. I like big cats and i can not lie kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Meow i could pee on this if i had the energy for slap owner's face at 5am until human fills food dish yet scamper. Knock dish off table head butt cant eat out of my own dish scratch the furniture. Make meme, make cute face. Sleep in the bathroom sink chase laser but pee in the shoe. Paw at your fat belly licks your face and eat grass, throw it back up kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n\n</html>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<!DOCTYPE html>\n<html>\n <head>\n  <title>The best page ever</title>\n </head>\n <body>\n  <h1>The best page ever</h1>\n  <p>Cat ipsum dolor sit amet, jump launch to pounce upon little yarn mouse, bare fangs at toy run hide in litter box until treats are fed. Go into a room to decide you didn't want to be in there anyway. I like big cats and i can not lie kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Meow i could pee on this if i had the energy for slap owner's face at 5am until human fills food dish yet scamper. Knock dish off table head butt cant eat out of my own dish scratch the furniture. Make meme, make cute face. Sleep in the bathroom sink chase laser but pee in the shoe. Paw at your fat belly licks your face and eat grass, throw it back up kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n </body>\n</html>","error":null,"seed":"<!DOCTYPE html>\n<html>\n <head>\n  <title>The best page ever</title>\n </head>\n <body>\n  <h1>The best page ever</h1>\n  <p>Cat ipsum dolor sit amet, jump launch to pounce upon little yarn mouse, bare fangs at toy run hide in litter box until treats are fed. Go into a room to decide you didn't want to be in there anyway. I like big cats and i can not lie kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Meow i could pee on this if i had the energy for slap owner's face at 5am until human fills food dish yet scamper. Knock dish off table head butt cant eat out of my own dish scratch the furniture. Make meme, make cute face. Sleep in the bathroom sink chase laser but pee in the shoe. Paw at your fat belly licks your face and eat grass, throw it back up kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n </body>\n</html>"}]],"tests":[{"text":"<p>There should be only one <code>head</code> element on the page.</p>","testString":"const headElems = code.replace(/\\n/g, '').match(/\\<head\\s*>.*?\\<\\/head\\s*>/g);\nassert(headElems && headElems.length === 1);"},{"text":"<p>There should be only one <code>body</code> element on the page.</p>","testString":"const bodyElems = code.replace(/\\n/g, '').match(/<body\\s*>.*?<\\/body\\s*>/g);\nassert(bodyElems && bodyElems.length === 1);"},{"text":"<p>The <code>head</code> element should be a child of the <code>html</code> element.</p>","testString":"const htmlChildren = code\n  .replace(/\\n/g, '')\n  .match(/<html\\s*>(?<children>.*)<\\/html\\s*>/);\nlet foundHead;\nif (htmlChildren) {\n  const { children } = htmlChildren.groups;\n\n  foundHead = children.match(/<head\\s*>.*<\\/head\\s*>/);\n}\nassert(foundHead);"},{"text":"<p>The <code>body</code> element should be a child of the <code>html</code> element.</p>","testString":"const htmlChildren = code\n  .replace(/\\n/g, '')\n  .match(/<html\\s*>(?<children>.*?)<\\/html\\s*>/);\nlet foundBody;\nif (htmlChildren) {\n  const { children } = htmlChildren.groups;\n  foundBody = children.match(/<body\\s*>.*<\\/body\\s*>/);\n}\nassert(foundBody);"},{"text":"<p>The <code>head</code> element should wrap around the <code>title</code> element.</p>","testString":"const headChildren = code\n  .replace(/\\n/g, '')\n  .match(/<head\\s*>(?<children>.*?)<\\/head\\s*>/);\nlet foundTitle;\nif (headChildren) {\n  const { children } = headChildren.groups;\n  foundTitle = children.match(/<title\\s*>.*?<\\/title\\s*>/);\n}\nassert(foundTitle);"},{"text":"<p>The <code>body</code> element should wrap around both the <code>h1</code> and <code>p</code> elements.</p>","testString":"const bodyChildren = code\n  .replace(/\\n/g, '')\n  .match(/<body\\s*>(?<children>.*?)<\\/body\\s*>/);\nlet foundElems;\nif (bodyChildren) {\n  const { children } = bodyChildren.groups;\n  const h1s = children.match(/<h1\\s*>.*<\\/h1\\s*>/g);\n  const ps = children.match(/<p\\s*>.*<\\/p\\s*>/g);\n  const numH1s = h1s ? h1s.length : 0;\n  const numPs = ps ? ps.length : 0;\n  foundElems = numH1s === 1 && numPs === 1;\n}\nassert(foundElems);"}],"description":"<section id=\"description\">\n<p>You can add another level of organization in your HTML document within the <code>html</code> tags with the <code>head</code> and <code>body</code> elements. Any markup with information about your page would go into the <code>head</code> tag. Then any markup with the content of the page (what displays for a user) would go into the <code>body</code> tag.</p>\n<p>Metadata elements, such as <code>link</code>, <code>meta</code>, <code>title</code>, and <code>style</code>, typically go inside the <code>head</code> element.</p>\n<p>Here's an example of a page's layout:</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n  &#x3C;head>\n   &#x3C;meta charset=\"utf-8\">\n   &#x3C;title>Example title&#x3C;/title>\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;div>\n    &#x3C;/div>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Edit the markup so there's a <code>head</code> and a <code>body</code>. The <code>head</code> element should only include the <code>title</code>, and the <code>body</code> element should only include the <code>h1</code> and <code>p</code>.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":27,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fed1348bd9aedf08833","title":"Delete HTML Elements","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/ckK73C9","forumTopicId":17559,"dashedName":"delete-html-elements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>","error":null,"seed":"<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2><p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>","error":null,"seed":"<h2>CatPhotoApp</h2><p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>"}]],"tests":[{"text":"<p>Your <code>h1</code> element should be deleted.</p>","testString":"assert(!code.match(/<h1>/gi) && !code.match(/<\\/h1>/gi));"},{"text":"<p>Your <code>h2</code> element should be on the page.</p>","testString":"assert(code.match(/<h2>[\\w\\W]*<\\/h2>/gi));"},{"text":"<p>Your <code>p</code> element should be on the page.</p>","testString":"assert(code.match(/<p>[\\w\\W]*<\\/p>/gi));"}],"description":"<section id=\"description\">\n<p>Our phone doesn't have much vertical space.</p>\n<p>Let's remove the unnecessary elements so we can start building our CatPhotoApp.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Delete your <code>h1</code> element so we can simplify our view.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":6,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08833","title":"Fill in the Blank with Placeholder Text","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/cgR7Dc7","forumTopicId":18178,"dashedName":"fill-in-the-blank-with-placeholder-text","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Hello Paragraph</p>","error":null,"seed":"<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Hello Paragraph</p>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff</p>","error":null,"seed":"<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff</p>"}]],"tests":[{"text":"<p>Your <code>p</code> element should contain the first few words of the provided \"kitty ipsum\" text.</p>","testString":"assert.isTrue(/Kitty(\\s)+ipsum/gi.test($('p').text()));"}],"description":"<section id=\"description\">\n<p>Web developers traditionally use <dfn>lorem ipsum text</dfn> as placeholder text. The lorem ipsum text is randomly scraped from a famous passage by Cicero of Ancient Rome.</p>\n<p>Lorem ipsum text has been used as placeholder text by typesetters since the 16th century, and this tradition continues on the web.</p>\n<p>Well, 5 centuries is long enough. Since we're building a CatPhotoApp, let's use something called \"kitty ipsum\" text.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Replace the text inside your <code>p</code> element with the first few words of this kitty ipsum text: <code>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</code></p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":3,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf0887a","title":"Headline with the h2 Element","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/cE8Gqf3","forumTopicId":18196,"dashedName":"headline-with-the-h2-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h1>Hello World</h1>","error":null,"seed":"<h1>Hello World</h1>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h1>Hello World</h1>\n<h2>CatPhotoApp</h2>","error":null,"seed":"<h1>Hello World</h1>\n<h2>CatPhotoApp</h2>"}]],"tests":[{"text":"<p>You should create an <code>h2</code> element.</p>","testString":"assert($('h2').length > 0);"},{"text":"<p>Your <code>h2</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/h2>/g) &&\n    code.match(/<\\/h2>/g).length === code.match(/<h2>/g).length\n);"},{"text":"<p>Your <code>h2</code> element should have the text <code>CatPhotoApp</code>.</p>","testString":"assert.isTrue(/cat(\\s)?photo(\\s)?app/gi.test($('h2').text()));"},{"text":"<p>Your <code>h1</code> element should have the text <code>Hello World</code>.</p>","testString":"assert.isTrue(/hello(\\s)+world/gi.test($('h1').text()));"},{"text":"<p>Your <code>h1</code> element should be before your <code>h2</code> element.</p>","testString":"assert(code.match(/<h1>\\s*?.*?\\s*?<\\/h1>\\s*<h2>\\s*?.*?\\s*?<\\/h2>/gi));"}],"description":"<section id=\"description\">\n<p>Over the next few lessons, we'll build an HTML5 cat photo web app piece-by-piece.</p>\n<p>The <code>h2</code> element you will be adding in this step will add a level two heading to the web page.</p>\n<p>This element tells the browser about the structure of your website. <code>h1</code> elements are often used for main headings, while <code>h2</code> elements are generally used for subheadings. There are also <code>h3</code>, <code>h4</code>, <code>h5</code> and <code>h6</code> elements to indicate different levels of subheadings.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add an <code>h2</code> tag that says \"CatPhotoApp\" to create a second HTML element below your \"Hello World\" <code>h1</code> element.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":1,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08801","title":"Inform with the Paragraph Element","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/ceZ7DtN","forumTopicId":18202,"dashedName":"inform-with-the-paragraph-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h1>Hello World</h1>\n<h2>CatPhotoApp</h2>","error":null,"seed":"<h1>Hello World</h1>\n<h2>CatPhotoApp</h2>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h1>Hello World</h1>\n<h2>CatPhotoApp</h2>\n<p>Hello Paragraph</p>","error":null,"seed":"<h1>Hello World</h1>\n<h2>CatPhotoApp</h2>\n<p>Hello Paragraph</p>"}]],"tests":[{"text":"<p>Your code should have a valid <code>p</code> element.</p>","testString":"assert($('p').length > 0);"},{"text":"<p>Your <code>p</code> element should have the text <code>Hello Paragraph</code>.</p>","testString":"assert.isTrue(/hello(\\s)+paragraph/gi.test($('p').text()));"},{"text":"<p>Your <code>p</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/p>/g) &&\n    code.match(/<\\/p>/g).length === code.match(/<p/g).length\n);"}],"description":"<section id=\"description\">\n<p>The <code>p</code> element is the preferred element for paragraph text on websites. <code>p</code> is short for \"paragraph\".</p>\n<p>You can create a paragraph element like this:</p>\n<pre><code class=\"language-html\">&#x3C;p>I'm a p tag!&#x3C;/p>\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create a <code>p</code> element below your <code>h2</code> element, and give it the text <code>Hello Paragraph</code>.</p>\n<p><strong>Note:</strong> As a convention, all HTML tags are written in lowercase, for example <code>&#x3C;p>&#x3C;/p></code> and not <code>&#x3C;P>&#x3C;/P></code>.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":2,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aecf08801","title":"Introduction to HTML5 Elements","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/cBkZGpt7","forumTopicId":301097,"dashedName":"introduction-to-html5-elements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>","error":null,"seed":"<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"}]],"tests":[{"text":"<p>You should have 2 <code>p</code> elements with Kitty Ipsum text.</p>","testString":"assert($('p').length > 1);"},{"text":"<p>Each of your <code>p</code> elements should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/p>/g) &&\n    code.match(/<\\/p>/g).length === code.match(/<p/g).length\n);"},{"text":"<p>Your <code>p</code> element should contain the first few words of the provided additional <code>kitty ipsum</code> text.</p>","testString":"assert.isTrue(/Purr\\s+jump\\s+eat/gi.test($('p').text()));"},{"text":"<p>Your code should have one <code>main</code> element.</p>","testString":"assert($('main').length === 1);"},{"text":"<p>The <code>main</code> element should have two paragraph elements as children.</p>","testString":"assert($('main').children('p').length === 2);"},{"text":"<p>The opening <code>main</code> tag should come before the first paragraph tag.</p>","testString":"assert(code.match(/<main>\\s*?<p>/g));"},{"text":"<p>The closing <code>main</code> tag should come after the second closing paragraph tag.</p>","testString":"assert(code.match(/<\\/p>\\s*?<\\/main>/g));"}],"description":"<section id=\"description\">\n<p>HTML5 introduces more descriptive HTML tags. These include <code>main</code>, <code>header</code>, <code>footer</code>, <code>nav</code>, <code>video</code>, <code>article</code>, <code>section</code> and others.</p>\n<p>These tags give a descriptive structure to your HTML, make your HTML easier to read, and help with Search Engine Optimization (SEO) and accessibility. The <code>main</code> HTML5 tag helps search engines and other developers find the main content of your page.</p>\n<p>Example usage, a <code>main</code> element with two child elements nested inside it:</p>\n<pre><code class=\"language-html\">&#x3C;main> \n  &#x3C;h1>Hello World&#x3C;/h1>\n  &#x3C;p>Hello Paragraph&#x3C;/p>\n&#x3C;/main>\n</code></pre>\n<p><strong>Note:</strong> Many of the new HTML5 tags and their benefits are covered in the Applied Accessibility section.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create a second <code>p</code> element with the following kitty ipsum text: <code>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</code></p>\n<p>Then, create a <code>main</code> element and nest only the two <code>p</code> elements inside the <code>main</code> element.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":7,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08816","title":"Link to External Pages with Anchor Elements","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/c8EkncB","forumTopicId":18226,"dashedName":"link-to-external-pages-with-anchor-elements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n\n\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n\n\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  \n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n  \n  <a href=\"https://www.freecatphotoapp.com\">cat photos</a>\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  \n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n  \n  <a href=\"https://www.freecatphotoapp.com\">cat photos</a>\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"}]],"tests":[{"text":"<p>Your <code>a</code> element should have the anchor text of <code>cat photos</code>.</p>","testString":"assert(/cat photos/gi.test($('a').text()));"},{"text":"<p>You need an <code>a</code> element that links to <code>https://www.freecatphotoapp.com</code></p>","testString":"assert(/^https?:\\/\\/(www\\.)?freecatphotoapp\\.com\\/?$/i.test($('a').attr('href')));"},{"text":"<p>Your <code>a</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/a>/g) &&\n    code.match(/<\\/a>/g).length === code.match(/<a/g).length\n);"}],"description":"<section id=\"description\">\n<p>You can use <code>a</code> (<em>anchor</em>) elements to link to content outside of your web page.</p>\n<p><code>a</code> elements need a destination web address called an <code>href</code> attribute. They also need anchor text. Here's an example:</p>\n<pre><code class=\"language-html\">&#x3C;a href=\"https://www.freecodecamp.org\">this links to freecodecamp.org&#x3C;/a>\n</code></pre>\n<p>Then your browser will display the text <code>this links to freecodecamp.org</code> as a link you can click. And that link will take you to the web address <code>https://www.freecodecamp.org</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create an <code>a</code> element that links to <code>https://www.freecatphotoapp.com</code> and has \"cat photos\" as its anchor text.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":9,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad88fee1348bd9aedf08816","title":"Link to Internal Sections of a Page with Anchor Elements","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/cyrDRUL","forumTopicId":301098,"dashedName":"link-to-internal-sections-of-a-page-with-anchor-elements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n\n  <a href=\"https://www.freecatphotoapp.com\" target=\"_blank\">cat photos</a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched. Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched. Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n  <p>Meowwww loved it, hated it, loved it, hated it yet spill litter box, scratch at owner, destroy all furniture, especially couch or lay on arms while you're using the keyboard. Missing until dinner time toy mouse squeak roll over. With tail in the air lounge in doorway. Man running from cops stops to pet cats, goes to jail.</p>\n  <p>Intently stare at the same spot poop in the plant pot but kitten is playing with dead mouse. Get video posted to internet for chasing red dot leave fur on owners clothes meow to be let out and mesmerizing birds leave fur on owners clothes or favor packaging over toy so purr for no reason. Meow to be let out play time intently sniff hand run outside as soon as door open yet destroy couch.</p>\n\n</main>\n\n<footer>Copyright Cat Photo App</footer>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n\n  <a href=\"https://www.freecatphotoapp.com\" target=\"_blank\">cat photos</a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched. Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched. Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n  <p>Meowwww loved it, hated it, loved it, hated it yet spill litter box, scratch at owner, destroy all furniture, especially couch or lay on arms while you're using the keyboard. Missing until dinner time toy mouse squeak roll over. With tail in the air lounge in doorway. Man running from cops stops to pet cats, goes to jail.</p>\n  <p>Intently stare at the same spot poop in the plant pot but kitten is playing with dead mouse. Get video posted to internet for chasing red dot leave fur on owners clothes meow to be let out and mesmerizing birds leave fur on owners clothes or favor packaging over toy so purr for no reason. Meow to be let out play time intently sniff hand run outside as soon as door open yet destroy couch.</p>\n\n</main>\n\n<footer>Copyright Cat Photo App</footer>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n\n  <a href=\"#footer\">Jump to Bottom</a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched. Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched. Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n  <p>Meowwww loved it, hated it, loved it, hated it yet spill litter box, scratch at owner, destroy all furniture, especially couch or lay on arms while you're using the keyboard. Missing until dinner time toy mouse squeak roll over. With tail in the air lounge in doorway. Man running from cops stops to pet cats, goes to jail.</p>\n  <p>Intently stare at the same spot poop in the plant pot but kitten is playing with dead mouse. Get video posted to internet for chasing red dot leave fur on owners clothes meow to be let out and mesmerizing birds leave fur on owners clothes or favor packaging over toy so purr for no reason. Meow to be let out play time intently sniff hand run outside as soon as door open yet destroy couch.</p>\n\n</main>\n\n<footer id=\"footer\">Copyright Cat Photo App</footer>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n\n  <a href=\"#footer\">Jump to Bottom</a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched. Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched. Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n  <p>Meowwww loved it, hated it, loved it, hated it yet spill litter box, scratch at owner, destroy all furniture, especially couch or lay on arms while you're using the keyboard. Missing until dinner time toy mouse squeak roll over. With tail in the air lounge in doorway. Man running from cops stops to pet cats, goes to jail.</p>\n  <p>Intently stare at the same spot poop in the plant pot but kitten is playing with dead mouse. Get video posted to internet for chasing red dot leave fur on owners clothes meow to be let out and mesmerizing birds leave fur on owners clothes or favor packaging over toy so purr for no reason. Meow to be let out play time intently sniff hand run outside as soon as door open yet destroy couch.</p>\n\n</main>\n\n<footer id=\"footer\">Copyright Cat Photo App</footer>"}]],"tests":[{"text":"<p>There should be only one anchor tag on your page.</p>","testString":"assert($('a').length == 1);"},{"text":"<p>There should be only one <code>footer</code> tag on your page.</p>","testString":"assert($('footer').length == 1);"},{"text":"<p>The <code>a</code> tag should have an <code>href</code> attribute set to \"#footer\".</p>","testString":"assert($('a').eq(0).attr('href') == '#footer');"},{"text":"<p>The <code>a</code> tag should not have a <code>target</code> attribute.</p>","testString":"assert(\n  typeof $('a').eq(0).attr('target') == typeof undefined ||\n    $('a').eq(0).attr('target') == true\n);"},{"text":"<p>The <code>a</code> text should be \"Jump to Bottom\".</p>","testString":"assert(\n  $('a')\n    .eq(0)\n    .text()\n    .match(/Jump to Bottom/gi)\n);"},{"text":"<p>The <code>footer</code> tag should have an <code>id</code> attribute set to \"footer\".</p>","testString":"assert($('footer').eq(0).attr('id') == 'footer');"}],"description":"<section id=\"description\">\n<p><code>a</code> (<em>anchor</em>) elements can also be used to create internal links to jump to different sections within a webpage.</p>\n<p>To create an internal link, you assign a link's <code>href</code> attribute to a hash symbol <code>#</code> plus the value of the <code>id</code> attribute for the element that you want to internally link to, usually further down the page. You then need to add the same <code>id</code> attribute to the element you are linking to. An <code>id</code> is an attribute that uniquely describes an element.</p>\n<p>Below is an example of an internal anchor link and its target element:</p>\n<pre><code class=\"language-html\">&#x3C;a href=\"#contacts-header\">Contacts&#x3C;/a>\n...\n&#x3C;h2 id=\"contacts-header\">Contacts&#x3C;/h2>\n</code></pre>\n<p>When users click the <code>Contacts</code> link, they'll be taken to the section of the webpage with the <strong>Contacts</strong> heading element.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change your external link to an internal link by changing the <code>href</code> attribute to <code>#footer</code> and the text from <code>cat photos</code> to <code>Jump to Bottom</code>.</p>\n<p>Remove the <code>target=\"_blank\"</code> attribute from the anchor tag since this causes the linked document to open in a new window tab.</p>\n<p>Then add an <code>id</code> attribute with a value of <code>footer</code> to the <code>&#x3C;footer></code> element at the bottom of the page.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":10,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08817","title":"Make Dead Links Using the Hash Symbol","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/cMdkytL","forumTopicId":18230,"dashedName":"make-dead-links-using-the-hash-symbol","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"https://www.freecatphotoapp.com\" target=\"_blank\">cat photos</a>.</p>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"https://www.freecatphotoapp.com\" target=\"_blank\">cat photos</a>.</p>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\" target=\"_blank\">cat photos</a>.</p>\n  \n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n  \n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\" target=\"_blank\">cat photos</a>.</p>\n  \n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n  \n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"}]],"tests":[{"text":"<p>Your <code>a</code> element should be a dead link with the value of the <code>href</code> attribute set to \"#\".</p>","testString":"assert($('a').attr('href') === '#');"}],"description":"<section id=\"description\">\n<p>Sometimes you want to add <code>a</code> elements to your website before you know where they will link.</p>\n<p>This is also handy when you're changing the behavior of a link using <code>JavaScript</code>, which we'll learn about later.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The current value of the <code>href</code> attribute is a link that points to \"<code>https://www.freecatphotoapp.com</code>\". Replace the <code>href</code> attribute value with a <code>#</code>, also known as a hash symbol, to create a dead link.</p>\n<p>For example: <code>href=\"#\"</code></p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":12,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aede08817","title":"Nest an Anchor Element within a Paragraph","challengeType":0,"forumTopicId":18244,"dashedName":"nest-an-anchor-element-within-a-paragraph","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n\n  <a href=\"https://www.freecatphotoapp.com\" target=\"_blank\">cat photos</a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n\n  <a href=\"https://www.freecatphotoapp.com\" target=\"_blank\">cat photos</a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>View more <a target=\"_blank\" href=\"https://www.freecatphotoapp.com\">cat photos</a></p>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>View more <a target=\"_blank\" href=\"https://www.freecatphotoapp.com\">cat photos</a></p>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"}]],"tests":[{"text":"<p>You should only have one <code>a</code> element.</p>","testString":"assert(\n  $('a').length  === 1 \n);"},{"text":"<p>The <code>a</code> element should link to \"<code>https://www.freecatphotoapp.com</code>\".</p>","testString":"assert(\n  $('a[href=\"https://www.freecatphotoapp.com\"]').length  === 1 \n);"},{"text":"<p>Your <code>a</code> element should have the anchor text of <code>cat photos</code></p>","testString":"assert(\n  $('a')\n    .text()\n    .match(/cat\\sphotos/gi)\n);"},{"text":"<p>You should create a new <code>p</code> element. There should be at least 3 total <code>p</code> tags in your HTML code.</p>","testString":"assert($('p') && $('p').length > 2);"},{"text":"<p>Your <code>a</code> element should be nested within your new <code>p</code> element.</p>","testString":"assert(\n  $('a[href=\"https://www.freecatphotoapp.com\"]').parent().is('p')\n);"},{"text":"<p>Your <code>p</code> element should have the text <code>View more </code> (with a space after it).</p>","testString":"assert(\n  $('a[href=\"https://www.freecatphotoapp.com\"]')\n    .parent()\n    .text()\n    .match(/View\\smore\\s/gi)\n);"},{"text":"<p>Your <code>a</code> element should <em>not</em> have the text <code>View more</code>.</p>","testString":"assert(\n  !$('a')\n    .text()\n    .match(/View\\smore/gi)\n);"},{"text":"<p>Each of your <code>p</code> elements should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/p>/g) &&\n    code.match(/<p/g) &&\n    code.match(/<\\/p>/g).length === code.match(/<p/g).length\n);"},{"text":"<p>Each of your <code>a</code> elements should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/a>/g) &&\n    code.match(/<a/g) &&\n    code.match(/<\\/a>/g).length === code.match(/<a/g).length\n);"}],"description":"<section id=\"description\">\n<p>You can nest links within other text elements.</p>\n<pre><code class=\"language-html\">&#x3C;p>\n  Here's a &#x3C;a target=\"_blank\" href=\"https://www.freecodecamp.org\"> link to www.freecodecamp.org&#x3C;/a> for you to follow.\n&#x3C;/p>\n</code></pre>\n<p>Let's break down the example. Normal text is wrapped in the <code>p</code> element:</p>\n<pre><code class=\"language-html\">&#x3C;p> Here's a ... for you to follow. &#x3C;/p>\n</code></pre>\n<p>Next is the <em>anchor</em> element <code>&#x3C;a></code> (which requires a closing tag <code>&#x3C;/a></code>):</p>\n<pre><code class=\"language-html\">&#x3C;a> ... &#x3C;/a>\n</code></pre>\n<p><code>target</code> is an anchor tag attribute that specifies where to open the link. The value <code>_blank</code> specifies to open the link in a new tab. The <code>href</code> is an anchor tag attribute that contains the URL address of the link:</p>\n<pre><code class=\"language-html\">&#x3C;a href=\"https://www.freecodecamp.org\" target=\"_blank\"> ... &#x3C;/a>\n</code></pre>\n<p>The text, <code>link to www.freecodecamp.org</code>, within the <code>a</code> element is called <dfn>anchor text</dfn>, and will display the link to click:</p>\n<pre><code class=\"language-html\">&#x3C;a href=\" ... \" target=\"...\">link to freecodecamp.org&#x3C;/a>\n</code></pre>\n<p>The final output of the example will look like this:</p>\n<p>Here's a <a href=\"https://www.freecodecamp.org\" target=\"_blank\">link to www.freecodecamp.org</a> for you to follow.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Nest the existing <code>a</code> element within a new <code>p</code> element. Do not create a new anchor tag. The new paragraph should have text that says <code>View more cat photos</code>, where <code>cat photos</code> is a link, and the rest is plain text.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":11,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aede08835","title":"Nest Many Elements within a Single div Element","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/cNW4kC3","forumTopicId":18246,"dashedName":"nest-many-elements-within-a-single-div-element","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\" checked> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label><br>\n    <label for=\"loving\"><input id=\"loving\" type=\"checkbox\" name=\"personality\" value=\"loving\" checked> Loving</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" name=\"personality\" value=\"lazy\"> Lazy</label>\n    <label for=\"energetic\"><input id=\"energetic\" type=\"checkbox\" name=\"personality\" value=\"energetic\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\" checked> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label><br>\n    <label for=\"loving\"><input id=\"loving\" type=\"checkbox\" name=\"personality\" value=\"loving\" checked> Loving</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" name=\"personality\" value=\"lazy\"> Lazy</label>\n    <label for=\"energetic\"><input id=\"energetic\" type=\"checkbox\" name=\"personality\" value=\"energetic\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\" checked> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label><br>\n    <label for=\"loving\"><input id=\"loving\" type=\"checkbox\" name=\"personality\" value=\"loving\" checked> Loving</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" name=\"personality\" value=\"lazy\"> Lazy</label>\n    <label for=\"energetic\"><input id=\"energetic\" type=\"checkbox\" name=\"personality\" value=\"energetic\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  <div>\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\" checked> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label><br>\n    <label for=\"loving\"><input id=\"loving\" type=\"checkbox\" name=\"personality\" value=\"loving\" checked> Loving</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" name=\"personality\" value=\"lazy\"> Lazy</label>\n    <label for=\"energetic\"><input id=\"energetic\" type=\"checkbox\" name=\"personality\" value=\"energetic\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>Your <code>p</code> elements should be nested inside your <code>div</code> element.</p>","testString":"assert($('div').children('p').length > 1);"},{"text":"<p>Your <code>ul</code> element should be nested inside your <code>div</code> element.</p>","testString":"assert($('div').children('ul').length > 0);"},{"text":"<p>Your <code>ol</code> element should be nested inside your <code>div</code> element.</p>","testString":"assert($('div').children('ol').length > 0);"},{"text":"<p>Your <code>div</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/div>/g) &&\n    code.match(/<\\/div>/g).length === code.match(/<div>/g).length\n);"}],"description":"<section id=\"description\">\n<p>The <code>div</code> element, also known as a division element, is a general purpose container for other elements.</p>\n<p>The <code>div</code> element is probably the most commonly used HTML element of all.</p>\n<p>Just like any other non-self-closing element, you can open a <code>div</code> element with <code>&#x3C;div></code> and close it on another line with <code>&#x3C;/div></code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Nest your \"Things cats love\" and \"Top 3 things cats hate\" lists all within a single <code>div</code> element.</p>\n<p>Hint: Try putting your opening <code>div</code> tag above your \"Things cats love\" <code>p</code> element and your closing <code>div</code> tag after your closing <code>ol</code> tag so that both of your lists are within one <code>div</code>.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":25,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bd7123c8c441eddfaeb5bdef","title":"Say Hello to HTML Elements","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/cE8Gpt2","forumTopicId":18276,"dashedName":"say-hello-to-html-elements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h1>Hello</h1>","error":null,"seed":"<h1>Hello</h1>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h1>Hello World</h1>","error":null,"seed":"<h1>Hello World</h1>"}]],"tests":[{"text":"<p>Your <code>h1</code> element should have the text <code>Hello World</code>.</p>","testString":"assert.isTrue(/hello(\\s)+world/gi.test($('h1').text()));"}],"description":"<section id=\"description\">\n<p>Welcome to freeCodeCamp's HTML coding challenges. These will walk you through web development step-by-step.</p>\n<p>First, you'll start by building a simple web page using HTML. You can edit code in your code editor, which is embedded into this web page.</p>\n<p>Do you see the code in your code editor that says <code>&#x3C;h1>Hello&#x3C;/h1></code>? That's an HTML element.</p>\n<p>Most HTML elements have an opening tag and a closing tag.</p>\n<p>Opening tags look like this:</p>\n<pre><code class=\"language-html\">&#x3C;h1>\n</code></pre>\n<p>Closing tags look like this:</p>\n<pre><code class=\"language-html\">&#x3C;/h1>\n</code></pre>\n<p>The only difference between opening and closing tags is the forward slash after the opening bracket of a closing tag.</p>\n<p>Each challenge has tests you can run at any time by clicking the \"Run tests\" button. When you pass all tests, you'll be prompted to submit your solution and go to the next coding challenge.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>To pass the test on this challenge, change your <code>h1</code> element's text to say <code>Hello World</code>.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":0,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08820","title":"Turn an Image into a Link","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/cRdBnUr","forumTopicId":18327,"dashedName":"turn-an-image-into-a-link","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\">\n\n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n  <p>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.</p>\n</main>"}]],"tests":[{"text":"<p>The existing <code>img</code> element should be nested within an <code>a</code> element.</p>","testString":"assert($('a').children('img').length > 0);"},{"text":"<p>Your <code>a</code> element should be a dead link with a <code>href</code> attribute set to <code>#</code>.</p>","testString":"assert(new RegExp('#').test($('a').children('img').parent().attr('href')));"},{"text":"<p>Each of your <code>a</code> elements should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/a>/g) &&\n    code.match(/<a/g) &&\n    code.match(/<\\/a>/g).length === code.match(/<a/g).length\n);"}],"description":"<section id=\"description\">\n<p>You can make elements into links by nesting them within an <code>a</code> element.</p>\n<p>Nest your image within an <code>a</code> element. Here's an example:</p>\n<pre><code class=\"language-html\">&#x3C;a href=\"#\">&#x3C;img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"Three kittens running towards the camera.\">&#x3C;/a>\n</code></pre>\n<p>Remember to use <code>#</code> as your <code>a</code> element's <code>href</code> property in order to turn it into a dead link.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Place the existing image element within an <code>a</code> (<em>anchor</em>) element.</p>\n<p>Once you've done this, hover over your image with your cursor. Your cursor's normal pointer should become the link clicking pointer. The photo is now a link.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":13,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08802","title":"Uncomment HTML","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/cBmG9T7","forumTopicId":18329,"dashedName":"uncomment-html","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<!--\n<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n-->","error":null,"seed":"<!--\n<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>\n-->"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>","error":null,"seed":"<h1>Hello World</h1>\n\n<h2>CatPhotoApp</h2>\n\n<p>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.</p>"}]],"tests":[{"text":"<p>Your <code>h1</code> element should be visible on the page by uncommenting it.</p>","testString":"assert($('h1').length > 0);"},{"text":"<p>Your <code>h2</code> element should be visible on the page by uncommenting it.</p>","testString":"assert($('h2').length > 0);"},{"text":"<p>Your <code>p</code> element should be visible on the page by uncommenting it.</p>","testString":"assert($('p').length > 0);"},{"text":"<p>No trailing comment tags should be visible on the page (i.e. <code>--></code>).</p>","testString":"assert(!$('*:contains(\"-->\")')[1]);"}],"description":"<section id=\"description\">\n<p>Commenting is a way that you can leave comments for other developers within your code without affecting the resulting output that is displayed to the end user.</p>\n<p>Commenting is also a convenient way to make code inactive without having to delete it entirely.</p>\n<p>Comments in HTML start with <code>&#x3C;!--</code> and end with a <code>--></code></p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Uncomment your <code>h1</code>, <code>h2</code> and <code>p</code> elements.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":4,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedc08830","title":"Use HTML5 to Require a Field","challengeType":0,"videoUrl":"https://scrimba.com/p/pVMPUv/cMd4EcQ","forumTopicId":18360,"dashedName":"use-html5-to-require-a-field","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <input type=\"text\" placeholder=\"cat photo URL\">\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <input type=\"text\" placeholder=\"cat photo URL\">\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <input type=\"text\" required placeholder=\"cat photo URL\">\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n  \n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <input type=\"text\" required placeholder=\"cat photo URL\">\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>Your text <code>input</code> element should have the <code>required</code> attribute.</p>","testString":"assert($('input').prop('required'));"}],"description":"<section id=\"description\">\n<p>You can require specific form fields so that your user will not be able to submit your form until he or she has filled them out.</p>\n<p>For example, if you wanted to make a text input field required, you can just add the attribute <code>required</code> within your <code>input</code> element, like this: <code>&#x3C;input type=\"text\" required></code></p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Make your text <code>input</code> a <code>required</code> field, so that your user can't submit the form without completing this field.</p>\n<p>Then try to submit the form without inputting any text. See how your HTML5 form notifies you that the field is required?</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":20,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5c6c06847491271903d37cfd","title":"Use the value attribute with Radio Buttons and Checkboxes","challengeType":0,"forumTopicId":301099,"dashedName":"use-the-value-attribute-with-radio-buttons-and-checkboxes","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label for=\"loving\"><input id=\"loving\" type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label for=\"energetic\"><input id=\"energetic\" type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label><br>\n    <label for=\"loving\"><input id=\"loving\" type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label for=\"energetic\"><input id=\"energetic\" type=\"checkbox\" name=\"personality\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\"> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label><br>\n    <label for=\"loving\"><input id=\"loving\" type=\"checkbox\" name=\"personality\" value=\"loving\"> Loving</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" name=\"personality\" value=\"lazy\"> Lazy</label>\n    <label for=\"energetic\"><input id=\"energetic\" type=\"checkbox\" name=\"personality\" value=\"energetic\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>","error":null,"seed":"<h2>CatPhotoApp</h2>\n<main>\n  <p>Click here to view more <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://www.freecatphotoapp.com/submit-cat-photo\">\n    <label for=\"indoor\"><input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"indoor\"> Indoor</label>\n    <label for=\"outdoor\"><input id=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\" value=\"outdoor\"> Outdoor</label><br>\n    <label for=\"loving\"><input id=\"loving\" type=\"checkbox\" name=\"personality\" value=\"loving\"> Loving</label>\n    <label for=\"lazy\"><input id=\"lazy\" type=\"checkbox\" name=\"personality\" value=\"lazy\"> Lazy</label>\n    <label for=\"energetic\"><input id=\"energetic\" type=\"checkbox\" name=\"personality\" value=\"energetic\"> Energetic</label><br>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</main>"}]],"tests":[{"text":"<p>One of your radio buttons should have the <code>value</code> attribute of <code>indoor</code>.</p>","testString":"assert(\n  $('label:contains(\"Indoor\") > input[type=\"radio\"]').filter(\"[value='indoor']\")\n    .length > 0\n);"},{"text":"<p>One of your radio buttons should have the <code>value</code> attribute of <code>outdoor</code>.</p>","testString":"assert(\n  $('label:contains(\"Outdoor\") > input[type=\"radio\"]').filter(\n    \"[value='outdoor']\"\n  ).length > 0\n);"},{"text":"<p>One of your checkboxes should have the <code>value</code> attribute of <code>loving</code>.</p>","testString":"assert(\n  $('label:contains(\"Loving\") > input[type=\"checkbox\"]').filter(\n    \"[value='loving']\"\n  ).length > 0\n);"},{"text":"<p>One of your checkboxes should have the <code>value</code> attribute of <code>lazy</code>.</p>","testString":"assert(\n  $('label:contains(\"Lazy\") > input[type=\"checkbox\"]').filter(\"[value='lazy']\")\n    .length > 0\n);"},{"text":"<p>One of your checkboxes should have the <code>value</code> attribute of <code>energetic</code>.</p>","testString":"assert(\n  $('label:contains(\"Energetic\") > input[type=\"checkbox\"]').filter(\n    \"[value='energetic']\"\n  ).length > 0\n);"}],"description":"<section id=\"description\">\n<p>When a form gets submitted, the data is sent to the server and includes entries for the options selected. Inputs of type <code>radio</code> and <code>checkbox</code> report their values from the <code>value</code> attribute.</p>\n<p>For example:</p>\n<pre><code class=\"language-html\">&#x3C;label for=\"indoor\">\n  &#x3C;input id=\"indoor\" value=\"indoor\" type=\"radio\" name=\"indoor-outdoor\">Indoor\n&#x3C;/label>\n&#x3C;label for=\"outdoor\">\n  &#x3C;input id=\"outdoor\" value=\"outdoor\" type=\"radio\" name=\"indoor-outdoor\">Outdoor\n&#x3C;/label>\n</code></pre>\n<p>Here, you have two <code>radio</code> inputs. When the user submits the form with the <code>indoor</code> option selected, the form data will include the line: <code>indoor-outdoor=indoor</code>. This is from the <code>name</code> and <code>value</code> attributes of the \"indoor\" input.</p>\n<p>If you omit the <code>value</code> attribute, the submitted form data uses the default value, which is <code>on</code>. In this scenario, if the user clicked the \"indoor\" option and submitted the form, the resulting form data would be <code>indoor-outdoor=on</code>, which is not useful. So the <code>value</code> attribute needs to be set to something to identify the option.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Give each of the existing <code>radio</code> and <code>checkbox</code> inputs the <code>value</code> attribute. Do not create any new radio or checkbox elements. Use the input label text, in lowercase, as the value for the attribute.</p>\n</section>","block":"basic-html-and-html5","hasEditableBoundaries":false,"order":0,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":23,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false}]},"css-flexbox":{"meta":{"name":"CSS Flexbox","isUpcomingChange":false,"dashedName":"css-flexbox","order":5,"time":"5 hours","template":"","required":[],"superBlock":"responsive-web-design","challengeOrder":[["587d78ab367417b2b2512af0","Use display: flex to Position Two Boxes"],["587d78ab367417b2b2512af1","Add Flex Superpowers to the Tweet Embed"],["587d78ab367417b2b2512af2","Use the flex-direction Property to Make a Row"],["587d78ab367417b2b2512af3","Apply the flex-direction Property to Create Rows in the Tweet Embed"],["587d78ac367417b2b2512af4","Use the flex-direction Property to Make a Column"],["587d78ac367417b2b2512af5","Apply the flex-direction Property to Create a Column in the Tweet Embed"],["587d78ac367417b2b2512af6","Align Elements Using the justify-content Property"],["587d78ac367417b2b2512af7","Use the justify-content Property in the Tweet Embed"],["587d78ad367417b2b2512af8","Align Elements Using the align-items Property"],["587d78ad367417b2b2512af9","Use the align-items Property in the Tweet Embed"],["587d78ad367417b2b2512afa","Use the flex-wrap Property to Wrap a Row or Column"],["587d78ad367417b2b2512afb","Use the flex-shrink Property to Shrink Items"],["587d78ae367417b2b2512afc","Use the flex-grow Property to Expand Items"],["587d78ae367417b2b2512afd","Use the flex-basis Property to Set the Initial Size of an Item"],["587d78ae367417b2b2512afe","Use the flex Shorthand Property"],["587d78ae367417b2b2512aff","Use the order Property to Rearrange Items"],["587d78af367417b2b2512b00","Use the align-self Property"]]},"challenges":[{"id":"587d78ab367417b2b2512af1","title":"Add Flex Superpowers to the Tweet Embed","challengeType":0,"videoUrl":"https://scrimba.com/p/pVaDAv/c9W7MhM","forumTopicId":301100,"dashedName":"add-flex-superpowers-to-the-tweet-embed","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header {\n\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n\n    margin-left: 10px;\n  }\n  header .follow-btn {\n\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer {\n\n  }\n  footer .stats {\n\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>","error":null,"seed":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header {\n\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n\n    margin-left: 10px;\n  }\n  header .follow-btn {\n\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer {\n\n  }\n  footer .stats {\n\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header {\n   display: flex;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer {\n    display: flex;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>","error":null,"seed":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header {\n   display: flex;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer {\n    display: flex;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"}]],"tests":[{"text":"<p>Your <code>.follow-btn</code> should be rendered on the page. Be sure to turn off any extensions such as ad blockers.</p>","testString":"assert($('.follow-btn').length > 0 && $('.follow-btn').css('display') !== 'none');"},{"text":"<p>Your <code>header</code> should have a <code>display</code> property set to <code>flex</code>.</p>","testString":"assert($('header').css('display') == 'flex');"},{"text":"<p>Your <code>footer</code> should have a <code>display</code> property set to <code>flex</code>.</p>","testString":"assert($('footer').css('display') == 'flex');"},{"text":"<p>Your <code>h3</code> should have a <code>display</code> property set to <code>flex</code>.</p>","testString":"assert($('h3').css('display') == 'flex');"},{"text":"<p>Your <code>h4</code> should have a <code>display</code> property set to <code>flex</code>.</p>","testString":"assert($('h4').css('display') == 'flex');"},{"text":"<p>Your <code>.profile-name</code> should have a <code>display</code> property set to <code>flex</code>.</p>","testString":"assert($('.profile-name').css('display') == 'flex');"},{"text":"<p>Your <code>.follow-btn</code> should have a <code>display</code> property set to <code>flex</code>.</p>","testString":"assert($('.follow-btn').css('display') == 'flex');"},{"text":"<p>Your <code>.stats</code> should have a <code>display</code> property set to <code>flex</code>.</p>","testString":"assert($('.stats').css('display') == 'flex');"}],"description":"<section id=\"description\">\n<p>To the right is the tweet embed that will be used as a practical example. Some of the elements would look better with a different layout. The last challenge demonstrated <code>display: flex</code>. Here you'll add it to several components in the tweet embed to start adjusting their positioning.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the CSS property <code>display: flex</code> to all of the following items - note that the selectors are already set up in the CSS:</p>\n<p><code>header</code>, the header's <code>.profile-name</code>, the header's <code>.follow-btn</code>, the header's <code>h3</code> and <code>h4</code>, the <code>footer</code>, and the footer's <code>.stats</code>.</p>\n</section>","block":"css-flexbox","hasEditableBoundaries":false,"order":5,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":1,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78ad367417b2b2512af8","title":"Align Elements Using the align-items Property","challengeType":0,"videoUrl":"https://scrimba.com/p/pVaDAv/c8aggtk","forumTopicId":301101,"dashedName":"align-elements-using-the-align-items-property","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 500px;\n\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 200px;\n    font-size: 24px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 200px;\n    font-size: 18px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"><p>Hello</p></div>\n  <div id=\"box-2\"><p>Goodbye</p></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 500px;\n\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 200px;\n    font-size: 24px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 200px;\n    font-size: 18px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"><p>Hello</p></div>\n  <div id=\"box-2\"><p>Goodbye</p></div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 500px;\n    align-items: center;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 200px;\n    font-size: 24px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 200px;\n    font-size: 18px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"><p>Hello</p></div>\n  <div id=\"box-2\"><p>Goodbye</p></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 500px;\n    align-items: center;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 200px;\n    font-size: 24px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 200px;\n    font-size: 18px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"><p>Hello</p></div>\n  <div id=\"box-2\"><p>Goodbye</p></div>\n</div>"}]],"tests":[{"text":"<p>The <code>#box-container</code> element should have an <code>align-items</code> property set to a value of <code>center</code>.</p>","testString":"assert($('#box-container').css('align-items') == 'center');"}],"description":"<section id=\"description\">\n<p>The <code>align-items</code> property is similar to <code>justify-content</code>. Recall that the <code>justify-content</code> property aligned flex items along the main axis. For rows, the main axis is a horizontal line and for columns it is a vertical line.</p>\n<p>Flex containers also have a <strong>cross axis</strong> which is the opposite of the main axis. For rows, the cross axis is vertical and for columns, the cross axis is horizontal.</p>\n<p>CSS offers the <code>align-items</code> property to align flex items along the cross axis. For a row, it tells CSS how to push the items in the entire row up or down within the container. And for a column, how to push all the items left or right within the container.</p>\n<p>The different values available for <code>align-items</code> include:</p>\n<ul><li><code>flex-start</code>: aligns items to the start of the flex container. For rows, this aligns items to the top of the container. For columns, this aligns items to the left of the container.</li><li><code>flex-end</code>: aligns items to the end of the flex container. For rows, this aligns items to the bottom of the container. For columns, this aligns items to the right of the container.</li><li><code>center</code>: align items to the center. For rows, this vertically aligns items (equal space above and below the items). For columns, this horizontally aligns them (equal space to the left and right of the items).</li><li><code>stretch</code>: stretch the items to fill the flex container. For example, rows items are stretched to fill the flex container top-to-bottom. This is the default value if no <code>align-items</code> value is specified.</li><li><code>baseline</code>: align items to their baselines. Baseline is a text concept, think of it as the line that the letters sit on.</li></ul>\n</section>","instructions":"<section id=\"instructions\">\n<p>An example helps show this property in action. Add the CSS property <code>align-items</code> to the <code>#box-container</code> element, and give it a value of <code>center</code>.</p>\n<p><strong>Bonus</strong><br>\nTry the other options for the <code>align-items</code> property in the code editor to see their differences. But note that a value of <code>center</code> is the only one that will pass this challenge.</p>\n</section>","block":"css-flexbox","hasEditableBoundaries":false,"order":5,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":8,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78ac367417b2b2512af6","title":"Align Elements Using the justify-content Property","challengeType":0,"videoUrl":"https://scrimba.com/p/pVaDAv/c43gnHm","forumTopicId":301102,"dashedName":"align-elements-using-the-justify-content-property","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 500px;\n\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 25%;\n    height: 100%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 25%;\n    height: 100%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 500px;\n\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 25%;\n    height: 100%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 25%;\n    height: 100%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 500px;\n    justify-content: center;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 25%;\n    height: 100%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 25%;\n    height: 100%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 500px;\n    justify-content: center;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 25%;\n    height: 100%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 25%;\n    height: 100%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}]],"tests":[{"text":"<p>The <code>#box-container</code> element should have a <code>justify-content</code> property set to a value of <code>center</code>.</p>","testString":"assert($('#box-container').css('justify-content') == 'center');"}],"description":"<section id=\"description\">\n<p>Sometimes the flex items within a flex container do not fill all the space in the container. It is common to want to tell CSS how to align and space out the flex items a certain way. Fortunately, the <code>justify-content</code> property has several options to do this. But first, there is some important terminology to understand before reviewing those options.</p>\n<p><a href=\"https://www.freecodecamp.org/news/flexbox-the-ultimate-css-flex-cheatsheet/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">For more info about flex-box properties read here</a></p>\n<p>Recall that setting a flex container as a row places the flex items side-by-side from left-to-right. A flex container set as a column places the flex items in a vertical stack from top-to-bottom. For each, the direction the flex items are arranged is called the <strong>main axis</strong>. For a row, this is a horizontal line that cuts through each item. And for a column, the main axis is a vertical line through the items.</p>\n<p>There are several options for how to space the flex items along the line that is the main axis. One of the most commonly used is <code>justify-content: center;</code>, which aligns all the flex items to the center inside the flex container. Other options include:</p>\n<ul><li><code>flex-start</code>: aligns items to the start of the flex container. For a row, this pushes the items to the left of the container. For a column, this pushes the items to the top of the container. This is the default alignment if no <code>justify-content</code> is specified.</li><li><code>flex-end</code>: aligns items to the end of the flex container. For a row, this pushes the items to the right of the container. For a column, this pushes the items to the bottom of the container.</li><li><code>space-between</code>: aligns items to the center of the main axis, with extra space placed between the items. The first and last items are pushed to the very edge of the flex container. For example, in a row the first item is against the left side of the container, the last item is against the right side of the container, then the remaining space is distributed evenly among the other items.</li><li><code>space-around</code>: similar to <code>space-between</code> but the first and last items are not locked to the edges of the container, the space is distributed around all the items with a half space on either end of the flex container.</li><li><code>space-evenly</code>: Distributes space evenly between the flex items with a full space at either end of the flex container.</li></ul>\n</section>","instructions":"<section id=\"instructions\">\n<p>An example helps show this property in action. Add the CSS property <code>justify-content</code> to the <code>#box-container</code> element, and give it a value of <code>center</code>.</p>\n<p><strong>Bonus</strong><br>\nTry the other options for the <code>justify-content</code> property in the code editor to see their differences. But note that a value of <code>center</code> is the only one that will pass this challenge.</p>\n</section>","block":"css-flexbox","hasEditableBoundaries":false,"order":5,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":6,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78ac367417b2b2512af5","title":"Apply the flex-direction Property to Create a Column in the Tweet Embed","challengeType":0,"videoUrl":"https://scrimba.com/p/pVaDAv/cnzdVC9","forumTopicId":301103,"dashedName":"apply-the-flex-direction-property-to-create-a-column-in-the-tweet-embed","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header, footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>","error":null,"seed":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header, footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header, footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    flex-direction: column;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>","error":null,"seed":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header, footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    flex-direction: column;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"}]],"tests":[{"text":"<p>Your <code>.follow-btn</code> should be rendered on the page. Be sure to turn off any extensions such as ad blockers.</p>","testString":"assert($('.follow-btn').length > 0 && $('.follow-btn').css('display') !== 'none');"},{"text":"<p>The <code>.profile-name</code> element should have a <code>flex-direction</code> property set to <code>column</code>.</p>","testString":"assert($('.profile-name').css('flex-direction') == 'column');"}],"description":"<section id=\"description\">\n<p>The tweet embed <code>header</code> and <code>footer</code> used the <code>flex-direction</code> property earlier with a row value. Similarly, the items inside the <code>.profile-name</code> element would work well stacked as a column.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the CSS property <code>flex-direction</code> to the header's <code>.profile-name</code> element and set the value to <code>column</code>.</p>\n</section>","block":"css-flexbox","hasEditableBoundaries":false,"order":5,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":5,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78ab367417b2b2512af3","title":"Apply the flex-direction Property to Create Rows in the Tweet Embed","challengeType":0,"videoUrl":"https://scrimba.com/p/pVaDAv/cJb8yuq","forumTopicId":301104,"dashedName":"apply-the-flex-direction-property-to-create-rows-in-the-tweet-embed","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header {\n    display: flex;\n\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer {\n    display: flex;\n\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>","error":null,"seed":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header {\n    display: flex;\n\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer {\n    display: flex;\n\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer {\n    display: flex;\n    flex-direction: row;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>","error":null,"seed":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer {\n    display: flex;\n    flex-direction: row;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"}]],"tests":[{"text":"<p>Your <code>.follow-btn</code> should be rendered on the page. Be sure to turn off any extensions such as ad blockers.</p>","testString":"assert($('.follow-btn').length > 0 && $('.follow-btn').css('display') !== 'none');"},{"text":"<p>The <code>header</code> should have a <code>flex-direction</code> property set to <code>row</code>.</p>","testString":"assert(code.match(/header\\s*?{[^}]*?flex-direction:\\s*?row;/g));"},{"text":"<p>The <code>footer</code> should have a <code>flex-direction</code> property set to <code>row</code>.</p>","testString":"assert(code.match(/footer\\s*?{[^}]*?flex-direction:\\s*?row;/g));"}],"description":"<section id=\"description\">\n<p>The <code>header</code> and <code>footer</code> in the tweet embed example have child items that could be arranged as rows using the <code>flex-direction</code> property. This tells CSS to align the children horizontally.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the CSS property <code>flex-direction</code> to both the <code>header</code> and <code>footer</code> and set the value to <code>row</code>.</p>\n</section>","block":"css-flexbox","hasEditableBoundaries":false,"order":5,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":3,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78ab367417b2b2512af0","title":"Use display: flex to Position Two Boxes","challengeType":0,"videoUrl":"https://scrimba.com/p/pVaDAv/cgz3QS7","forumTopicId":301105,"dashedName":"use-display-flex-to-position-two-boxes","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    height: 500px;\n\n  }\n\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    height: 500px;\n\n  }\n\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    height: 500px;\n    display: flex;\n  }\n\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    height: 500px;\n    display: flex;\n  }\n\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}]],"tests":[{"text":"<p><code>#box-container</code> should have the <code>display</code> property set to a value of <code>flex</code>.</p>","testString":"assert($('#box-container').css('display') == 'flex');"}],"description":"<section id=\"description\">\n<p>This section uses alternating challenge styles to show how to use CSS to position elements in a flexible way. First, a challenge will explain theory, then a practical challenge using a simple tweet component will apply the flexbox concept.</p>\n<p>Placing the CSS property <code>display: flex;</code> on an element allows you to use other flex properties to build a responsive page.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the CSS property <code>display</code> to <code>#box-container</code> and set its value to <code>flex</code>.</p>\n</section>","block":"css-flexbox","hasEditableBoundaries":false,"order":5,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":0,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78ad367417b2b2512af9","title":"Use the align-items Property in the Tweet Embed","challengeType":0,"videoUrl":"https://scrimba.com/p/pVaDAv/cd3PNfq","forumTopicId":301106,"dashedName":"use-the-align-items-property-in-the-tweet-embed","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header, footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>","error":null,"seed":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header, footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header, footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    align-items: center;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>","error":null,"seed":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header, footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    align-items: center;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"}]],"tests":[{"text":"<p>Your <code>.follow-btn</code> should be rendered on the page. Be sure to turn off any extensions such as ad blockers.</p>","testString":"assert($('.follow-btn').length > 0 && $('.follow-btn').css('display') !== 'none');"},{"text":"<p>The <code>.follow-btn</code> element should have the <code>align-items</code> property set to a value of <code>center</code>.</p>","testString":"assert($('.follow-btn').css('align-items') == 'center');"}],"description":"<section id=\"description\">\n<p>The last challenge introduced the <code>align-items</code> property and gave an example. This property can be applied to a few tweet embed elements to align the flex items inside them.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the CSS property <code>align-items</code> to the header's <code>.follow-btn</code> element. Set the value to <code>center</code>.</p>\n</section>","block":"css-flexbox","hasEditableBoundaries":false,"order":5,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":9,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78af367417b2b2512b00","title":"Use the align-self Property","challengeType":0,"videoUrl":"https://scrimba.com/p/pVaDAv/cMbvzfv","forumTopicId":301107,"dashedName":"use-the-align-self-property","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n\n    height: 200px;\n    width: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n\n    height: 200px;\n    width: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n\n    height: 200px;\n    width: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n\n    height: 200px;\n    width: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    align-self: center;\n    height: 200px;\n    width: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    align-self: flex-end;\n    height: 200px;\n    width: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    align-self: center;\n    height: 200px;\n    width: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    align-self: flex-end;\n    height: 200px;\n    width: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}]],"tests":[{"text":"<p>The <code>#box-1</code> element should have the <code>align-self</code> property set to a value of <code>center</code>.</p>","testString":"assert($('#box-1').css('align-self') == 'center');"},{"text":"<p>The <code>#box-2</code> element should have the <code>align-self</code> property set to a value of <code>flex-end</code>.</p>","testString":"assert($('#box-2').css('align-self') == 'flex-end');"}],"description":"<section id=\"description\">\n<p>The final property for flex items is <code>align-self</code>. This property allows you to adjust each item's alignment individually, instead of setting them all at once. This is useful since other common adjustment techniques using the CSS properties <code>float</code>, <code>clear</code>, and <code>vertical-align</code> do not work on flex items.</p>\n<p><code>align-self</code> accepts the same values as <code>align-items</code> and will override any value set by the <code>align-items</code> property.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the CSS property <code>align-self</code> to both <code>#box-1</code> and <code>#box-2</code>. Give <code>#box-1</code> a value of <code>center</code> and give <code>#box-2</code> a value of <code>flex-end</code>.</p>\n</section>","block":"css-flexbox","hasEditableBoundaries":false,"order":5,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":16,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78ae367417b2b2512afd","title":"Use the flex-basis Property to Set the Initial Size of an Item","challengeType":0,"videoUrl":"https://scrimba.com/p/pVaDAv/c3d9nCa","forumTopicId":301108,"dashedName":"use-the-flex-basis-property-to-set-the-initial-size-of-an-item","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n\n  #box-1 {\n    background-color: dodgerblue;\n    height: 200px;\n\n  }\n\n  #box-2 {\n    background-color: orangered;\n    height: 200px;\n\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n\n  #box-1 {\n    background-color: dodgerblue;\n    height: 200px;\n\n  }\n\n  #box-2 {\n    background-color: orangered;\n    height: 200px;\n\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n\n  #box-1 {\n    background-color: dodgerblue;\n    height: 200px;\n    flex-basis: 10em;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    height: 200px;\n    flex-basis: 20em;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n\n  #box-1 {\n    background-color: dodgerblue;\n    height: 200px;\n    flex-basis: 10em;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    height: 200px;\n    flex-basis: 20em;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}]],"tests":[{"text":"<p>The <code>#box-1</code> element should have the <code>flex-basis</code> property.</p>","testString":"assert($('#box-1').css('flex-basis') != 'auto');"},{"text":"<p>The <code>#box-1</code> element should have a <code>flex-basis</code> value of <code>10em</code>.</p>","testString":"assert(code.match(/#box-1\\s*?{\\s*?.*?\\s*?.*?\\s*?flex-basis:\\s*?10em;/g));"},{"text":"<p>The <code>#box-2</code> element should have the <code>flex-basis</code> property.</p>","testString":"assert($('#box-2').css('flex-basis') != 'auto');"},{"text":"<p>The <code>#box-2</code> element should have a <code>flex-basis</code> value of <code>20em</code>.</p>","testString":"assert(code.match(/#box-2\\s*?{\\s*?.*?\\s*?.*?\\s*?flex-basis:\\s*?20em;/g));"}],"description":"<section id=\"description\">\n<p>The <code>flex-basis</code> property specifies the initial size of the item before CSS makes adjustments with <code>flex-shrink</code> or <code>flex-grow</code>.</p>\n<p>The units used by the <code>flex-basis</code> property are the same as other size properties (<code>px</code>, <code>em</code>, <code>%</code>, etc.). The value <code>auto</code> sizes items based on the content.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Set the initial size of the boxes using <code>flex-basis</code>. Add the CSS property <code>flex-basis</code> to both <code>#box-1</code> and <code>#box-2</code>. Give <code>#box-1</code> a value of <code>10em</code> and <code>#box-2</code> a value of <code>20em</code>.</p>\n</section>","block":"css-flexbox","hasEditableBoundaries":false,"order":5,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":13,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78ac367417b2b2512af4","title":"Use the flex-direction Property to Make a Column","challengeType":0,"videoUrl":"https://scrimba.com/p/pVaDAv/cZmWeA4","forumTopicId":301109,"dashedName":"use-the-flex-direction-property-to-make-a-column","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n    flex-direction: column;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n    flex-direction: column;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}]],"tests":[{"text":"<p>The <code>#box-container</code> element should have a <code>flex-direction</code> property set to <code>column</code>.</p>","testString":"assert($('#box-container').css('flex-direction') == 'column');"}],"description":"<section id=\"description\">\n<p>The last two challenges used the <code>flex-direction</code> property set to <code>row</code>. This property can also create a column by vertically stacking the children of a flex container.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the CSS property <code>flex-direction</code> to the <code>#box-container</code> element, and give it a value of <code>column</code>.</p>\n</section>","block":"css-flexbox","hasEditableBoundaries":false,"order":5,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":4,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78ab367417b2b2512af2","title":"Use the flex-direction Property to Make a Row","challengeType":0,"videoUrl":"https://scrimba.com/p/pVaDAv/cBEkbfJ","forumTopicId":301110,"dashedName":"use-the-flex-direction-property-to-make-a-row","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n    flex-direction: row-reverse;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n    flex-direction: row-reverse;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 50%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 50%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}]],"tests":[{"text":"<p>The <code>#box-container</code> element should have a <code>flex-direction</code> property set to <code>row-reverse</code>.</p>","testString":"assert($('#box-container').css('flex-direction') == 'row-reverse');"}],"description":"<section id=\"description\">\n<p>Adding <code>display: flex</code> to an element turns it into a flex container. This makes it possible to align any children of that element into rows or columns. You do this by adding the <code>flex-direction</code> property to the parent item and setting it to row or column. Creating a row will align the children horizontally, and creating a column will align the children vertically.</p>\n<p>Other options for <code>flex-direction</code> are <code>row-reverse</code> and <code>column-reverse</code>.</p>\n<p><strong>Note:</strong> The default value for the <code>flex-direction</code> property is <code>row</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the CSS property <code>flex-direction</code> to the <code>#box-container</code> element, and give it a value of <code>row-reverse</code>.</p>\n</section>","block":"css-flexbox","hasEditableBoundaries":false,"order":5,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":2,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78ae367417b2b2512afc","title":"Use the flex-grow Property to Expand Items","challengeType":0,"videoUrl":"https://scrimba.com/p/pVaDAv/c2p78cg","forumTopicId":301111,"dashedName":"use-the-flex-grow-property-to-expand-items","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n\n  #box-1 {\n    background-color: dodgerblue;\n    height: 200px;\n\n  }\n\n  #box-2 {\n    background-color: orangered;\n    height: 200px;\n\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n\n  #box-1 {\n    background-color: dodgerblue;\n    height: 200px;\n\n  }\n\n  #box-2 {\n    background-color: orangered;\n    height: 200px;\n\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n\n  #box-1 {\n    background-color: dodgerblue;\n    height: 200px;\n    flex-grow: 1;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    height: 200px;\n    flex-grow: 2;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n\n  #box-1 {\n    background-color: dodgerblue;\n    height: 200px;\n    flex-grow: 1;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    height: 200px;\n    flex-grow: 2;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}]],"tests":[{"text":"<p>The <code>#box-1</code> element should have the <code>flex-grow</code> property set to a value of <code>1</code>.</p>","testString":"assert($('#box-1').css('flex-grow') == '1');"},{"text":"<p>The <code>#box-2</code> element should have the <code>flex-grow</code> property set to a value of <code>2</code>.</p>","testString":"assert($('#box-2').css('flex-grow') == '2');"}],"description":"<section id=\"description\">\n<p>The opposite of <code>flex-shrink</code> is the <code>flex-grow</code> property. Recall that <code>flex-shrink</code> controls the size of the items when the container shrinks. The <code>flex-grow</code> property controls the size of items when the parent container expands.</p>\n<p>Using a similar example from the last challenge, if one item has a <code>flex-grow</code> value of <code>1</code> and the other has a <code>flex-grow</code> value of <code>3</code>, the one with the value of <code>3</code> will grow three times as much as the other.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the CSS property <code>flex-grow</code> to both <code>#box-1</code> and <code>#box-2</code>. Give <code>#box-1</code> a value of <code>1</code> and <code>#box-2</code> a value of <code>2</code>.</p>\n</section>","block":"css-flexbox","hasEditableBoundaries":false,"order":5,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":12,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78ae367417b2b2512afe","title":"Use the flex Shorthand Property","challengeType":0,"videoUrl":"https://scrimba.com/p/pVaDAv/cbpW2tE","forumTopicId":301112,"dashedName":"use-the-flex-shorthand-property","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n\n    height: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n\n    height: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n\n    height: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n\n    height: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    flex: 2 2 150px;\n    height: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    flex: 1 1 150px;\n    height: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    flex: 2 2 150px;\n    height: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    flex: 1 1 150px;\n    height: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}]],"tests":[{"text":"<p>The <code>#box-1</code> element should have the <code>flex</code> property set to a value of <code>2 2 150px</code>.</p>","testString":"assert(\n  $('#box-1').css('flex-grow') == '2' &&\n    $('#box-1').css('flex-shrink') == '2' &&\n    $('#box-1').css('flex-basis') == '150px'\n);"},{"text":"<p>The <code>#box-2</code> element should have the <code>flex</code> property set to a value of <code>1 1 150px</code>.</p>","testString":"assert(\n  $('#box-2').css('flex-grow') == '1' &&\n    $('#box-2').css('flex-shrink') == '1' &&\n    $('#box-2').css('flex-basis') == '150px'\n);"},{"text":"<p>Your code should use the <code>flex</code> property for <code>#box-1</code> and <code>#box-2</code>.</p>","testString":"assert(code.match(/flex:\\s*?\\d\\s+?\\d\\s+?150px;/g).length == 2);"}],"description":"<section id=\"description\">\n<p>There is a shortcut available to set several flex properties at once. The <code>flex-grow</code>, <code>flex-shrink</code>, and <code>flex-basis</code> properties can all be set together by using the <code>flex</code> property.</p>\n<p>For example, <code>flex: 1 0 10px;</code> will set the item to <code>flex-grow: 1;</code>, <code>flex-shrink: 0;</code>, and <code>flex-basis: 10px;</code>.</p>\n<p>The default property settings are <code>flex: 0 1 auto;</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the CSS property <code>flex</code> to both <code>#box-1</code> and <code>#box-2</code>. Give <code>#box-1</code> the values so its <code>flex-grow</code> is <code>2</code>, its <code>flex-shrink</code> is <code>2</code>, and its <code>flex-basis</code> is <code>150px</code>. Give <code>#box-2</code> the values so its <code>flex-grow</code> is <code>1</code>, its <code>flex-shrink</code> is <code>1</code>, and its <code>flex-basis</code> is <code>150px</code>.</p>\n<p>These values will cause <code>#box-1</code> to grow to fill the extra space at twice the rate of <code>#box-2</code> when the container is greater than 300px and shrink at twice the rate of <code>#box-2</code> when the container is less than 300px. 300px is the combined size of the <code>flex-basis</code> values of the two boxes.</p>\n</section>","block":"css-flexbox","hasEditableBoundaries":false,"order":5,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":14,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78ad367417b2b2512afb","title":"Use the flex-shrink Property to Shrink Items","challengeType":0,"videoUrl":"https://scrimba.com/p/pVaDAv/cd3PBfr","forumTopicId":301113,"dashedName":"use-the-flex-shrink-property-to-shrink-items","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 100%;\n    height: 200px;\n\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 100%;\n    height: 200px;\n\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 100%;\n    height: 200px;\n\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 100%;\n    height: 200px;\n\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 100%;\n    height: 200px;\n    flex-shrink: 1;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 100%;\n    height: 200px;\n    flex-shrink: 2;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 100%;\n    height: 200px;\n    flex-shrink: 1;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 100%;\n    height: 200px;\n    flex-shrink: 2;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}]],"tests":[{"text":"<p>The <code>#box-1</code> element should have the <code>flex-shrink</code> property set to a value of <code>1</code>.</p>","testString":"assert($('#box-1').css('flex-shrink') == '1');"},{"text":"<p>The <code>#box-2</code> element should have the <code>flex-shrink</code> property set to a value of <code>2</code>.</p>","testString":"assert($('#box-2').css('flex-shrink') == '2');"}],"description":"<section id=\"description\">\n<p>So far, all the properties in the challenges apply to the flex container (the parent of the flex items). However, there are several useful properties for the flex items.</p>\n<p>The first is the <code>flex-shrink</code> property. When it's used, it allows an item to shrink if the flex container is too small. Items shrink when the width of the parent container is smaller than the combined widths of all the flex items within it.</p>\n<p>The <code>flex-shrink</code> property takes numbers as values. The higher the number, the more it will shrink compared to the other items in the container. For example, if one item has a <code>flex-shrink</code> value of <code>1</code> and the other has a <code>flex-shrink</code> value of <code>3</code>, the one with the value of <code>3</code> will shrink three times as much as the other.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the CSS property <code>flex-shrink</code> to both <code>#box-1</code> and <code>#box-2</code>. Give <code>#box-1</code> a value of <code>1</code> and <code>#box-2</code> a value of <code>2</code>.</p>\n</section>","block":"css-flexbox","hasEditableBoundaries":false,"order":5,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":11,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78ad367417b2b2512afa","title":"Use the flex-wrap Property to Wrap a Row or Column","challengeType":0,"videoUrl":"https://scrimba.com/p/pVaDAv/cQv9ZtG","forumTopicId":301114,"dashedName":"use-the-flex-wrap-property-to-wrap-a-row-or-column","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 100%;\n\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 25%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 25%;\n    height: 50%;\n  }\n  #box-3 {\n    background-color: violet;\n    width: 25%;\n    height: 50%;\n  }\n  #box-4 {\n    background-color: yellow;\n    width: 25%;\n    height: 50%;\n  }\n  #box-5 {\n    background-color: green;\n    width: 25%;\n    height: 50%;\n  }\n  #box-6 {\n    background-color: black;\n    width: 25%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n  <div id=\"box-3\"></div>\n  <div id=\"box-4\"></div>\n  <div id=\"box-5\"></div>\n  <div id=\"box-6\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 100%;\n\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 25%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 25%;\n    height: 50%;\n  }\n  #box-3 {\n    background-color: violet;\n    width: 25%;\n    height: 50%;\n  }\n  #box-4 {\n    background-color: yellow;\n    width: 25%;\n    height: 50%;\n  }\n  #box-5 {\n    background-color: green;\n    width: 25%;\n    height: 50%;\n  }\n  #box-6 {\n    background-color: black;\n    width: 25%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n  <div id=\"box-3\"></div>\n  <div id=\"box-4\"></div>\n  <div id=\"box-5\"></div>\n  <div id=\"box-6\"></div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 100%;\n    flex-wrap: wrap;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 25%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 25%;\n    height: 50%;\n  }\n  #box-3 {\n    background-color: violet;\n    width: 25%;\n    height: 50%;\n  }\n  #box-4 {\n    background-color: yellow;\n    width: 25%;\n    height: 50%;\n  }\n  #box-5 {\n    background-color: green;\n    width: 25%;\n    height: 50%;\n  }\n  #box-6 {\n    background-color: black;\n    width: 25%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n  <div id=\"box-3\"></div>\n  <div id=\"box-4\"></div>\n  <div id=\"box-5\"></div>\n  <div id=\"box-6\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    background: gray;\n    display: flex;\n    height: 100%;\n    flex-wrap: wrap;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    width: 25%;\n    height: 50%;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    width: 25%;\n    height: 50%;\n  }\n  #box-3 {\n    background-color: violet;\n    width: 25%;\n    height: 50%;\n  }\n  #box-4 {\n    background-color: yellow;\n    width: 25%;\n    height: 50%;\n  }\n  #box-5 {\n    background-color: green;\n    width: 25%;\n    height: 50%;\n  }\n  #box-6 {\n    background-color: black;\n    width: 25%;\n    height: 50%;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n  <div id=\"box-3\"></div>\n  <div id=\"box-4\"></div>\n  <div id=\"box-5\"></div>\n  <div id=\"box-6\"></div>\n</div>"}]],"tests":[{"text":"<p>The <code>#box-container</code> element should have the <code>flex-wrap</code> property set to a value of <code>wrap</code>.</p>","testString":"assert($('#box-container').css('flex-wrap') == 'wrap');"}],"description":"<section id=\"description\">\n<p>CSS flexbox has a feature to split a flex container into multiple rows (or columns). By default, a flex container will fit all flex items together. For example, a row will all be on one line.</p>\n<p>However, using the <code>flex-wrap</code> property tells CSS to wrap items. This means extra items move into a new row or column. The break point of where the wrapping happens depends on the size of the items and the size of the container.</p>\n<p>CSS also has options for the direction of the wrap:</p>\n<ul><li><code>nowrap</code>: this is the default setting, and does not wrap items.</li><li><code>wrap</code>: wraps items onto multiple lines from top-to-bottom if they are in rows and left-to-right if they are in columns.</li><li><code>wrap-reverse</code>: wraps items onto multiple lines from bottom-to-top if they are in rows and right-to-left if they are in columns.</li></ul>\n</section>","instructions":"<section id=\"instructions\">\n<p>The current layout has too many boxes for one row. Add the CSS property <code>flex-wrap</code> to the <code>#box-container</code> element, and give it a value of <code>wrap</code>.</p>\n</section>","block":"css-flexbox","hasEditableBoundaries":false,"order":5,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":10,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78ac367417b2b2512af7","title":"Use the justify-content Property in the Tweet Embed","challengeType":0,"videoUrl":"https://scrimba.com/p/pVaDAv/c43GgTa","forumTopicId":301115,"dashedName":"use-the-justify-content-property-in-the-tweet-embed","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header, footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    flex-direction: column;\n\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>","error":null,"seed":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header, footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    flex-direction: column;\n\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header, footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>","error":null,"seed":"<style>\n  body {\n    font-family: Arial, sans-serif;\n  }\n  header, footer {\n    display: flex;\n    flex-direction: row;\n  }\n  header .profile-thumbnail {\n    width: 50px;\n    height: 50px;\n    border-radius: 4px;\n  }\n  header .profile-name {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-left: 10px;\n  }\n  header .follow-btn {\n    display: flex;\n    margin: 0 0 0 auto;\n  }\n  header .follow-btn button {\n    border: 0;\n    border-radius: 3px;\n    padding: 5px;\n  }\n  header h3, header h4 {\n    display: flex;\n    margin: 0;\n  }\n  #inner p {\n    margin-bottom: 10px;\n    font-size: 20px;\n  }\n  #inner hr {\n    margin: 20px 0;\n    border-style: solid;\n    opacity: 0.1;\n  }\n  footer .stats {\n    display: flex;\n    font-size: 15px;\n  }\n  footer .stats strong {\n    font-size: 18px;\n  }\n  footer .stats .likes {\n    margin-left: 10px;\n  }\n  footer .cta {\n    margin-left: auto;\n  }\n  footer .cta button {\n    border: 0;\n    background: transparent;\n  }\n</style>\n<header>\n  <img src=\"https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg\" alt=\"Quincy Larson's profile picture\" class=\"profile-thumbnail\">\n  <div class=\"profile-name\">\n    <h3>Quincy Larson</h3>\n    <h4>@ossia</h4>\n  </div>\n  <div class=\"follow-btn\">\n    <button>Follow</button>\n  </div>\n</header>\n<div id=\"inner\">\n  <p>I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.</p>\n  <span class=\"date\">1:32 PM - 12 Jan 2018</span>\n  <hr>\n</div>\n<footer>\n  <div class=\"stats\">\n    <div class=\"Retweets\">\n      <strong>107</strong> Retweets\n    </div>\n    <div class=\"likes\">\n      <strong>431</strong> Likes\n    </div>\n  </div>\n  <div class=\"cta\">\n    <button class=\"share-btn\">Share</button>\n    <button class=\"retweet-btn\">Retweet</button>\n    <button class=\"like-btn\">Like</button>\n  </div>\n</footer>"}]],"tests":[{"text":"<p>Your <code>.follow-btn</code> should be rendered on the page. Be sure to turn off any extensions such as ad blockers.</p>","testString":"assert($('.follow-btn').length > 0 && $('.follow-btn').css('display') !== 'none');"},{"text":"<p>The <code>.profile-name</code> element should have the <code>justify-content</code> property set to any of these values: <code>center</code>, <code>flex-start</code>, <code>flex-end</code>, <code>space-between</code>, <code>space-around</code>, or <code>space-evenly</code>.</p>","testString":"assert(\n  code.match(\n    /header\\s.profile-name\\s*{\\s*?.*?\\s*?.*?\\s*?\\s*?.*?\\s*?justify-content\\s*:\\s*(center|flex-start|flex-end|space-between|space-around|space-evenly)\\s*;/g\n  )\n);"}],"description":"<section id=\"description\">\n<p>The last challenge showed an example of the <code>justify-content</code> property. For the tweet embed, this property can be applied to align the items in the <code>.profile-name</code> element.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the CSS property <code>justify-content</code> to the header's <code>.profile-name</code> element and set the value to any of the options from the last challenge.</p>\n</section>","block":"css-flexbox","hasEditableBoundaries":false,"order":5,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":7,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78ae367417b2b2512aff","title":"Use the order Property to Rearrange Items","challengeType":0,"videoUrl":"https://scrimba.com/p/pVaDAv/cMbvNAG","forumTopicId":301116,"dashedName":"use-the-order-property-to-rearrange-items","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n\n    height: 200px;\n    width: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n\n    height: 200px;\n    width: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n\n    height: 200px;\n    width: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n\n    height: 200px;\n    width: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    order: 2;\n    height: 200px;\n    width: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    order: 1;\n    height: 200px;\n    width: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>","error":null,"seed":"<style>\n  #box-container {\n    display: flex;\n    height: 500px;\n  }\n  #box-1 {\n    background-color: dodgerblue;\n    order: 2;\n    height: 200px;\n    width: 200px;\n  }\n\n  #box-2 {\n    background-color: orangered;\n    order: 1;\n    height: 200px;\n    width: 200px;\n  }\n</style>\n\n<div id=\"box-container\">\n  <div id=\"box-1\"></div>\n  <div id=\"box-2\"></div>\n</div>"}]],"tests":[{"text":"<p>The <code>#box-1</code> element should have the <code>order</code> property set to a value of <code>2</code>.</p>","testString":"assert($('#box-1').css('order') == '2');"},{"text":"<p>The <code>#box-2</code> element should have the <code>order</code> property set to a value of <code>1</code>.</p>","testString":"assert($('#box-2').css('order') == '1');"}],"description":"<section id=\"description\">\n<p>The <code>order</code> property is used to tell CSS the order of how flex items appear in the flex container. By default, items will appear in the same order they come in the source HTML. The property takes numbers as values, and negative numbers can be used.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the CSS property <code>order</code> to both <code>#box-1</code> and <code>#box-2</code>. Give <code>#box-1</code> a value of <code>2</code> and give <code>#box-2</code> a value of <code>1</code>.</p>\n</section>","block":"css-flexbox","hasEditableBoundaries":false,"order":5,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":15,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false}]},"css-grid":{"meta":{"name":"CSS Grid","isUpcomingChange":false,"dashedName":"css-grid","order":6,"time":"5 hours","template":"","required":[],"superBlock":"responsive-web-design","challengeOrder":[["5a858944d96184f06fd60d61","Create Your First CSS Grid"],["5a9036d038fddaf9a66b5d32","Add Columns with grid-template-columns"],["5a9036e138fddaf9a66b5d33","Add Rows with grid-template-rows"],["5a9036ee38fddaf9a66b5d34","Use CSS Grid units to Change the Size of Columns and Rows"],["5a9036ee38fddaf9a66b5d35","Create a Column Gap Using grid-column-gap"],["5a9036ee38fddaf9a66b5d36","Create a Row Gap using grid-row-gap"],["5a9036ee38fddaf9a66b5d37","Add Gaps Faster with grid-gap"],["5a90372638fddaf9a66b5d38","Use grid-column to Control Spacing"],["5a90373638fddaf9a66b5d39","Use grid-row to Control Spacing"],["5a90374338fddaf9a66b5d3a","Align an Item Horizontally using justify-self"],["5a90375238fddaf9a66b5d3b","Align an Item Vertically using align-self"],["5a90376038fddaf9a66b5d3c","Align All Items Horizontally using justify-items"],["5a94fdf869fb03452672e45b","Align All Items Vertically using align-items"],["5a94fe0569fb03452672e45c","Divide the Grid Into an Area Template"],["5a94fe1369fb03452672e45d","Place Items in Grid Areas Using the grid-area Property"],["5a94fe2669fb03452672e45e","Use grid-area Without Creating an Areas Template"],["5a94fe3669fb03452672e45f","Reduce Repetition Using the repeat Function"],["5a94fe4469fb03452672e460","Limit Item Size Using the minmax Function"],["5a94fe5469fb03452672e461","Create Flexible Layouts Using auto-fill"],["5a94fe6269fb03452672e462","Create Flexible Layouts Using auto-fit"],["5a94fe7769fb03452672e463","Use Media Queries to Create Responsive Layouts"],["5a94fe8569fb03452672e464","Create Grids within Grids"]]},"challenges":[{"id":"5a9036d038fddaf9a66b5d32","title":"Add Columns with grid-template-columns","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/c7NzDHv","forumTopicId":301117,"dashedName":"add-columns-with-grid-template-columns","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>","error":null,"seed":"<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.container {grid-template-columns: 100px 100px 100px;}</style>","error":null,"seed":"<style>.container {grid-template-columns: 100px 100px 100px;}</style>"}]],"tests":[{"text":"<p><code>container</code> class should have a <code>grid-template-columns</code> property with three units of <code>100px</code>.</p>","testString":"assert(new __helpers.CSSHelp(document).getStyle('.container')?.gridTemplateColumns === '100px 100px 100px');"}],"description":"<section id=\"description\">\n<p>Simply creating a grid element doesn't get you very far. You need to define the structure of the grid as well. To add some columns to the grid, use the <code>grid-template-columns</code> property on a grid container as demonstrated below:</p>\n<pre><code class=\"language-css\">.container {\n  display: grid;\n  grid-template-columns: 50px 50px;\n}\n</code></pre>\n<p>This will give your grid two columns that are each 50px wide. The number of parameters given to the <code>grid-template-columns</code> property indicates the number of columns in the grid, and the value of each parameter indicates the width of each column.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Give the grid container three columns that are each <code>100px</code> wide.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":1,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a9036ee38fddaf9a66b5d37","title":"Add Gaps Faster with grid-gap","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/ca2qVtv","forumTopicId":301118,"dashedName":"add-gaps-faster-with-grid-gap","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>","error":null,"seed":"<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.container {grid-gap: 10px 20px;}</style>","error":null,"seed":"<style>.container {grid-gap: 10px 20px;}</style>"}]],"tests":[{"text":"<p><code>container</code> class should have a <code>grid-gap</code> property that introduces a <code>10px</code> gap between the rows and a <code>20px</code> gap between the columns.</p>","testString":"assert(\n  code.match(\n    /.container\\s*?{[\\s\\S]*grid-gap\\s*?:\\s*?10px\\s+?20px\\s*?;[\\s\\S]*}/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p><code>grid-gap</code> is a shorthand property for <code>grid-row-gap</code> and <code>grid-column-gap</code> from the previous two challenges that's more convenient to use. If <code>grid-gap</code> has one value, it will create a gap between all rows and columns. However, if there are two values, it will use the first one to set the gap between the rows and the second value for the columns.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use <code>grid-gap</code> to introduce a <code>10px</code> gap between the rows and <code>20px</code> gap between the columns.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":6,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a9036e138fddaf9a66b5d33","title":"Add Rows with grid-template-rows","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/cbp9Pua","forumTopicId":301119,"dashedName":"add-rows-with-grid-template-rows","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 100px 100px 100px;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>","error":null,"seed":"<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 100px 100px 100px;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.container {grid-template-rows: 50px 50px;}</style>","error":null,"seed":"<style>.container {grid-template-rows: 50px 50px;}</style>"}]],"tests":[{"text":"<p><code>container</code> class should have a <code>grid-template-rows</code> property with two units of <code>50px</code>.</p>","testString":"assert(\n  code.match(\n    /.container\\s*?{[\\s\\S]*grid-template-rows\\s*?:\\s*?50px\\s*?50px\\s*?;[\\s\\S]*}/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p>The grid you created in the last challenge will set the number of rows automatically. To adjust the rows manually, use the <code>grid-template-rows</code> property in the same way you used <code>grid-template-columns</code> in the previous challenge.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add two rows to the grid that are <code>50px</code> tall each.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":2,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a90376038fddaf9a66b5d3c","title":"Align All Items Horizontally using justify-items","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/cJbpECn","forumTopicId":301120,"dashedName":"align-all-items-horizontally-using-justify-items","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>","error":null,"seed":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.container {justify-items: center;}</style>","error":null,"seed":"<style>.container {justify-items: center;}</style>"}]],"tests":[{"text":"<p><code>container</code> class should have a <code>justify-items</code> property that has the value of <code>center</code>.</p>","testString":"assert(\n  code.match(\n    /.container\\s*?{[\\s\\S]*justify-items\\s*?:\\s*?center\\s*?;[\\s\\S]*}/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p>Sometimes you want all the items in your CSS Grid to share the same alignment. You can use the previously learned properties and align them individually, or you can align them all at once horizontally by using <code>justify-items</code> on your grid container. This property can accept all the same values you learned about in the previous two challenges, the difference being that it will move <strong>all</strong> the items in our grid to the desired alignment.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use this property to center all our items horizontally.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":11,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a94fdf869fb03452672e45b","title":"Align All Items Vertically using align-items","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/ckzPeUv","forumTopicId":301121,"dashedName":"align-all-items-vertically-using-align-items","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>","error":null,"seed":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.container {align-items: end;}</style>","error":null,"seed":"<style>.container {align-items: end;}</style>"}]],"tests":[{"text":"<p><code>container</code> class should have a <code>align-items</code> property that has the value of <code>end</code>.</p>","testString":"assert(\n  code.match(/.container\\s*?{[\\s\\S]*align-items\\s*?:\\s*?end\\s*?;[\\s\\S]*}/gi)\n);"}],"description":"<section id=\"description\">\n<p>Using the <code>align-items</code> property on a grid container will set the vertical alignment for all the items in our grid.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use it now to move all the items to the end of each cell.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":12,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a90374338fddaf9a66b5d3a","title":"Align an Item Horizontally using justify-self","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/cJbpKHq","forumTopicId":301122,"dashedName":"align-an-item-horizontally-using-justify-self","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .item1{background: LightSkyBlue;}\n\n  .item2 {\n    background: LightSalmon;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>","error":null,"seed":"<style>\n  .item1{background: LightSkyBlue;}\n\n  .item2 {\n    background: LightSalmon;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.item2 {justify-self: center;}</style>","error":null,"seed":"<style>.item2 {justify-self: center;}</style>"}]],"tests":[{"text":"<p><code>item2</code> class should have a <code>justify-self</code> property that has the value of <code>center</code>.</p>","testString":"assert(\n  code.match(/.item2\\s*?{[\\s\\S]*justify-self\\s*?:\\s*?center\\s*?;[\\s\\S]*}/gi)\n);"}],"description":"<section id=\"description\">\n<p>In CSS Grid, the content of each item is located in a box which is referred to as a <dfn>cell</dfn>. You can align the content's position within its cell horizontally using the <code>justify-self</code> property on a grid item. By default, this property has a value of <code>stretch</code>, which will make the content fill the whole width of the cell. This CSS Grid property accepts other values as well:</p>\n<p><code>start</code>: aligns the content at the left of the cell,</p>\n<p><code>center</code>: aligns the content in the center of the cell,</p>\n<p><code>end</code>: aligns the content at the right of the cell.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the <code>justify-self</code> property to center the item with the class <code>item2</code>.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":9,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a90375238fddaf9a66b5d3b","title":"Align an Item Vertically using align-self","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/cmzd4fz","forumTopicId":301123,"dashedName":"align-an-item-vertically-using-align-self","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n\n  .item3 {\n    background: PaleTurquoise;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>","error":null,"seed":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n\n  .item3 {\n    background: PaleTurquoise;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.item3 {align-self: end;}</style>","error":null,"seed":"<style>.item3 {align-self: end;}</style>"}]],"tests":[{"text":"<p><code>item3</code> class should have a <code>align-self</code> property that has the value of <code>end</code>.</p>","testString":"assert(code.match(/.item3\\s*?{[\\s\\S]*align-self\\s*?:\\s*?end\\s*?;[\\s\\S]*}/gi));"}],"description":"<section id=\"description\">\n<p>Just as you can align an item horizontally, there's a way to align an item vertically as well. To do this, you use the <code>align-self</code> property on an item. This property accepts all of the same values as <code>justify-self</code> from the last challenge.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Align the item with the class <code>item3</code> vertically at the <code>end</code>.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":10,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a9036ee38fddaf9a66b5d35","title":"Create a Column Gap Using grid-column-gap","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/cVZ8vfD","forumTopicId":301124,"dashedName":"create-a-column-gap-using-grid-column-gap","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    /* Only change code below this line */\n\n   \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>","error":null,"seed":"<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    /* Only change code below this line */\n\n   \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.container {grid-column-gap: 20px;}</style>","error":null,"seed":"<style>.container {grid-column-gap: 20px;}</style>"}]],"tests":[{"text":"<p><code>container</code> class should have a <code>grid-column-gap</code> property that has the value of <code>20px</code>.</p>","testString":"assert(\n  code.match(\n    /.container\\s*?{[\\s\\S]*grid-column-gap\\s*?:\\s*?20px\\s*?;[\\s\\S]*}/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p>So far in the grids you have created, the columns have all been tight up against each other. Sometimes you want a gap in between the columns. To add a gap between the columns, use the <code>grid-column-gap</code> property like this:</p>\n<pre><code class=\"language-css\">grid-column-gap: 10px;\n</code></pre>\n<p>This creates 10px of empty space between all of our columns.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Give the columns in the grid a <code>20px</code> gap.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":4,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a9036ee38fddaf9a66b5d36","title":"Create a Row Gap using grid-row-gap","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/cPbJ2Cv","forumTopicId":301125,"dashedName":"create-a-row-gap-using-grid-row-gap","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>","error":null,"seed":"<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.container {grid-row-gap: 5px;}</style>","error":null,"seed":"<style>.container {grid-row-gap: 5px;}</style>"}]],"tests":[{"text":"<p><code>container</code> class should have a <code>grid-row-gap</code> property that has the value of <code>5px</code>.</p>","testString":"assert(\n  code.match(/.container\\s*?{[\\s\\S]*grid-row-gap\\s*?:\\s*?5px\\s*?;[\\s\\S]*}/gi)\n);"}],"description":"<section id=\"description\">\n<p>You can add a gap in between the rows of a grid using <code>grid-row-gap</code> in the same way that you added a gap in between columns in the previous challenge.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create a gap for the rows that is <code>5px</code> tall.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":5,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a94fe5469fb03452672e461","title":"Create Flexible Layouts Using auto-fill","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/cmzdycW","forumTopicId":301126,"dashedName":"create-flexible-layouts-using-auto-fill","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* Only change code below this line */\n\n    grid-template-columns: repeat(3, minmax(60px, 1fr));\n\n    /* Only change code above this line */\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n\n  .container2 {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: Silver;\n    display: grid;\n    grid-template-columns: repeat(3, minmax(60px, 1fr));\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>\n<div class=\"container2\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>","error":null,"seed":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* Only change code below this line */\n\n    grid-template-columns: repeat(3, minmax(60px, 1fr));\n\n    /* Only change code above this line */\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n\n  .container2 {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: Silver;\n    display: grid;\n    grid-template-columns: repeat(3, minmax(60px, 1fr));\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>\n<div class=\"container2\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n  \n  .container {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* Only change code below this line */\n    \n    grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));\n    \n    /* Only change code above this line */\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n  \n  .container2 {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: Silver;\n    display: grid;\n    grid-template-columns: repeat(3, minmax(60px, 1fr));\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>\n<div class=\"container2\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>","error":null,"seed":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n  \n  .container {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* Only change code below this line */\n    \n    grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));\n    \n    /* Only change code above this line */\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n  \n  .container2 {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: Silver;\n    display: grid;\n    grid-template-columns: repeat(3, minmax(60px, 1fr));\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>\n<div class=\"container2\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"}]],"tests":[{"text":"<p><code>container</code> class should have a <code>grid-template-columns</code> property with <code>repeat</code> and <code>auto-fill</code> that will fill the grid with columns that have a minimum width of <code>60px</code> and maximum of <code>1fr</code>.</p>","testString":"assert(\n  code.match(\n    /.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?repeat\\s*?\\(\\s*?auto-fill\\s*?,\\s*?minmax\\s*?\\(\\s*?60px\\s*?,\\s*?1fr\\s*?\\)\\s*?\\)\\s*?;[\\s\\S]*}/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p>The repeat function comes with an option called <dfn>auto-fill</dfn>. This allows you to automatically insert as many rows or columns of your desired size as possible depending on the size of the container. You can create flexible layouts when combining <code>auto-fill</code> with <code>minmax</code>, like this:</p>\n<pre><code class=\"language-css\">repeat(auto-fill, minmax(60px, 1fr));\n</code></pre>\n<p>When the container changes size, this setup keeps inserting 60px columns and stretching them until it can insert another one. <strong>Note:</strong> If your container can't fit all your items on one row, it will move them down to a new one.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>In the first grid, use <code>auto-fill</code> with <code>repeat</code> to fill the grid with columns that have a minimum width of <code>60px</code> and maximum of <code>1fr</code>. Then resize the preview to see auto-fill in action.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":18,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a94fe6269fb03452672e462","title":"Create Flexible Layouts Using auto-fit","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/c3dPph8","forumTopicId":301127,"dashedName":"create-flexible-layouts-using-auto-fit","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n\n  .container2 {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: Silver;\n    display: grid;\n    /* Only change code below this line */\n\n    grid-template-columns: repeat(3, minmax(60px, 1fr));\n\n    /* Only change code above this line */\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>\n<div class=\"container2\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>","error":null,"seed":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n\n  .container2 {\n    font-size: 40px;\n    min-height: 100px;\n    width: 100%;\n    background: Silver;\n    display: grid;\n    /* Only change code below this line */\n\n    grid-template-columns: repeat(3, minmax(60px, 1fr));\n\n    /* Only change code above this line */\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>\n<div class=\"container2\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.container {grid-template-columns: repeat( auto-fill, minmax(60px, 1fr));} .container2 {grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));}</style>","error":null,"seed":"<style>.container {grid-template-columns: repeat( auto-fill, minmax(60px, 1fr));} .container2 {grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));}</style>"}]],"tests":[{"text":"<p><code>container2</code> class should have a <code>grid-template-columns</code> property with <code>repeat</code> and <code>auto-fit</code> that will fill the grid with columns that have a minimum width of <code>60px</code> and a maximum of <code>1fr</code>.</p>","testString":"assert(\n  code.match(\n    /.container2\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?repeat\\s*?\\(\\s*?auto-fit\\s*?,\\s*?minmax\\s*?\\(\\s*?60px\\s*?,\\s*?1fr\\s*?\\)\\s*?\\)\\s*?;[\\s\\S]*}/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p><code>auto-fit</code> works almost identically to <code>auto-fill</code>. The only difference is that when the container's size exceeds the size of all the items combined, <code>auto-fill</code> keeps inserting empty rows or columns and pushes your items to the side, while <code>auto-fit</code> collapses those empty rows or columns and stretches your items to fit the size of the container.</p>\n<p><strong>Note:</strong> If your container can't fit all your items on one row, it will move them down to a new one.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>In the second grid, use <code>auto-fit</code> with <code>repeat</code> to fill the grid with columns that have a minimum width of <code>60px</code> and maximum of <code>1fr</code>. Then resize the preview to see the difference.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":19,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a94fe8569fb03452672e464","title":"Create Grids within Grids","challengeType":0,"forumTopicId":301128,"dashedName":"create-grids-within-grids","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .container {\n    font-size: 1.5em;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-template-rows: auto 1fr auto;\n    grid-gap: 10px;\n    grid-template-areas:\n      \"advert header\"\n      \"advert content\"\n      \"advert footer\";\n  }\n  .item1 {\n    background: LightSkyBlue;\n    grid-area: header;\n  }\n\n  .item2 {\n    background: LightSalmon;\n    grid-area: advert;\n  }\n\n  .item3 {\n    background: PaleTurquoise;\n    grid-area: content;\n    /* Only change code below this line */\n\n\n    /* Only change code above this line */\n  }\n\n  .item4 {\n    background: lightpink;\n    grid-area: footer;\n  }\n\n  .itemOne {\n    background: PaleGreen;\n  }\n\n  .itemTwo {\n    background: BlanchedAlmond;\n  }\n\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">header</div>\n  <div class=\"item2\">advert</div>\n  <div class=\"item3\">\n    <div class=\"itemOne\">paragraph1</div>\n    <div class=\"itemTwo\">paragraph2</div>\n  </div>\n  <div class=\"item4\">footer</div>\n</div>","error":null,"seed":"<style>\n  .container {\n    font-size: 1.5em;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: auto 1fr;\n    grid-template-rows: auto 1fr auto;\n    grid-gap: 10px;\n    grid-template-areas:\n      \"advert header\"\n      \"advert content\"\n      \"advert footer\";\n  }\n  .item1 {\n    background: LightSkyBlue;\n    grid-area: header;\n  }\n\n  .item2 {\n    background: LightSalmon;\n    grid-area: advert;\n  }\n\n  .item3 {\n    background: PaleTurquoise;\n    grid-area: content;\n    /* Only change code below this line */\n\n\n    /* Only change code above this line */\n  }\n\n  .item4 {\n    background: lightpink;\n    grid-area: footer;\n  }\n\n  .itemOne {\n    background: PaleGreen;\n  }\n\n  .itemTwo {\n    background: BlanchedAlmond;\n  }\n\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">header</div>\n  <div class=\"item2\">advert</div>\n  <div class=\"item3\">\n    <div class=\"itemOne\">paragraph1</div>\n    <div class=\"itemTwo\">paragraph2</div>\n  </div>\n  <div class=\"item4\">footer</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.item3 {grid-template-columns: auto 1fr; display: grid;}</style>","error":null,"seed":"<style>.item3 {grid-template-columns: auto 1fr; display: grid;}</style>"}]],"tests":[{"text":"<p><code>item3</code> class should have a <code>grid-template-columns</code> property with <code>auto</code> and <code>1fr</code> as values.</p>","testString":"assert(\n  code.match(\n    /.item3\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?auto\\s*?1fr\\s*?;[\\s\\S]*}/gi\n  )\n);"},{"text":"<p><code>item3</code> class should have a <code>display</code> property with the value of <code>grid</code>.</p>","testString":"assert(code.match(/.item3\\s*?{[\\s\\S]*display\\s*?:\\s*?grid\\s*?;[\\s\\S]*}/gi));"}],"description":"<section id=\"description\">\n<p>Turning an element into a grid only affects the behavior of its direct descendants. So by turning a direct descendant into a grid, you have a grid within a grid.</p>\n<p>For example, by setting the <code>display</code> and <code>grid-template-columns</code> properties of the element with the <code>item3</code> class, you create a grid within your grid.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Turn the element with the <code>item3</code> class into a grid with two columns with a width of <code>auto</code> and <code>1fr</code> using <code>display</code> and <code>grid-template-columns</code>.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":21,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a858944d96184f06fd60d61","title":"Create Your First CSS Grid","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/cqwREC4","forumTopicId":301129,"dashedName":"create-your-first-css-grid","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    width: 100%;\n    background: LightGray;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>","error":null,"seed":"<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    width: 100%;\n    background: LightGray;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.container {display: grid;}</style>","error":null,"seed":"<style>.container {display: grid;}</style>"}]],"tests":[{"text":"<p><code>container</code> class should have a <code>display</code> property with a value of <code>grid</code>.</p>","testString":"assert(code.match(/.container\\s*?{[\\s\\S]*display\\s*?:\\s*?grid\\s*?;[\\s\\S]*}/gi));"}],"description":"<section id=\"description\">\n<p>Turn any HTML element into a grid container by setting its <code>display</code> property to <code>grid</code>. This gives you the ability to use all the other properties associated with CSS Grid.</p>\n<p><strong>Note:</strong> In CSS Grid, the parent element is referred to as the <dfn>container</dfn> and its children are called <dfn>items</dfn>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the display of the div with the <code>container</code> class to <code>grid</code>.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":0,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a94fe0569fb03452672e45c","title":"Divide the Grid Into an Area Template","challengeType":0,"forumTopicId":301130,"dashedName":"divide-the-grid-into-an-area-template","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n    grid-template-areas:\n    /* Only change code below this line */\n      \"header header header\"\n      \"advert content content\"\n      \"advert footer footer\";\n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>","error":null,"seed":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n    grid-template-areas:\n    /* Only change code below this line */\n      \"header header header\"\n      \"advert content content\"\n      \"advert footer footer\";\n    /* Only change code above this line */\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n\n    grid-template-areas:\n      \"header header header\"\n      \"advert content content\"\n      \"footer footer footer\";\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>","error":null,"seed":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n\n    grid-template-areas:\n      \"header header header\"\n      \"advert content content\"\n      \"footer footer footer\";\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"}]],"tests":[{"text":"<p><code>container</code> class should have a <code>grid-template-areas</code> property similar to the example but with the <code>footer</code> area spanning the whole bottom row.</p>","testString":"assert(\n  __helpers\n    .removeCssComments(code)\n    .match(\n      /.container\\s*?{[\\s\\S]*grid-template-areas\\s*?:\\s*?\"\\s*?header\\s*?header\\s*?header\\s*?\"\\s*?\"\\s*?advert\\s*?content\\s*?content\\s*?\"\\s*?\"\\s*?footer\\s*?footer\\s*?footer\\s*?\"\\s*?;[\\s\\S]*}/gi\n    )\n);"}],"description":"<section id=\"description\">\n<p>You can group cells of your grid together into an <dfn>area</dfn> and give the area a custom name. Do this by using <code>grid-template-areas</code> on the container like this:</p>\n<pre><code class=\"language-css\">grid-template-areas:\n  \"header header header\"\n  \"advert content content\"\n  \"advert footer footer\";\n</code></pre>\n<p>The code above groups the cells of the grid into four areas: <code>header</code>, <code>advert</code>, <code>content</code>, and <code>footer</code>. Every word represents a cell and every pair of quotation marks represent a row.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the template so the <code>footer</code> area spans the entire bottom row. Defining the areas won't have any visual effect right now. Later, you will make an item use an area to see how it works.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":13,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a94fe4469fb03452672e460","title":"Limit Item Size Using the minmax Function","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/cD97RTv","forumTopicId":301131,"dashedName":"limit-item-size-using-the-minmax-function","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* Only change code below this line */\n\n    grid-template-columns: repeat(3, 1fr);\n\n    /* Only change code above this line */\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>","error":null,"seed":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* Only change code below this line */\n\n    grid-template-columns: repeat(3, 1fr);\n\n    /* Only change code above this line */\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.container {grid-template-columns: repeat(3, minmax(90px, 1fr));}</style>","error":null,"seed":"<style>.container {grid-template-columns: repeat(3, minmax(90px, 1fr));}</style>"}]],"tests":[{"text":"<p><code>container</code> class should have a <code>grid-template-columns</code> property that is set to repeat 3 columns with the minimum width of <code>90px</code> and maximum width of <code>1fr</code>.</p>","testString":"assert(\n  code.match(\n    /.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?repeat\\s*?\\(\\s*?3\\s*?,\\s*?minmax\\s*?\\(\\s*?90px\\s*?,\\s*?1fr\\s*?\\)\\s*?\\)\\s*?;[\\s\\S]*}/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p>There's another built-in function to use with <code>grid-template-columns</code> and <code>grid-template-rows</code> called <code>minmax</code>. It's used to limit the size of items when the grid container changes size. To do this you need to specify the acceptable size range for your item. Here is an example:</p>\n<pre><code class=\"language-css\">grid-template-columns: 100px minmax(50px, 200px);\n</code></pre>\n<p>In the code above, <code>grid-template-columns</code> is set to create two columns; the first is 100px wide, and the second has the minimum width of 50px and the maximum width of 200px.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Using the <code>minmax</code> function, replace the <code>1fr</code> in the <code>repeat</code> function with a column size that has the minimum width of <code>90px</code> and the maximum width of <code>1fr</code>, and resize the preview panel to see the effect.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":17,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a94fe1369fb03452672e45d","title":"Place Items in Grid Areas Using the grid-area Property","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/cRrqmtV","forumTopicId":301132,"dashedName":"place-items-in-grid-areas-using-the-grid-area-property","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n\n  .item5 {\n    background: PaleGreen;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n    grid-template-areas:\n      \"header header header\"\n      \"advert content content\"\n      \"footer footer footer\";\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>","error":null,"seed":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n\n  .item5 {\n    background: PaleGreen;\n    /* Only change code below this line */\n\n    \n    /* Only change code above this line */\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n    grid-template-areas:\n      \"header header header\"\n      \"advert content content\"\n      \"footer footer footer\";\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.item5 {grid-area: footer;}</style>","error":null,"seed":"<style>.item5 {grid-area: footer;}</style>"}]],"tests":[{"text":"<p><code>item5</code> class should have a <code>grid-area</code> property that has the value of <code>footer</code>.</p>","testString":"assert(\n  __helpers\n    .removeCssComments(code)\n    .match(/.item5\\s*?{[\\s\\S]*grid-area\\s*?:\\s*?footer\\s*?;[\\s\\S]*}/gi)\n);"}],"description":"<section id=\"description\">\n<p>After creating an area template for your grid container, as shown in the previous challenge, you can place an item in your custom area by referencing the name you gave it. To do this, you use the <code>grid-area</code> property on an item like this:</p>\n<pre><code class=\"language-css\">.item1 {\n  grid-area: header;\n}\n</code></pre>\n<p>This lets the grid know that you want the <code>item1</code> class to go in the area named <code>header</code>. In this case, the item will use the entire top row because that whole row is named as the <code>header</code> area.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Place an element with the <code>item5</code> class in the <code>footer</code> area using the <code>grid-area</code> property.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":14,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a94fe3669fb03452672e45f","title":"Reduce Repetition Using the repeat Function","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/cQvqyHR","forumTopicId":301133,"dashedName":"reduce-repetition-using-the-repeat-function","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* Only change code below this line */\n\n    grid-template-columns: 1fr 1fr 1fr;\n\n    /* Only change code above this line */\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>","error":null,"seed":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n  .item5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* Only change code below this line */\n\n    grid-template-columns: 1fr 1fr 1fr;\n\n    /* Only change code above this line */\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.container {grid-template-columns: repeat(3, 1fr);}</style>","error":null,"seed":"<style>.container {grid-template-columns: repeat(3, 1fr);}</style>"}]],"tests":[{"text":"<p><code>container</code> class should have a <code>grid-template-columns</code> property that is set to repeat 3 columns with the width of <code>1fr</code>.</p>","testString":"assert(\n  code.match(\n    /.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?repeat\\s*?\\(\\s*?3\\s*?,\\s*?1fr\\s*?\\)\\s*?;[\\s\\S]*}/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p>When you used <code>grid-template-columns</code> and <code>grid-template-rows</code> to define the structure of a grid, you entered a value for each row or column you created.</p>\n<p>Let's say you want a grid with 100 rows of the same height. It isn't very practical to insert 100 values individually. Fortunately, there's a better way - by using the <code>repeat</code> function to specify the number of times you want your column or row to be repeated, followed by a comma and the value you want to repeat.</p>\n<p>Here's an example that would create the 100 row grid, each row at 50px tall.</p>\n<pre><code class=\"language-css\">grid-template-rows: repeat(100, 50px);\n</code></pre>\n<p>You can also repeat multiple values with the repeat function and insert the function amongst other values when defining a grid structure. Here's what that looks like:</p>\n<pre><code class=\"language-css\">grid-template-columns: repeat(2, 1fr 50px) 20px;\n</code></pre>\n<p>This translates to:</p>\n<pre><code class=\"language-css\">grid-template-columns: 1fr 50px 1fr 50px 20px;\n</code></pre>\n<p><strong>Note:</strong> The <code>1fr 50px</code> is repeated twice followed by 20px.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use <code>repeat</code> to remove repetition from the <code>grid-template-columns</code> property.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":16,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a9036ee38fddaf9a66b5d34","title":"Use CSS Grid units to Change the Size of Columns and Rows","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/cvE8phd","forumTopicId":301134,"dashedName":"use-css-grid-units-to-change-the-size-of-columns-and-rows","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* Only change code below this line */\n\n    grid-template-columns: auto 50px 10% 2fr 1fr;\n\n    /* Only change code above this line */\n    grid-template-rows: 50px 50px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>","error":null,"seed":"<style>\n  .d1{background:LightSkyBlue;}\n  .d2{background:LightSalmon;}\n  .d3{background:PaleTurquoise;}\n  .d4{background:LightPink;}\n  .d5{background:PaleGreen;}\n\n  .container {\n    font-size: 40px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    /* Only change code below this line */\n\n    grid-template-columns: auto 50px 10% 2fr 1fr;\n\n    /* Only change code above this line */\n    grid-template-rows: 50px 50px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"d1\">1</div>\n  <div class=\"d2\">2</div>\n  <div class=\"d3\">3</div>\n  <div class=\"d4\">4</div>\n  <div class=\"d5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.container {grid-template-columns: 1fr 100px 2fr;}</style>","error":null,"seed":"<style>.container {grid-template-columns: 1fr 100px 2fr;}</style>"}]],"tests":[{"text":"<p>Your <code>container</code> class should have a <code>grid-template-columns</code> property that has three columns with the following widths: <code>1fr</code>, <code>100px</code>, and <code>2fr</code>.</p>","testString":"assert(\n  code.match(\n    /.container\\s*?{[\\s\\S]*grid-template-columns\\s*?:\\s*?1fr\\s*?100px\\s*?2fr\\s*?;[\\s\\S]*}/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p>You can use absolute and relative units like <code>px</code> and <code>em</code> in CSS Grid to define the size of rows and columns. You can use these as well:</p>\n<p><code>fr</code>: sets the column or row to a fraction of the available space,</p>\n<p><code>auto</code>: sets the column or row to the width or height of its content automatically,</p>\n<p><code>%</code>: adjusts the column or row to the percent width of its container.</p>\n<p>Here's the code that generates the output in the preview:</p>\n<pre><code class=\"language-css\">grid-template-columns: auto 50px 10% 2fr 1fr;\n</code></pre>\n<p>This snippet creates five columns. The first column is as wide as its content, the second column is 50px, the third column is 10% of its container, and for the last two columns; the remaining space is divided into three sections, two are allocated for the fourth column, and one for the fifth.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Make a grid with three columns whose widths are as follows: 1fr, 100px, and 2fr.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":3,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a94fe2669fb03452672e45e","title":"Use grid-area Without Creating an Areas Template","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/c6N7VhK","forumTopicId":301135,"dashedName":"use-grid-area-without-creating-an-areas-template","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n\n  .item5 {\n    background: PaleGreen;\n    /* Only change code below this line */\n\n\n    /* Only change code above this line */\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>","error":null,"seed":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n\n  .item5 {\n    background: PaleGreen;\n    /* Only change code below this line */\n\n\n    /* Only change code above this line */\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>.item5 {grid-area: 3/1/4/4;}</style>","error":null,"seed":"<style>.item5 {grid-area: 3/1/4/4;}</style>"}]],"tests":[{"text":"<p>The <code>item5</code> class should have a <code>grid-area</code> property to make it fill the whole area between the third and fourth horizontal lines, and first and fourth vertical lines.</p>","testString":"assert(\n  code.match(\n    /.item5\\s*?{[\\s\\S]*grid-area\\s*?:\\s*?3\\s*?\\/\\s*?1\\s*?\\/\\s*?4\\s*?\\/\\s*?4\\s*?;[\\s\\S]*}/gi\n  )\n);"}],"description":"<section id=\"description\">\n<p>The <code>grid-area</code> property you learned in the last challenge can be used in another way. If your grid doesn't have an areas template to reference, you can create an area on the fly for an item to be placed like this:</p>\n<pre><code class=\"language-css\">item1 { grid-area: 1/1/2/4; }\n</code></pre>\n<p>This is using the line numbers you learned about earlier to define where the area for this item will be. The numbers in the example above represent these values:</p>\n<pre><code class=\"language-css\">grid-area: horizontal line to start at / vertical line to start at / horizontal line to end at / vertical line to end at;\n</code></pre>\n<p>So the item in the example will consume the rows between lines 1 and 2, and the columns between lines 1 and 4.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Using the <code>grid-area</code> property, place the element with <code>item5</code> class between the third and fourth horizontal lines and between the first and fourth vertical lines.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":15,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a90372638fddaf9a66b5d38","title":"Use grid-column to Control Spacing","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/cnzkDSr","forumTopicId":301136,"dashedName":"use-grid-column-to-control-spacing","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n\n  .item5 {\n    background: PaleGreen;\n    /* Only change code below this line */\n\n\n    /* Only change code above this line */\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>","error":null,"seed":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n\n  .item5 {\n    background: PaleGreen;\n    /* Only change code below this line */\n\n\n    /* Only change code above this line */\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n\n  .item5 {\n    background: PaleGreen;\n    grid-column: 2 / 4;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>","error":null,"seed":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n\n  .item5 {\n    background: PaleGreen;\n    grid-column: 2 / 4;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"}]],"tests":[{"text":"<p><code>item5</code> class should have a <code>grid-column</code> property.</p>","testString":"assert(\n  __helpers\n    .removeWhiteSpace($('style').text())\n    .match(/\\.item5{.*grid-column:.*}/g)\n);"},{"text":"<p><code>item5</code> class should have a <code>grid-column</code> property which results in it consuming the last two columns of the grid.</p>","testString":"const colStart = getComputedStyle($('.item5')[0]).gridColumnStart;\nconst colEnd = getComputedStyle($('.item5')[0]).gridColumnEnd;\nconst result = colStart.toString() + colEnd.toString();\nconst correctResults = [\n  '24',\n  '2-1',\n  '2span 2',\n  '2span2',\n  'span 2-1',\n  '-12',\n  'span 2span 2',\n  'span 2auto',\n  'autospan 2'\n];\nassert(correctResults.includes(result));"}],"description":"<section id=\"description\">\n<p>Up to this point, all the properties that have been discussed are for grid containers. The <code>grid-column</code> property is the first one for use on the grid items themselves.</p>\n<p>The hypothetical horizontal and vertical lines that create the grid are referred to as <dfn>lines</dfn>. These lines are numbered starting with 1 at the top left corner of the grid and move right for columns and down for rows, counting upward.</p>\n<p>This is what the lines look like for a 3x3 grid:</p>\n<div style='position:relative;margin:auto;background:Gainsboro;display:block;margin-top:100px;margin-bottom:50px;width:200px;height:200px;'><p style='left:25%;top:-30%;font-size:130%;position:absolute;color:RoyalBlue;'>column lines</p><p style='left:0%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;'>1</p><p style='left:30%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;'>2</p><p style='left:63%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;'>3</p><p style='left:95%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;'>4</p><p style='left:-40%;top:45%;font-size:130%;transform:rotateZ(-90deg);position:absolute;'>row lines</p><p style='left:-10%;top:-10%;font-size:130%;position:absolute;'>1</p><p style='left:-10%;top:21%;font-size:130%;position:absolute;'>2</p><p style='left:-10%;top:53%;font-size:130%;position:absolute;'>3</p><p style='left:-10%;top:85%;font-size:130%;position:absolute;'>4</p><div style='left:0%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;'></div><div style='left:31%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;'></div><div style='left:63%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;'></div><div style='left:95%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;'></div><div style='left:0%;top:0%;width:100%;height:5%;background:black;position:absolute;'></div><div style='left:0%;top:31%;width:100%;height:5%;background:black;position:absolute;'></div><div style='left:0%;top:63%;width:100%;height:5%;background:black;position:absolute;'></div><div style='left:0%;top:95%;width:100%;height:5%;background:black;position:absolute;'></div></div>\n<p>To control the number of columns an item will consume, you can use the <code>grid-column</code> property in conjunction with the line numbers you want the item to start and stop at.</p>\n<p>Here's an example:</p>\n<pre><code class=\"language-css\">grid-column: 1 / 3;\n</code></pre>\n<p>This will make the item start at the first vertical line of the grid on the left and span to the 3rd line of the grid, consuming two columns.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Make the item with the class <code>item5</code> consume the last two columns of the grid.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":7,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a90373638fddaf9a66b5d39","title":"Use grid-row to Control Spacing","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/c9WBLU4","forumTopicId":301137,"dashedName":"use-grid-row-to-control-spacing","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n\n  .item5 {\n    background: PaleGreen;\n    grid-column: 2 / 4;\n    /* Only change code below this line */\n\n    /* Only change code above this line */\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>","error":null,"seed":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n\n  .item5 {\n    background: PaleGreen;\n    grid-column: 2 / 4;\n    /* Only change code below this line */\n\n    /* Only change code above this line */\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n\n  .item5 {\n    background: PaleGreen;\n    grid-column: 2 / 4;\n    grid-row: 2 / 4;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>","error":null,"seed":"<style>\n  .item1{background:LightSkyBlue;}\n  .item2{background:LightSalmon;}\n  .item3{background:PaleTurquoise;}\n  .item4{background:LightPink;}\n\n  .item5 {\n    background: PaleGreen;\n    grid-column: 2 / 4;\n    grid-row: 2 / 4;\n  }\n\n  .container {\n    font-size: 40px;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr 1fr;\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">1</div>\n  <div class=\"item2\">2</div>\n  <div class=\"item3\">3</div>\n  <div class=\"item4\">4</div>\n  <div class=\"item5\">5</div>\n</div>"}]],"tests":[{"text":"<p><code>item5</code> class should have a <code>grid-row</code> property.</p>","testString":"assert(\n  __helpers.removeWhiteSpace($('style').text()).match(/\\.item5{.*grid-row:.*}/g)\n);"},{"text":"<p><code>item5</code> class should have a <code>grid-row</code> property which results in it consuming the last two rows of the grid.</p>","testString":"const rowStart = getComputedStyle($('.item5')[0]).gridRowStart;\nconst rowEnd = getComputedStyle($('.item5')[0]).gridRowEnd;\nconst result = rowStart.toString() + rowEnd.toString();\nconst correctResults = [\n  '24',\n  '2-1',\n  '2span 2',\n  '2span2',\n  'span 2-1',\n  '-12',\n  'span 2span 2',\n  'span 2auto',\n  'autospan 2'\n];\nassert(correctResults.includes(result));"}],"description":"<section id=\"description\">\n<p>Of course, you can make items consume multiple rows just like you can with columns. You define the horizontal lines you want an item to start and stop at using the <code>grid-row</code> property on a grid item.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Make the element with the <code>item5</code> class consume the last two rows.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":8,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"5a94fe7769fb03452672e463","title":"Use Media Queries to Create Responsive Layouts","challengeType":0,"videoUrl":"https://scrimba.com/p/pByETK/cMbqeHk","forumTopicId":301138,"dashedName":"use-media-queries-to-create-responsive-layouts","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .item1 {\n    background: LightSkyBlue;\n    grid-area: header;\n  }\n\n  .item2 {\n    background: LightSalmon;\n    grid-area: advert;\n  }\n\n  .item3 {\n    background: PaleTurquoise;\n    grid-area: content;\n  }\n\n  .item4 {\n    background: lightpink;\n    grid-area: footer;\n  }\n\n  .container {\n    font-size: 1.5em;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-rows: 50px auto 1fr auto;\n    grid-gap: 10px;\n    grid-template-areas:\n      \"header\"\n      \"advert\"\n      \"content\"\n      \"footer\";\n  }\n\n  @media (min-width: 300px){\n    .container{\n      grid-template-columns: auto 1fr;\n      grid-template-rows: auto 1fr auto;\n      grid-template-areas:\n        \"advert header\"\n        \"advert content\"\n        \"advert footer\";\n    }\n  }\n\n  @media (min-width: 400px){\n    .container{\n      grid-template-areas:\n      /* Only change code below this line */\n        \"advert header\"\n        \"advert content\"\n        \"advert footer\";\n      /* Only change code above this line */\n    }\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">header</div>\n  <div class=\"item2\">advert</div>\n  <div class=\"item3\">content</div>\n  <div class=\"item4\">footer</div>\n</div>","error":null,"seed":"<style>\n  .item1 {\n    background: LightSkyBlue;\n    grid-area: header;\n  }\n\n  .item2 {\n    background: LightSalmon;\n    grid-area: advert;\n  }\n\n  .item3 {\n    background: PaleTurquoise;\n    grid-area: content;\n  }\n\n  .item4 {\n    background: lightpink;\n    grid-area: footer;\n  }\n\n  .container {\n    font-size: 1.5em;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-rows: 50px auto 1fr auto;\n    grid-gap: 10px;\n    grid-template-areas:\n      \"header\"\n      \"advert\"\n      \"content\"\n      \"footer\";\n  }\n\n  @media (min-width: 300px){\n    .container{\n      grid-template-columns: auto 1fr;\n      grid-template-rows: auto 1fr auto;\n      grid-template-areas:\n        \"advert header\"\n        \"advert content\"\n        \"advert footer\";\n    }\n  }\n\n  @media (min-width: 400px){\n    .container{\n      grid-template-areas:\n      /* Only change code below this line */\n        \"advert header\"\n        \"advert content\"\n        \"advert footer\";\n      /* Only change code above this line */\n    }\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">header</div>\n  <div class=\"item2\">advert</div>\n  <div class=\"item3\">content</div>\n  <div class=\"item4\">footer</div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  .item1 {\n    background: LightSkyBlue;\n    grid-area: header;\n  }\n\n  .item2 {\n    background: LightSalmon;\n    grid-area: advert;\n  }\n\n  .item3 {\n    background: PaleTurquoise;\n    grid-area: content;\n  }\n\n  .item4 {\n    background: lightpink;\n    grid-area: footer;\n  }\n\n  .container {\n    font-size: 1.5em;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-rows: 50px auto 1fr auto;\n    grid-gap: 10px;\n    grid-template-areas:\n      \"header\"\n      \"advert\"\n      \"content\"\n      \"footer\";\n  }\n\n  @media (min-width: 300px){\n    .container{\n      grid-template-columns: auto 1fr;\n      grid-template-rows: auto 1fr auto;\n      grid-template-areas:\n        \"advert header\"\n        \"advert content\"\n        \"advert footer\";\n    }\n  }\n\n  @media (min-width: 400px){\n    .container{\n      grid-template-areas:\n        \"header header\"\n        \"advert content\"\n        \"footer footer\";\n    }\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">header</div>\n  <div class=\"item2\">advert</div>\n  <div class=\"item3\">content</div>\n  <div class=\"item4\">footer</div>\n</div>","error":null,"seed":"<style>\n  .item1 {\n    background: LightSkyBlue;\n    grid-area: header;\n  }\n\n  .item2 {\n    background: LightSalmon;\n    grid-area: advert;\n  }\n\n  .item3 {\n    background: PaleTurquoise;\n    grid-area: content;\n  }\n\n  .item4 {\n    background: lightpink;\n    grid-area: footer;\n  }\n\n  .container {\n    font-size: 1.5em;\n    min-height: 300px;\n    width: 100%;\n    background: LightGray;\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-rows: 50px auto 1fr auto;\n    grid-gap: 10px;\n    grid-template-areas:\n      \"header\"\n      \"advert\"\n      \"content\"\n      \"footer\";\n  }\n\n  @media (min-width: 300px){\n    .container{\n      grid-template-columns: auto 1fr;\n      grid-template-rows: auto 1fr auto;\n      grid-template-areas:\n        \"advert header\"\n        \"advert content\"\n        \"advert footer\";\n    }\n  }\n\n  @media (min-width: 400px){\n    .container{\n      grid-template-areas:\n        \"header header\"\n        \"advert content\"\n        \"footer footer\";\n    }\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"item1\">header</div>\n  <div class=\"item2\">advert</div>\n  <div class=\"item3\">content</div>\n  <div class=\"item4\">footer</div>\n</div>"}]],"tests":[{"text":"<p>When the viewport is <code>400px</code> or more, <code>container</code> class should have a <code>grid-template-areas</code> property in which the header and footer areas occupy the top and bottom rows respectively and advert and content occupy the left and right columns of the middle row.</p>","testString":"assert(\n  __helpers\n    .removeCssComments(code)\n    .match(\n      /@media\\s*?\\(\\s*?min-width\\s*?:\\s*?400px\\s*?\\)[\\s\\S]*.container\\s*?{[\\s\\S]*grid-template-areas\\s*?:\\s*?\"\\s*?header\\s*?header\\s*?\"\\s*?\"\\s*?advert\\s*?content\\s*?\"\\s*?\"\\s*?footer\\s*?footer\\s*?\"\\s*?;[\\s\\S]*}/gi\n    )\n);"}],"description":"<section id=\"description\">\n<p>CSS Grid can be an easy way to make your site more responsive by using media queries to rearrange grid areas, change dimensions of a grid, and rearrange the placement of items.</p>\n<p>In the preview, when the viewport width is 300px or more, the number of columns changes from 1 to 2. The advertisement area then occupies the left column completely.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>When the viewport width is <code>400px</code> or more, make the header area occupy the top row completely and the footer area occupy the bottom row completely.</p>\n</section>","block":"css-grid","hasEditableBoundaries":false,"order":6,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":20,"required":[],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false}]},"responsive-web-design-principles":{"meta":{"name":"Responsive Web Design Principles","isUpcomingChange":false,"dashedName":"responsive-web-design-principles","order":4,"time":"1 hour","template":"","required":[],"superBlock":"responsive-web-design","challengeOrder":[["587d78b0367417b2b2512b08","Create a Media Query"],["587d78b1367417b2b2512b09","Make an Image Responsive"],["587d78b1367417b2b2512b0a","Use a Retina Image for Higher Resolution Displays"],["587d78b1367417b2b2512b0c","Make Typography Responsive"]]},"challenges":[{"id":"587d78b0367417b2b2512b08","title":"Create a Media Query","challengeType":0,"videoUrl":"https://scrimba.com/p/pzrPu4/cqwKrtm","forumTopicId":301139,"dashedName":"create-a-media-query","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  p {\n    font-size: 20px;\n  }\n\n  /* Only change code below this line */\n\n  /* Only change code above this line */\n</style>\n\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus quis tempus massa. Aenean erat nisl, gravida vel vestibulum cursus, interdum sit amet lectus. Sed sit amet quam nibh. Suspendisse quis tincidunt nulla. In hac habitasse platea dictumst. Ut sit amet pretium nisl. Vivamus vel mi sem. Aenean sit amet consectetur sem. Suspendisse pretium, purus et gravida consequat, nunc ligula ultricies diam, at aliquet velit libero a dui.</p>","error":null,"seed":"<style>\n  p {\n    font-size: 20px;\n  }\n\n  /* Only change code below this line */\n\n  /* Only change code above this line */\n</style>\n\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus quis tempus massa. Aenean erat nisl, gravida vel vestibulum cursus, interdum sit amet lectus. Sed sit amet quam nibh. Suspendisse quis tincidunt nulla. In hac habitasse platea dictumst. Ut sit amet pretium nisl. Vivamus vel mi sem. Aenean sit amet consectetur sem. Suspendisse pretium, purus et gravida consequat, nunc ligula ultricies diam, at aliquet velit libero a dui.</p>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  p {\n    font-size: 20px;\n  }\n\n  @media (max-height: 800px) {\n    p {\n      font-size: 10px;\n    }\n  }\n</style>\n\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus quis tempus massa. Aenean erat nisl, gravida vel vestibulum cursus, interdum sit amet lectus. Sed sit amet quam nibh. Suspendisse quis tincidunt nulla. In hac habitasse platea dictumst. Ut sit amet pretium nisl. Vivamus vel mi sem. Aenean sit amet consectetur sem. Suspendisse pretium, purus et gravida consequat, nunc ligula ultricies diam, at aliquet velit libero a dui.</p>","error":null,"seed":"<style>\n  p {\n    font-size: 20px;\n  }\n\n  @media (max-height: 800px) {\n    p {\n      font-size: 10px;\n    }\n  }\n</style>\n\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus quis tempus massa. Aenean erat nisl, gravida vel vestibulum cursus, interdum sit amet lectus. Sed sit amet quam nibh. Suspendisse quis tincidunt nulla. In hac habitasse platea dictumst. Ut sit amet pretium nisl. Vivamus vel mi sem. Aenean sit amet consectetur sem. Suspendisse pretium, purus et gravida consequat, nunc ligula ultricies diam, at aliquet velit libero a dui.</p>"}]],"tests":[{"text":"<p>You should declare a <code>@media</code> query for devices with a <code>height</code> less than or equal to <code>800px</code>.</p>","testString":"const media = new __helpers.CSSHelp(document).getCSSRules('media');\nassert(media.some(x => x.media?.mediaText?.includes('(max-height: 800px)')));"},{"text":"<p>Your <code>p</code> element should have a <code>font-size</code> of <code>10px</code> when the device <code>height</code> is less than or equal to <code>800px</code>.</p>","testString":"const rules = new __helpers.CSSHelp(document).getRuleListsWithinMedia('(max-height: 800px)');\nassert(rules?.find(x => x.selectorText === 'p')?.style?.fontSize === \"10px\");"},{"text":"<p>Your <code>p</code> element should have an initial <code>font-size</code> of <code>20px</code> when the device <code>height</code> is more than <code>800px</code>.</p>","testString":"const ifPFirst = new __helpers.CSSHelp(document).getCSSRules()?.find(x => x?.selectorText === 'p' || x?.media);\nassert(ifPFirst?.style?.fontSize === '20px');"}],"description":"<section id=\"description\">\n<p>Media Queries are a new technique introduced in CSS3 that change the presentation of content based on different viewport sizes. The viewport is a user's visible area of a web page, and is different depending on the device used to access the site.</p>\n<p>Media Queries consist of a media type, and if that media type matches the type of device the document is displayed on, the styles are applied. You can have as many selectors and styles inside your media query as you want.</p>\n<p>Here's an example of a media query that returns the content when the device's width is less than or equal to <code>100px</code>:</p>\n<pre><code class=\"language-css\">@media (max-width: 100px) { /* CSS Rules */ }\n</code></pre>\n<p>and the following media query returns the content when the device's height is more than or equal to <code>350px</code>:</p>\n<pre><code class=\"language-css\">@media (min-height: 350px) { /* CSS Rules */ }\n</code></pre>\n<p>Remember, the CSS inside the media query is applied only if the media type matches that of the device being used.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add a media query, so that the <code>p</code> tag has a <code>font-size</code> of <code>10px</code> when the device's height is less than or equal to <code>800px</code>.</p>\n</section>","block":"responsive-web-design-principles","hasEditableBoundaries":false,"order":4,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":0,"required":[],"template":"","time":"1 hour","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78b1367417b2b2512b09","title":"Make an Image Responsive","challengeType":0,"forumTopicId":301140,"dashedName":"make-an-image-responsive","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n.responsive-img {\n\n\n}\n\nimg {\n  width: 600px;\n}\n</style>\n\n<img class=\"responsive-img\" src=\"https://s3.amazonaws.com/freecodecamp/FCCStickerPack.jpg\" alt=\"freeCodeCamp stickers set\">\n<img src=\"https://s3.amazonaws.com/freecodecamp/FCCStickerPack.jpg\" alt=\"freeCodeCamp stickers set\">","error":null,"seed":"<style>\n.responsive-img {\n\n\n}\n\nimg {\n  width: 600px;\n}\n</style>\n\n<img class=\"responsive-img\" src=\"https://s3.amazonaws.com/freecodecamp/FCCStickerPack.jpg\" alt=\"freeCodeCamp stickers set\">\n<img src=\"https://s3.amazonaws.com/freecodecamp/FCCStickerPack.jpg\" alt=\"freeCodeCamp stickers set\">"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n.responsive-img {\n  max-width: 100%;\n  height: auto;\n}\n\nimg {\n  width: 600px;\n}\n</style>\n\n<img class=\"responsive-img\" src=\"https://s3.amazonaws.com/freecodecamp/FCCStickerPack.jpg\" alt=\"freeCodeCamp stickers set\">\n<img src=\"https://s3.amazonaws.com/freecodecamp/FCCStickerPack.jpg\" alt=\"freeCodeCamp stickers set\">","error":null,"seed":"<style>\n.responsive-img {\n  max-width: 100%;\n  height: auto;\n}\n\nimg {\n  width: 600px;\n}\n</style>\n\n<img class=\"responsive-img\" src=\"https://s3.amazonaws.com/freecodecamp/FCCStickerPack.jpg\" alt=\"freeCodeCamp stickers set\">\n<img src=\"https://s3.amazonaws.com/freecodecamp/FCCStickerPack.jpg\" alt=\"freeCodeCamp stickers set\">"}]],"tests":[{"text":"<p>Your <code>responsive-img</code> class should have a <code>max-width</code> set to <code>100%</code>.</p>","testString":"assert(getComputedStyle($('.responsive-img')[0]).maxWidth === '100%');"},{"text":"<p>Your <code>responsive-img</code> class should have a <code>height</code> set to <code>auto</code>.</p>","testString":"assert(code.match(/height:\\s*?auto;/g));"}],"description":"<section id=\"description\">\n<p>Making images responsive with CSS is actually very simple. You just need to add these properties to an image:</p>\n<pre><code class=\"language-css\">img {\n  max-width: 100%;\n  height: auto;\n}\n</code></pre>\n<p>The <code>max-width</code> of <code>100%</code> will make sure the image is never wider than the container it is in, and the <code>height</code> of <code>auto</code> will make the image keep its original aspect ratio.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the style rules to the <code>responsive-img</code> class to make it responsive. It should never be wider than its container (in this case, it's the preview window) and it should keep its original aspect ratio. After you have added your code, resize the preview to see how your images behave.</p>\n</section>","block":"responsive-web-design-principles","hasEditableBoundaries":false,"order":4,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":1,"required":[],"template":"","time":"1 hour","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78b1367417b2b2512b0c","title":"Make Typography Responsive","challengeType":0,"videoUrl":"https://scrimba.com/p/pzrPu4/crzN7T8","forumTopicId":301141,"dashedName":"make-typography-responsive","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n\n</style>\n\n<h2>Importantus Ipsum</h2>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus quis tempus massa. Aenean erat nisl, gravida vel vestibulum cursus, interdum sit amet lectus. Sed sit amet quam nibh. Suspendisse quis tincidunt nulla. In hac habitasse platea dictumst. Ut sit amet pretium nisl. Vivamus vel mi sem. Aenean sit amet consectetur sem. Suspendisse pretium, purus et gravida consequat, nunc ligula ultricies diam, at aliquet velit libero a dui.</p>","error":null,"seed":"<style>\n\n</style>\n\n<h2>Importantus Ipsum</h2>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus quis tempus massa. Aenean erat nisl, gravida vel vestibulum cursus, interdum sit amet lectus. Sed sit amet quam nibh. Suspendisse quis tincidunt nulla. In hac habitasse platea dictumst. Ut sit amet pretium nisl. Vivamus vel mi sem. Aenean sit amet consectetur sem. Suspendisse pretium, purus et gravida consequat, nunc ligula ultricies diam, at aliquet velit libero a dui.</p>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  h2 {\n      width: 80vw;\n  }\n  p {\n      width: 75vmin;\n  }\n</style>\n\n<h2>Importantus Ipsum</h2>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus quis tempus massa. Aenean erat nisl, gravida vel vestibulum cursus, interdum sit amet lectus. Sed sit amet quam nibh. Suspendisse quis tincidunt nulla. In hac habitasse platea dictumst. Ut sit amet pretium nisl. Vivamus vel mi sem. Aenean sit amet consectetur sem. Suspendisse pretium, purus et gravida consequat, nunc ligula ultricies diam, at aliquet velit libero a dui.</p>","error":null,"seed":"<style>\n  h2 {\n      width: 80vw;\n  }\n  p {\n      width: 75vmin;\n  }\n</style>\n\n<h2>Importantus Ipsum</h2>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus quis tempus massa. Aenean erat nisl, gravida vel vestibulum cursus, interdum sit amet lectus. Sed sit amet quam nibh. Suspendisse quis tincidunt nulla. In hac habitasse platea dictumst. Ut sit amet pretium nisl. Vivamus vel mi sem. Aenean sit amet consectetur sem. Suspendisse pretium, purus et gravida consequat, nunc ligula ultricies diam, at aliquet velit libero a dui.</p>"}]],"tests":[{"text":"<p>Your <code>h2</code> tag should have a <code>width</code> of 80vw.</p>","testString":"assert(\n  __helpers\n    .removeCssComments(code)\n    .match(/h2\\s*?{\\s*?width:\\s*?80vw;\\s*?}/g)\n);"},{"text":"<p>Your <code>p</code> tag should have a <code>width</code> of 75vmin.</p>","testString":"assert(\n  __helpers\n    .removeCssComments(code)\n    .match(/p\\s*?{\\s*?width:\\s*?75vmin;\\s*?}/g)\n);"}],"description":"<section id=\"description\">\n<p>Instead of using <code>em</code> or <code>px</code> to size text, you can use viewport units for responsive typography. Viewport units, like percentages, are relative units, but they are based off different items. Viewport units are relative to the viewport dimensions (width or height) of a device, and percentages are relative to the size of the parent container element.</p>\n<p>The four different viewport units are:</p>\n<ul><li><code>vw</code> (viewport width): <code>10vw</code> would be 10% of the viewport's width.</li><li><code>vh</code> (viewport height): <code>3vh</code> would be 3% of the viewport's height.</li><li><code>vmin</code> (viewport minimum): <code>70vmin</code> would be 70% of the viewport's smaller dimension (height or width).</li><li><code>vmax</code> (viewport maximum): <code>100vmax</code> would be 100% of the viewport's bigger dimension (height or width).</li></ul>\n<p>Here is an example that sets a <code>body</code> tag to 30% of the viewport's width.</p>\n<pre><code class=\"language-css\">body { width: 30vw; }\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Set the <code>width</code> of the <code>h2</code> tag to 80% of the viewport's width and the <code>width</code> of the paragraph as 75% of the viewport's smaller dimension.</p>\n</section>","block":"responsive-web-design-principles","hasEditableBoundaries":false,"order":4,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":3,"required":[],"template":"","time":"1 hour","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"587d78b1367417b2b2512b0a","title":"Use a Retina Image for Higher Resolution Displays","challengeType":0,"videoUrl":"https://scrimba.com/p/pzrPu4/cVZ4Rfp","forumTopicId":301142,"dashedName":"use-a-retina-image-for-higher-resolution-displays","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n\n</style>\n\n<img src=\"https://s3.amazonaws.com/freecodecamp/FCCStickers-CamperBot200x200.jpg\" alt=\"freeCodeCamp sticker that says 'Because CamperBot Cares'\">","error":null,"seed":"<style>\n\n</style>\n\n<img src=\"https://s3.amazonaws.com/freecodecamp/FCCStickers-CamperBot200x200.jpg\" alt=\"freeCodeCamp sticker that says 'Because CamperBot Cares'\">"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<style>\n  img { \n    height: 100px; \n    width: 100px; \n  }\n</style>\n\n<img src=\"https://s3.amazonaws.com/freecodecamp/FCCStickers-CamperBot200x200.jpg\" alt=\"freeCodeCamp sticker that says 'Because CamperBot Cares'\">","error":null,"seed":"<style>\n  img { \n    height: 100px; \n    width: 100px; \n  }\n</style>\n\n<img src=\"https://s3.amazonaws.com/freecodecamp/FCCStickers-CamperBot200x200.jpg\" alt=\"freeCodeCamp sticker that says 'Because CamperBot Cares'\">"}]],"tests":[{"text":"<p>Your <code>img</code> tag should have a <code>width</code> of 100 pixels.</p>","testString":"assert(document.querySelector('img').width === 100);"},{"text":"<p>Your <code>img</code> tag should have a <code>height</code> of 100 pixels.</p>","testString":"assert(document.querySelector('img').height === 100);"}],"description":"<section id=\"description\">\n<p>With the increase of internet connected devices, their sizes and specifications vary, and the displays they use could be different externally and internally. Pixel density is an aspect that could be different on one device from others and this density is known as Pixel Per Inch(PPI) or Dots Per Inch(DPI). The most famous such display is the one known as a \"Retina Display\" on the latest Apple MacBook Pro notebooks, and recently iMac computers. Due to the difference in pixel density between a \"Retina\" and \"Non-Retina\" displays, some images that have not been made with a High-Resolution Display in mind could look \"pixelated\" when rendered on a High-Resolution display.</p>\n<p>The simplest way to make your images properly appear on High-Resolution Displays, such as the MacBook Pros \"retina display\" is to define their <code>width</code> and <code>height</code> values as only half of what the original file is. Here is an example of an image that is only using half of the original height and width:</p>\n<pre><code class=\"language-html\">&#x3C;style>\n  img { height: 250px; width: 250px; }\n&#x3C;/style>\n&#x3C;img src=\"coolPic500x500\" alt=\"A most excellent picture\">\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Set the <code>width</code> and <code>height</code> of the <code>img</code> tag to half of their original values. In this case, both the original <code>height</code> and the original <code>width</code> are <code>200px</code>.</p>\n</section>","block":"responsive-web-design-principles","hasEditableBoundaries":false,"order":4,"superOrder":0,"certification":"responsive-web-design","superBlock":"responsive-web-design","challengeOrder":2,"required":[],"template":"","time":"1 hour","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false}]}}},"javascript-algorithms-and-data-structures":{"blocks":{"basic-algorithm-scripting":{"meta":{"name":"Basic Algorithm Scripting","isUpcomingChange":false,"dashedName":"basic-algorithm-scripting","order":5,"time":"50 hours","template":"","required":[],"superBlock":"javascript-algorithms-and-data-structures","challengeOrder":[["56533eb9ac21ba0edf2244b3","Convert Celsius to Fahrenheit"],["a202eed8fc186c8434cb6d61","Reverse a String"],["a302f7aae1aa3152a5b413bc","Factorialize a Number"],["a26cbbe9ad8655a977e1ceb5","Find the Longest Word in a String"],["a789b3483989747d63b0e427","Return Largest Numbers in Arrays"],["acda2fb1324d9b0fa741e6b5","Confirm the Ending"],["afcc8d540bea9ea2669306b6","Repeat a String Repeat a String"],["ac6993d51946422351508a41","Truncate a String"],["a6e40f1041b06c996f7b2406","Finders Keepers"],["a77dbc43c33f39daa4429b4f","Boo who"],["ab6137d4e35944e21037b769","Title Case a Sentence"],["579e2a2c335b9d72dd32e05c","Slice and Splice"],["adf08ec01beb4f99fc7a68f2","Falsy Bouncer"],["a24c1a4622e3c05097f71d67","Where do I Belong"],["af2170cad53daa0770fabdea","Mutations"],["a9bd25c716030ec90084d8a1","Chunky Monkey"]]},"challenges":[{"id":"a77dbc43c33f39daa4429b4f","title":"Boo who","challengeType":1,"forumTopicId":16000,"dashedName":"boo-who","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function booWho(bool) {\n  return bool;\n}\n\nbooWho(null);","error":null,"seed":"function booWho(bool) {\n  return bool;\n}\n\nbooWho(null);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function booWho(bool) {\n  return typeof bool === \"boolean\";\n}\n\nbooWho(null);","error":null,"seed":"function booWho(bool) {\n  return typeof bool === \"boolean\";\n}\n\nbooWho(null);"}]],"tests":[{"text":"<p><code>booWho(true)</code> should return <code>true</code>.</p>","testString":"assert.strictEqual(booWho(true), true);"},{"text":"<p><code>booWho(false)</code> should return <code>true</code>.</p>","testString":"assert.strictEqual(booWho(false), true);"},{"text":"<p><code>booWho([1, 2, 3])</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(booWho([1, 2, 3]), false);"},{"text":"<p><code>booWho([].slice)</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(booWho([].slice), false);"},{"text":"<p><code>booWho({ \"a\": 1 })</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(booWho({ a: 1 }), false);"},{"text":"<p><code>booWho(1)</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(booWho(1), false);"},{"text":"<p><code>booWho(NaN)</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(booWho(NaN), false);"},{"text":"<p><code>booWho(\"a\")</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(booWho('a'), false);"},{"text":"<p><code>booWho(\"true\")</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(booWho('true'), false);"},{"text":"<p><code>booWho(\"false\")</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(booWho('false'), false);"}],"description":"<section id=\"description\">\n<p>Check if a value is classified as a boolean primitive. Return <code>true</code> or <code>false</code>.</p>\n<p>Boolean primitives are <code>true</code> and <code>false</code>.</p>\n</section>","block":"basic-algorithm-scripting","hasEditableBoundaries":false,"order":5,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":9,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a9bd25c716030ec90084d8a1","title":"Chunky Monkey","challengeType":1,"forumTopicId":16005,"dashedName":"chunky-monkey","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function chunkArrayInGroups(arr, size) {\n  return arr;\n}\n\nchunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2);","error":null,"seed":"function chunkArrayInGroups(arr, size) {\n  return arr;\n}\n\nchunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function chunkArrayInGroups(arr, size) {\n  let out = [];\n\n  for (let i = 0; i < arr.length; i += size) {\n    out.push(arr.slice(i, i + size));\n  }\n\n  return out;\n}\n\nchunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2);","error":null,"seed":"function chunkArrayInGroups(arr, size) {\n  let out = [];\n\n  for (let i = 0; i < arr.length; i += size) {\n    out.push(arr.slice(i, i + size));\n  }\n\n  return out;\n}\n\nchunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2);"}]],"tests":[{"text":"<p><code>chunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2)</code> should return <code>[[\"a\", \"b\"], [\"c\", \"d\"]]</code>.</p>","testString":"assert.deepEqual(chunkArrayInGroups(['a', 'b', 'c', 'd'], 2), [\n  ['a', 'b'],\n  ['c', 'd']\n]);"},{"text":"<p><code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3)</code> should return <code>[[0, 1, 2], [3, 4, 5]]</code>.</p>","testString":"assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3), [\n  [0, 1, 2],\n  [3, 4, 5]\n]);"},{"text":"<p><code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2)</code> should return <code>[[0, 1], [2, 3], [4, 5]]</code>.</p>","testString":"assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2), [\n  [0, 1],\n  [2, 3],\n  [4, 5]\n]);"},{"text":"<p><code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4)</code> should return <code>[[0, 1, 2, 3], [4, 5]]</code>.</p>","testString":"assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4), [\n  [0, 1, 2, 3],\n  [4, 5]\n]);"},{"text":"<p><code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3)</code> should return <code>[[0, 1, 2], [3, 4, 5], [6]]</code>.</p>","testString":"assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3), [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6]\n]);"},{"text":"<p><code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4)</code> should return <code>[[0, 1, 2, 3], [4, 5, 6, 7], [8]]</code>.</p>","testString":"assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4), [\n  [0, 1, 2, 3],\n  [4, 5, 6, 7],\n  [8]\n]);"},{"text":"<p><code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2)</code> should return <code>[[0, 1], [2, 3], [4, 5], [6, 7], [8]]</code>.</p>","testString":"assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2), [\n  [0, 1],\n  [2, 3],\n  [4, 5],\n  [6, 7],\n  [8]\n]);"}],"description":"<section id=\"description\">\n<p>Write a function that splits an array (first argument) into groups the length of <code>size</code> (second argument) and returns them as a two-dimensional array.</p>\n</section>","block":"basic-algorithm-scripting","hasEditableBoundaries":false,"order":5,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":15,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"acda2fb1324d9b0fa741e6b5","title":"Confirm the Ending","challengeType":1,"forumTopicId":16006,"dashedName":"confirm-the-ending","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function confirmEnding(str, target) {\n  return str;\n}\n\nconfirmEnding(\"Bastian\", \"n\");","error":null,"seed":"function confirmEnding(str, target) {\n  return str;\n}\n\nconfirmEnding(\"Bastian\", \"n\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function confirmEnding(str, target) {\n  return str.substring(str.length - target.length) === target;\n}\n\nconfirmEnding(\"Bastian\", \"n\");","error":null,"seed":"function confirmEnding(str, target) {\n  return str.substring(str.length - target.length) === target;\n}\n\nconfirmEnding(\"Bastian\", \"n\");"}]],"tests":[{"text":"<p><code>confirmEnding(\"Bastian\", \"n\")</code> should return <code>true</code>.</p>","testString":"assert(confirmEnding('Bastian', 'n') === true);"},{"text":"<p><code>confirmEnding(\"Congratulation\", \"on\")</code> should return <code>true</code>.</p>","testString":"assert(confirmEnding('Congratulation', 'on') === true);"},{"text":"<p><code>confirmEnding(\"Connor\", \"n\")</code> should return <code>false</code>.</p>","testString":"assert(confirmEnding('Connor', 'n') === false);"},{"text":"<p><code>confirmEnding(\"Walking on water and developing software from a specification are easy if both are frozen\", \"specification\")</code> should return <code>false</code>.</p>","testString":"assert(\n  confirmEnding(\n    'Walking on water and developing software from a specification are easy if both are frozen',\n    'specification'\n  ) === false\n);"},{"text":"<p><code>confirmEnding(\"He has to give me a new name\", \"name\")</code> should return <code>true</code>.</p>","testString":"assert(confirmEnding('He has to give me a new name', 'name') === true);"},{"text":"<p><code>confirmEnding(\"Open sesame\", \"same\")</code> should return <code>true</code>.</p>","testString":"assert(confirmEnding('Open sesame', 'same') === true);"},{"text":"<p><code>confirmEnding(\"Open sesame\", \"sage\")</code> should return <code>false</code>.</p>","testString":"assert(confirmEnding('Open sesame', 'sage') === false);"},{"text":"<p><code>confirmEnding(\"Open sesame\", \"game\")</code> should return <code>false</code>.</p>","testString":"assert(confirmEnding('Open sesame', 'game') === false);"},{"text":"<p><code>confirmEnding(\"If you want to save our world, you must hurry. We dont know how much longer we can withstand the nothing\", \"mountain\")</code> should return <code>false</code>.</p>","testString":"assert(\n  confirmEnding(\n    'If you want to save our world, you must hurry. We dont know how much longer we can withstand the nothing',\n    'mountain'\n  ) === false\n);"},{"text":"<p><code>confirmEnding(\"Abstraction\", \"action\")</code> should return <code>true</code>.</p>","testString":"assert(confirmEnding('Abstraction', 'action') === true);"},{"text":"<p>Your code should not use the built-in method <code>.endsWith()</code> to solve the challenge.</p>","testString":"assert(!/\\.endsWith\\(.*?\\)\\s*?;?/.test(code) && !/\\['endsWith'\\]/.test(code));"}],"description":"<section id=\"description\">\n<p>Check if a string (first argument, <code>str</code>) ends with the given target string (second argument, <code>target</code>).</p>\n<p>This challenge <em>can</em> be solved with the <code>.endsWith()</code> method, which was introduced in ES2015. But for the purpose of this challenge, we would like you to use one of the JavaScript substring methods instead.</p>\n</section>","block":"basic-algorithm-scripting","hasEditableBoundaries":false,"order":5,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":5,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244b3","title":"Convert Celsius to Fahrenheit","challengeType":1,"forumTopicId":16806,"dashedName":"convert-celsius-to-fahrenheit","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function convertCtoF(celsius) {\n  let fahrenheit;\n  return fahrenheit;\n}\n\nconvertCtoF(30);","error":null,"seed":"function convertCtoF(celsius) {\n  let fahrenheit;\n  return fahrenheit;\n}\n\nconvertCtoF(30);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function convertCtoF(celsius) {\n  let fahrenheit = celsius * 9/5 + 32;\n  return fahrenheit;\n}\n\nconvertCtoF(30);","error":null,"seed":"function convertCtoF(celsius) {\n  let fahrenheit = celsius * 9/5 + 32;\n  return fahrenheit;\n}\n\nconvertCtoF(30);"}]],"tests":[{"text":"<p><code>convertCtoF(0)</code> should return a number</p>","testString":"assert(typeof convertCtoF(0) === 'number');"},{"text":"<p><code>convertCtoF(-30)</code> should return a value of <code>-22</code></p>","testString":"assert(convertCtoF(-30) === -22);"},{"text":"<p><code>convertCtoF(-10)</code> should return a value of <code>14</code></p>","testString":"assert(convertCtoF(-10) === 14);"},{"text":"<p><code>convertCtoF(0)</code> should return a value of <code>32</code></p>","testString":"assert(convertCtoF(0) === 32);"},{"text":"<p><code>convertCtoF(20)</code> should return a value of <code>68</code></p>","testString":"assert(convertCtoF(20) === 68);"},{"text":"<p><code>convertCtoF(30)</code> should return a value of <code>86</code></p>","testString":"assert(convertCtoF(30) === 86);"}],"description":"<section id=\"description\">\n<p>The formula to convert from Celsius to Fahrenheit is the temperature in Celsius times <code>9/5</code>, plus <code>32</code>.</p>\n<p>You are given a variable <code>celsius</code> representing a temperature in Celsius. Use the variable <code>fahrenheit</code> already defined and assign it the Fahrenheit temperature equivalent to the given Celsius temperature. Use the formula mentioned above to help convert the Celsius temperature to Fahrenheit.</p>\n</section>","block":"basic-algorithm-scripting","hasEditableBoundaries":false,"order":5,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":0,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a302f7aae1aa3152a5b413bc","title":"Factorialize a Number","challengeType":1,"forumTopicId":16013,"dashedName":"factorialize-a-number","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function factorialize(num) {\n  return num;\n}\n\nfactorialize(5);","error":null,"seed":"function factorialize(num) {\n  return num;\n}\n\nfactorialize(5);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function factorialize(num) {\n  return num < 1 ? 1 : num * factorialize(num - 1);\n}\n\nfactorialize(5);","error":null,"seed":"function factorialize(num) {\n  return num < 1 ? 1 : num * factorialize(num - 1);\n}\n\nfactorialize(5);"}]],"tests":[{"text":"<p><code>factorialize(5)</code> should return a number.</p>","testString":"assert(typeof factorialize(5) === 'number');"},{"text":"<p><code>factorialize(5)</code> should return <code>120</code>.</p>","testString":"assert(factorialize(5) === 120);"},{"text":"<p><code>factorialize(10)</code> should return <code>3628800</code>.</p>","testString":"assert(factorialize(10) === 3628800);"},{"text":"<p><code>factorialize(20)</code> should return <code>2432902008176640000</code>.</p>","testString":"assert(factorialize(20) === 2432902008176640000);"},{"text":"<p><code>factorialize(0)</code> should return <code>1</code>.</p>","testString":"assert(factorialize(0) === 1);"}],"description":"<section id=\"description\">\n<p>Return the factorial of the provided integer.</p>\n<p>If the integer is represented with the letter <code>n</code>, a factorial is the product of all positive integers less than or equal to <code>n</code>.</p>\n<p>Factorials are often represented with the shorthand notation <code>n!</code></p>\n<p>For example: <code>5! = 1 * 2 * 3 * 4 * 5 = 120</code></p>\n<p>Only integers greater than or equal to zero will be supplied to the function.</p>\n</section>","block":"basic-algorithm-scripting","hasEditableBoundaries":false,"order":5,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":2,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"adf08ec01beb4f99fc7a68f2","title":"Falsy Bouncer","challengeType":1,"forumTopicId":16014,"dashedName":"falsy-bouncer","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function bouncer(arr) {\n  return arr;\n}\n\nbouncer([7, \"ate\", \"\", false, 9]);","error":null,"seed":"function bouncer(arr) {\n  return arr;\n}\n\nbouncer([7, \"ate\", \"\", false, 9]);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function bouncer(arr) {\n  return arr.filter(e => e);\n}\n\nbouncer([7, \"ate\", \"\", false, 9]);","error":null,"seed":"function bouncer(arr) {\n  return arr.filter(e => e);\n}\n\nbouncer([7, \"ate\", \"\", false, 9]);"}]],"tests":[{"text":"<p><code>bouncer([7, \"ate\", \"\", false, 9])</code> should return <code>[7, \"ate\", 9]</code>.</p>","testString":"assert.deepEqual(bouncer([7, 'ate', '', false, 9]), [7, 'ate', 9]);"},{"text":"<p><code>bouncer([\"a\", \"b\", \"c\"])</code> should return <code>[\"a\", \"b\", \"c\"]</code>.</p>","testString":"assert.deepEqual(bouncer(['a', 'b', 'c']), ['a', 'b', 'c']);"},{"text":"<p><code>bouncer([false, null, 0, NaN, undefined, \"\"])</code> should return <code>[]</code>.</p>","testString":"assert.deepEqual(bouncer([false, null, 0, NaN, undefined, '']), []);"},{"text":"<p><code>bouncer([null, NaN, 1, 2, undefined])</code> should return <code>[1, 2]</code>.</p>","testString":"assert.deepEqual(bouncer([null, NaN, 1, 2, undefined]), [1, 2]);"},{"text":"<p>You should not mutate <code>arr</code>.</p>","testString":"const arr = ['a', false, 0, 'Naomi'];\nbouncer(arr);\nassert.deepEqual(arr, ['a', false, 0, 'Naomi'])"}],"description":"<section id=\"description\">\n<p>Remove all falsy values from an array. Return a new array; do not mutate the original array.</p>\n<p>Falsy values in JavaScript are <code>false</code>, <code>null</code>, <code>0</code>, <code>\"\"</code>, <code>undefined</code>, and <code>NaN</code>.</p>\n<p>Hint: Try converting each value to a Boolean.</p>\n</section>","block":"basic-algorithm-scripting","hasEditableBoundaries":false,"order":5,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":12,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a26cbbe9ad8655a977e1ceb5","title":"Find the Longest Word in a String","challengeType":1,"forumTopicId":16015,"dashedName":"find-the-longest-word-in-a-string","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function findLongestWordLength(str) {\n  return str.length;\n}\n\nfindLongestWordLength(\"The quick brown fox jumped over the lazy dog\");","error":null,"seed":"function findLongestWordLength(str) {\n  return str.length;\n}\n\nfindLongestWordLength(\"The quick brown fox jumped over the lazy dog\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function findLongestWordLength(str) {\n  return str.split(' ').sort((a, b) => b.length - a.length)[0].length;\n}\n\nfindLongestWordLength(\"The quick brown fox jumped over the lazy dog\");","error":null,"seed":"function findLongestWordLength(str) {\n  return str.split(' ').sort((a, b) => b.length - a.length)[0].length;\n}\n\nfindLongestWordLength(\"The quick brown fox jumped over the lazy dog\");"}]],"tests":[{"text":"<p><code>findLongestWordLength(\"The quick brown fox jumped over the lazy dog\")</code> should return a number.</p>","testString":"assert(\n  typeof findLongestWordLength(\n    'The quick brown fox jumped over the lazy dog'\n  ) === 'number'\n);"},{"text":"<p><code>findLongestWordLength(\"The quick brown fox jumped over the lazy dog\")</code> should return <code>6</code>.</p>","testString":"assert(\n  findLongestWordLength('The quick brown fox jumped over the lazy dog') === 6\n);"},{"text":"<p><code>findLongestWordLength(\"May the force be with you\")</code> should return <code>5</code>.</p>","testString":"assert(findLongestWordLength('May the force be with you') === 5);"},{"text":"<p><code>findLongestWordLength(\"Google do a barrel roll\")</code> should return <code>6</code>.</p>","testString":"assert(findLongestWordLength('Google do a barrel roll') === 6);"},{"text":"<p><code>findLongestWordLength(\"What is the average airspeed velocity of an unladen swallow\")</code> should return <code>8</code>.</p>","testString":"assert(\n  findLongestWordLength(\n    'What is the average airspeed velocity of an unladen swallow'\n  ) === 8\n);"},{"text":"<p><code>findLongestWordLength(\"What if we try a super-long word such as otorhinolaryngology\")</code> should return <code>19</code>.</p>","testString":"assert(\n  findLongestWordLength(\n    'What if we try a super-long word such as otorhinolaryngology'\n  ) === 19\n);"}],"description":"<section id=\"description\">\n<p>Return the length of the longest word in the provided sentence.</p>\n<p>Your response should be a number.</p>\n</section>","block":"basic-algorithm-scripting","hasEditableBoundaries":false,"order":5,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":3,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a6e40f1041b06c996f7b2406","title":"Finders Keepers","challengeType":1,"forumTopicId":16016,"dashedName":"finders-keepers","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function findElement(arr, func) {\n  let num = 0;\n  return num;\n}\n\nfindElement([1, 2, 3, 4], num => num % 2 === 0);","error":null,"seed":"function findElement(arr, func) {\n  let num = 0;\n  return num;\n}\n\nfindElement([1, 2, 3, 4], num => num % 2 === 0);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function findElement(arr, func) {\n  return arr.filter(func)[0];\n}\n\nfindElement([1, 2, 3, 4], num => num % 2 === 0);","error":null,"seed":"function findElement(arr, func) {\n  return arr.filter(func)[0];\n}\n\nfindElement([1, 2, 3, 4], num => num % 2 === 0);"}]],"tests":[{"text":"<p><code>findElement([1, 3, 5, 8, 9, 10], function(num) { return num % 2 === 0; })</code> should return <code>8</code>.</p>","testString":"assert.strictEqual(\n  findElement([1, 3, 5, 8, 9, 10], function (num) {\n    return num % 2 === 0;\n  }),\n  8\n);"},{"text":"<p><code>findElement([1, 3, 5, 9], function(num) { return num % 2 === 0; })</code> should return <code>undefined</code>.</p>","testString":"assert.strictEqual(\n  findElement([1, 3, 5, 9], function (num) {\n    return num % 2 === 0;\n  }),\n  undefined\n);"}],"description":"<section id=\"description\">\n<p>Create a function that looks through an array <code>arr</code> and returns the first element in it that passes a 'truth test'. This means that given an element <code>x</code>, the 'truth test' is passed if <code>func(x)</code> is <code>true</code>. If no element passes the test, return <code>undefined</code>.</p>\n</section>","block":"basic-algorithm-scripting","hasEditableBoundaries":false,"order":5,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":8,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"af2170cad53daa0770fabdea","title":"Mutations","challengeType":1,"forumTopicId":16025,"dashedName":"mutations","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function mutation(arr) {\n  return arr;\n}\n\nmutation([\"hello\", \"hey\"]);","error":null,"seed":"function mutation(arr) {\n  return arr;\n}\n\nmutation([\"hello\", \"hey\"]);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function mutation(arr) {\n  let hash = Object.create(null);\n\n  arr[0].toLowerCase().split('').forEach(c => hash[c] = true);\n\n  return !arr[1].toLowerCase().split('').filter(c => !hash[c]).length;\n}\n\nmutation([\"hello\", \"hey\"]);","error":null,"seed":"function mutation(arr) {\n  let hash = Object.create(null);\n\n  arr[0].toLowerCase().split('').forEach(c => hash[c] = true);\n\n  return !arr[1].toLowerCase().split('').filter(c => !hash[c]).length;\n}\n\nmutation([\"hello\", \"hey\"]);"}]],"tests":[{"text":"<p><code>mutation([\"hello\", \"hey\"])</code> should return <code>false</code>.</p>","testString":"assert(mutation(['hello', 'hey']) === false);"},{"text":"<p><code>mutation([\"hello\", \"Hello\"])</code> should return <code>true</code>.</p>","testString":"assert(mutation(['hello', 'Hello']) === true);"},{"text":"<p><code>mutation([\"zyxwvutsrqponmlkjihgfedcba\", \"qrstu\"])</code> should return <code>true</code>.</p>","testString":"assert(mutation(['zyxwvutsrqponmlkjihgfedcba', 'qrstu']) === true);"},{"text":"<p><code>mutation([\"Mary\", \"Army\"])</code> should return <code>true</code>.</p>","testString":"assert(mutation(['Mary', 'Army']) === true);"},{"text":"<p><code>mutation([\"Mary\", \"Aarmy\"])</code> should return <code>true</code>.</p>","testString":"assert(mutation(['Mary', 'Aarmy']) === true);"},{"text":"<p><code>mutation([\"Alien\", \"line\"])</code> should return <code>true</code>.</p>","testString":"assert(mutation(['Alien', 'line']) === true);"},{"text":"<p><code>mutation([\"floor\", \"for\"])</code> should return <code>true</code>.</p>","testString":"assert(mutation(['floor', 'for']) === true);"},{"text":"<p><code>mutation([\"hello\", \"neo\"])</code> should return <code>false</code>.</p>","testString":"assert(mutation(['hello', 'neo']) === false);"},{"text":"<p><code>mutation([\"voodoo\", \"no\"])</code> should return <code>false</code>.</p>","testString":"assert(mutation(['voodoo', 'no']) === false);"},{"text":"<p><code>mutation([\"ate\", \"date\"])</code> should return <code>false</code>.</p>","testString":"assert(mutation(['ate', 'date']) === false);"},{"text":"<p><code>mutation([\"Tiger\", \"Zebra\"])</code> should return <code>false</code>.</p>","testString":"assert(mutation(['Tiger', 'Zebra']) === false);"},{"text":"<p><code>mutation([\"Noel\", \"Ole\"])</code> should return <code>true</code>.</p>","testString":"assert(mutation(['Noel', 'Ole']) === true);"}],"description":"<section id=\"description\">\n<p>Return <code>true</code> if the string in the first element of the array contains all of the letters of the string in the second element of the array.</p>\n<p>For example, <code>[\"hello\", \"Hello\"]</code>, should return <code>true</code> because all of the letters in the second string are present in the first, ignoring case.</p>\n<p>The arguments <code>[\"hello\", \"hey\"]</code> should return <code>false</code> because the string <code>hello</code> does not contain a <code>y</code>.</p>\n<p>Lastly, <code>[\"Alien\", \"line\"]</code>, should return <code>true</code> because all of the letters in <code>line</code> are present in <code>Alien</code>.</p>\n</section>","block":"basic-algorithm-scripting","hasEditableBoundaries":false,"order":5,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":14,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"afcc8d540bea9ea2669306b6","title":"Repeat a String Repeat a String","challengeType":1,"forumTopicId":16041,"dashedName":"repeat-a-string-repeat-a-string","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function repeatStringNumTimes(str, num) {\n  return str;\n}\n\nrepeatStringNumTimes(\"abc\", 3);","error":null,"seed":"function repeatStringNumTimes(str, num) {\n  return str;\n}\n\nrepeatStringNumTimes(\"abc\", 3);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function repeatStringNumTimes(str, num) {\n  if (num < 1) return '';\n  return num === 1 ? str : str + repeatStringNumTimes(str, num-1);\n}\n\nrepeatStringNumTimes(\"abc\", 3);","error":null,"seed":"function repeatStringNumTimes(str, num) {\n  if (num < 1) return '';\n  return num === 1 ? str : str + repeatStringNumTimes(str, num-1);\n}\n\nrepeatStringNumTimes(\"abc\", 3);"}]],"tests":[{"text":"<p><code>repeatStringNumTimes(\"*\", 3)</code> should return the string <code>***</code>.</p>","testString":"assert(repeatStringNumTimes('*', 3) === '***');"},{"text":"<p><code>repeatStringNumTimes(\"abc\", 3)</code> should return the string <code>abcabcabc</code>.</p>","testString":"assert(repeatStringNumTimes('abc', 3) === 'abcabcabc');"},{"text":"<p><code>repeatStringNumTimes(\"abc\", 4)</code> should return the string <code>abcabcabcabc</code>.</p>","testString":"assert(repeatStringNumTimes('abc', 4) === 'abcabcabcabc');"},{"text":"<p><code>repeatStringNumTimes(\"abc\", 1)</code> should return the string <code>abc</code>.</p>","testString":"assert(repeatStringNumTimes('abc', 1) === 'abc');"},{"text":"<p><code>repeatStringNumTimes(\"*\", 8)</code> should return the string <code>********</code>.</p>","testString":"assert(repeatStringNumTimes('*', 8) === '********');"},{"text":"<p><code>repeatStringNumTimes(\"abc\", -2)</code> should return an empty string (<code>\"\"</code>).</p>","testString":"assert(repeatStringNumTimes('abc', -2) === '');"},{"text":"<p>The built-in <code>repeat()</code> method should not be used.</p>","testString":"assert(!/\\.repeat/g.test(code));"},{"text":"<p><code>repeatStringNumTimes(\"abc\", 0)</code> should return <code>\"\"</code>.</p>","testString":"assert(repeatStringNumTimes('abc', 0) === '');"}],"description":"<section id=\"description\">\n<p>Repeat a given string <code>str</code> (first argument) for <code>num</code> times (second argument). Return an empty string if <code>num</code> is not a positive number. For the purpose of this challenge, do <em>not</em> use the built-in <code>.repeat()</code> method.</p>\n</section>","block":"basic-algorithm-scripting","hasEditableBoundaries":false,"order":5,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":6,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a789b3483989747d63b0e427","title":"Return Largest Numbers in Arrays","challengeType":1,"forumTopicId":16042,"dashedName":"return-largest-numbers-in-arrays","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function largestOfFour(arr) {\n  return arr;\n}\n\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);","error":null,"seed":"function largestOfFour(arr) {\n  return arr;\n}\n\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function largestOfFour(arr) {\n  return arr.map(subArr => Math.max.apply(null, subArr));\n}\n\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);","error":null,"seed":"function largestOfFour(arr) {\n  return arr.map(subArr => Math.max.apply(null, subArr));\n}\n\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);"}]],"tests":[{"text":"<p><code>largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> should return an array.</p>","testString":"assert(\n  largestOfFour([\n    [4, 5, 1, 3],\n    [13, 27, 18, 26],\n    [32, 35, 37, 39],\n    [1000, 1001, 857, 1]\n  ]).constructor === Array\n);"},{"text":"<p><code>largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> should return <code>[27, 5, 39, 1001]</code>.</p>","testString":"assert.deepEqual(\n  largestOfFour([\n    [13, 27, 18, 26],\n    [4, 5, 1, 3],\n    [32, 35, 37, 39],\n    [1000, 1001, 857, 1]\n  ]),\n  [27, 5, 39, 1001]\n);"},{"text":"<p><code>largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]])</code> should return <code>[9, 35, 97, 1000000]</code>.</p>","testString":"assert.deepEqual(\n  largestOfFour([\n    [4, 9, 1, 3],\n    [13, 35, 18, 26],\n    [32, 35, 97, 39],\n    [1000000, 1001, 857, 1]\n  ]),\n  [9, 35, 97, 1000000]\n);"},{"text":"<p><code>largestOfFour([[17, 23, 25, 12], [25, 7, 34, 48], [4, -10, 18, 21], [-72, -3, -17, -10]])</code> should return <code>[25, 48, 21, -3]</code>.</p>","testString":"assert.deepEqual(\n  largestOfFour([\n    [17, 23, 25, 12],\n    [25, 7, 34, 48],\n    [4, -10, 18, 21],\n    [-72, -3, -17, -10]\n  ]),\n  [25, 48, 21, -3]\n);"}],"description":"<section id=\"description\">\n<p>Return an array consisting of the largest number from each provided sub-array. For simplicity, the provided array will contain exactly 4 sub-arrays.</p>\n<p>Remember, you can iterate through an array with a simple for loop, and access each member with array syntax <code>arr[i]</code>.</p>\n</section>","block":"basic-algorithm-scripting","hasEditableBoundaries":false,"order":5,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":4,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a202eed8fc186c8434cb6d61","title":"Reverse a String","challengeType":1,"forumTopicId":16043,"dashedName":"reverse-a-string","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function reverseString(str) {\n  return str;\n}\n\nreverseString(\"hello\");","error":null,"seed":"function reverseString(str) {\n  return str;\n}\n\nreverseString(\"hello\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function reverseString(str) {\n  return str.split('').reverse().join('');\n}\n\nreverseString(\"hello\");","error":null,"seed":"function reverseString(str) {\n  return str.split('').reverse().join('');\n}\n\nreverseString(\"hello\");"}]],"tests":[{"text":"<p><code>reverseString(\"hello\")</code> should return a string.</p>","testString":"assert(typeof reverseString('hello') === 'string');"},{"text":"<p><code>reverseString(\"hello\")</code> should return the string <code>olleh</code>.</p>","testString":"assert(reverseString('hello') === 'olleh');"},{"text":"<p><code>reverseString(\"Howdy\")</code> should return the string <code>ydwoH</code>.</p>","testString":"assert(reverseString('Howdy') === 'ydwoH');"},{"text":"<p><code>reverseString(\"Greetings from Earth\")</code> should return the string <code>htraE morf sgniteerG</code>.</p>","testString":"assert(reverseString('Greetings from Earth') === 'htraE morf sgniteerG');"}],"description":"<section id=\"description\">\n<p>Reverse the provided string and return the reversed string.</p>\n<p>For example, <code>\"hello\"</code> should become <code>\"olleh\"</code>.</p>\n</section>","block":"basic-algorithm-scripting","hasEditableBoundaries":false,"order":5,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":1,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"579e2a2c335b9d72dd32e05c","title":"Slice and Splice","challengeType":1,"forumTopicId":301148,"dashedName":"slice-and-splice","challengeFiles":[{"head":"","tail":"let testArr1 = [1, 2];\nlet testArr2 = [\"a\", \"b\"];","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function frankenSplice(arr1, arr2, n) {\n  return arr2;\n}\n\nfrankenSplice([1, 2, 3], [4, 5, 6], 1);","error":null,"seed":"function frankenSplice(arr1, arr2, n) {\n  return arr2;\n}\n\nfrankenSplice([1, 2, 3], [4, 5, 6], 1);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function frankenSplice(arr1, arr2, n) {\n  // It's alive. It's alive!\n  let result = arr2.slice();\n  for (let i = 0; i < arr1.length; i++) {\n    result.splice(n+i, 0, arr1[i]);\n  }\n  return result;\n}\n\nfrankenSplice([1, 2, 3], [4, 5], 1);","error":null,"seed":"function frankenSplice(arr1, arr2, n) {\n  // It's alive. It's alive!\n  let result = arr2.slice();\n  for (let i = 0; i < arr1.length; i++) {\n    result.splice(n+i, 0, arr1[i]);\n  }\n  return result;\n}\n\nfrankenSplice([1, 2, 3], [4, 5], 1);"}]],"tests":[{"text":"<p><code>frankenSplice([1, 2, 3], [4, 5], 1)</code> should return <code>[4, 1, 2, 3, 5]</code>.</p>","testString":"assert.deepEqual(frankenSplice([1, 2, 3], [4, 5], 1), [4, 1, 2, 3, 5]);"},{"text":"<p><code>frankenSplice([1, 2], [\"a\", \"b\"], 1)</code> should return <code>[\"a\", 1, 2, \"b\"]</code>.</p>","testString":"assert.deepEqual(frankenSplice(testArr1, testArr2, 1), ['a', 1, 2, 'b']);"},{"text":"<p><code>frankenSplice([\"claw\", \"tentacle\"], [\"head\", \"shoulders\", \"knees\", \"toes\"], 2)</code> should return <code>[\"head\", \"shoulders\", \"claw\", \"tentacle\", \"knees\", \"toes\"]</code>.</p>","testString":"assert.deepEqual(\n  frankenSplice(\n    ['claw', 'tentacle'],\n    ['head', 'shoulders', 'knees', 'toes'],\n    2\n  ),\n  ['head', 'shoulders', 'claw', 'tentacle', 'knees', 'toes']\n);"},{"text":"<p>All elements from the first array should be added to the second array in their original order. <code>frankenSplice([1, 2, 3, 4], [], 0)</code> should return <code>[1, 2, 3, 4]</code>.</p>","testString":"assert.deepEqual(frankenSplice([1, 2, 3, 4], [], 0), [1, 2, 3, 4]);"},{"text":"<p>The first array should remain the same after the function runs.</p>","testString":"frankenSplice(testArr1, testArr2, 1);\nassert.deepEqual(testArr1, [1, 2]);"},{"text":"<p>The second array should remain the same after the function runs.</p>","testString":"frankenSplice(testArr1, testArr2, 1);\nassert.deepEqual(testArr2, ['a', 'b']);"}],"description":"<section id=\"description\">\n<p>You are given two arrays and an index.</p>\n<p>Copy each element of the first array into the second array, in order.</p>\n<p>Begin inserting elements at index <code>n</code> of the second array.</p>\n<p>Return the resulting array. The input arrays should remain the same after the function runs.</p>\n</section>","block":"basic-algorithm-scripting","hasEditableBoundaries":false,"order":5,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":11,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"ab6137d4e35944e21037b769","title":"Title Case a Sentence","challengeType":1,"forumTopicId":16088,"dashedName":"title-case-a-sentence","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function titleCase(str) {\n  return str;\n}\n\ntitleCase(\"I'm a little tea pot\");","error":null,"seed":"function titleCase(str) {\n  return str;\n}\n\ntitleCase(\"I'm a little tea pot\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function titleCase(str) {\n  return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.substring(1).toLowerCase()).join(' ');\n}\n\ntitleCase(\"I'm a little tea pot\");","error":null,"seed":"function titleCase(str) {\n  return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.substring(1).toLowerCase()).join(' ');\n}\n\ntitleCase(\"I'm a little tea pot\");"}]],"tests":[{"text":"<p><code>titleCase(\"I'm a little tea pot\")</code> should return a string.</p>","testString":"assert(typeof titleCase(\"I'm a little tea pot\") === 'string');"},{"text":"<p><code>titleCase(\"I'm a little tea pot\")</code> should return the string <code>I'm A Little Tea Pot</code>.</p>","testString":"assert(titleCase(\"I'm a little tea pot\") === \"I'm A Little Tea Pot\");"},{"text":"<p><code>titleCase(\"sHoRt AnD sToUt\")</code> should return the string <code>Short And Stout</code>.</p>","testString":"assert(titleCase('sHoRt AnD sToUt') === 'Short And Stout');"},{"text":"<p><code>titleCase(\"HERE IS MY HANDLE HERE IS MY SPOUT\")</code> should return the string <code>Here Is My Handle Here Is My Spout</code>.</p>","testString":"assert(\n  titleCase('HERE IS MY HANDLE HERE IS MY SPOUT') ===\n    'Here Is My Handle Here Is My Spout'\n);"}],"description":"<section id=\"description\">\n<p>Return the provided string with the first letter of each word capitalized. Make sure the rest of the word is in lower case.</p>\n<p>For the purpose of this exercise, you should also capitalize connecting words like <code>the</code> and <code>of</code>.</p>\n</section>","block":"basic-algorithm-scripting","hasEditableBoundaries":false,"order":5,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":10,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"ac6993d51946422351508a41","title":"Truncate a String","challengeType":1,"forumTopicId":16089,"dashedName":"truncate-a-string","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function truncateString(str, num) {\n  return str;\n}\n\ntruncateString(\"A-tisket a-tasket A green and yellow basket\", 8);","error":null,"seed":"function truncateString(str, num) {\n  return str;\n}\n\ntruncateString(\"A-tisket a-tasket A green and yellow basket\", 8);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function truncateString(str, num) {\n  if (num >= str.length) {\n    return str;\n  }\n\n  return str.slice(0, num) + '...';\n}\n\ntruncateString(\"A-tisket a-tasket A green and yellow basket\", 8);","error":null,"seed":"function truncateString(str, num) {\n  if (num >= str.length) {\n    return str;\n  }\n\n  return str.slice(0, num) + '...';\n}\n\ntruncateString(\"A-tisket a-tasket A green and yellow basket\", 8);"}]],"tests":[{"text":"<p><code>truncateString(\"A-tisket a-tasket A green and yellow basket\", 8)</code> should return the string <code>A-tisket...</code>.</p>","testString":"assert(\n  truncateString('A-tisket a-tasket A green and yellow basket', 8) ===\n    'A-tisket...'\n);"},{"text":"<p><code>truncateString(\"Peter Piper picked a peck of pickled peppers\", 11)</code> should return the string <code>Peter Piper...</code>.</p>","testString":"assert(\n  truncateString('Peter Piper picked a peck of pickled peppers', 11) ===\n    'Peter Piper...'\n);"},{"text":"<p><code>truncateString(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length)</code> should return the string <code>A-tisket a-tasket A green and yellow basket</code>.</p>","testString":"assert(\n  truncateString(\n    'A-tisket a-tasket A green and yellow basket',\n    'A-tisket a-tasket A green and yellow basket'.length\n  ) === 'A-tisket a-tasket A green and yellow basket'\n);"},{"text":"<p><code>truncateString(\"A-tisket a-tasket A green and yellow basket\", \"A-tisket a-tasket A green and yellow basket\".length + 2)</code> should return the string <code>A-tisket a-tasket A green and yellow basket</code>.</p>","testString":"assert(\n  truncateString(\n    'A-tisket a-tasket A green and yellow basket',\n    'A-tisket a-tasket A green and yellow basket'.length + 2\n  ) === 'A-tisket a-tasket A green and yellow basket'\n);"},{"text":"<p><code>truncateString(\"A-\", 1)</code> should return the string <code>A...</code>.</p>","testString":"assert(truncateString('A-', 1) === 'A...');"},{"text":"<p><code>truncateString(\"Absolutely Longer\", 2)</code> should return the string <code>Ab...</code>.</p>","testString":"assert(truncateString('Absolutely Longer', 2) === 'Ab...');"}],"description":"<section id=\"description\">\n<p>Truncate a string (first argument) if it is longer than the given maximum string length (second argument). Return the truncated string with a <code>...</code> ending.</p>\n</section>","block":"basic-algorithm-scripting","hasEditableBoundaries":false,"order":5,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":7,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a24c1a4622e3c05097f71d67","title":"Where do I Belong","challengeType":1,"forumTopicId":16094,"dashedName":"where-do-i-belong","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function getIndexToIns(arr, num) {\n  return num;\n}\n\ngetIndexToIns([40, 60], 50);","error":null,"seed":"function getIndexToIns(arr, num) {\n  return num;\n}\n\ngetIndexToIns([40, 60], 50);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function getIndexToIns(arr, num) {\n  arr = arr.sort((a, b) => a - b);\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= num) {\n      return i;\n    }\n  }\n\n  return arr.length;\n}\n\ngetIndexToIns([40, 60], 50);","error":null,"seed":"function getIndexToIns(arr, num) {\n  arr = arr.sort((a, b) => a - b);\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= num) {\n      return i;\n    }\n  }\n\n  return arr.length;\n}\n\ngetIndexToIns([40, 60], 50);"}]],"tests":[{"text":"<p><code>getIndexToIns([10, 20, 30, 40, 50], 35)</code> should return <code>3</code>.</p>","testString":"assert(getIndexToIns([10, 20, 30, 40, 50], 35) === 3);"},{"text":"<p><code>getIndexToIns([10, 20, 30, 40, 50], 35)</code> should return a number.</p>","testString":"assert(typeof getIndexToIns([10, 20, 30, 40, 50], 35) === 'number');"},{"text":"<p><code>getIndexToIns([10, 20, 30, 40, 50], 30)</code> should return <code>2</code>.</p>","testString":"assert(getIndexToIns([10, 20, 30, 40, 50], 30) === 2);"},{"text":"<p><code>getIndexToIns([10, 20, 30, 40, 50], 30)</code> should return a number.</p>","testString":"assert(typeof getIndexToIns([10, 20, 30, 40, 50], 30) === 'number');"},{"text":"<p><code>getIndexToIns([40, 60], 50)</code> should return <code>1</code>.</p>","testString":"assert(getIndexToIns([40, 60], 50) === 1);"},{"text":"<p><code>getIndexToIns([40, 60], 50)</code> should return a number.</p>","testString":"assert(typeof getIndexToIns([40, 60], 50) === 'number');"},{"text":"<p><code>getIndexToIns([3, 10, 5], 3)</code> should return <code>0</code>.</p>","testString":"assert(getIndexToIns([3, 10, 5], 3) === 0);"},{"text":"<p><code>getIndexToIns([3, 10, 5], 3)</code> should return a number.</p>","testString":"assert(typeof getIndexToIns([3, 10, 5], 3) === 'number');"},{"text":"<p><code>getIndexToIns([5, 3, 20, 3], 5)</code> should return <code>2</code>.</p>","testString":"assert(getIndexToIns([5, 3, 20, 3], 5) === 2);"},{"text":"<p><code>getIndexToIns([5, 3, 20, 3], 5)</code> should return a number.</p>","testString":"assert(typeof getIndexToIns([5, 3, 20, 3], 5) === 'number');"},{"text":"<p><code>getIndexToIns([2, 20, 10], 19)</code> should return <code>2</code>.</p>","testString":"assert(getIndexToIns([2, 20, 10], 19) === 2);"},{"text":"<p><code>getIndexToIns([2, 20, 10], 19)</code> should return a number.</p>","testString":"assert(typeof getIndexToIns([2, 20, 10], 19) === 'number');"},{"text":"<p><code>getIndexToIns([2, 5, 10], 15)</code> should return <code>3</code>.</p>","testString":"assert(getIndexToIns([2, 5, 10], 15) === 3);"},{"text":"<p><code>getIndexToIns([2, 5, 10], 15)</code> should return a number.</p>","testString":"assert(typeof getIndexToIns([2, 5, 10], 15) === 'number');"},{"text":"<p><code>getIndexToIns([], 1)</code> should return <code>0</code>.</p>","testString":"assert(getIndexToIns([], 1) === 0);"},{"text":"<p><code>getIndexToIns([], 1)</code> should return a number.</p>","testString":"assert(typeof getIndexToIns([], 1) === 'number');"}],"description":"<section id=\"description\">\n<p>Return the lowest index at which a value (second argument) should be inserted into an array (first argument) once it has been sorted. The returned value should be a number.</p>\n<p>For example, <code>getIndexToIns([1,2,3,4], 1.5)</code> should return <code>1</code> because it is greater than <code>1</code> (index 0), but less than <code>2</code> (index 1).</p>\n<p>Likewise, <code>getIndexToIns([20,3,5], 19)</code> should return <code>2</code> because once the array has been sorted it will look like <code>[3,5,20]</code> and <code>19</code> is less than <code>20</code> (index 2) and greater than <code>5</code> (index 1).</p>\n</section>","block":"basic-algorithm-scripting","hasEditableBoundaries":false,"order":5,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":13,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false}]},"basic-data-structures":{"meta":{"name":"Basic Data Structures","isUpcomingChange":false,"dashedName":"basic-data-structures","order":4,"time":"1 hour","template":"","required":[],"superBlock":"javascript-algorithms-and-data-structures","challengeOrder":[["587d7b7e367417b2b2512b20","Use an Array to Store a Collection of Data"],["5a661e0f1068aca922b3ef17","Access an Array's Contents Using Bracket Notation"],["587d78b2367417b2b2512b0e","Add Items to an Array with push() and unshift()"],["587d78b2367417b2b2512b0f","Remove Items from an Array with pop() and shift()"],["587d78b2367417b2b2512b10","Remove Items Using splice()"],["587d78b3367417b2b2512b11","Add Items Using splice()"],["587d7b7a367417b2b2512b12","Copy Array Items Using slice()"],["587d7b7b367417b2b2512b13","Copy an Array with the Spread Operator"],["587d7b7b367417b2b2512b17","Combine Arrays with the Spread Operator"],["587d7b7b367417b2b2512b14","Check For The Presence of an Element With indexOf()"],["587d7b7b367417b2b2512b15","Iterate Through All an Array's Items Using For Loops"],["587d7b7b367417b2b2512b16","Create complex multi-dimensional arrays"],["587d7b7c367417b2b2512b18","Add Key-Value Pairs to JavaScript Objects"],["587d7b7c367417b2b2512b19","Modify an Object Nested Within an Object"],["587d7b7c367417b2b2512b1a","Access Property Names with Bracket Notation"],["587d7b7c367417b2b2512b1b","Use the delete Keyword to Remove Object Properties"],["587d7b7d367417b2b2512b1c","Check if an Object has a Property"],["587d7b7d367417b2b2512b1d","Iterate Through the Keys of an Object with a for...in Statement"],["587d7b7d367417b2b2512b1e","Generate an Array of All Object Keys with Object.keys()"],["587d7b7d367417b2b2512b1f","Modify an Array Stored in an Object"]]},"challenges":[{"id":"5a661e0f1068aca922b3ef17","title":"Access an Array's Contents Using Bracket Notation","challengeType":1,"forumTopicId":301149,"dashedName":"access-an-arrays-contents-using-bracket-notation","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let myArray = [\"a\", \"b\", \"c\", \"d\"];\n// Only change code below this line\n\n// Only change code above this line\nconsole.log(myArray);","error":null,"seed":"let myArray = [\"a\", \"b\", \"c\", \"d\"];\n// Only change code below this line\n\n// Only change code above this line\nconsole.log(myArray);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let myArray = [\"a\", \"b\", \"c\", \"d\"];\nmyArray[1] = \"e\";","error":null,"seed":"let myArray = [\"a\", \"b\", \"c\", \"d\"];\nmyArray[1] = \"e\";"}]],"tests":[{"text":"<p><code>myArray[0]</code> should be equal to the letter <code>a</code></p>","testString":"assert.strictEqual(myArray[0], 'a');"},{"text":"<p><code>myArray[1]</code> should not be equal to the letter <code>b</code></p>","testString":"assert.notStrictEqual(myArray[1], 'b');"},{"text":"<p><code>myArray[2]</code> should be equal to the letter <code>c</code></p>","testString":"assert.strictEqual(myArray[2], 'c');"},{"text":"<p><code>myArray[3]</code> should be equal to the letter <code>d</code></p>","testString":"assert.strictEqual(myArray[3], 'd');"}],"description":"<section id=\"description\">\n<p>The fundamental feature of any data structure is, of course, the ability to not only store data, but to be able to retrieve that data on command. So, now that we've learned how to create an array, let's begin to think about how we can access that array's information.</p>\n<p>When we define a simple array as seen below, there are 3 items in it:</p>\n<pre><code class=\"language-js\">let ourArray = [\"a\", \"b\", \"c\"];\n</code></pre>\n<p>In an array, each array item has an <dfn>index</dfn>. This index doubles as the position of that item in the array, and how you reference it. However, it is important to note, that JavaScript arrays are <dfn>zero-indexed</dfn>, meaning that the first element of an array is actually at the <em><strong>zeroth</strong></em> position, not the first. In order to retrieve an element from an array we can enclose an index in brackets and append it to the end of an array, or more commonly, to a variable which references an array object. This is known as <dfn>bracket notation</dfn>. For example, if we want to retrieve the <code>a</code> from <code>ourArray</code> and assign it to a variable, we can do so with the following code:</p>\n<pre><code class=\"language-js\">let ourVariable = ourArray[0];\n</code></pre>\n<p>Now <code>ourVariable</code> has the value of <code>a</code>.</p>\n<p>In addition to accessing the value associated with an index, you can also <em>set</em> an index to a value using the same notation:</p>\n<pre><code class=\"language-js\">ourArray[1] = \"not b anymore\";\n</code></pre>\n<p>Using bracket notation, we have now reset the item at index 1 from the string <code>b</code>, to <code>not b anymore</code>. Now <code>ourArray</code> is <code>[\"a\", \"not b anymore\", \"c\"]</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>In order to complete this challenge, set the 2nd position (index <code>1</code>) of <code>myArray</code> to anything you want, besides the letter <code>b</code>.</p>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":1,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b7c367417b2b2512b1a","title":"Access Property Names with Bracket Notation","challengeType":1,"forumTopicId":301150,"dashedName":"access-property-names-with-bracket-notation","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n};\n\nfunction checkInventory(scannedItem) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nconsole.log(checkInventory(\"apples\"));","error":null,"seed":"let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n};\n\nfunction checkInventory(scannedItem) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nconsole.log(checkInventory(\"apples\"));"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n};\n\nfunction checkInventory(scannedItem) {\n  return foods[scannedItem];\n}","error":null,"seed":"let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n};\n\nfunction checkInventory(scannedItem) {\n  return foods[scannedItem];\n}"}]],"tests":[{"text":"<p><code>checkInventory</code> should be a function.</p>","testString":"assert.strictEqual(typeof checkInventory, 'function');"},{"text":"<p>The <code>foods</code> object should have only the following key-value pairs: <code>apples: 25</code>, <code>oranges: 32</code>, <code>plums: 28</code>, <code>bananas: 13</code>, <code>grapes: 35</code>, <code>strawberries: 27</code>.</p>","testString":"assert.deepEqual(foods, {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n});"},{"text":"<p><code>checkInventory(\"apples\")</code> should return <code>25</code>.</p>","testString":"assert.strictEqual(checkInventory('apples'), 25);"},{"text":"<p><code>checkInventory(\"bananas\")</code> should return <code>13</code>.</p>","testString":"assert.strictEqual(checkInventory('bananas'), 13);"},{"text":"<p><code>checkInventory(\"strawberries\")</code> should return <code>27</code>.</p>","testString":"assert.strictEqual(checkInventory('strawberries'), 27);"}],"description":"<section id=\"description\">\n<p>In the first object challenge we mentioned the use of bracket notation as a way to access property values using the evaluation of a variable. For instance, imagine that our <code>foods</code> object is being used in a program for a supermarket cash register. We have some function that sets the <code>selectedFood</code> and we want to check our <code>foods</code> object for the presence of that food. This might look like:</p>\n<pre><code class=\"language-js\">let selectedFood = getCurrentFood(scannedItem);\nlet inventory = foods[selectedFood];\n</code></pre>\n<p>This code will evaluate the value stored in the <code>selectedFood</code> variable and return the value of that key in the <code>foods</code> object, or <code>undefined</code> if it is not present. Bracket notation is very useful because sometimes object properties are not known before runtime or we need to access them in a more dynamic way.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>We've defined a function, <code>checkInventory</code>, which receives a scanned item as an argument. Return the current value of the <code>scannedItem</code> key in the <code>foods</code> object. You can assume that only valid keys will be provided as an argument to <code>checkInventory</code>.</p>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":14,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d78b2367417b2b2512b0e","title":"Add Items to an Array with push() and unshift()","challengeType":1,"forumTopicId":301151,"dashedName":"add-items-to-an-array-with-push-and-unshift","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function mixedNumbers(arr) {\n  // Only change code below this line\n\n  // Only change code above this line\n  return arr;\n}\n\nconsole.log(mixedNumbers(['IV', 5, 'six']));","error":null,"seed":"function mixedNumbers(arr) {\n  // Only change code below this line\n\n  // Only change code above this line\n  return arr;\n}\n\nconsole.log(mixedNumbers(['IV', 5, 'six']));"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function mixedNumbers(arr) {\n  arr.push(7,'VIII',9);\n  arr.unshift('I',2,'three');\n  return arr;\n}","error":null,"seed":"function mixedNumbers(arr) {\n  arr.push(7,'VIII',9);\n  arr.unshift('I',2,'three');\n  return arr;\n}"}]],"tests":[{"text":"<p><code>mixedNumbers([\"IV\", 5, \"six\"])</code> should now return <code>[\"I\", 2, \"three\", \"IV\", 5, \"six\", 7, \"VIII\", 9]</code></p>","testString":"assert.deepEqual(mixedNumbers(['IV', 5, 'six']), [\n  'I',\n  2,\n  'three',\n  'IV',\n  5,\n  'six',\n  7,\n  'VIII',\n  9\n]);"},{"text":"<p>The <code>mixedNumbers</code> function should utilize the <code>push()</code> method</p>","testString":"assert(mixedNumbers.toString().match(/\\.push/));"},{"text":"<p>The <code>mixedNumbers</code> function should utilize the <code>unshift()</code> method</p>","testString":"assert(mixedNumbers.toString().match(/\\.unshift/));"}],"description":"<section id=\"description\">\n<p>An array's length, like the data types it can contain, is not fixed. Arrays can be defined with a length of any number of elements, and elements can be added or removed over time; in other words, arrays are <dfn>mutable</dfn>. In this challenge, we will look at two methods with which we can programmatically modify an array: <code>Array.push()</code> and <code>Array.unshift()</code>.</p>\n<p>Both methods take one or more elements as parameters and add those elements to the array the method is being called on; the <code>push()</code> method adds elements to the end of an array, and <code>unshift()</code> adds elements to the beginning. Consider the following:</p>\n<pre><code class=\"language-js\">let twentyThree = 'XXIII';\nlet romanNumerals = ['XXI', 'XXII'];\n\nromanNumerals.unshift('XIX', 'XX');\n</code></pre>\n<p><code>romanNumerals</code> would have the value <code>['XIX', 'XX', 'XXI', 'XXII']</code>.</p>\n<pre><code class=\"language-js\">romanNumerals.push(twentyThree);\n</code></pre>\n<p><code>romanNumerals</code> would have the value <code>['XIX', 'XX', 'XXI', 'XXII', 'XXIII']</code>. Notice that we can also pass variables, which allows us even greater flexibility in dynamically modifying our array's data.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>We have defined a function, <code>mixedNumbers</code>, which we are passing an array as an argument. Modify the function by using <code>push()</code> and <code>unshift()</code> to add <code>'I', 2, 'three'</code> to the beginning of the array and <code>7, 'VIII', 9</code> to the end so that the returned array contains representations of the numbers 1-9 in order.</p>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":2,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d78b3367417b2b2512b11","title":"Add Items Using splice()","challengeType":1,"forumTopicId":301152,"dashedName":"add-items-using-splice","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function htmlColorNames(arr) {\n  // Only change code below this line\n\n  // Only change code above this line\n  return arr;\n}\n\nconsole.log(htmlColorNames(['DarkGoldenRod', 'WhiteSmoke', 'LavenderBlush', 'PaleTurquoise', 'FireBrick']));","error":null,"seed":"function htmlColorNames(arr) {\n  // Only change code below this line\n\n  // Only change code above this line\n  return arr;\n}\n\nconsole.log(htmlColorNames(['DarkGoldenRod', 'WhiteSmoke', 'LavenderBlush', 'PaleTurquoise', 'FireBrick']));"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function htmlColorNames(arr) {\n  arr.splice(0,2,'DarkSalmon', 'BlanchedAlmond');\n  return arr;\n}","error":null,"seed":"function htmlColorNames(arr) {\n  arr.splice(0,2,'DarkSalmon', 'BlanchedAlmond');\n  return arr;\n}"}]],"tests":[{"text":"<p><code>htmlColorNames</code> should return <code>[\"DarkSalmon\", \"BlanchedAlmond\", \"LavenderBlush\", \"PaleTurquoise\", \"FireBrick\"]</code></p>","testString":"assert.deepEqual(\n  htmlColorNames([\n    'DarkGoldenRod',\n    'WhiteSmoke',\n    'LavenderBlush',\n    'PaleTurquoise',\n    'FireBrick'\n  ]),\n  [\n    'DarkSalmon',\n    'BlanchedAlmond',\n    'LavenderBlush',\n    'PaleTurquoise',\n    'FireBrick'\n  ]\n);"},{"text":"<p>The <code>htmlColorNames</code> function should utilize the <code>splice()</code> method</p>","testString":"assert(/.splice/.test(code));"},{"text":"<p>You should not use <code>shift()</code> or <code>unshift()</code>.</p>","testString":"assert(!/shift|unshift/.test(code));"},{"text":"<p>You should not use array bracket notation.</p>","testString":"assert(!/\\[\\d\\]\\s*=/.test(code));"}],"description":"<section id=\"description\">\n<p>Remember in the last challenge we mentioned that <code>splice()</code> can take up to three parameters? Well, you can use the third parameter, comprised of one or more element(s), to add to the array. This can be incredibly useful for quickly switching out an element, or a set of elements, for another.</p>\n<pre><code class=\"language-js\">const numbers = [10, 11, 12, 12, 15];\nconst startIndex = 3;\nconst amountToDelete = 1;\n\nnumbers.splice(startIndex, amountToDelete, 13, 14);\nconsole.log(numbers);\n</code></pre>\n<p>The second occurrence of <code>12</code> is removed, and we add <code>13</code> and <code>14</code> at the same index. The <code>numbers</code> array would now be <code>[ 10, 11, 12, 13, 14, 15 ]</code>.</p>\n<p>Here, we begin with an array of numbers. Then, we pass the following to <code>splice()</code>: The index at which to begin deleting elements (3), the number of elements to be deleted (1), and the remaining arguments (13, 14) will be inserted starting at that same index. Note that there can be any number of elements (separated by commas) following <code>amountToDelete</code>, each of which gets inserted.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>We have defined a function, <code>htmlColorNames</code>, which takes an array of HTML colors as an argument. Modify the function using <code>splice()</code> to remove the first two elements of the array and add <code>'DarkSalmon'</code> and <code>'BlanchedAlmond'</code> in their respective places.</p>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":5,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b7c367417b2b2512b18","title":"Add Key-Value Pairs to JavaScript Objects","challengeType":1,"forumTopicId":301153,"dashedName":"add-key-value-pairs-to-javascript-objects","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28\n};\n\n// Only change code below this line\n\n// Only change code above this line\n\nconsole.log(foods);","error":null,"seed":"let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28\n};\n\n// Only change code below this line\n\n// Only change code above this line\n\nconsole.log(foods);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28\n};\n\nfoods['bananas'] = 13;\nfoods['grapes']  = 35;\nfoods['strawberries'] = 27;","error":null,"seed":"let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28\n};\n\nfoods['bananas'] = 13;\nfoods['grapes']  = 35;\nfoods['strawberries'] = 27;"}]],"tests":[{"text":"<p><code>foods</code> should be an object.</p>","testString":"assert(typeof foods === 'object');"},{"text":"<p>The <code>foods</code> object should have a key <code>bananas</code> with a value of <code>13</code>.</p>","testString":"assert(foods.bananas === 13);"},{"text":"<p>The <code>foods</code> object should have a key <code>grapes</code> with a value of <code>35</code>.</p>","testString":"assert(foods.grapes === 35);"},{"text":"<p>The <code>foods</code> object should have a key <code>strawberries</code> with a value of <code>27</code>.</p>","testString":"assert(foods.strawberries === 27);"},{"text":"<p>The key-value pairs should be set using dot or bracket notation.</p>","testString":"assert(\n  code.search(/bananas:/) === -1 &&\n    code.search(/grapes:/) === -1 &&\n    code.search(/strawberries:/) === -1\n);"}],"description":"<section id=\"description\">\n<p>At their most basic, objects are just collections of <dfn>key-value</dfn> pairs. In other words, they are pieces of data (<dfn>values</dfn>) mapped to unique identifiers called <dfn>properties</dfn> (<dfn>keys</dfn>). Take a look at an example:</p>\n<pre><code class=\"language-js\">const tekkenCharacter = {\n  player: 'Hwoarang',\n  fightingStyle: 'Tae Kwon Doe',\n  human: true\n};\n</code></pre>\n<p>The above code defines a Tekken video game character object called <code>tekkenCharacter</code>. It has three properties, each of which map to a specific value. If you want to add an additional property, such as \"origin\", it can be done by assigning <code>origin</code> to the object:</p>\n<pre><code class=\"language-js\">tekkenCharacter.origin = 'South Korea';\n</code></pre>\n<p>This uses dot notation. If you were to observe the <code>tekkenCharacter</code> object, it will now include the <code>origin</code> property. Hwoarang also had distinct orange hair. You can add this property with bracket notation by doing:</p>\n<pre><code class=\"language-js\">tekkenCharacter['hair color'] = 'dyed orange';\n</code></pre>\n<p>Bracket notation is required if your property has a space in it or if you want to use a variable to name the property. In the above case, the property is enclosed in quotes to denote it as a string and will be added exactly as shown. Without quotes, it will be evaluated as a variable and the name of the property will be whatever value the variable is. Here's an example with a variable:</p>\n<pre><code class=\"language-js\">const eyes = 'eye color';\n\ntekkenCharacter[eyes] = 'brown';\n</code></pre>\n<p>After adding all the examples, the object will look like this:</p>\n<pre><code class=\"language-js\">{\n  player: 'Hwoarang',\n  fightingStyle: 'Tae Kwon Doe',\n  human: true,\n  origin: 'South Korea',\n  'hair color': 'dyed orange',\n  'eye color': 'brown'\n};\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>A <code>foods</code> object has been created with three entries. Using the syntax of your choice, add three more entries to it: <code>bananas</code> with a value of <code>13</code>, <code>grapes</code> with a value of <code>35</code>, and <code>strawberries</code> with a value of <code>27</code>.</p>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":12,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b7b367417b2b2512b14","title":"Check For The Presence of an Element With indexOf()","challengeType":1,"forumTopicId":301154,"dashedName":"check-for-the-presence-of-an-element-with-indexof","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function quickCheck(arr, elem) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nconsole.log(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'));","error":null,"seed":"function quickCheck(arr, elem) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nconsole.log(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'));"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function quickCheck(arr, elem) {\n  return arr.indexOf(elem) >= 0; \n}","error":null,"seed":"function quickCheck(arr, elem) {\n  return arr.indexOf(elem) >= 0; \n}"}]],"tests":[{"text":"<p>The <code>quickCheck</code> function should return a boolean (<code>true</code> or <code>false</code>), not a string (<code>\"true\"</code> or <code>\"false\"</code>)</p>","testString":"assert.isBoolean(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'));"},{"text":"<p><code>quickCheck([\"squash\", \"onions\", \"shallots\"], \"mushrooms\")</code> should return <code>false</code></p>","testString":"assert.strictEqual(\n  quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'),\n  false\n);"},{"text":"<p><code>quickCheck([\"onions\", \"squash\", \"shallots\"], \"onions\")</code> should return <code>true</code></p>","testString":"assert.strictEqual(\n  quickCheck(['onions', 'squash', 'shallots'], 'onions'),\n  true\n);"},{"text":"<p><code>quickCheck([3, 5, 9, 125, 45, 2], 125)</code> should return <code>true</code></p>","testString":"assert.strictEqual(quickCheck([3, 5, 9, 125, 45, 2], 125), true);"},{"text":"<p><code>quickCheck([true, false, false], undefined)</code> should return <code>false</code></p>","testString":"assert.strictEqual(quickCheck([true, false, false], undefined), false);"},{"text":"<p>The <code>quickCheck</code> function should utilize the <code>indexOf()</code> method</p>","testString":"assert.notStrictEqual(quickCheck.toString().search(/\\.indexOf\\(/), -1);"}],"description":"<section id=\"description\">\n<p>Since arrays can be changed, or <em>mutated</em>, at any time, there's no guarantee about where a particular piece of data will be on a given array, or if that element even still exists. Luckily, JavaScript provides us with another built-in method, <code>indexOf()</code>, that allows us to quickly and easily check for the presence of an element on an array. <code>indexOf()</code> takes an element as a parameter, and when called, it returns the position, or index, of that element, or <code>-1</code> if the element does not exist on the array.</p>\n<p>For example:</p>\n<pre><code class=\"language-js\">let fruits = ['apples', 'pears', 'oranges', 'peaches', 'pears'];\n\nfruits.indexOf('dates');\nfruits.indexOf('oranges');\nfruits.indexOf('pears');\n</code></pre>\n<p><code>indexOf('dates')</code> returns <code>-1</code>, <code>indexOf('oranges')</code> returns <code>2</code>, and <code>indexOf('pears')</code> returns <code>1</code> (the first index at which each element exists).</p>\n</section>","instructions":"<section id=\"instructions\">\n<p><code>indexOf()</code> can be incredibly useful for quickly checking for the presence of an element on an array. We have defined a function, <code>quickCheck</code>, that takes an array and an element as arguments. Modify the function using <code>indexOf()</code> so that it returns <code>true</code> if the passed element exists on the array, and <code>false</code> if it does not.</p>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":9,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b7d367417b2b2512b1c","title":"Check if an Object has a Property","challengeType":1,"forumTopicId":301155,"dashedName":"check-if-an-object-has-a-property","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let users = {\n  Alan: {\n    age: 27,\n    online: true\n  },\n  Jeff: {\n    age: 32,\n    online: true\n  },\n  Sarah: {\n    age: 48,\n    online: true\n  },\n  Ryan: {\n    age: 19,\n    online: true\n  }\n};\n\nfunction isEveryoneHere(userObj) {\n  // Only change code below this line\n  \n  // Only change code above this line\n}\n\nconsole.log(isEveryoneHere(users));","error":null,"seed":"let users = {\n  Alan: {\n    age: 27,\n    online: true\n  },\n  Jeff: {\n    age: 32,\n    online: true\n  },\n  Sarah: {\n    age: 48,\n    online: true\n  },\n  Ryan: {\n    age: 19,\n    online: true\n  }\n};\n\nfunction isEveryoneHere(userObj) {\n  // Only change code below this line\n  \n  // Only change code above this line\n}\n\nconsole.log(isEveryoneHere(users));"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let users = {\n  Alan: {\n    age: 27,\n    online: true\n  },\n  Jeff: {\n    age: 32,\n    online: true\n  },\n  Sarah: {\n    age: 48,\n    online: true\n  },\n  Ryan: {\n    age: 19,\n    online: true\n  }\n};\n\nfunction isEveryoneHere(userObj) {\n  return [\n    'Alan',\n    'Jeff',\n    'Sarah',\n    'Ryan'\n  ].every(user => userObj.hasOwnProperty(user));\n}\n\nconsole.log(isEveryoneHere(users));","error":null,"seed":"let users = {\n  Alan: {\n    age: 27,\n    online: true\n  },\n  Jeff: {\n    age: 32,\n    online: true\n  },\n  Sarah: {\n    age: 48,\n    online: true\n  },\n  Ryan: {\n    age: 19,\n    online: true\n  }\n};\n\nfunction isEveryoneHere(userObj) {\n  return [\n    'Alan',\n    'Jeff',\n    'Sarah',\n    'Ryan'\n  ].every(user => userObj.hasOwnProperty(user));\n}\n\nconsole.log(isEveryoneHere(users));"}]],"tests":[{"text":"<p>The <code>users</code> object should not be accessed directly</p>","testString":"\nassert(code.match(/users/gm).length <= 2)\n"},{"text":"<p>The <code>users</code> object should only contain the keys <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code></p>","testString":"assert(\n  'Alan' in users &&\n    'Jeff' in users &&\n    'Sarah' in users &&\n    'Ryan' in users &&\n    Object.keys(users).length === 4\n);"},{"text":"<p>The function <code>isEveryoneHere</code> should return <code>true</code> if <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code> are properties on the object passed to it.</p>","testString":"assert(isEveryoneHere(users) === true);"},{"text":"<p>The function <code>isEveryoneHere</code> should return <code>false</code> if <code>Alan</code> is not a property on the object passed to it.</p>","testString":"assert(\n  (function () {\n    delete users.Alan;\n    return isEveryoneHere(users);\n  })() === false\n);"},{"text":"<p>The function <code>isEveryoneHere</code> should return <code>false</code> if <code>Jeff</code> is not a property on the object passed to it.</p>","testString":"assert(\n  (function () {\n    delete users.Jeff;\n    return isEveryoneHere(users);\n  })() === false\n);"},{"text":"<p>The function <code>isEveryoneHere</code> should return <code>false</code> if <code>Sarah</code> is not a property on the object passed to it.</p>","testString":"assert(\n  (function () {\n    delete users.Sarah;\n    return isEveryoneHere(users);\n  })() === false\n);"},{"text":"<p>The function <code>isEveryoneHere</code> should return <code>false</code> if <code>Ryan</code> is not a property on the object passed to it.</p>","testString":"assert(\n  (function () {\n    delete users.Ryan;\n    return isEveryoneHere(users);\n  })() === false\n);"}],"description":"<section id=\"description\">\n<p>Now we can add, modify, and remove keys from objects. But what if we just wanted to know if an object has a specific property? JavaScript provides us with two different ways to do this. One uses the <code>hasOwnProperty()</code> method and the other uses the <code>in</code> keyword. If we have an object <code>users</code> with a property of <code>Alan</code>, we could check for its presence in either of the following ways:</p>\n<pre><code class=\"language-js\">users.hasOwnProperty('Alan');\n'Alan' in users;\n</code></pre>\n<p>Both of these would return <code>true</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Finish writing the function so that it returns <code>true</code> if the object passed to it contains all four names, <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code> and <code>Ryan</code> and returns <code>false</code> otherwise.</p>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":16,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b7b367417b2b2512b17","title":"Combine Arrays with the Spread Operator","challengeType":1,"forumTopicId":301156,"dashedName":"combine-arrays-with-the-spread-operator","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function spreadOut() {\n  let fragment = ['to', 'code'];\n  let sentence; // Change this line\n  return sentence;\n}\n\nconsole.log(spreadOut());","error":null,"seed":"function spreadOut() {\n  let fragment = ['to', 'code'];\n  let sentence; // Change this line\n  return sentence;\n}\n\nconsole.log(spreadOut());"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function spreadOut() {\n  let fragment = ['to', 'code'];\n  let sentence = ['learning', ...fragment, 'is', 'fun'];\n  return sentence;\n}","error":null,"seed":"function spreadOut() {\n  let fragment = ['to', 'code'];\n  let sentence = ['learning', ...fragment, 'is', 'fun'];\n  return sentence;\n}"}]],"tests":[{"text":"<p><code>spreadOut</code> should return <code>[\"learning\", \"to\", \"code\", \"is\", \"fun\"]</code></p>","testString":"assert.deepEqual(spreadOut(), ['learning', 'to', 'code', 'is', 'fun']);"},{"text":"<p>The <code>spreadOut</code> function should utilize spread syntax</p>","testString":"assert.notStrictEqual(spreadOut.toString().search(/[...]/), -1);"}],"description":"<section id=\"description\">\n<p>Another huge advantage of the <dfn>spread</dfn> operator is the ability to combine arrays, or to insert all the elements of one array into another, at any index. With more traditional syntaxes, we can concatenate arrays, but this only allows us to combine arrays at the end of one, and at the start of another. Spread syntax makes the following operation extremely simple:</p>\n<pre><code class=\"language-js\">let thisArray = ['sage', 'rosemary', 'parsley', 'thyme'];\n\nlet thatArray = ['basil', 'cilantro', ...thisArray, 'coriander'];\n</code></pre>\n<p><code>thatArray</code> would have the value <code>['basil', 'cilantro', 'sage', 'rosemary', 'parsley', 'thyme', 'coriander']</code>.</p>\n<p>Using spread syntax, we have just achieved an operation that would have been more complex and more verbose had we used traditional methods.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>We have defined a function <code>spreadOut</code> that returns the variable <code>sentence</code>. Modify the function using the <dfn>spread</dfn> operator so that it returns the array <code>['learning', 'to', 'code', 'is', 'fun']</code>.</p>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":8,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b7b367417b2b2512b13","title":"Copy an Array with the Spread Operator","challengeType":1,"forumTopicId":301157,"dashedName":"copy-an-array-with-the-spread-operator","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function copyMachine(arr, num) {\n  let newArr = [];\n  while (num >= 1) {\n    // Only change code below this line\n\n    // Only change code above this line\n    num--;\n  }\n  return newArr;\n}\n\nconsole.log(copyMachine([true, false, true], 2));","error":null,"seed":"function copyMachine(arr, num) {\n  let newArr = [];\n  while (num >= 1) {\n    // Only change code below this line\n\n    // Only change code above this line\n    num--;\n  }\n  return newArr;\n}\n\nconsole.log(copyMachine([true, false, true], 2));"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function copyMachine(arr,num){\n    let newArr=[];\n    while(num >=1){\n    newArr.push([...arr]);\n    num--;\n    }\n    return newArr;\n}\nconsole.log(copyMachine([true, false, true], 2));","error":null,"seed":"function copyMachine(arr,num){\n    let newArr=[];\n    while(num >=1){\n    newArr.push([...arr]);\n    num--;\n    }\n    return newArr;\n}\nconsole.log(copyMachine([true, false, true], 2));"}]],"tests":[{"text":"<p><code>copyMachine([true, false, true], 2)</code> should return <code>[[true, false, true], [true, false, true]]</code></p>","testString":"assert.deepEqual(copyMachine([true, false, true], 2), [\n  [true, false, true],\n  [true, false, true]\n]);"},{"text":"<p><code>copyMachine([1, 2, 3], 5)</code> should return <code>[[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]</code></p>","testString":"assert.deepEqual(copyMachine([1, 2, 3], 5), [\n  [1, 2, 3],\n  [1, 2, 3],\n  [1, 2, 3],\n  [1, 2, 3],\n  [1, 2, 3]\n]);"},{"text":"<p><code>copyMachine([true, true, null], 1)</code> should return <code>[[true, true, null]]</code></p>","testString":"assert.deepEqual(copyMachine([true, true, null], 1), [[true, true, null]]);"},{"text":"<p><code>copyMachine([\"it works\"], 3)</code> should return <code>[[\"it works\"], [\"it works\"], [\"it works\"]]</code></p>","testString":"assert.deepEqual(copyMachine(['it works'], 3), [\n  ['it works'],\n  ['it works'],\n  ['it works']\n]);"},{"text":"<p>The <code>copyMachine</code> function should utilize the <code>spread operator</code> with array <code>arr</code></p>","testString":"assert(code.match(/\\.\\.\\.arr/));"}],"description":"<section id=\"description\">\n<p>While <code>slice()</code> allows us to be selective about what elements of an array to copy, among several other useful tasks, ES6's new <dfn>spread operator</dfn> allows us to easily copy <em>all</em> of an array's elements, in order, with a simple and highly readable syntax. The spread syntax simply looks like this: <code>...</code></p>\n<p>In practice, we can use the spread operator to copy an array like so:</p>\n<pre><code class=\"language-js\">let thisArray = [true, true, undefined, false, null];\nlet thatArray = [...thisArray];\n</code></pre>\n<p><code>thatArray</code> equals <code>[true, true, undefined, false, null]</code>. <code>thisArray</code> remains unchanged and <code>thatArray</code> contains the same elements as <code>thisArray</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>We have defined a function, <code>copyMachine</code> which takes <code>arr</code> (an array) and <code>num</code> (a number) as arguments. The function is supposed to return a new array made up of <code>num</code> copies of <code>arr</code>. We have done most of the work for you, but it doesn't work quite right yet. Modify the function using spread syntax so that it works correctly (hint: another method we have already covered might come in handy here!).</p>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":7,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b7a367417b2b2512b12","title":"Copy Array Items Using slice()","challengeType":1,"forumTopicId":301158,"dashedName":"copy-array-items-using-slice","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function forecast(arr) {\n  // Only change code below this line\n\n  return arr;\n}\n\n// Only change code above this line\nconsole.log(forecast(['cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms']));","error":null,"seed":"function forecast(arr) {\n  // Only change code below this line\n\n  return arr;\n}\n\n// Only change code above this line\nconsole.log(forecast(['cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms']));"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function forecast(arr) {\n  return arr.slice(2,4);\n}","error":null,"seed":"function forecast(arr) {\n  return arr.slice(2,4);\n}"}]],"tests":[{"text":"<p><code>forecast</code> should return <code>[\"warm\", \"sunny\"]</code></p>","testString":"assert.deepEqual(\n  forecast(['cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms']),\n  ['warm', 'sunny']\n);"},{"text":"<p>The <code>forecast</code> function should utilize the <code>slice()</code> method</p>","testString":"assert(/\\.slice\\(/.test(code));"}],"description":"<section id=\"description\">\n<p>The next method we will cover is <code>slice()</code>. Rather than modifying an array, <code>slice()</code> copies or <em>extracts</em> a given number of elements to a new array, leaving the array it is called upon untouched. <code>slice()</code> takes only 2 parameters — the first is the index at which to begin extraction, and the second is the index at which to stop extraction (extraction will occur up to, but not including the element at this index). Consider this:</p>\n<pre><code class=\"language-js\">let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];\n\nlet todaysWeather = weatherConditions.slice(1, 3);\n</code></pre>\n<p><code>todaysWeather</code> would have the value <code>['snow', 'sleet']</code>, while <code>weatherConditions</code> would still have <code>['rain', 'snow', 'sleet', 'hail', 'clear']</code>.</p>\n<p>In effect, we have created a new array by extracting elements from an existing array.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>We have defined a function, <code>forecast</code>, that takes an array as an argument. Modify the function using <code>slice()</code> to extract information from the argument array and return a new array that contains the string elements <code>warm</code> and <code>sunny</code>.</p>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":6,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b7b367417b2b2512b16","title":"Create complex multi-dimensional arrays","challengeType":1,"forumTopicId":301159,"dashedName":"create-complex-multi-dimensional-arrays","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let myNestedArray = [\n  // Only change code below this line\n  ['unshift', false, 1, 2, 3, 'complex', 'nested'],\n  ['loop', 'shift', 6, 7, 1000, 'method'],\n  ['concat', false, true, 'spread', 'array'],\n  ['mutate', 1327.98, 'splice', 'slice', 'push'],\n  ['iterate', 1.3849, 7, '8.4876', 'arbitrary', 'depth']\n  // Only change code above this line\n];","error":null,"seed":"let myNestedArray = [\n  // Only change code below this line\n  ['unshift', false, 1, 2, 3, 'complex', 'nested'],\n  ['loop', 'shift', 6, 7, 1000, 'method'],\n  ['concat', false, true, 'spread', 'array'],\n  ['mutate', 1327.98, 'splice', 'slice', 'push'],\n  ['iterate', 1.3849, 7, '8.4876', 'arbitrary', 'depth']\n  // Only change code above this line\n];"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let myNestedArray = [\n  ['unshift', ['deep', ['deeper', ['deepest']]],false, 1, 2, 3, 'complex', 'nested'],\n  ['loop', 'shift', 6, 7, 1000, 'method'],\n  ['concat', false, true, 'spread', 'array'],\n  ['mutate', 1327.98, 'splice', 'slice', 'push'],\n  ['iterate', 1.3849, 7, '8.4876', 'arbitrary', 'depth']\n];","error":null,"seed":"let myNestedArray = [\n  ['unshift', ['deep', ['deeper', ['deepest']]],false, 1, 2, 3, 'complex', 'nested'],\n  ['loop', 'shift', 6, 7, 1000, 'method'],\n  ['concat', false, true, 'spread', 'array'],\n  ['mutate', 1327.98, 'splice', 'slice', 'push'],\n  ['iterate', 1.3849, 7, '8.4876', 'arbitrary', 'depth']\n];"}]],"tests":[{"text":"<p><code>myNestedArray</code> should contain only numbers, booleans, and strings as data elements</p>","testString":"assert.strictEqual(\n  (function (arr) {\n    let flattened = (function flatten(arr) {\n      const flat = [].concat(...arr);\n      return flat.some(Array.isArray) ? flatten(flat) : flat;\n    })(arr);\n    for (let i = 0; i < flattened.length; i++) {\n      if (\n        typeof flattened[i] !== 'number' &&\n        typeof flattened[i] !== 'string' &&\n        typeof flattened[i] !== 'boolean'\n      ) {\n        return false;\n      }\n    }\n    return true;\n  })(myNestedArray),\n  true\n);"},{"text":"<p><code>myNestedArray</code> should have exactly 5 levels of depth</p>","testString":"assert.strictEqual(\n  (function (arr) {\n    let depth = 0;\n    function arrayDepth(array, i, d) {\n      if (Array.isArray(array[i])) {\n        arrayDepth(array[i], 0, d + 1);\n      } else {\n        depth = d > depth ? d : depth;\n      }\n      if (i < array.length) {\n        arrayDepth(array, i + 1, d);\n      }\n    }\n    arrayDepth(arr, 0, 0);\n    return depth;\n  })(myNestedArray),\n  4\n);"},{"text":"<p><code>myNestedArray</code> should contain exactly one occurrence of the string <code>deep</code> on an array nested 3 levels deep</p>","testString":"assert(\n  (function howDeep(array, target, depth = 0) {\n    return array.reduce((combined, current) => {\n      if (Array.isArray(current)) {\n        return combined.concat(howDeep(current, target, depth + 1));\n      } else if (current === target) {\n        return combined.concat(depth);\n      } else {\n        return combined;\n      }\n    }, []);\n  })(myNestedArray, 'deep').length === 1 &&\n    (function howDeep(array, target, depth = 0) {\n      return array.reduce((combined, current) => {\n        if (Array.isArray(current)) {\n          return combined.concat(howDeep(current, target, depth + 1));\n        } else if (current === target) {\n          return combined.concat(depth);\n        } else {\n          return combined;\n        }\n      }, []);\n    })(myNestedArray, 'deep')[0] === 2\n);"},{"text":"<p><code>myNestedArray</code> should contain exactly one occurrence of the string <code>deeper</code> on an array nested 4 levels deep</p>","testString":"assert(\n  (function howDeep(array, target, depth = 0) {\n    return array.reduce((combined, current) => {\n      if (Array.isArray(current)) {\n        return combined.concat(howDeep(current, target, depth + 1));\n      } else if (current === target) {\n        return combined.concat(depth);\n      } else {\n        return combined;\n      }\n    }, []);\n  })(myNestedArray, 'deeper').length === 1 &&\n    (function howDeep(array, target, depth = 0) {\n      return array.reduce((combined, current) => {\n        if (Array.isArray(current)) {\n          return combined.concat(howDeep(current, target, depth + 1));\n        } else if (current === target) {\n          return combined.concat(depth);\n        } else {\n          return combined;\n        }\n      }, []);\n    })(myNestedArray, 'deeper')[0] === 3\n);"},{"text":"<p><code>myNestedArray</code> should contain exactly one occurrence of the string <code>deepest</code> on an array nested 5 levels deep</p>","testString":"assert(\n  (function howDeep(array, target, depth = 0) {\n    return array.reduce((combined, current) => {\n      if (Array.isArray(current)) {\n        return combined.concat(howDeep(current, target, depth + 1));\n      } else if (current === target) {\n        return combined.concat(depth);\n      } else {\n        return combined;\n      }\n    }, []);\n  })(myNestedArray, 'deepest').length === 1 &&\n    (function howDeep(array, target, depth = 0) {\n      return array.reduce((combined, current) => {\n        if (Array.isArray(current)) {\n          return combined.concat(howDeep(current, target, depth + 1));\n        } else if (current === target) {\n          return combined.concat(depth);\n        } else {\n          return combined;\n        }\n      }, []);\n    })(myNestedArray, 'deepest')[0] === 4\n);"}],"description":"<section id=\"description\">\n<p>Awesome! You have just learned a ton about arrays! This has been a fairly high level overview, and there is plenty more to learn about working with arrays, much of which you will see in later sections. But before moving on to looking at <dfn>Objects</dfn>, let's take one more look, and see how arrays can become a bit more complex than what we have seen in previous challenges.</p>\n<p>One of the most powerful features when thinking of arrays as data structures, is that arrays can contain, or even be completely made up of other arrays. We have seen arrays that contain arrays in previous challenges, but fairly simple ones. However, arrays can contain an infinite depth of arrays that can contain other arrays, each with their own arbitrary levels of depth, and so on. In this way, an array can very quickly become a very complex data structure, known as a <dfn>multi-dimensional</dfn>, or nested array. Consider the following example:</p>\n<pre><code class=\"language-js\">let nestedArray = [\n  ['deep'],\n  [\n    ['deeper'], ['deeper'] \n  ],\n  [\n    [\n      ['deepest'], ['deepest']\n    ],\n    [\n      [\n        ['deepest-est?']\n      ]\n    ]\n  ]\n];\n</code></pre>\n<p>The <code>deep</code> array is nested 2 levels deep. The <code>deeper</code> arrays are 3 levels deep. The <code>deepest</code> arrays are 4 levels, and the <code>deepest-est?</code> is 5.</p>\n<p>While this example may seem convoluted, this level of complexity is not unheard of, or even unusual, when dealing with large amounts of data. However, we can still very easily access the deepest levels of an array this complex with bracket notation:</p>\n<pre><code class=\"language-js\">console.log(nestedArray[2][1][0][0][0]);\n</code></pre>\n<p>This logs the string <code>deepest-est?</code>. And now that we know where that piece of data is, we can reset it if we need to:</p>\n<pre><code class=\"language-js\">nestedArray[2][1][0][0][0] = 'deeper still';\n\nconsole.log(nestedArray[2][1][0][0][0]);\n</code></pre>\n<p>Now it logs <code>deeper still</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>We have defined a variable, <code>myNestedArray</code>, set equal to an array. Modify <code>myNestedArray</code>, using any combination of <dfn>strings</dfn>, <dfn>numbers</dfn>, and <dfn>booleans</dfn> for data elements, so that it has exactly five levels of depth (remember, the outer-most array is level 1). Somewhere on the third level, include the string <code>deep</code>, on the fourth level, include the string <code>deeper</code>, and on the fifth level, include the string <code>deepest</code>.</p>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":11,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b7d367417b2b2512b1e","title":"Generate an Array of All Object Keys with Object.keys()","challengeType":1,"forumTopicId":301160,"dashedName":"generate-an-array-of-all-object-keys-with-object-keys","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let users = {\n  Alan: {\n    age: 27,\n    online: false\n  },\n  Jeff: {\n    age: 32,\n    online: true\n  },\n  Sarah: {\n    age: 48,\n    online: false\n  },\n  Ryan: {\n    age: 19,\n    online: true\n  }\n};\n\nfunction getArrayOfUsers(obj) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nconsole.log(getArrayOfUsers(users));","error":null,"seed":"let users = {\n  Alan: {\n    age: 27,\n    online: false\n  },\n  Jeff: {\n    age: 32,\n    online: true\n  },\n  Sarah: {\n    age: 48,\n    online: false\n  },\n  Ryan: {\n    age: 19,\n    online: true\n  }\n};\n\nfunction getArrayOfUsers(obj) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nconsole.log(getArrayOfUsers(users));"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let users = {\n  Alan: {\n    age: 27,\n    online: false\n  },\n  Jeff: {\n    age: 32,\n    online: true\n  },\n  Sarah: {\n    age: 48,\n    online: false\n  },\n  Ryan: {\n    age: 19,\n    online: true\n  }\n};\n\nfunction getArrayOfUsers(obj) {\n  return Object.keys(obj);\n}\n\nconsole.log(getArrayOfUsers(users));","error":null,"seed":"let users = {\n  Alan: {\n    age: 27,\n    online: false\n  },\n  Jeff: {\n    age: 32,\n    online: true\n  },\n  Sarah: {\n    age: 48,\n    online: false\n  },\n  Ryan: {\n    age: 19,\n    online: true\n  }\n};\n\nfunction getArrayOfUsers(obj) {\n  return Object.keys(obj);\n}\n\nconsole.log(getArrayOfUsers(users));"}]],"tests":[{"text":"<p>The <code>users</code> object should only contain the keys <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code></p>","testString":"assert(\n  'Alan' in users &&\n    'Jeff' in users &&\n    'Sarah' in users &&\n    'Ryan' in users &&\n    Object.keys(users).length === 4\n);"},{"text":"<p>The <code>getArrayOfUsers</code> function should return an array which contains all the keys in the <code>users</code> object</p>","testString":"assert(\n  (function () {\n    users.Sam = {};\n    users.Lewis = {};\n    let R = getArrayOfUsers(users);\n    return (\n      R.indexOf('Alan') !== -1 &&\n      R.indexOf('Jeff') !== -1 &&\n      R.indexOf('Sarah') !== -1 &&\n      R.indexOf('Ryan') !== -1 &&\n      R.indexOf('Sam') !== -1 &&\n      R.indexOf('Lewis') !== -1\n    );\n  })() === true\n);"}],"description":"<section id=\"description\">\n<p>We can also generate an array which contains all the keys stored in an object with the <code>Object.keys()</code> method. This method takes an object as the argument and returns an array of strings representing each property in the object. Again, there will be no specific order to the entries in the array.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Finish writing the <code>getArrayOfUsers</code> function so that it returns an array containing all the properties in the object it receives as an argument.</p>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":18,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b7b367417b2b2512b15","title":"Iterate Through All an Array's Items Using For Loops","challengeType":1,"forumTopicId":301161,"dashedName":"iterate-through-all-an-arrays-items-using-for-loops","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function filteredArray(arr, elem) {\n  let newArr = [];\n  // Only change code below this line\n\n  // Only change code above this line\n  return newArr;\n}\n\nconsole.log(filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3));","error":null,"seed":"function filteredArray(arr, elem) {\n  let newArr = [];\n  // Only change code below this line\n\n  // Only change code above this line\n  return newArr;\n}\n\nconsole.log(filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3));"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function filteredArray(arr, elem) {\n  let newArr = [];\n  for (let i = 0; i<arr.length; i++) {\n    if (arr[i].indexOf(elem) < 0) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n}","error":null,"seed":"function filteredArray(arr, elem) {\n  let newArr = [];\n  for (let i = 0; i<arr.length; i++) {\n    if (arr[i].indexOf(elem) < 0) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n}"}]],"tests":[{"text":"<p><code>filteredArray([[10, 8, 3], [14, 6, 23], [3, 18, 6]], 18)</code> should return <code>[[10, 8, 3], [14, 6, 23]]</code></p>","testString":"assert.deepEqual(\n  filteredArray(\n    [\n      [10, 8, 3],\n      [14, 6, 23],\n      [3, 18, 6]\n    ],\n    18\n  ),\n  [\n    [10, 8, 3],\n    [14, 6, 23]\n  ]\n);"},{"text":"<p><code>filteredArray([[\"trumpets\", 2], [\"flutes\", 4], [\"saxophones\", 2]], 2)</code> should return <code>[[\"flutes\", 4]]</code></p>","testString":"assert.deepEqual(\n  filteredArray(\n    [\n      ['trumpets', 2],\n      ['flutes', 4],\n      ['saxophones', 2]\n    ],\n    2\n  ),\n  [['flutes', 4]]\n);"},{"text":"<p><code>filteredArray([[\"amy\", \"beth\", \"sam\"], [\"dave\", \"sean\", \"peter\"]], \"peter\")</code> should return <code>[[\"amy\", \"beth\", \"sam\"]]</code></p>","testString":"assert.deepEqual(\n  filteredArray(\n    [\n      ['amy', 'beth', 'sam'],\n      ['dave', 'sean', 'peter']\n    ],\n    'peter'\n  ),\n  [['amy', 'beth', 'sam']]\n);"},{"text":"<p><code>filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3)</code> should return <code>[]</code></p>","testString":"assert.deepEqual(\n  filteredArray(\n    [\n      [3, 2, 3],\n      [1, 6, 3],\n      [3, 13, 26],\n      [19, 3, 9]\n    ],\n    3\n  ),\n  []\n);"},{"text":"<p>The <code>filteredArray</code> function should utilize a <code>for</code> loop</p>","testString":"assert.notStrictEqual(filteredArray.toString().search(/for/), -1);"}],"description":"<section id=\"description\">\n<p>Sometimes when working with arrays, it is very handy to be able to iterate through each item to find one or more elements that we might need, or to manipulate an array based on which data items meet a certain set of criteria. JavaScript offers several built in methods that each iterate over arrays in slightly different ways to achieve different results (such as <code>every()</code>, <code>forEach()</code>, <code>map()</code>, etc.), however the technique which is most flexible and offers us the greatest amount of control is a simple <code>for</code> loop.</p>\n<p>Consider the following:</p>\n<pre><code class=\"language-js\">function greaterThanTen(arr) {\n  let newArr = [];\n  for (let i = 0; i &#x3C; arr.length; i++) {\n    if (arr[i] > 10) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n}\n\ngreaterThanTen([2, 12, 8, 14, 80, 0, 1]);\n</code></pre>\n<p>Using a <code>for</code> loop, this function iterates through and accesses each element of the array, and subjects it to a simple test that we have created. In this way, we have easily and programmatically determined which data items are greater than <code>10</code>, and returned a new array, <code>[12, 14, 80]</code>, containing those items.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>We have defined a function, <code>filteredArray</code>, which takes <code>arr</code>, a nested array, and <code>elem</code> as arguments, and returns a new array. <code>elem</code> represents an element that may or may not be present on one or more of the arrays nested within <code>arr</code>. Modify the function, using a <code>for</code> loop, to return a filtered version of the passed array such that any array nested within <code>arr</code> containing <code>elem</code> has been removed.</p>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":10,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b7d367417b2b2512b1d","title":"Iterate Through the Keys of an Object with a for...in Statement","challengeType":1,"forumTopicId":301162,"dashedName":"iterate-through-the-keys-of-an-object-with-a-for---in-statement","challengeFiles":[{"head":"","tail":"const usersObj1 = {\n  Alan: {\n    online: false\n  },\n  Jeff: {\n    online: true\n  },\n  Sarah: {\n    online: false\n  }\n}\n\nconst usersObj2 = {\n  Alan: {\n    online: true\n  },\n  Jeff: {\n    online: false\n  },\n  Sarah: {\n    online: true\n  }\n}\n\n\nconst usersObj3 = {\n  Alan: {\n    online: false\n  },\n  Jeff: {\n    online: false\n  },\n  Sarah: {\n    online: false\n  }\n}","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const users = {\n  Alan: {\n    online: false\n  },\n  Jeff: {\n    online: true\n  },\n  Sarah: {\n    online: false\n  }\n}\n\nfunction countOnline(usersObj) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nconsole.log(countOnline(users));","error":null,"seed":"const users = {\n  Alan: {\n    online: false\n  },\n  Jeff: {\n    online: true\n  },\n  Sarah: {\n    online: false\n  }\n}\n\nfunction countOnline(usersObj) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nconsole.log(countOnline(users));"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function countOnline(usersObj) {\n  let online = 0;\n  for(let user in usersObj){\n    if(usersObj[user].online) {\n      online++;\n    }\n  }\n  return online;\n}","error":null,"seed":"function countOnline(usersObj) {\n  let online = 0;\n  for(let user in usersObj){\n    if(usersObj[user].online) {\n      online++;\n    }\n  }\n  return online;\n}"}]],"tests":[{"text":"<p>The function <code>countOnline</code> should use a <code>for in</code> statement to iterate through the object keys of the object passed to it.</p>","testString":"assert(\n  code.match(\n    /for\\s*\\(\\s*(var|let|const)\\s+[a-zA-Z_$]\\w*\\s+in\\s+[a-zA-Z_$]\\w*\\s*\\)/\n  )\n);"},{"text":"<p>The function <code>countOnline</code> should return <code>1</code> when the object <code>{ Alan: { online: false }, Jeff: { online: true }, Sarah: { online: false } }</code> is passed to it</p>","testString":"assert(countOnline(usersObj1) === 1);"},{"text":"<p>The function <code>countOnline</code> should return <code>2</code> when the object <code>{ Alan: { online: true }, Jeff: { online: false }, Sarah: { online: true } }</code> is passed to it</p>","testString":"assert(countOnline(usersObj2) === 2);"},{"text":"<p>The function <code>countOnline</code> should return <code>0</code> when the object <code>{ Alan: { online: false }, Jeff: { online: false }, Sarah: { online: false } }</code> is passed to it</p>","testString":"assert(countOnline(usersObj3) === 0);"}],"description":"<section id=\"description\">\n<p>Sometimes you may need to iterate through all the keys within an object. This requires a specific syntax in JavaScript called a <dfn>for...in</dfn> statement. For our <code>users</code> object, this could look like:</p>\n<pre><code class=\"language-js\">for (let user in users) {\n  console.log(user);\n}\n</code></pre>\n<p>This would log <code>Alan</code>, <code>Jeff</code>, and <code>Sarah</code> - each value on its own line.</p>\n<p>In this statement, we defined a variable <code>user</code>, and as you can see, this variable was reset during each iteration to each of the object's keys as the statement looped through the object, resulting in each user's name being printed to the console.</p>\n<p><strong>NOTE:</strong> Objects do not maintain an ordering to stored keys like arrays do; thus a key's position on an object, or the relative order in which it appears, is irrelevant when referencing or accessing that key.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>We've defined a function <code>countOnline</code> which accepts one argument (a users object). Use a <dfn>for...in</dfn> statement within this function to loop through the users object passed into the function and return the number of users whose <code>online</code> property is set to <code>true</code>. An example of a users object which could be passed to <code>countOnline</code> is shown below. Each user will have an <code>online</code> property with either a <code>true</code> or <code>false</code> value.</p>\n<pre><code class=\"language-js\">{\n  Alan: {\n    online: false\n  },\n  Jeff: {\n    online: true\n  },\n  Sarah: {\n    online: false\n  }\n}\n</code></pre>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":17,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b7d367417b2b2512b1f","title":"Modify an Array Stored in an Object","challengeType":1,"forumTopicId":301163,"dashedName":"modify-an-array-stored-in-an-object","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let user = {\n  name: 'Kenneth',\n  age: 28,\n  data: {\n    username: 'kennethCodesAllDay',\n    joinDate: 'March 26, 2016',\n    organization: 'freeCodeCamp',\n    friends: [\n      'Sam',\n      'Kira',\n      'Tomo'\n    ],\n    location: {\n      city: 'San Francisco',\n      state: 'CA',\n      country: 'USA'\n    }\n  }\n};\n\nfunction addFriend(userObj, friend) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nconsole.log(addFriend(user, 'Pete'));","error":null,"seed":"let user = {\n  name: 'Kenneth',\n  age: 28,\n  data: {\n    username: 'kennethCodesAllDay',\n    joinDate: 'March 26, 2016',\n    organization: 'freeCodeCamp',\n    friends: [\n      'Sam',\n      'Kira',\n      'Tomo'\n    ],\n    location: {\n      city: 'San Francisco',\n      state: 'CA',\n      country: 'USA'\n    }\n  }\n};\n\nfunction addFriend(userObj, friend) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nconsole.log(addFriend(user, 'Pete'));"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let user = {\n  name: 'Kenneth',\n  age: 28,\n  data: {\n    username: 'kennethCodesAllDay',\n    joinDate: 'March 26, 2016',\n    organization: 'freeCodeCamp',\n    friends: [\n      'Sam',\n      'Kira',\n      'Tomo'\n    ],\n    location: {\n      city: 'San Francisco',\n      state: 'CA',\n      country: 'USA'\n    }\n  }\n};\n\nfunction addFriend(userObj, friend) {\n  userObj.data.friends.push(friend);\n  return userObj.data.friends;\n}","error":null,"seed":"let user = {\n  name: 'Kenneth',\n  age: 28,\n  data: {\n    username: 'kennethCodesAllDay',\n    joinDate: 'March 26, 2016',\n    organization: 'freeCodeCamp',\n    friends: [\n      'Sam',\n      'Kira',\n      'Tomo'\n    ],\n    location: {\n      city: 'San Francisco',\n      state: 'CA',\n      country: 'USA'\n    }\n  }\n};\n\nfunction addFriend(userObj, friend) {\n  userObj.data.friends.push(friend);\n  return userObj.data.friends;\n}"}]],"tests":[{"text":"<p>The <code>user</code> object should have <code>name</code>, <code>age</code>, and <code>data</code> keys.</p>","testString":"assert('name' in user && 'age' in user && 'data' in user);"},{"text":"<p>The <code>addFriend</code> function should accept a <code>user</code> object and a <code>friend</code> string as arguments and add the friend to the array of <code>friends</code> in the <code>user</code> object.</p>","testString":"assert(\n  (function () {\n    let L1 = user.data.friends.length;\n    addFriend(user, 'Sean');\n    let L2 = user.data.friends.length;\n    return L2 === L1 + 1;\n  })()\n);"},{"text":"<p><code>addFriend(user, \"Pete\")</code> should return <code>[\"Sam\", \"Kira\", \"Tomo\", \"Pete\"]</code>.</p>","testString":"assert.deepEqual(\n  (function () {\n    delete user.data.friends;\n    user.data.friends = ['Sam', 'Kira', 'Tomo'];\n    return addFriend(user, 'Pete');\n  })(),\n  ['Sam', 'Kira', 'Tomo', 'Pete']\n);"}],"description":"<section id=\"description\">\n<p>Now you've seen all the basic operations for JavaScript objects. You can add, modify, and remove key-value pairs, check if keys exist, and iterate over all the keys in an object. As you continue learning JavaScript you will see even more versatile applications of objects. Additionally, the Data Structures lessons located in the Coding Interview Prep section of the curriculum also cover the ES6 <dfn>Map</dfn> and <dfn>Set</dfn> objects, both of which are similar to ordinary objects but provide some additional features. Now that you've learned the basics of arrays and objects, you're fully prepared to begin tackling more complex problems using JavaScript!</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Take a look at the object we've provided in the code editor. The <code>user</code> object contains three keys. The <code>data</code> key contains five keys, one of which contains an array of <code>friends</code>. From this, you can see how flexible objects are as data structures. We've started writing a function <code>addFriend</code>. Finish writing it so that it takes a <code>user</code> object and adds the name of the <code>friend</code> argument to the array stored in <code>user.data.friends</code> and returns that array.</p>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":19,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b7c367417b2b2512b19","title":"Modify an Object Nested Within an Object","challengeType":1,"forumTopicId":301164,"dashedName":"modify-an-object-nested-within-an-object","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let userActivity = {\n  id: 23894201352,\n  date: 'January 1, 2017',\n  data: {\n    totalUsers: 51,\n    online: 42\n  }\n};\n\n// Only change code below this line\n\n// Only change code above this line\n\nconsole.log(userActivity);","error":null,"seed":"let userActivity = {\n  id: 23894201352,\n  date: 'January 1, 2017',\n  data: {\n    totalUsers: 51,\n    online: 42\n  }\n};\n\n// Only change code below this line\n\n// Only change code above this line\n\nconsole.log(userActivity);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let userActivity = {\n  id: 23894201352,\n  date: 'January 1, 2017',\n  data: {\n    totalUsers: 51,\n    online: 42\n  }\n};\n\nuserActivity.data.online = 45;","error":null,"seed":"let userActivity = {\n  id: 23894201352,\n  date: 'January 1, 2017',\n  data: {\n    totalUsers: 51,\n    online: 42\n  }\n};\n\nuserActivity.data.online = 45;"}]],"tests":[{"text":"<p><code>userActivity</code> should have <code>id</code>, <code>date</code> and <code>data</code> properties.</p>","testString":"assert(\n  'id' in userActivity && 'date' in userActivity && 'data' in userActivity\n);"},{"text":"<p><code>userActivity</code> should have a <code>data</code> key set to an object with keys <code>totalUsers</code> and <code>online</code>.</p>","testString":"assert('totalUsers' in userActivity.data && 'online' in userActivity.data);"},{"text":"<p>The <code>online</code> property nested in the <code>data</code> key of <code>userActivity</code> should be set to <code>45</code></p>","testString":"assert(userActivity.data.online === 45);"},{"text":"<p>The <code>online</code> property should be set using dot or bracket notation.</p>","testString":"assert.strictEqual(code.search(/online: 45/), -1);"}],"description":"<section id=\"description\">\n<p>Now let's take a look at a slightly more complex object. Object properties can be nested to an arbitrary depth, and their values can be any type of data supported by JavaScript, including arrays and even other objects. Consider the following:</p>\n<pre><code class=\"language-js\">let nestedObject = {\n  id: 28802695164,\n  date: 'December 31, 2016',\n  data: {\n    totalUsers: 99,\n    online: 80,\n    onlineStatus: {\n      active: 67,\n      away: 13,\n      busy: 8\n    }\n  }\n};\n</code></pre>\n<p><code>nestedObject</code> has three properties: <code>id</code> (value is a number), <code>date</code> (value is a string), and <code>data</code> (value is an object with its nested structure). While structures can quickly become complex, we can still use the same notations to access the information we need. To assign the value <code>10</code> to the <code>busy</code> property of the nested <code>onlineStatus</code> object, we use dot notation to reference the property:</p>\n<pre><code class=\"language-js\">nestedObject.data.onlineStatus.busy = 10;\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Here we've defined an object <code>userActivity</code>, which includes another object nested within it. Set the value of the <code>online</code> key to <code>45</code>.</p>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":13,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d78b2367417b2b2512b0f","title":"Remove Items from an Array with pop() and shift()","challengeType":1,"forumTopicId":301165,"dashedName":"remove-items-from-an-array-with-pop-and-shift","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function popShift(arr) {\n  let popped; // Change this line\n  let shifted; // Change this line\n  return [shifted, popped];\n}\n\nconsole.log(popShift(['challenge', 'is', 'not', 'complete']));","error":null,"seed":"function popShift(arr) {\n  let popped; // Change this line\n  let shifted; // Change this line\n  return [shifted, popped];\n}\n\nconsole.log(popShift(['challenge', 'is', 'not', 'complete']));"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function popShift(arr) {\n  let popped = arr.pop(); // Change this line\n  let shifted = arr.shift(); // Change this line\n  return [shifted, popped];\n}","error":null,"seed":"function popShift(arr) {\n  let popped = arr.pop(); // Change this line\n  let shifted = arr.shift(); // Change this line\n  return [shifted, popped];\n}"}]],"tests":[{"text":"<p><code>popShift([\"challenge\", \"is\", \"not\", \"complete\"])</code> should return <code>[\"challenge\", \"complete\"]</code></p>","testString":"assert.deepEqual(popShift(['challenge', 'is', 'not', 'complete']), [\n  'challenge',\n  'complete'\n]);"},{"text":"<p>The <code>popShift</code> function should utilize the <code>pop()</code> method</p>","testString":"assert.notStrictEqual(popShift.toString().search(/\\.pop\\(/), -1);"},{"text":"<p>The <code>popShift</code> function should utilize the <code>shift()</code> method</p>","testString":"assert.notStrictEqual(popShift.toString().search(/\\.shift\\(/), -1);"}],"description":"<section id=\"description\">\n<p>Both <code>push()</code> and <code>unshift()</code> have corresponding methods that are nearly functional opposites: <code>pop()</code> and <code>shift()</code>. As you may have guessed by now, instead of adding, <code>pop()</code> <em>removes</em> an element from the end of an array, while <code>shift()</code> removes an element from the beginning. The key difference between <code>pop()</code> and <code>shift()</code> and their cousins <code>push()</code> and <code>unshift()</code>, is that neither method takes parameters, and each only allows an array to be modified by a single element at a time.</p>\n<p>Let's take a look:</p>\n<pre><code class=\"language-js\">let greetings = ['whats up?', 'hello', 'see ya!'];\n\ngreetings.pop();\n</code></pre>\n<p><code>greetings</code> would have the value <code>['whats up?', 'hello']</code>.</p>\n<pre><code class=\"language-js\">greetings.shift();\n</code></pre>\n<p><code>greetings</code> would have the value <code>['hello']</code>.</p>\n<p>We can also return the value of the removed element with either method like this:</p>\n<pre><code class=\"language-js\">let popped = greetings.pop();\n</code></pre>\n<p><code>greetings</code> would have the value <code>[]</code>, and <code>popped</code> would have the value <code>hello</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>We have defined a function, <code>popShift</code>, which takes an array as an argument and returns a new array. Modify the function, using <code>pop()</code> and <code>shift()</code>, to remove the first and last elements of the argument array, and assign the removed elements to their corresponding variables, so that the returned array contains their values.</p>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":3,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d78b2367417b2b2512b10","title":"Remove Items Using splice()","challengeType":1,"forumTopicId":301166,"dashedName":"remove-items-using-splice","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const arr = [2, 4, 5, 1, 7, 5, 2, 1];\n// Only change code below this line\n\n// Only change code above this line\nconsole.log(arr);","error":null,"seed":"const arr = [2, 4, 5, 1, 7, 5, 2, 1];\n// Only change code below this line\n\n// Only change code above this line\nconsole.log(arr);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const arr = [2, 4, 5, 1, 7, 5, 2, 1];\narr.splice(1, 4);","error":null,"seed":"const arr = [2, 4, 5, 1, 7, 5, 2, 1];\narr.splice(1, 4);"}]],"tests":[{"text":"<p>You should not change the original line of <code>const arr = [2, 4, 5, 1, 7, 5, 2, 1];</code>.</p>","testString":"assert(\n  __helpers.removeWhiteSpace(code).match(/constarr=\\[2,4,5,1,7,5,2,1\\];?/)\n);"},{"text":"<p><code>arr</code> should only contain elements that sum to <code>10</code>.</p>","testString":"assert.strictEqual(\n  arr.reduce((a, b) => a + b),\n  10\n);"},{"text":"<p>Your code should utilize the <code>splice()</code> method on <code>arr</code>.</p>","testString":"assert(__helpers.removeWhiteSpace(code).match(/arr\\.splice\\(/));"},{"text":"<p>The splice should only remove elements from <code>arr</code> and not add any additional elements to <code>arr</code>.</p>","testString":"assert(\n  !__helpers.removeWhiteSpace(code).match(/arr\\.splice\\(\\d+,\\d+,\\d+.*\\)/g)\n);"}],"description":"<section id=\"description\">\n<p>Ok, so we've learned how to remove elements from the beginning and end of arrays using <code>shift()</code> and <code>pop()</code>, but what if we want to remove an element from somewhere in the middle? Or remove more than one element at once? Well, that's where <code>splice()</code> comes in. <code>splice()</code> allows us to do just that: <strong>remove any number of consecutive elements</strong> from anywhere in an array.</p>\n<p><code>splice()</code> can take up to 3 parameters, but for now, we'll focus on just the first 2. The first two parameters of <code>splice()</code> are integers which represent indexes, or positions, of items in the array that <code>splice()</code> is being called upon. And remember, arrays are <em>zero-indexed</em>, so to indicate the first element of an array, we would use <code>0</code>. <code>splice()</code>'s first parameter represents the index on the array from which to begin removing elements, while the second parameter indicates the number of elements to delete. For example:</p>\n<pre><code class=\"language-js\">let array = ['today', 'was', 'not', 'so', 'great'];\n\narray.splice(2, 2);\n</code></pre>\n<p>Here we remove 2 elements, beginning with the third element (at index 2). <code>array</code> would have the value <code>['today', 'was', 'great']</code>.</p>\n<p><code>splice()</code> not only modifies the array it's being called on, but it also returns a new array containing the value of the removed elements:</p>\n<pre><code class=\"language-js\">let array = ['I', 'am', 'feeling', 'really', 'happy'];\n\nlet newArray = array.splice(3, 2);\n</code></pre>\n<p><code>newArray</code> has the value <code>['really', 'happy']</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>We've initialized an array <code>arr</code>. Use <code>splice()</code> to remove elements from <code>arr</code>, so that it only contains elements that sum to the value of <code>10</code>.</p>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":4,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b7e367417b2b2512b20","title":"Use an Array to Store a Collection of Data","challengeType":1,"forumTopicId":301167,"dashedName":"use-an-array-to-store-a-collection-of-data","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let yourArray; // Change this line","error":null,"seed":"let yourArray; // Change this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let yourArray = ['a string', 100, true, ['one', 2], 'another string'];","error":null,"seed":"let yourArray = ['a string', 100, true, ['one', 2], 'another string'];"}]],"tests":[{"text":"<p><code>yourArray</code> should be an array.</p>","testString":"assert.strictEqual(Array.isArray(yourArray), true);"},{"text":"<p><code>yourArray</code> should be at least 5 elements long.</p>","testString":"assert.isAtLeast(yourArray.length, 5);"},{"text":"<p><code>yourArray</code> should contain at least one <code>boolean</code>.</p>","testString":"assert(yourArray.filter((el) => typeof el === 'boolean').length >= 1);"},{"text":"<p><code>yourArray</code> should contain at least one <code>number</code>.</p>","testString":"assert(yourArray.filter((el) => typeof el === 'number').length >= 1);"},{"text":"<p><code>yourArray</code> should contain at least one <code>string</code>.</p>","testString":"assert(yourArray.filter((el) => typeof el === 'string').length >= 1);"}],"description":"<section id=\"description\">\n<p>The below is an example of the simplest implementation of an array data structure. This is known as a <dfn>one-dimensional array</dfn>, meaning it only has one level, or that it does not have any other arrays nested within it. Notice it contains <dfn>booleans</dfn>, <dfn>strings</dfn>, and <dfn>numbers</dfn>, among other valid JavaScript data types:</p>\n<pre><code class=\"language-js\">let simpleArray = ['one', 2, 'three', true, false, undefined, null];\nconsole.log(simpleArray.length);\n</code></pre>\n<p>The <code>console.log</code> call displays <code>7</code>.</p>\n<p>All arrays have a length property, which as shown above, can be very easily accessed with the syntax <code>Array.length</code>. A more complex implementation of an array can be seen below. This is known as a <dfn>multi-dimensional array</dfn>, or an array that contains other arrays. Notice that this array also contains JavaScript <dfn>objects</dfn>, which we will examine very closely in our next section, but for now, all you need to know is that arrays are also capable of storing complex objects.</p>\n<pre><code class=\"language-js\">let complexArray = [\n  [\n    {\n      one: 1,\n      two: 2\n    },\n    {\n      three: 3,\n      four: 4\n    }\n  ],\n  [\n    {\n      a: \"a\",\n      b: \"b\"\n    },\n    {\n      c: \"c\",\n      d: \"d\"\n    }\n  ]\n];\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>We have defined a variable called <code>yourArray</code>. Complete the statement by assigning an array of at least 5 elements in length to the <code>yourArray</code> variable. Your array should contain at least one <dfn>string</dfn>, one <dfn>number</dfn>, and one <dfn>boolean</dfn>.</p>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":0,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b7c367417b2b2512b1b","title":"Use the delete Keyword to Remove Object Properties","challengeType":1,"forumTopicId":301168,"dashedName":"use-the-delete-keyword-to-remove-object-properties","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n};\n\n// Only change code below this line\n\n// Only change code above this line\n\nconsole.log(foods);","error":null,"seed":"let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n};\n\n// Only change code below this line\n\n// Only change code above this line\n\nconsole.log(foods);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n};\n\ndelete foods.oranges;\ndelete foods.plums;\ndelete foods.strawberries;\n\nconsole.log(foods);","error":null,"seed":"let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n};\n\ndelete foods.oranges;\ndelete foods.plums;\ndelete foods.strawberries;\n\nconsole.log(foods);"}]],"tests":[{"text":"<p>The <code>foods</code> object should only have three keys: <code>apples</code>, <code>grapes</code>, and <code>bananas</code>.</p>","testString":"assert(\n  !foods.hasOwnProperty('oranges') &&\n    !foods.hasOwnProperty('plums') &&\n    !foods.hasOwnProperty('strawberries') &&\n    Object.keys(foods).length === 3\n);"},{"text":"<p>The <code>oranges</code>, <code>plums</code>, and <code>strawberries</code> keys should be removed using <code>delete</code>.</p>","testString":"assert(\n  code.search(/oranges:/) !== -1 &&\n    code.search(/plums:/) !== -1 &&\n    code.search(/strawberries:/) !== -1\n);"}],"description":"<section id=\"description\">\n<p>Now you know what objects are and their basic features and advantages. In short, they are key-value stores which provide a flexible, intuitive way to structure data, <em><strong>and</strong></em>, they provide very fast lookup time. Throughout the rest of these challenges, we will describe several common operations you can perform on objects so you can become comfortable applying these useful data structures in your programs.</p>\n<p>In earlier challenges, we have both added to and modified an object's key-value pairs. Here we will see how we can <em>remove</em> a key-value pair from an object.</p>\n<p>Let's revisit our <code>foods</code> object example one last time. If we wanted to remove the <code>apples</code> key, we can remove it by using the <code>delete</code> keyword like this:</p>\n<pre><code class=\"language-js\">delete foods.apples;\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the delete keyword to remove the <code>oranges</code>, <code>plums</code>, and <code>strawberries</code> keys from the <code>foods</code> object.</p>\n</section>","block":"basic-data-structures","hasEditableBoundaries":false,"order":4,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":15,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false}]},"basic-javascript":{"meta":{"name":"Basic JavaScript","isUpcomingChange":false,"dashedName":"basic-javascript","order":0,"time":"10 hours","template":"","required":[],"superBlock":"javascript-algorithms-and-data-structures","challengeOrder":[["bd7123c9c441eddfaeb4bdef","Comment Your JavaScript Code"],["bd7123c9c443eddfaeb5bdef","Declare JavaScript Variables"],["56533eb9ac21ba0edf2244a8","Storing Values with the Assignment Operator"],["5ee127a03c3b35dd45426493","Assigning the Value of One Variable to Another"],["56533eb9ac21ba0edf2244a9","Initializing Variables with the Assignment Operator"],["bd7123c9c444eddfaeb5bdef","Declare String Variables"],["56533eb9ac21ba0edf2244aa","Understanding Uninitialized Variables"],["56533eb9ac21ba0edf2244ab","Understanding Case Sensitivity in Variables"],["587d7b87367417b2b2512b3f","Explore Differences Between the var and let Keywords"],["587d7b87367417b2b2512b41","Declare a Read-Only Variable with the const Keyword"],["cf1111c1c11feddfaeb3bdef","Add Two Numbers with JavaScript"],["cf1111c1c11feddfaeb4bdef","Subtract One Number from Another with JavaScript"],["cf1231c1c11feddfaeb5bdef","Multiply Two Numbers with JavaScript"],["cf1111c1c11feddfaeb6bdef","Divide One Number by Another with JavaScript"],["56533eb9ac21ba0edf2244ac","Increment a Number with JavaScript"],["56533eb9ac21ba0edf2244ad","Decrement a Number with JavaScript"],["cf1391c1c11feddfaeb4bdef","Create Decimal Numbers with JavaScript"],["bd7993c9c69feddfaeb7bdef","Multiply Two Decimals with JavaScript"],["bd7993c9ca9feddfaeb7bdef","Divide One Decimal by Another with JavaScript"],["56533eb9ac21ba0edf2244ae","Finding a Remainder in JavaScript"],["56533eb9ac21ba0edf2244af","Compound Assignment With Augmented Addition"],["56533eb9ac21ba0edf2244b0","Compound Assignment With Augmented Subtraction"],["56533eb9ac21ba0edf2244b1","Compound Assignment With Augmented Multiplication"],["56533eb9ac21ba0edf2244b2","Compound Assignment With Augmented Division"],["56533eb9ac21ba0edf2244b5","Escaping Literal Quotes in Strings"],["56533eb9ac21ba0edf2244b4","Quoting Strings with Single Quotes"],["56533eb9ac21ba0edf2244b6","Escape Sequences in Strings"],["56533eb9ac21ba0edf2244b7","Concatenating Strings with Plus Operator"],["56533eb9ac21ba0edf2244b8","Concatenating Strings with the Plus Equals Operator"],["56533eb9ac21ba0edf2244b9","Constructing Strings with Variables"],["56533eb9ac21ba0edf2244ed","Appending Variables to Strings"],["bd7123c9c448eddfaeb5bdef","Find the Length of a String"],["bd7123c9c549eddfaeb5bdef","Use Bracket Notation to Find the First Character in a String"],["56533eb9ac21ba0edf2244ba","Understand String Immutability"],["bd7123c9c450eddfaeb5bdef","Use Bracket Notation to Find the Nth Character in a String"],["bd7123c9c451eddfaeb5bdef","Use Bracket Notation to Find the Last Character in a String"],["bd7123c9c452eddfaeb5bdef","Use Bracket Notation to Find the Nth-to-Last Character in a String"],["56533eb9ac21ba0edf2244bb","Word Blanks"],["bd7993c9c69feddfaeb8bdef","Store Multiple Values in one Variable using JavaScript Arrays"],["cf1111c1c11feddfaeb7bdef","Nest one Array within Another Array"],["56bbb991ad1ed5201cd392ca","Access Array Data with Indexes"],["cf1111c1c11feddfaeb8bdef","Modify Array Data With Indexes"],["56592a60ddddeae28f7aa8e1","Access Multi-Dimensional Arrays With Indexes"],["56bbb991ad1ed5201cd392cb","Manipulate Arrays With push()"],["56bbb991ad1ed5201cd392cc","Manipulate Arrays With pop()"],["56bbb991ad1ed5201cd392cd","Manipulate Arrays With shift()"],["56bbb991ad1ed5201cd392ce","Manipulate Arrays With unshift()"],["56533eb9ac21ba0edf2244bc","Shopping List"],["56bbb991ad1ed5201cd392cf","Write Reusable JavaScript with Functions"],["56533eb9ac21ba0edf2244bd","Passing Values to Functions with Arguments"],["56533eb9ac21ba0edf2244c2","Return a Value from a Function with Return"],["56533eb9ac21ba0edf2244be","Global Scope and Functions"],["56533eb9ac21ba0edf2244bf","Local Scope and Functions"],["56533eb9ac21ba0edf2244c0","Global vs. Local Scope in Functions"],["598e8944f009e646fc236146","Understanding Undefined Value returned from a Function"],["56533eb9ac21ba0edf2244c3","Assignment with a Returned Value"],["56533eb9ac21ba0edf2244c6","Stand in Line"],["bd7123c9c441eddfaeb5bdef","Understanding Boolean Values"],["cf1111c1c12feddfaeb3bdef","Use Conditional Logic with If Statements"],["56533eb9ac21ba0edf2244d0","Comparison with the Equality Operator"],["56533eb9ac21ba0edf2244d1","Comparison with the Strict Equality Operator"],["599a789b454f2bbd91a3ff4d","Practice comparing different values"],["56533eb9ac21ba0edf2244d2","Comparison with the Inequality Operator"],["56533eb9ac21ba0edf2244d3","Comparison with the Strict Inequality Operator"],["56533eb9ac21ba0edf2244d4","Comparison with the Greater Than Operator"],["56533eb9ac21ba0edf2244d5","Comparison with the Greater Than Or Equal To Operator"],["56533eb9ac21ba0edf2244d6","Comparison with the Less Than Operator"],["56533eb9ac21ba0edf2244d7","Comparison with the Less Than Or Equal To Operator"],["56533eb9ac21ba0edf2244d8","Comparisons with the Logical And Operator"],["56533eb9ac21ba0edf2244d9","Comparisons with the Logical Or Operator"],["56533eb9ac21ba0edf2244da","Introducing Else Statements"],["56533eb9ac21ba0edf2244db","Introducing Else If Statements"],["5690307fddb111c6084545d7","Logical Order in If Else Statements"],["56533eb9ac21ba0edf2244dc","Chaining If Else Statements"],["5664820f61c48e80c9fa476c","Golf Code"],["56533eb9ac21ba0edf2244dd","Selecting from Many Options with Switch Statements"],["56533eb9ac21ba0edf2244de","Adding a Default Option in Switch Statements"],["56533eb9ac21ba0edf2244df","Multiple Identical Options in Switch Statements"],["56533eb9ac21ba0edf2244e0","Replacing If Else Chains with Switch"],["5679ceb97cbaa8c51670a16b","Returning Boolean Values from Functions"],["56533eb9ac21ba0edf2244c4","Return Early Pattern for Functions"],["565bbe00e9cc8ac0725390f4","Counting Cards"],["56bbb991ad1ed5201cd392d0","Build JavaScript Objects"],["56533eb9ac21ba0edf2244c7","Accessing Object Properties with Dot Notation"],["56533eb9ac21ba0edf2244c8","Accessing Object Properties with Bracket Notation"],["56533eb9ac21ba0edf2244c9","Accessing Object Properties with Variables"],["56bbb991ad1ed5201cd392d1","Updating Object Properties"],["56bbb991ad1ed5201cd392d2","Add New Properties to a JavaScript Object"],["56bbb991ad1ed5201cd392d3","Delete Properties from a JavaScript Object"],["56533eb9ac21ba0edf2244ca","Using Objects for Lookups"],["567af2437cbaa8c51670a16c","Testing Objects for Properties"],["56533eb9ac21ba0edf2244cb","Manipulating Complex Objects"],["56533eb9ac21ba0edf2244cc","Accessing Nested Objects"],["56533eb9ac21ba0edf2244cd","Accessing Nested Arrays"],["56533eb9ac21ba0edf2244cf","Record Collection"],["cf1111c1c11feddfaeb1bdef","Iterate with JavaScript While Loops"],["cf1111c1c11feddfaeb5bdef","Iterate with JavaScript For Loops"],["56104e9e514f539506016a5c","Iterate Odd Numbers With a For Loop"],["56105e7b514f539506016a5e","Count Backwards With a For Loop"],["5675e877dbd60be8ad28edc6","Iterate Through an Array with a For Loop"],["56533eb9ac21ba0edf2244e1","Nesting For Loops"],["5a2efd662fb457916e1fe604","Iterate with JavaScript Do...While Loops"],["5cfa3679138e7d9595b9d9d4","Replace Loops using Recursion"],["5688e62ea601b2482ff8422b","Profile Lookup"],["cf1111c1c11feddfaeb9bdef","Generate Random Fractions with JavaScript"],["cf1111c1c12feddfaeb1bdef","Generate Random Whole Numbers with JavaScript"],["cf1111c1c12feddfaeb2bdef","Generate Random Whole Numbers within a Range"],["587d7b7e367417b2b2512b23","Use the parseInt Function"],["587d7b7e367417b2b2512b22","Use the parseInt Function with a Radix"],["587d7b7e367417b2b2512b24","Use the Conditional (Ternary) Operator"],["587d7b7e367417b2b2512b21","Use Multiple Conditional (Ternary) Operators"],["5cd9a70215d3c4e65518328f","Use Recursion to Create a Countdown"],["5cc0bd7a49b71cb96132e54c","Use Recursion to Create a Range of Numbers"]]},"challenges":[{"id":"56bbb991ad1ed5201cd392ca","title":"Access Array Data with Indexes","challengeType":1,"videoUrl":"https://scrimba.com/c/cBZQbTz","forumTopicId":16158,"dashedName":"access-array-data-with-indexes","challengeFiles":[{"head":"","tail":"if(typeof myArray !== \"undefined\" && typeof myData !== \"undefined\"){(function(y,z){return 'myArray = ' + JSON.stringify(y) + ', myData = ' + JSON.stringify(z);})(myArray, myData);}","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myArray = [50, 60, 70];\n\n","error":null,"seed":"const myArray = [50, 60, 70];\n\n"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myArray = [50, 60, 70];\nconst myData = myArray[0];","error":null,"seed":"const myArray = [50, 60, 70];\nconst myData = myArray[0];"}]],"tests":[{"text":"<p>The variable <code>myData</code> should equal the first value of <code>myArray</code>.</p>","testString":"assert(\n  (function () {\n    if (\n      typeof myArray !== 'undefined' &&\n      typeof myData !== 'undefined' &&\n      myArray[0] === myData\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })()\n);"},{"text":"<p>The data in variable <code>myArray</code> should be accessed using bracket notation.</p>","testString":"assert(\n  (function () {\n    if (code.match(/\\s*=\\s*myArray\\[0\\]/g)) {\n      return true;\n    } else {\n      return false;\n    }\n  })()\n);"}],"description":"<section id=\"description\">\n<p>We can access the data inside arrays using <dfn>indexes</dfn>.</p>\n<p>Array indexes are written in the same bracket notation that strings use, except that instead of specifying a character, they are specifying an entry in the array. Like strings, arrays use <dfn>zero-based</dfn> indexing, so the first element in an array has an index of <code>0</code>.</p>\n<br>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-js\">const array = [50, 60, 70];\nconsole.log(array[0]);\nconst data = array[1];\n</code></pre>\n<p>The <code>console.log(array[0])</code> prints <code>50</code>, and <code>data</code> has the value <code>60</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create a variable called <code>myData</code> and set it to equal the first value of <code>myArray</code> using bracket notation.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":40,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56592a60ddddeae28f7aa8e1","title":"Access Multi-Dimensional Arrays With Indexes","challengeType":1,"videoUrl":"https://scrimba.com/c/ckND4Cq","forumTopicId":16159,"dashedName":"access-multi-dimensional-arrays-with-indexes","challengeFiles":[{"head":"","tail":"if(typeof myArray !== \"undefined\"){(function(){return \"myData: \" + myData + \" myArray: \" + JSON.stringify(myArray);})();}","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myArray = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n  [[10, 11, 12], 13, 14],\n];\n\nconst myData = myArray[0][0];","error":null,"seed":"const myArray = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n  [[10, 11, 12], 13, 14],\n];\n\nconst myData = myArray[0][0];"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myArray = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [[10, 11, 12], 13, 14]];\nconst myData = myArray[2][1];","error":null,"seed":"const myArray = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [[10, 11, 12], 13, 14]];\nconst myData = myArray[2][1];"}]],"tests":[{"text":"<p><code>myData</code> should be equal to <code>8</code>.</p>","testString":"assert(myData === 8);"},{"text":"<p>You should be using bracket notation to read the correct value from <code>myArray</code>.</p>","testString":"assert(/myData=myArray\\[2\\]\\[1\\]/.test(__helpers.removeWhiteSpace(code)));"}],"description":"<section id=\"description\">\n<p>One way to think of a <dfn>multi-dimensional</dfn> array, is as an <em>array of arrays</em>. When you use brackets to access your array, the first set of brackets refers to the entries in the outermost (the first level) array, and each additional pair of brackets refers to the next level of entries inside.</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-js\">const arr = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n  [[10, 11, 12], 13, 14]\n];\n\nconst subarray = arr[3];\nconst nestedSubarray = arr[3][0];\nconst element = arr[3][0][1];\n</code></pre>\n<p>In this example, <code>subarray</code> has the value <code>[[10, 11, 12], 13, 14]</code>,\n<code>nestedSubarray</code> has the value <code>[10, 11, 12]</code>,   and <code>element</code> has the value <code>11</code> .</p>\n<p><strong>Note:</strong> There shouldn't be any spaces between the array name and the square brackets, like <code>array [0][0]</code> and even this <code>array [0] [0]</code> is not allowed. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Using bracket notation select an element from <code>myArray</code> such that <code>myData</code> is equal to <code>8</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":42,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244cd","title":"Accessing Nested Arrays","challengeType":1,"videoUrl":"https://scrimba.com/c/cLeGDtZ","forumTopicId":16160,"dashedName":"accessing-nested-arrays","challengeFiles":[{"head":"","tail":"(function(x) {\n  if(typeof x != 'undefined') {\n    return \"secondTree = \" + x;\n  }\n  return \"secondTree is undefined\";\n})(secondTree);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myPlants = [\n  {\n    type: \"flowers\",\n    list: [\n      \"rose\",\n      \"tulip\",\n      \"dandelion\"\n    ]\n  },\n  {\n    type: \"trees\",\n    list: [\n      \"fir\",\n      \"pine\",\n      \"birch\"\n    ]\n  }\n];\n\nconst secondTree = \"\";","error":null,"seed":"const myPlants = [\n  {\n    type: \"flowers\",\n    list: [\n      \"rose\",\n      \"tulip\",\n      \"dandelion\"\n    ]\n  },\n  {\n    type: \"trees\",\n    list: [\n      \"fir\",\n      \"pine\",\n      \"birch\"\n    ]\n  }\n];\n\nconst secondTree = \"\";"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myPlants = [\n  {\n    type: \"flowers\",\n    list: [\n      \"rose\",\n      \"tulip\",\n      \"dandelion\"\n    ]\n  },\n  {\n    type: \"trees\",\n    list: [\n      \"fir\",\n      \"pine\",\n      \"birch\"\n    ]\n  }\n];\n\nconst secondTree = myPlants[1].list[1];","error":null,"seed":"const myPlants = [\n  {\n    type: \"flowers\",\n    list: [\n      \"rose\",\n      \"tulip\",\n      \"dandelion\"\n    ]\n  },\n  {\n    type: \"trees\",\n    list: [\n      \"fir\",\n      \"pine\",\n      \"birch\"\n    ]\n  }\n];\n\nconst secondTree = myPlants[1].list[1];"}]],"tests":[{"text":"<p><code>secondTree</code> should equal the string <code>pine</code>.</p>","testString":"assert(secondTree === 'pine');"},{"text":"<p>Your code should use dot and bracket notation to access <code>myPlants</code>.</p>","testString":"assert(/=\\s*myPlants\\[1\\].list\\[1\\]/.test(code));"}],"description":"<section id=\"description\">\n<p>As we have seen in earlier examples, objects can contain both nested objects and nested arrays. Similar to accessing nested objects, array bracket notation can be chained to access nested arrays.</p>\n<p>Here is an example of how to access a nested array:</p>\n<pre><code class=\"language-js\">const ourPets = [\n  {\n    animalType: \"cat\",\n    names: [\n      \"Meowzer\",\n      \"Fluffy\",\n      \"Kit-Cat\"\n    ]\n  },\n  {\n    animalType: \"dog\",\n    names: [\n      \"Spot\",\n      \"Bowser\",\n      \"Frankie\"\n    ]\n  }\n];\n\nourPets[0].names[1];\nourPets[1].names[0];\n</code></pre>\n<p><code>ourPets[0].names[1]</code> would be the string <code>Fluffy</code>, and <code>ourPets[1].names[0]</code> would be the string <code>Spot</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Using dot and bracket notation, set the variable <code>secondTree</code> to the second item in the <code>trees</code> list from the <code>myPlants</code> object.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":93,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244cc","title":"Accessing Nested Objects","challengeType":1,"videoUrl":"https://scrimba.com/c/cRnRnfa","forumTopicId":16161,"dashedName":"accessing-nested-objects","challengeFiles":[{"head":"","tail":"(function(x) { \n  if(typeof x != 'undefined') { \n    return \"gloveBoxContents = \" + x;\n  }\n  return \"gloveBoxContents is undefined\";\n})(gloveBoxContents);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myStorage = {\n  \"car\": {\n    \"inside\": {\n      \"glove box\": \"maps\",\n      \"passenger seat\": \"crumbs\"\n     },\n    \"outside\": {\n      \"trunk\": \"jack\"\n    }\n  }\n};\n\nconst gloveBoxContents = undefined;","error":null,"seed":"const myStorage = {\n  \"car\": {\n    \"inside\": {\n      \"glove box\": \"maps\",\n      \"passenger seat\": \"crumbs\"\n     },\n    \"outside\": {\n      \"trunk\": \"jack\"\n    }\n  }\n};\n\nconst gloveBoxContents = undefined;"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myStorage = {\n  \"car\":{\n    \"inside\":{\n      \"glove box\":\"maps\",\n      \"passenger seat\":\"crumbs\"\n    },\n    \"outside\":{\n      \"trunk\":\"jack\"\n    }\n  }\n};\nconst gloveBoxContents = myStorage.car.inside[\"glove box\"];","error":null,"seed":"const myStorage = {\n  \"car\":{\n    \"inside\":{\n      \"glove box\":\"maps\",\n      \"passenger seat\":\"crumbs\"\n    },\n    \"outside\":{\n      \"trunk\":\"jack\"\n    }\n  }\n};\nconst gloveBoxContents = myStorage.car.inside[\"glove box\"];"}]],"tests":[{"text":"<p><code>gloveBoxContents</code> should equal the string <code>maps</code>.</p>","testString":"assert(gloveBoxContents === 'maps');"},{"text":"<p>Your code should use dot and bracket notation to access <code>myStorage</code>.</p>","testString":"assert(/=\\s*myStorage\\.car\\.inside\\[\\s*(\"|')glove box\\1\\s*\\]/g.test(code));"}],"description":"<section id=\"description\">\n<p>The sub-properties of objects can be accessed by chaining together the dot or bracket notation.</p>\n<p>Here is a nested object:</p>\n<pre><code class=\"language-js\">const ourStorage = {\n  \"desk\": {\n    \"drawer\": \"stapler\"\n  },\n  \"cabinet\": {\n    \"top drawer\": { \n      \"folder1\": \"a file\",\n      \"folder2\": \"secrets\"\n    },\n    \"bottom drawer\": \"soda\"\n  }\n};\n\nourStorage.cabinet[\"top drawer\"].folder2;\nourStorage.desk.drawer;\n</code></pre>\n<p><code>ourStorage.cabinet[\"top drawer\"].folder2</code> would be the string <code>secrets</code>, and <code>ourStorage.desk.drawer</code> would be the string <code>stapler</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Access the <code>myStorage</code> object and assign the contents of the <code>glove box</code> property to the <code>gloveBoxContents</code> variable. Use dot notation for all properties where possible, otherwise use bracket notation.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":92,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244c8","title":"Accessing Object Properties with Bracket Notation","challengeType":1,"videoUrl":"https://scrimba.com/c/cBvmEHP","forumTopicId":16163,"dashedName":"accessing-object-properties-with-bracket-notation","challengeFiles":[{"head":"","tail":"(function(a,b) { return \"entreeValue = '\" + a + \"', drinkValue = '\" + b + \"'\"; })(entreeValue,drinkValue);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst testObj = {\n  \"an entree\": \"hamburger\",\n  \"my side\": \"veggies\",\n  \"the drink\": \"water\"\n};\n\n// Only change code below this line\nconst entreeValue = testObj;   // Change this line\nconst drinkValue = testObj;    // Change this line","error":null,"seed":"// Setup\nconst testObj = {\n  \"an entree\": \"hamburger\",\n  \"my side\": \"veggies\",\n  \"the drink\": \"water\"\n};\n\n// Only change code below this line\nconst entreeValue = testObj;   // Change this line\nconst drinkValue = testObj;    // Change this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const testObj = {\n  \"an entree\": \"hamburger\",\n  \"my side\": \"veggies\",\n  \"the drink\": \"water\"\n};\nconst entreeValue = testObj[\"an entree\"];\nconst drinkValue = testObj['the drink'];","error":null,"seed":"const testObj = {\n  \"an entree\": \"hamburger\",\n  \"my side\": \"veggies\",\n  \"the drink\": \"water\"\n};\nconst entreeValue = testObj[\"an entree\"];\nconst drinkValue = testObj['the drink'];"}]],"tests":[{"text":"<p><code>entreeValue</code> should be a string</p>","testString":"assert(typeof entreeValue === 'string');"},{"text":"<p>The value of <code>entreeValue</code> should be the string <code>hamburger</code></p>","testString":"assert(entreeValue === 'hamburger');"},{"text":"<p><code>drinkValue</code> should be a string</p>","testString":"assert(typeof drinkValue === 'string');"},{"text":"<p>The value of <code>drinkValue</code> should be the string <code>water</code></p>","testString":"assert(drinkValue === 'water');"},{"text":"<p>You should use bracket notation twice</p>","testString":"assert(code.match(/testObj\\s*?\\[('|\")[^'\"]+\\1\\]/g).length > 1);"}],"description":"<section id=\"description\">\n<p>The second way to access the properties of an object is bracket notation (<code>[]</code>). If the property of the object you are trying to access has a space in its name, you will need to use bracket notation.</p>\n<p>However, you can still use bracket notation on object properties without spaces.</p>\n<p>Here is a sample of using bracket notation to read an object's property:</p>\n<pre><code class=\"language-js\">const myObj = {\n  \"Space Name\": \"Kirk\",\n  \"More Space\": \"Spock\",\n  \"NoSpace\": \"USS Enterprise\"\n};\n\nmyObj[\"Space Name\"];\nmyObj['More Space'];\nmyObj[\"NoSpace\"];\n</code></pre>\n<p><code>myObj[\"Space Name\"]</code> would be the string <code>Kirk</code>, <code>myObj['More Space']</code> would be the string <code>Spock</code>, and <code>myObj[\"NoSpace\"]</code> would be the string <code>USS Enterprise</code>.</p>\n<p>Note that property names with spaces in them must be in quotes (single or double).</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Read the values of the properties <code>an entree</code> and <code>the drink</code> of <code>testObj</code> using bracket notation and assign them to <code>entreeValue</code> and <code>drinkValue</code> respectively.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":84,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244c7","title":"Accessing Object Properties with Dot Notation","challengeType":1,"videoUrl":"https://scrimba.com/c/cGryJs8","forumTopicId":16164,"dashedName":"accessing-object-properties-with-dot-notation","challengeFiles":[{"head":"","tail":"(function(a,b) { return \"hatValue = '\" + a + \"', shirtValue = '\" + b + \"'\"; })(hatValue,shirtValue);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst testObj = {\n  \"hat\": \"ballcap\",\n  \"shirt\": \"jersey\",\n  \"shoes\": \"cleats\"\n};\n\n// Only change code below this line\nconst hatValue = testObj;      // Change this line\nconst shirtValue = testObj;    // Change this line","error":null,"seed":"// Setup\nconst testObj = {\n  \"hat\": \"ballcap\",\n  \"shirt\": \"jersey\",\n  \"shoes\": \"cleats\"\n};\n\n// Only change code below this line\nconst hatValue = testObj;      // Change this line\nconst shirtValue = testObj;    // Change this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const testObj = {\n  \"hat\": \"ballcap\",\n  \"shirt\": \"jersey\",\n  \"shoes\": \"cleats\"\n};\n\nconst hatValue = testObj.hat;\nconst shirtValue = testObj.shirt;","error":null,"seed":"const testObj = {\n  \"hat\": \"ballcap\",\n  \"shirt\": \"jersey\",\n  \"shoes\": \"cleats\"\n};\n\nconst hatValue = testObj.hat;\nconst shirtValue = testObj.shirt;"}]],"tests":[{"text":"<p><code>hatValue</code> should be a string</p>","testString":"assert(typeof hatValue === 'string');"},{"text":"<p>The value of <code>hatValue</code> should be the string <code>ballcap</code></p>","testString":"assert(hatValue === 'ballcap');"},{"text":"<p><code>shirtValue</code> should be a string</p>","testString":"assert(typeof shirtValue === 'string');"},{"text":"<p>The value of <code>shirtValue</code> should be the string <code>jersey</code></p>","testString":"assert(shirtValue === 'jersey');"},{"text":"<p>You should use dot notation twice</p>","testString":"assert(code.match(/testObj\\.\\w+/g).length > 1);"}],"description":"<section id=\"description\">\n<p>There are two ways to access the properties of an object: dot notation (<code>.</code>) and bracket notation (<code>[]</code>), similar to an array.</p>\n<p>Dot notation is what you use when you know the name of the property you're trying to access ahead of time.</p>\n<p>Here is a sample of using dot notation (<code>.</code>) to read an object's property:</p>\n<pre><code class=\"language-js\">const myObj = {\n  prop1: \"val1\",\n  prop2: \"val2\"\n};\n\nconst prop1val = myObj.prop1;\nconst prop2val = myObj.prop2;\n</code></pre>\n<p><code>prop1val</code> would have a value of the string <code>val1</code>, and <code>prop2val</code> would have a value of the string <code>val2</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Read in the property values of <code>testObj</code> using dot notation. Set the variable <code>hatValue</code> equal to the object's property <code>hat</code> and set the variable <code>shirtValue</code> equal to the object's property <code>shirt</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":83,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244c9","title":"Accessing Object Properties with Variables","challengeType":1,"videoUrl":"https://scrimba.com/c/cnQyKur","forumTopicId":16165,"dashedName":"accessing-object-properties-with-variables","challengeFiles":[{"head":"","tail":"if(typeof player !== \"undefined\"){(function(v){return v;})(player);}","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst testObj = {\n  12: \"Namath\",\n  16: \"Montana\",\n  19: \"Unitas\"\n};\n\n// Only change code below this line\nconst playerNumber = 42;  // Change this line\nconst player = testObj;   // Change this line","error":null,"seed":"// Setup\nconst testObj = {\n  12: \"Namath\",\n  16: \"Montana\",\n  19: \"Unitas\"\n};\n\n// Only change code below this line\nconst playerNumber = 42;  // Change this line\nconst player = testObj;   // Change this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const testObj = {\n  12: \"Namath\",\n  16: \"Montana\",\n  19: \"Unitas\"\n};\nconst playerNumber = 16;\nconst player = testObj[playerNumber];","error":null,"seed":"const testObj = {\n  12: \"Namath\",\n  16: \"Montana\",\n  19: \"Unitas\"\n};\nconst playerNumber = 16;\nconst player = testObj[playerNumber];"}]],"tests":[{"text":"<p><code>playerNumber</code> should be a number</p>","testString":"assert(typeof playerNumber === 'number');"},{"text":"<p>The variable <code>player</code> should be a string</p>","testString":"assert(typeof player === 'string');"},{"text":"<p>The value of <code>player</code> should be the string <code>Montana</code></p>","testString":"assert(player === 'Montana');"},{"text":"<p>You should use bracket notation to access <code>testObj</code></p>","testString":"assert(/testObj\\s*?\\[.*?\\]/.test(code));"},{"text":"<p>You should not assign the value <code>Montana</code> to the variable <code>player</code> directly.</p>","testString":"assert(!code.match(/player\\s*=\\s*\"|\\'\\s*Montana\\s*\"|\\'\\s*;/gi));"},{"text":"<p>You should be using the variable <code>playerNumber</code> in your bracket notation</p>","testString":"assert(/testObj\\s*?\\[\\s*playerNumber\\s*\\]/.test(code));"}],"description":"<section id=\"description\">\n<p>Another use of bracket notation on objects is to access a property which is stored as the value of a variable. This can be very useful for iterating through an object's properties or when accessing a lookup table.</p>\n<p>Here is an example of using a variable to access a property:</p>\n<pre><code class=\"language-js\">const dogs = {\n  Fido: \"Mutt\",\n  Hunter: \"Doberman\",\n  Snoopie: \"Beagle\"\n};\n\nconst myDog = \"Hunter\";\nconst myBreed = dogs[myDog];\nconsole.log(myBreed);\n</code></pre>\n<p>The string <code>Doberman</code> would be displayed in the console.</p>\n<p>Note that we do <em>not</em> use quotes around the variable name when using it to access the property because we are using the <em>value</em> of the variable, not the <em>name</em>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Set the <code>playerNumber</code> variable to <code>16</code>. Then, use the variable to look up the player's name and assign it to <code>player</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":85,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56bbb991ad1ed5201cd392d2","title":"Add New Properties to a JavaScript Object","challengeType":1,"videoUrl":"https://scrimba.com/c/cQe38UD","forumTopicId":301169,"dashedName":"add-new-properties-to-a-javascript-object","challengeFiles":[{"head":"","tail":"(function(z){return z;})(myDog);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"]\n};\n\n","error":null,"seed":"const myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"]\n};\n\n"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"]\n};\nmyDog.bark = \"Woof Woof\";","error":null,"seed":"const myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"]\n};\nmyDog.bark = \"Woof Woof\";"}]],"tests":[{"text":"<p>You should add the property <code>bark</code> to <code>myDog</code>.</p>","testString":"assert(myDog.bark !== undefined);"},{"text":"<p>You should not add <code>bark</code> to the initialization of <code>myDog</code>.</p>","testString":"assert(!/bark[^\\n]:/.test(code));"}],"description":"<section id=\"description\">\n<p>You can add new properties to existing JavaScript objects the same way you would modify them.</p>\n<p>Here's how we would add a <code>bark</code> property to <code>ourDog</code>:</p>\n<pre><code class=\"language-js\">ourDog.bark = \"bow-wow\";\n</code></pre>\n<p>or</p>\n<pre><code class=\"language-js\">ourDog[\"bark\"] = \"bow-wow\";\n</code></pre>\n<p>Now when we evaluate <code>ourDog.bark</code>, we'll get his bark, <code>bow-wow</code>.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">const ourDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"]\n};\n\nourDog.bark = \"bow-wow\";\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add a <code>bark</code> property to <code>myDog</code> and set it to a dog sound, such as \"woof\". You may use either dot or bracket notation.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":87,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"cf1111c1c11feddfaeb3bdef","title":"Add Two Numbers with JavaScript","challengeType":1,"videoUrl":"https://scrimba.com/c/cM2KBAG","forumTopicId":16650,"dashedName":"add-two-numbers-with-javascript","challengeFiles":[{"head":"","tail":"(function(z){return 'sum = '+z;})(sum);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const sum = 10 + 0;","error":null,"seed":"const sum = 10 + 0;"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const sum = 10 + 10;","error":null,"seed":"const sum = 10 + 10;"}]],"tests":[{"text":"<p><code>sum</code> should equal <code>20</code>.</p>","testString":"assert(sum === 20);"},{"text":"<p>You should use the <code>+</code> operator.</p>","testString":"assert(/\\+/.test(code));"}],"description":"<section id=\"description\">\n<p><code>Number</code> is a data type in JavaScript which represents numeric data.</p>\n<p>Now let's try to add two numbers using JavaScript.</p>\n<p>JavaScript uses the <code>+</code> symbol as an addition operator when placed between two numbers.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-js\">const myVar = 5 + 10;\n</code></pre>\n<p><code>myVar</code> now has the value <code>15</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the <code>0</code> so that sum will equal <code>20</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":10,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244de","title":"Adding a Default Option in Switch Statements","challengeType":1,"videoUrl":"https://scrimba.com/c/c3JvVfg","forumTopicId":16653,"dashedName":"adding-a-default-option-in-switch-statements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function switchOfStuff(val) {\n  let answer = \"\";\n  // Only change code below this line\n\n\n\n  // Only change code above this line\n  return answer;\n}\n\nswitchOfStuff(1);","error":null,"seed":"function switchOfStuff(val) {\n  let answer = \"\";\n  // Only change code below this line\n\n\n\n  // Only change code above this line\n  return answer;\n}\n\nswitchOfStuff(1);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function switchOfStuff(val) {\n  let answer = \"\";\n\n  switch(val) {\n    case \"a\":\n      answer = \"apple\";\n      break;\n    case \"b\":\n      answer = \"bird\";\n      break;\n    case \"c\":\n      answer = \"cat\";\n      break;\n    default:\n      answer = \"stuff\";\n  }\n  return answer;\n}","error":null,"seed":"function switchOfStuff(val) {\n  let answer = \"\";\n\n  switch(val) {\n    case \"a\":\n      answer = \"apple\";\n      break;\n    case \"b\":\n      answer = \"bird\";\n      break;\n    case \"c\":\n      answer = \"cat\";\n      break;\n    default:\n      answer = \"stuff\";\n  }\n  return answer;\n}"}]],"tests":[{"text":"<p><code>switchOfStuff(\"a\")</code> should return the string <code>apple</code></p>","testString":"assert(switchOfStuff('a') === 'apple');"},{"text":"<p><code>switchOfStuff(\"b\")</code> should return the string <code>bird</code></p>","testString":"assert(switchOfStuff('b') === 'bird');"},{"text":"<p><code>switchOfStuff(\"c\")</code> should return the string <code>cat</code></p>","testString":"assert(switchOfStuff('c') === 'cat');"},{"text":"<p><code>switchOfStuff(\"d\")</code> should return the string <code>stuff</code></p>","testString":"assert(switchOfStuff('d') === 'stuff');"},{"text":"<p><code>switchOfStuff(4)</code> should return the string <code>stuff</code></p>","testString":"assert(switchOfStuff(4) === 'stuff');"},{"text":"<p>You should not use any <code>if</code> or <code>else</code> statements</p>","testString":"assert(!/else/g.test(code) || !/if/g.test(code));"},{"text":"<p>You should use a <code>default</code> statement</p>","testString":"assert(switchOfStuff('string-to-trigger-default-case') === 'stuff');"},{"text":"<p>You should have at least 3 <code>break</code> statements</p>","testString":"assert(code.match(/break/g).length > 2);"}],"description":"<section id=\"description\">\n<p>In a <code>switch</code> statement you may not be able to specify all possible values as <code>case</code> statements. Instead, you can add the <code>default</code> statement which will be executed if no matching <code>case</code> statements are found. Think of it like the final <code>else</code> statement in an <code>if/else</code> chain.</p>\n<p>A <code>default</code> statement should be the last case.</p>\n<pre><code class=\"language-js\">switch (num) {\n  case value1:\n    statement1;\n    break;\n  case value2:\n    statement2;\n    break;\n...\n  default:\n    defaultStatement;\n    break;\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Write a switch statement to set <code>answer</code> for the following conditions:<br>\n<code>a</code> - <code>apple</code><br>\n<code>b</code> - <code>bird</code><br>\n<code>c</code> - <code>cat</code><br>\n<code>default</code> - <code>stuff</code></p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":76,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244ed","title":"Appending Variables to Strings","challengeType":1,"videoUrl":"https://scrimba.com/c/cbQmZfa","forumTopicId":16656,"dashedName":"appending-variables-to-strings","challengeFiles":[{"head":"","tail":"(function(){\n  var output = [];\n  if(typeof someAdjective === 'string') {\n    output.push('someAdjective = \"' + someAdjective + '\"');\n  } else {\n    output.push('someAdjective is not a string');\n  }\n  if(typeof myStr === 'string') {\n    output.push('myStr = \"' + myStr + '\"');\n  } else {\n    output.push('myStr is not a string');\n  }\n  return output.join('\\n');\n})();","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Change code below this line\nconst someAdjective = \"\";\nlet myStr = \"Learning to code is \";","error":null,"seed":"// Change code below this line\nconst someAdjective = \"\";\nlet myStr = \"Learning to code is \";"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const someAdjective = \"neat\";\nlet myStr = \"Learning to code is \";\nmyStr += someAdjective;","error":null,"seed":"const someAdjective = \"neat\";\nlet myStr = \"Learning to code is \";\nmyStr += someAdjective;"}]],"tests":[{"text":"<p><code>someAdjective</code> should be set to a string at least 3 characters long.</p>","testString":"assert(typeof someAdjective !== 'undefined' && someAdjective.length > 2);"},{"text":"<p>You should append <code>someAdjective</code> to <code>myStr</code> using the <code>+=</code> operator.</p>","testString":"assert(code.match(/myStr\\s*\\+=\\s*someAdjective\\s*/).length > 0);"}],"description":"<section id=\"description\">\n<p>Just as we can build a string over multiple lines out of string <dfn>literals</dfn>, we can also append variables to a string using the plus equals (<code>+=</code>) operator.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">const anAdjective = \"awesome!\";\nlet ourStr = \"freeCodeCamp is \";\nourStr += anAdjective;\n</code></pre>\n<p><code>ourStr</code> would have the value <code>freeCodeCamp is awesome!</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Set <code>someAdjective</code> to a string of at least 3 characters and append it to <code>myStr</code> using the <code>+=</code> operator.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":30,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5ee127a03c3b35dd45426493","title":"Assigning the Value of One Variable to Another","challengeType":1,"videoUrl":"","forumTopicId":418265,"dashedName":"assigning-the-value-of-one-variable-to-another","challengeFiles":[{"head":"if (typeof a != 'undefined') {\n  a = undefined;\n}\nif (typeof b != 'undefined') {\n  b = undefined;\n}","tail":"(function(a, b) {\n  return 'a = ' + a + ', b = ' + b;\n})(a, b);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nvar a;\na = 7;\nvar b;\n\n// Only change code below this line","error":null,"seed":"// Setup\nvar a;\na = 7;\nvar b;\n\n// Only change code below this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"var a;\na = 7;\nvar b;\nb = a;","error":null,"seed":"var a;\na = 7;\nvar b;\nb = a;"}]],"tests":[{"text":"<p>You should not change code above the specified comment.</p>","testString":"assert(/var a;/.test(code) && /a = 7;/.test(code) && /var b;/.test(code));"},{"text":"<p><code>b</code> should have a value of <code>7</code>.</p>","testString":"assert(typeof b === 'number' && b === 7);"},{"text":"<p><code>a</code> should be assigned to <code>b</code> with <code>=</code>.</p>","testString":"assert(/b\\s*=\\s*a\\s*/g.test(code));"}],"description":"<section id=\"description\">\n<p>After a value is assigned to a variable using the <dfn>assignment</dfn> operator, you can assign the value of that variable to another variable using the <dfn>assignment</dfn> operator.</p>\n<pre><code class=\"language-js\">var myVar;\nmyVar = 5;\nvar myNum;\nmyNum = myVar;\n</code></pre>\n<p>The above declares a <code>myVar</code> variable with no value, then assigns it the value <code>5</code>. Next, a variable named <code>myNum</code> is declared with no value. Then, the contents of <code>myVar</code> (which is <code>5</code>) is assigned to the variable <code>myNum</code>. Now, <code>myNum</code> also has the value of <code>5</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Assign the contents of <code>a</code> to variable <code>b</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":3,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244c3","title":"Assignment with a Returned Value","challengeType":1,"videoUrl":"https://scrimba.com/c/ce2pEtB","forumTopicId":16658,"dashedName":"assignment-with-a-returned-value","challengeFiles":[{"head":"","tail":"(function(){return \"processed = \" + processed})();","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nlet processed = 0;\n\nfunction processArg(num) {\n  return (num + 3) / 5;\n}\n\n// Only change code below this line\n","error":null,"seed":"// Setup\nlet processed = 0;\n\nfunction processArg(num) {\n  return (num + 3) / 5;\n}\n\n// Only change code below this line\n"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"var processed = 0;\n\nfunction processArg(num) {\n  return (num + 3) / 5;\n}\n\nprocessed = processArg(7);","error":null,"seed":"var processed = 0;\n\nfunction processArg(num) {\n  return (num + 3) / 5;\n}\n\nprocessed = processArg(7);"}]],"tests":[{"text":"<p><code>processed</code> should have a value of <code>2</code></p>","testString":"assert(processed === 2);"},{"text":"<p>You should assign <code>processArg</code> to <code>processed</code></p>","testString":"assert(/processed\\s*=\\s*processArg\\(\\s*7\\s*\\)/.test(code));"}],"description":"<section id=\"description\">\n<p>If you'll recall from our discussion about <a href=\"/learn/javascript-algorithms-and-data-structures/basic-javascript/storing-values-with-the-assignment-operator\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Storing Values with the Assignment Operator</a>, everything to the right of the equal sign is resolved before the value is assigned. This means we can take the return value of a function and assign it to a variable.</p>\n<p>Assume we have pre-defined a function <code>sum</code> which adds two numbers together, then:</p>\n<pre><code class=\"language-js\">ourSum = sum(5, 12);\n</code></pre>\n<p>will call the <code>sum</code> function, which returns a value of <code>17</code> and assigns it to the <code>ourSum</code> variable.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Call the <code>processArg</code> function with an argument of <code>7</code> and assign its return value to the variable <code>processed</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":55,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56bbb991ad1ed5201cd392d0","title":"Build JavaScript Objects","challengeType":1,"videoUrl":"https://scrimba.com/c/cWGkbtd","forumTopicId":16769,"dashedName":"build-javascript-objects","challengeFiles":[{"head":"","tail":"(function(z){return z;})(myDog);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myDog = {\n  // Only change code below this line\n\n\n  // Only change code above this line\n};","error":null,"seed":"const myDog = {\n  // Only change code below this line\n\n\n  // Only change code above this line\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"]\n};","error":null,"seed":"const myDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"]\n};"}]],"tests":[{"text":"<p><code>myDog</code> should contain the property <code>name</code> and it should be a <code>string</code>.</p>","testString":"assert(\n  (function (z) {\n    if (\n      z.hasOwnProperty('name') &&\n      z.name !== undefined &&\n      typeof z.name === 'string'\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myDog)\n);"},{"text":"<p><code>myDog</code> should contain the property <code>legs</code> and it should be a <code>number</code>.</p>","testString":"assert(\n  (function (z) {\n    if (\n      z.hasOwnProperty('legs') &&\n      z.legs !== undefined &&\n      typeof z.legs === 'number'\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myDog)\n);"},{"text":"<p><code>myDog</code> should contain the property <code>tails</code> and it should be a <code>number</code>.</p>","testString":"assert(\n  (function (z) {\n    if (\n      z.hasOwnProperty('tails') &&\n      z.tails !== undefined &&\n      typeof z.tails === 'number'\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myDog)\n);"},{"text":"<p><code>myDog</code> should contain the property <code>friends</code> and it should be an <code>array</code>.</p>","testString":"assert(\n  (function (z) {\n    if (\n      z.hasOwnProperty('friends') &&\n      z.friends !== undefined &&\n      Array.isArray(z.friends)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myDog)\n);"},{"text":"<p><code>myDog</code> should only contain all the given properties.</p>","testString":"assert(\n  (function (z) {\n    return Object.keys(z).length === 4;\n  })(myDog)\n);"}],"description":"<section id=\"description\">\n<p>You may have heard the term <code>object</code> before.</p>\n<p>Objects are similar to <code>arrays</code>, except that instead of using indexes to access and modify their data, you access the data in objects through what are called <code>properties</code>.</p>\n<p>Objects are useful for storing data in a structured way, and can represent real world objects, like a cat.</p>\n<p>Here's a sample cat object:</p>\n<pre><code class=\"language-js\">const cat = {\n  \"name\": \"Whiskers\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"enemies\": [\"Water\", \"Dogs\"]\n};\n</code></pre>\n<p>In this example, all the properties are stored as strings, such as <code>name</code>, <code>legs</code>, and <code>tails</code>. However, you can also use numbers as properties. You can even omit the quotes for single-word string properties, as follows:</p>\n<pre><code class=\"language-js\">const anotherObject = {\n  make: \"Ford\",\n  5: \"five\",\n  \"model\": \"focus\"\n};\n</code></pre>\n<p>However, if your object has any non-string properties, JavaScript will automatically typecast them as strings.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Make an object that represents a dog called <code>myDog</code> which contains the properties <code>name</code> (a string), <code>legs</code>, <code>tails</code> and <code>friends</code>.</p>\n<p>You can set these object properties to whatever values you want, as long as <code>name</code> is a string, <code>legs</code> and <code>tails</code> are numbers, and <code>friends</code> is an array.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":82,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244dc","title":"Chaining If Else Statements","challengeType":1,"videoUrl":"https://scrimba.com/c/caeJgsw","forumTopicId":16772,"dashedName":"chaining-if-else-statements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testSize(num) {\n  // Only change code below this line\n\n\n  return \"Change Me\";\n  // Only change code above this line\n}\n\ntestSize(7);","error":null,"seed":"function testSize(num) {\n  // Only change code below this line\n\n\n  return \"Change Me\";\n  // Only change code above this line\n}\n\ntestSize(7);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testSize(num) {\n  if (num < 5) {\n    return \"Tiny\";\n  } else if (num < 10) {\n    return \"Small\";\n  } else if (num < 15) {\n    return \"Medium\";\n  } else if (num < 20) {\n    return \"Large\";\n  } else {\n    return \"Huge\";\n  }\n}","error":null,"seed":"function testSize(num) {\n  if (num < 5) {\n    return \"Tiny\";\n  } else if (num < 10) {\n    return \"Small\";\n  } else if (num < 15) {\n    return \"Medium\";\n  } else if (num < 20) {\n    return \"Large\";\n  } else {\n    return \"Huge\";\n  }\n}"}]],"tests":[{"text":"<p>You should have at least four <code>else</code> statements</p>","testString":"assert(code.match(/else/g).length > 3);"},{"text":"<p>You should have at least four <code>if</code> statements</p>","testString":"assert(code.match(/if/g).length > 3);"},{"text":"<p>You should have at least one <code>return</code> statement</p>","testString":"assert(code.match(/return/g).length >= 1);"},{"text":"<p><code>testSize(0)</code> should return the string <code>Tiny</code></p>","testString":"assert(testSize(0) === 'Tiny');"},{"text":"<p><code>testSize(4)</code> should return the string <code>Tiny</code></p>","testString":"assert(testSize(4) === 'Tiny');"},{"text":"<p><code>testSize(5)</code> should return the string <code>Small</code></p>","testString":"assert(testSize(5) === 'Small');"},{"text":"<p><code>testSize(8)</code> should return the string <code>Small</code></p>","testString":"assert(testSize(8) === 'Small');"},{"text":"<p><code>testSize(10)</code> should return the string <code>Medium</code></p>","testString":"assert(testSize(10) === 'Medium');"},{"text":"<p><code>testSize(14)</code> should return the string <code>Medium</code></p>","testString":"assert(testSize(14) === 'Medium');"},{"text":"<p><code>testSize(15)</code> should return the string <code>Large</code></p>","testString":"assert(testSize(15) === 'Large');"},{"text":"<p><code>testSize(17)</code> should return the string <code>Large</code></p>","testString":"assert(testSize(17) === 'Large');"},{"text":"<p><code>testSize(20)</code> should return the string <code>Huge</code></p>","testString":"assert(testSize(20) === 'Huge');"},{"text":"<p><code>testSize(25)</code> should return the string <code>Huge</code></p>","testString":"assert(testSize(25) === 'Huge');"}],"description":"<section id=\"description\">\n<p><code>if/else</code> statements can be chained together for complex logic. Here is <dfn>pseudocode</dfn> of multiple chained <code>if</code> / <code>else if</code> statements:</p>\n<pre><code class=\"language-js\">if (condition1) {\n  statement1\n} else if (condition2) {\n  statement2\n} else if (condition3) {\n  statement3\n. . .\n} else {\n  statementN\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Write chained <code>if</code>/<code>else if</code> statements to fulfill the following conditions:</p>\n<p><code>num &#x3C; 5</code> - return <code>Tiny</code><br>\n<code>num &#x3C; 10</code> - return <code>Small</code><br>\n<code>num &#x3C; 15</code> - return <code>Medium</code><br>\n<code>num &#x3C; 20</code> - return <code>Large</code><br>\n<code>num >= 20</code> - return <code>Huge</code></p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":73,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"bd7123c9c441eddfaeb4bdef","title":"Comment Your JavaScript Code","challengeType":1,"removeComments":false,"videoUrl":"https://scrimba.com/c/c7ynnTp","forumTopicId":16783,"dashedName":"comment-your-javascript-code","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"","error":null,"seed":""}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Fake Comment\n/* Another Comment */","error":null,"seed":"// Fake Comment\n/* Another Comment */"}]],"tests":[{"text":"<p>You should create a <code>//</code> style comment that contains at least five letters.</p>","testString":"assert(code.match(/(\\/\\/)...../g));"},{"text":"<p>You should create a <code>/* */</code> style comment that contains at least five letters.</p>","testString":"assert(code.match(/(\\/\\*)([^\\/]{5,})(?=\\*\\/)/gm));"}],"description":"<section id=\"description\">\n<p>Comments are lines of code that JavaScript will intentionally ignore. Comments are a great way to leave notes to yourself and to other people who will later need to figure out what that code does.</p>\n<p>There are two ways to write comments in JavaScript:</p>\n<p>Using <code>//</code> will tell JavaScript to ignore the remainder of the text on the current line. This is an in-line comment:</p>\n<pre><code class=\"language-js\">// This is an in-line comment.\n</code></pre>\n<p>You can make a multi-line comment beginning with <code>/*</code> and ending with <code>*/</code>. This is a multi-line comment:</p>\n<pre><code class=\"language-js\">/* This is a\nmulti-line comment */\n</code></pre>\n<p><strong>NOTE:</strong> As you write code, you should regularly add comments to clarify the function of parts of your code. Good commenting can help communicate the intent of your code—both for others <em>and</em> for your future self.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Try creating one of each type of comment.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":0,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244d0","title":"Comparison with the Equality Operator","challengeType":1,"videoUrl":"https://scrimba.com/c/cKyVMAL","forumTopicId":16784,"dashedName":"comparison-with-the-equality-operator","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nfunction testEqual(val) {\n  if (val) { // Change this line\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}\n\ntestEqual(10);","error":null,"seed":"// Setup\nfunction testEqual(val) {\n  if (val) { // Change this line\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}\n\ntestEqual(10);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testEqual(val) {\n  if (val == 12) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}","error":null,"seed":"function testEqual(val) {\n  if (val == 12) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}"}]],"tests":[{"text":"<p><code>testEqual(10)</code> should return the string <code>Not Equal</code></p>","testString":"assert(testEqual(10) === 'Not Equal');"},{"text":"<p><code>testEqual(12)</code> should return the string <code>Equal</code></p>","testString":"assert(testEqual(12) === 'Equal');"},{"text":"<p><code>testEqual(\"12\")</code> should return the string <code>Equal</code></p>","testString":"assert(testEqual('12') === 'Equal');"},{"text":"<p>You should use the <code>==</code> operator</p>","testString":"assert(code.match(/==/g) && !code.match(/===/g));"}],"description":"<section id=\"description\">\n<p>There are many <dfn>comparison operators</dfn> in JavaScript. All of these operators return a boolean <code>true</code> or <code>false</code> value.</p>\n<p>The most basic operator is the equality operator <code>==</code>. The equality operator compares two values and returns <code>true</code> if they're equivalent or <code>false</code> if they are not. Note that equality is different from assignment (<code>=</code>), which assigns the value on the right of the operator to a variable on the left.</p>\n<pre><code class=\"language-js\">function equalityTest(myVal) {\n  if (myVal == 10) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}\n</code></pre>\n<p>If <code>myVal</code> is equal to <code>10</code>, the equality operator returns <code>true</code>, so the code in the curly braces will execute, and the function will return <code>Equal</code>. Otherwise, the function will return <code>Not Equal</code>. In order for JavaScript to compare two different <dfn>data types</dfn> (for example, <code>numbers</code> and <code>strings</code>), it must convert one type to another. This is known as Type Coercion. Once it does, however, it can compare terms as follows:</p>\n<pre><code class=\"language-js\">1   ==  1  // true\n1   ==  2  // false\n1   == '1' // true\n\"3\" ==  3  // true\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the equality operator to the indicated line so that the function will return the string <code>Equal</code> when <code>val</code> is equivalent to <code>12</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":59,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244d4","title":"Comparison with the Greater Than Operator","challengeType":1,"videoUrl":"https://scrimba.com/c/cp6GbH4","forumTopicId":16786,"dashedName":"comparison-with-the-greater-than-operator","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testGreaterThan(val) {\n  if (val) {  // Change this line\n    return \"Over 100\";\n  }\n\n  if (val) {  // Change this line\n    return \"Over 10\";\n  }\n\n  return \"10 or Under\";\n}\n\ntestGreaterThan(10);","error":null,"seed":"function testGreaterThan(val) {\n  if (val) {  // Change this line\n    return \"Over 100\";\n  }\n\n  if (val) {  // Change this line\n    return \"Over 10\";\n  }\n\n  return \"10 or Under\";\n}\n\ntestGreaterThan(10);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testGreaterThan(val) {\n  if (val > 100) {  // Change this line\n    return \"Over 100\";\n  }\n  if (val > 10) {  // Change this line\n    return \"Over 10\";\n  }\n  return \"10 or Under\";\n}","error":null,"seed":"function testGreaterThan(val) {\n  if (val > 100) {  // Change this line\n    return \"Over 100\";\n  }\n  if (val > 10) {  // Change this line\n    return \"Over 10\";\n  }\n  return \"10 or Under\";\n}"}]],"tests":[{"text":"<p><code>testGreaterThan(0)</code> should return the string <code>10 or Under</code></p>","testString":"assert(testGreaterThan(0) === '10 or Under');"},{"text":"<p><code>testGreaterThan(10)</code> should return the string <code>10 or Under</code></p>","testString":"assert(testGreaterThan(10) === '10 or Under');"},{"text":"<p><code>testGreaterThan(11)</code> should return the string <code>Over 10</code></p>","testString":"assert(testGreaterThan(11) === 'Over 10');"},{"text":"<p><code>testGreaterThan(99)</code> should return the string <code>Over 10</code></p>","testString":"assert(testGreaterThan(99) === 'Over 10');"},{"text":"<p><code>testGreaterThan(100)</code> should return the string <code>Over 10</code></p>","testString":"assert(testGreaterThan(100) === 'Over 10');"},{"text":"<p><code>testGreaterThan(101)</code> should return the string <code>Over 100</code></p>","testString":"assert(testGreaterThan(101) === 'Over 100');"},{"text":"<p><code>testGreaterThan(150)</code> should return the string <code>Over 100</code></p>","testString":"assert(testGreaterThan(150) === 'Over 100');"},{"text":"<p>You should use the <code>></code> operator at least twice</p>","testString":"assert(code.match(/val\\s*>\\s*('|\")*\\d+('|\")*/g).length > 1);"}],"description":"<section id=\"description\">\n<p>The greater than operator (<code>></code>) compares the values of two numbers. If the number to the left is greater than the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>.</p>\n<p>Like the equality operator, the greater than operator will convert data types of values while comparing.</p>\n<p><strong>Examples</strong></p>\n<pre><code class=\"language-js\">5   >  3  // true\n7   > '3' // true\n2   >  3  // false\n'1' >  9  // false\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the greater than operator to the indicated lines so that the return statements make sense.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":64,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244d5","title":"Comparison with the Greater Than Or Equal To Operator","challengeType":1,"videoUrl":"https://scrimba.com/c/c6KBqtV","forumTopicId":16785,"dashedName":"comparison-with-the-greater-than-or-equal-to-operator","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testGreaterOrEqual(val) {\n  if (val) {  // Change this line\n    return \"20 or Over\";\n  }\n\n  if (val) {  // Change this line\n    return \"10 or Over\";\n  }\n\n  return \"Less than 10\";\n}\n\ntestGreaterOrEqual(10);","error":null,"seed":"function testGreaterOrEqual(val) {\n  if (val) {  // Change this line\n    return \"20 or Over\";\n  }\n\n  if (val) {  // Change this line\n    return \"10 or Over\";\n  }\n\n  return \"Less than 10\";\n}\n\ntestGreaterOrEqual(10);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testGreaterOrEqual(val) {\n  if (val >= 20) {  // Change this line\n    return \"20 or Over\";\n  }\n\n  if (val >= 10) {  // Change this line\n    return \"10 or Over\";\n  }\n\n  return \"Less than 10\";\n}","error":null,"seed":"function testGreaterOrEqual(val) {\n  if (val >= 20) {  // Change this line\n    return \"20 or Over\";\n  }\n\n  if (val >= 10) {  // Change this line\n    return \"10 or Over\";\n  }\n\n  return \"Less than 10\";\n}"}]],"tests":[{"text":"<p><code>testGreaterOrEqual(0)</code> should return the string <code>Less than 10</code></p>","testString":"assert(testGreaterOrEqual(0) === 'Less than 10');"},{"text":"<p><code>testGreaterOrEqual(9)</code> should return the string <code>Less than 10</code></p>","testString":"assert(testGreaterOrEqual(9) === 'Less than 10');"},{"text":"<p><code>testGreaterOrEqual(10)</code> should return the string <code>10 or Over</code></p>","testString":"assert(testGreaterOrEqual(10) === '10 or Over');"},{"text":"<p><code>testGreaterOrEqual(11)</code> should return the string <code>10 or Over</code></p>","testString":"assert(testGreaterOrEqual(11) === '10 or Over');"},{"text":"<p><code>testGreaterOrEqual(19)</code> should return the string <code>10 or Over</code></p>","testString":"assert(testGreaterOrEqual(19) === '10 or Over');"},{"text":"<p><code>testGreaterOrEqual(100)</code> should return the string <code>20 or Over</code></p>","testString":"assert(testGreaterOrEqual(100) === '20 or Over');"},{"text":"<p><code>testGreaterOrEqual(21)</code> should return the string <code>20 or Over</code></p>","testString":"assert(testGreaterOrEqual(21) === '20 or Over');"},{"text":"<p>You should use the <code>>=</code> operator at least twice</p>","testString":"assert(code.match(/val\\s*>=\\s*('|\")*\\d+('|\")*/g).length > 1);"}],"description":"<section id=\"description\">\n<p>The greater than or equal to operator (<code>>=</code>) compares the values of two numbers. If the number to the left is greater than or equal to the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>.</p>\n<p>Like the equality operator, the greater than or equal to operator will convert data types while comparing.</p>\n<p><strong>Examples</strong></p>\n<pre><code class=\"language-js\">6   >=  6  // true\n7   >= '3' // true\n2   >=  3  // false\n'7' >=  9  // false\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the greater than or equal to operator to the indicated lines so that the return statements make sense.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":65,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244d2","title":"Comparison with the Inequality Operator","challengeType":1,"videoUrl":"https://scrimba.com/c/cdBm9Sr","forumTopicId":16787,"dashedName":"comparison-with-the-inequality-operator","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nfunction testNotEqual(val) {\n  if (val) { // Change this line\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}\n\ntestNotEqual(10);","error":null,"seed":"// Setup\nfunction testNotEqual(val) {\n  if (val) { // Change this line\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}\n\ntestNotEqual(10);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testNotEqual(val) {\n  if (val != 99) {\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}","error":null,"seed":"function testNotEqual(val) {\n  if (val != 99) {\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}"}]],"tests":[{"text":"<p><code>testNotEqual(99)</code> should return the string <code>Equal</code></p>","testString":"assert(testNotEqual(99) === 'Equal');"},{"text":"<p><code>testNotEqual(\"99\")</code> should return the string <code>Equal</code></p>","testString":"assert(testNotEqual('99') === 'Equal');"},{"text":"<p><code>testNotEqual(12)</code> should return the string <code>Not Equal</code></p>","testString":"assert(testNotEqual(12) === 'Not Equal');"},{"text":"<p><code>testNotEqual(\"12\")</code> should return the string <code>Not Equal</code></p>","testString":"assert(testNotEqual('12') === 'Not Equal');"},{"text":"<p><code>testNotEqual(\"bob\")</code> should return the string <code>Not Equal</code></p>","testString":"assert(testNotEqual('bob') === 'Not Equal');"},{"text":"<p>You should use the <code>!=</code> operator</p>","testString":"assert(code.match(/(?!!==)!=/));"}],"description":"<section id=\"description\">\n<p>The inequality operator (<code>!=</code>) is the opposite of the equality operator. It means not equal and returns <code>false</code> where equality would return <code>true</code> and <em>vice versa</em>. Like the equality operator, the inequality operator will convert data types of values while comparing.</p>\n<p><strong>Examples</strong></p>\n<pre><code class=\"language-js\">1 !=  2    // true\n1 != \"1\"   // false\n1 != '1'   // false\n1 != true  // false\n0 != false // false\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the inequality operator <code>!=</code> in the <code>if</code> statement so that the function will return the string <code>Not Equal</code> when <code>val</code> is not equivalent to <code>99</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":62,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244d6","title":"Comparison with the Less Than Operator","challengeType":1,"videoUrl":"https://scrimba.com/c/cNVRWtB","forumTopicId":16789,"dashedName":"comparison-with-the-less-than-operator","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testLessThan(val) {\n  if (val) {  // Change this line\n    return \"Under 25\";\n  }\n\n  if (val) {  // Change this line\n    return \"Under 55\";\n  }\n\n  return \"55 or Over\";\n}\n\ntestLessThan(10);","error":null,"seed":"function testLessThan(val) {\n  if (val) {  // Change this line\n    return \"Under 25\";\n  }\n\n  if (val) {  // Change this line\n    return \"Under 55\";\n  }\n\n  return \"55 or Over\";\n}\n\ntestLessThan(10);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testLessThan(val) {\n  if (val < 25) {  // Change this line\n    return \"Under 25\";\n  }\n\n  if (val < 55) {  // Change this line\n    return \"Under 55\";\n  }\n\n  return \"55 or Over\";\n}","error":null,"seed":"function testLessThan(val) {\n  if (val < 25) {  // Change this line\n    return \"Under 25\";\n  }\n\n  if (val < 55) {  // Change this line\n    return \"Under 55\";\n  }\n\n  return \"55 or Over\";\n}"}]],"tests":[{"text":"<p><code>testLessThan(0)</code> should return the string <code>Under 25</code></p>","testString":"assert(testLessThan(0) === 'Under 25');"},{"text":"<p><code>testLessThan(24)</code> should return the string <code>Under 25</code></p>","testString":"assert(testLessThan(24) === 'Under 25');"},{"text":"<p><code>testLessThan(25)</code> should return the string <code>Under 55</code></p>","testString":"assert(testLessThan(25) === 'Under 55');"},{"text":"<p><code>testLessThan(54)</code> should return the string <code>Under 55</code></p>","testString":"assert(testLessThan(54) === 'Under 55');"},{"text":"<p><code>testLessThan(55)</code> should return the string <code>55 or Over</code></p>","testString":"assert(testLessThan(55) === '55 or Over');"},{"text":"<p><code>testLessThan(99)</code> should return the string <code>55 or Over</code></p>","testString":"assert(testLessThan(99) === '55 or Over');"},{"text":"<p>You should use the <code>&#x3C;</code> operator at least twice</p>","testString":"assert(code.match(/val\\s*<\\s*('|\")*\\d+('|\")*/g).length > 1);"}],"description":"<section id=\"description\">\n<p>The less than operator (<code>&#x3C;</code>) compares the values of two numbers. If the number to the left is less than the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>. Like the equality operator, the less than operator converts data types while comparing.</p>\n<p><strong>Examples</strong></p>\n<pre><code class=\"language-js\">2   &#x3C; 5 // true\n'3' &#x3C; 7 // true\n5   &#x3C; 5 // false\n3   &#x3C; 2 // false\n'8' &#x3C; 4 // false\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the less than operator to the indicated lines so that the return statements make sense.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":66,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244d7","title":"Comparison with the Less Than Or Equal To Operator","challengeType":1,"videoUrl":"https://scrimba.com/c/cNVR7Am","forumTopicId":16788,"dashedName":"comparison-with-the-less-than-or-equal-to-operator","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testLessOrEqual(val) {\n  if (val) {  // Change this line\n    return \"Smaller Than or Equal to 12\";\n  }\n\n  if (val) {  // Change this line\n    return \"Smaller Than or Equal to 24\";\n  }\n\n  return \"More Than 24\";\n}\n\ntestLessOrEqual(10);","error":null,"seed":"function testLessOrEqual(val) {\n  if (val) {  // Change this line\n    return \"Smaller Than or Equal to 12\";\n  }\n\n  if (val) {  // Change this line\n    return \"Smaller Than or Equal to 24\";\n  }\n\n  return \"More Than 24\";\n}\n\ntestLessOrEqual(10);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testLessOrEqual(val) {\n  if (val <= 12) {  // Change this line\n    return \"Smaller Than or Equal to 12\";\n  }\n\n  if (val <= 24) {  // Change this line\n    return \"Smaller Than or Equal to 24\";\n  }\n\n  return \"More Than 24\";\n}","error":null,"seed":"function testLessOrEqual(val) {\n  if (val <= 12) {  // Change this line\n    return \"Smaller Than or Equal to 12\";\n  }\n\n  if (val <= 24) {  // Change this line\n    return \"Smaller Than or Equal to 24\";\n  }\n\n  return \"More Than 24\";\n}"}]],"tests":[{"text":"<p><code>testLessOrEqual(0)</code> should return the string <code>Smaller Than or Equal to 12</code></p>","testString":"assert(testLessOrEqual(0) === 'Smaller Than or Equal to 12');"},{"text":"<p><code>testLessOrEqual(11)</code> should return the string <code>Smaller Than or Equal to 12</code></p>","testString":"assert(testLessOrEqual(11) === 'Smaller Than or Equal to 12');"},{"text":"<p><code>testLessOrEqual(12)</code> should return the string <code>Smaller Than or Equal to 12</code></p>","testString":"assert(testLessOrEqual(12) === 'Smaller Than or Equal to 12');"},{"text":"<p><code>testLessOrEqual(23)</code> should return the string <code>Smaller Than or Equal to 24</code></p>","testString":"assert(testLessOrEqual(23) === 'Smaller Than or Equal to 24');"},{"text":"<p><code>testLessOrEqual(24)</code> should return the string <code>Smaller Than or Equal to 24</code></p>","testString":"assert(testLessOrEqual(24) === 'Smaller Than or Equal to 24');"},{"text":"<p><code>testLessOrEqual(25)</code> should return the string <code>More Than 24</code></p>","testString":"assert(testLessOrEqual(25) === 'More Than 24');"},{"text":"<p><code>testLessOrEqual(55)</code> should return the string <code>More Than 24</code></p>","testString":"assert(testLessOrEqual(55) === 'More Than 24');"},{"text":"<p>You should use the <code>&#x3C;=</code> operator at least twice</p>","testString":"assert(code.match(/val\\s*<=\\s*('|\")*\\d+('|\")*/g).length > 1);"}],"description":"<section id=\"description\">\n<p>The less than or equal to operator (<code>&#x3C;=</code>) compares the values of two numbers. If the number to the left is less than or equal to the number to the right, it returns <code>true</code>. If the number on the left is greater than the number on the right, it returns <code>false</code>. Like the equality operator, the less than or equal to operator converts data types.</p>\n<p><strong>Examples</strong></p>\n<pre><code class=\"language-js\">4   &#x3C;= 5 // true\n'7' &#x3C;= 7 // true\n5   &#x3C;= 5 // true\n3   &#x3C;= 2 // false\n'8' &#x3C;= 4 // false\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the less than or equal to operator to the indicated lines so that the return statements make sense.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":67,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244d1","title":"Comparison with the Strict Equality Operator","challengeType":1,"videoUrl":"https://scrimba.com/c/cy87atr","forumTopicId":16790,"dashedName":"comparison-with-the-strict-equality-operator","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nfunction testStrict(val) {\n  if (val) { // Change this line\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}\n\ntestStrict(10);","error":null,"seed":"// Setup\nfunction testStrict(val) {\n  if (val) { // Change this line\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}\n\ntestStrict(10);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testStrict(val) {\n  if (val === 7) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}","error":null,"seed":"function testStrict(val) {\n  if (val === 7) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}"}]],"tests":[{"text":"<p><code>testStrict(10)</code> should return the string <code>Not Equal</code></p>","testString":"assert(testStrict(10) === 'Not Equal');"},{"text":"<p><code>testStrict(7)</code> should return the string <code>Equal</code></p>","testString":"assert(testStrict(7) === 'Equal');"},{"text":"<p><code>testStrict(\"7\")</code> should return the string <code>Not Equal</code></p>","testString":"assert(testStrict('7') === 'Not Equal');"},{"text":"<p>You should use the <code>===</code> operator</p>","testString":"assert(code.match(/(val\\s*===\\s*\\d+)|(\\d+\\s*===\\s*val)/g).length > 0);"}],"description":"<section id=\"description\">\n<p>Strict equality (<code>===</code>) is the counterpart to the equality operator (<code>==</code>). However, unlike the equality operator, which attempts to convert both values being compared to a common type, the strict equality operator does not perform a type conversion.</p>\n<p>If the values being compared have different types, they are considered unequal, and the strict equality operator will return false.</p>\n<p><strong>Examples</strong></p>\n<pre><code class=\"language-js\">3 ===  3  // true\n3 === '3' // false\n</code></pre>\n<p>In the second example, <code>3</code> is a <code>Number</code> type and <code>'3'</code> is a <code>String</code> type.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the strict equality operator in the <code>if</code> statement so the function will return the string <code>Equal</code> when <code>val</code> is strictly equal to <code>7</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":60,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244d3","title":"Comparison with the Strict Inequality Operator","challengeType":1,"videoUrl":"https://scrimba.com/c/cKekkUy","forumTopicId":16791,"dashedName":"comparison-with-the-strict-inequality-operator","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nfunction testStrictNotEqual(val) {\n  if (val) { // Change this line\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}\n\ntestStrictNotEqual(10);","error":null,"seed":"// Setup\nfunction testStrictNotEqual(val) {\n  if (val) { // Change this line\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}\n\ntestStrictNotEqual(10);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testStrictNotEqual(val) {\n  if (val !== 17) {\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}","error":null,"seed":"function testStrictNotEqual(val) {\n  if (val !== 17) {\n    return \"Not Equal\";\n  }\n  return \"Equal\";\n}"}]],"tests":[{"text":"<p><code>testStrictNotEqual(17)</code> should return the string <code>Equal</code></p>","testString":"assert(testStrictNotEqual(17) === 'Equal');"},{"text":"<p><code>testStrictNotEqual(\"17\")</code> should return the string <code>Not Equal</code></p>","testString":"assert(testStrictNotEqual('17') === 'Not Equal');"},{"text":"<p><code>testStrictNotEqual(12)</code> should return the string <code>Not Equal</code></p>","testString":"assert(testStrictNotEqual(12) === 'Not Equal');"},{"text":"<p><code>testStrictNotEqual(\"bob\")</code> should return the string <code>Not Equal</code></p>","testString":"assert(testStrictNotEqual('bob') === 'Not Equal');"},{"text":"<p>You should use the <code>!==</code> operator</p>","testString":"assert(code.match(/(val\\s*!==\\s*\\d+)|(\\d+\\s*!==\\s*val)/g).length > 0);"}],"description":"<section id=\"description\">\n<p>The strict inequality operator (<code>!==</code>) is the logical opposite of the strict equality operator. It means \"Strictly Not Equal\" and returns <code>false</code> where strict equality would return <code>true</code> and <em>vice versa</em>. The strict inequality operator will not convert data types.</p>\n<p><strong>Examples</strong></p>\n<pre><code class=\"language-js\">3 !==  3  // false\n3 !== '3' // true\n4 !==  3  // true\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the strict inequality operator to the <code>if</code> statement so the function will return the string <code>Not Equal</code> when <code>val</code> is not strictly equal to <code>17</code></p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":63,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244d8","title":"Comparisons with the Logical And Operator","challengeType":1,"videoUrl":"https://scrimba.com/c/cvbRVtr","forumTopicId":16799,"dashedName":"comparisons-with-the-logical-and-operator","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testLogicalAnd(val) {\n  // Only change code below this line\n\n  if (val) {\n    if (val) {\n      return \"Yes\";\n    }\n  }\n\n  // Only change code above this line\n  return \"No\";\n}\n\ntestLogicalAnd(10);","error":null,"seed":"function testLogicalAnd(val) {\n  // Only change code below this line\n\n  if (val) {\n    if (val) {\n      return \"Yes\";\n    }\n  }\n\n  // Only change code above this line\n  return \"No\";\n}\n\ntestLogicalAnd(10);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testLogicalAnd(val) {\n  if (val >= 25 && val <= 50) {\n    return \"Yes\";\n  }\n  return \"No\";\n}","error":null,"seed":"function testLogicalAnd(val) {\n  if (val >= 25 && val <= 50) {\n    return \"Yes\";\n  }\n  return \"No\";\n}"}]],"tests":[{"text":"<p>You should use the <code>&#x26;&#x26;</code> operator once</p>","testString":"assert(code.match(/&&/g).length === 1);"},{"text":"<p>You should only have one <code>if</code> statement</p>","testString":"assert(code.match(/if/g).length === 1);"},{"text":"<p><code>testLogicalAnd(0)</code> should return the string <code>No</code></p>","testString":"assert(testLogicalAnd(0) === 'No');"},{"text":"<p><code>testLogicalAnd(24)</code> should return the string <code>No</code></p>","testString":"assert(testLogicalAnd(24) === 'No');"},{"text":"<p><code>testLogicalAnd(25)</code> should return the string <code>Yes</code></p>","testString":"assert(testLogicalAnd(25) === 'Yes');"},{"text":"<p><code>testLogicalAnd(30)</code> should return the string <code>Yes</code></p>","testString":"assert(testLogicalAnd(30) === 'Yes');"},{"text":"<p><code>testLogicalAnd(50)</code> should return the string <code>Yes</code></p>","testString":"assert(testLogicalAnd(50) === 'Yes');"},{"text":"<p><code>testLogicalAnd(51)</code> should return the string <code>No</code></p>","testString":"assert(testLogicalAnd(51) === 'No');"},{"text":"<p><code>testLogicalAnd(75)</code> should return the string <code>No</code></p>","testString":"assert(testLogicalAnd(75) === 'No');"},{"text":"<p><code>testLogicalAnd(80)</code> should return the string <code>No</code></p>","testString":"assert(testLogicalAnd(80) === 'No');"}],"description":"<section id=\"description\">\n<p>Sometimes you will need to test more than one thing at a time. The <dfn>logical and</dfn> operator (<code>&#x26;&#x26;</code>) returns <code>true</code> if and only if the <dfn>operands</dfn> to the left and right of it are true.</p>\n<p>The same effect could be achieved by nesting an if statement inside another if:</p>\n<pre><code class=\"language-js\">if (num > 5) {\n  if (num &#x3C; 10) {\n    return \"Yes\";\n  }\n}\nreturn \"No\";\n</code></pre>\n<p>will only return <code>Yes</code> if <code>num</code> is greater than <code>5</code> and less than <code>10</code>. The same logic can be written as:</p>\n<pre><code class=\"language-js\">if (num > 5 &#x26;&#x26; num &#x3C; 10) {\n  return \"Yes\";\n}\nreturn \"No\";\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Replace the two if statements with one statement, using the <code>&#x26;&#x26;</code> operator, which will return the string <code>Yes</code> if <code>val</code> is less than or equal to <code>50</code> and greater than or equal to <code>25</code>. Otherwise, will return the string <code>No</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":68,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244d9","title":"Comparisons with the Logical Or Operator","challengeType":1,"videoUrl":"https://scrimba.com/c/cEPrGTN","forumTopicId":16800,"dashedName":"comparisons-with-the-logical-or-operator","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testLogicalOr(val) {\n  // Only change code below this line\n\n  if (val) {\n    return \"Outside\";\n  }\n\n  if (val) {\n    return \"Outside\";\n  }\n\n  // Only change code above this line\n  return \"Inside\";\n}\n\ntestLogicalOr(15);","error":null,"seed":"function testLogicalOr(val) {\n  // Only change code below this line\n\n  if (val) {\n    return \"Outside\";\n  }\n\n  if (val) {\n    return \"Outside\";\n  }\n\n  // Only change code above this line\n  return \"Inside\";\n}\n\ntestLogicalOr(15);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testLogicalOr(val) {\n  if (val < 10 || val > 20) {\n    return \"Outside\";\n  }\n  return \"Inside\";\n}","error":null,"seed":"function testLogicalOr(val) {\n  if (val < 10 || val > 20) {\n    return \"Outside\";\n  }\n  return \"Inside\";\n}"}]],"tests":[{"text":"<p>You should use the <code>||</code> operator once</p>","testString":"assert(code.match(/\\|\\|/g).length === 1);"},{"text":"<p>You should only have one <code>if</code> statement</p>","testString":"assert(code.match(/if/g).length === 1);"},{"text":"<p><code>testLogicalOr(0)</code> should return the string <code>Outside</code></p>","testString":"assert(testLogicalOr(0) === 'Outside');"},{"text":"<p><code>testLogicalOr(9)</code> should return the string <code>Outside</code></p>","testString":"assert(testLogicalOr(9) === 'Outside');"},{"text":"<p><code>testLogicalOr(10)</code> should return the string <code>Inside</code></p>","testString":"assert(testLogicalOr(10) === 'Inside');"},{"text":"<p><code>testLogicalOr(15)</code> should return the string <code>Inside</code></p>","testString":"assert(testLogicalOr(15) === 'Inside');"},{"text":"<p><code>testLogicalOr(19)</code> should return the string <code>Inside</code></p>","testString":"assert(testLogicalOr(19) === 'Inside');"},{"text":"<p><code>testLogicalOr(20)</code> should return the string <code>Inside</code></p>","testString":"assert(testLogicalOr(20) === 'Inside');"},{"text":"<p><code>testLogicalOr(21)</code> should return the string <code>Outside</code></p>","testString":"assert(testLogicalOr(21) === 'Outside');"},{"text":"<p><code>testLogicalOr(25)</code> should return the string <code>Outside</code></p>","testString":"assert(testLogicalOr(25) === 'Outside');"}],"description":"<section id=\"description\">\n<p>The <dfn>logical or</dfn> operator (<code>||</code>) returns <code>true</code> if either of the <dfn>operands</dfn> is <code>true</code>. Otherwise, it returns <code>false</code>.</p>\n<p>The <dfn>logical or</dfn> operator is composed of two pipe symbols: (<code>||</code>). This can typically be found between your Backspace and Enter keys.</p>\n<p>The pattern below should look familiar from prior waypoints:</p>\n<pre><code class=\"language-js\">if (num > 10) {\n  return \"No\";\n}\nif (num &#x3C; 5) {\n  return \"No\";\n}\nreturn \"Yes\";\n</code></pre>\n<p>will return <code>Yes</code> only if <code>num</code> is between <code>5</code> and <code>10</code> (5 and 10 included). The same logic can be written as:</p>\n<pre><code class=\"language-js\">if (num > 10 || num &#x3C; 5) {\n  return \"No\";\n}\nreturn \"Yes\";\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Combine the two <code>if</code> statements into one statement which returns the string <code>Outside</code> if <code>val</code> is not between <code>10</code> and <code>20</code>, inclusive. Otherwise, return the string <code>Inside</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":69,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244af","title":"Compound Assignment With Augmented Addition","challengeType":1,"videoUrl":"https://scrimba.com/c/cDR6LCb","forumTopicId":16661,"dashedName":"compound-assignment-with-augmented-addition","challengeFiles":[{"head":"","tail":"(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let a = 3;\nlet b = 17;\nlet c = 12;\n\n// Only change code below this line\na = a + 12;\nb = 9 + b;\nc = c + 7;","error":null,"seed":"let a = 3;\nlet b = 17;\nlet c = 12;\n\n// Only change code below this line\na = a + 12;\nb = 9 + b;\nc = c + 7;"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let a = 3;\nlet b = 17;\nlet c = 12;\n\na += 12;\nb += 9;\nc += 7;","error":null,"seed":"let a = 3;\nlet b = 17;\nlet c = 12;\n\na += 12;\nb += 9;\nc += 7;"}]],"tests":[{"text":"<p><code>a</code> should equal <code>15</code>.</p>","testString":"assert(a === 15);"},{"text":"<p><code>b</code> should equal <code>26</code>.</p>","testString":"assert(b === 26);"},{"text":"<p><code>c</code> should equal <code>19</code>.</p>","testString":"assert(c === 19);"},{"text":"<p>You should use the <code>+=</code> operator for each variable.</p>","testString":"assert(code.match(/\\+=/g).length === 3);"},{"text":"<p>You should not modify the code above the specified comment.</p>","testString":"assert(\n  /let a = 3;/.test(code) &&\n    /let b = 17;/.test(code) &&\n    /let c = 12;/.test(code)\n);"}],"description":"<section id=\"description\">\n<p>In programming, it is common to use assignments to modify the contents of a variable. Remember that everything to the right of the equals sign is evaluated first, so we can say:</p>\n<pre><code class=\"language-js\">myVar = myVar + 5;\n</code></pre>\n<p>to add <code>5</code> to <code>myVar</code>. Since this is such a common pattern, there are operators which do both a mathematical operation and assignment in one step.</p>\n<p>One such operator is the <code>+=</code> operator.</p>\n<pre><code class=\"language-js\">let myVar = 1;\nmyVar += 5;\nconsole.log(myVar);\n</code></pre>\n<p><code>6</code> would be displayed in the console.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Convert the assignments for <code>a</code>, <code>b</code>, and <code>c</code> to use the <code>+=</code> operator.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":20,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244b2","title":"Compound Assignment With Augmented Division","challengeType":1,"videoUrl":"https://scrimba.com/c/c2QvKT2","forumTopicId":16659,"dashedName":"compound-assignment-with-augmented-division","challengeFiles":[{"head":"","tail":"(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let a = 48;\nlet b = 108;\nlet c = 33;\n\n// Only change code below this line\na = a / 12;\nb = b / 4;\nc = c / 11;","error":null,"seed":"let a = 48;\nlet b = 108;\nlet c = 33;\n\n// Only change code below this line\na = a / 12;\nb = b / 4;\nc = c / 11;"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let a = 48;\nlet b = 108;\nlet c = 33;\n\na /= 12;\nb /= 4;\nc /= 11;","error":null,"seed":"let a = 48;\nlet b = 108;\nlet c = 33;\n\na /= 12;\nb /= 4;\nc /= 11;"}]],"tests":[{"text":"<p><code>a</code> should equal <code>4</code>.</p>","testString":"assert(a === 4);"},{"text":"<p><code>b</code> should equal <code>27</code>.</p>","testString":"assert(b === 27);"},{"text":"<p><code>c</code> should equal <code>3</code>.</p>","testString":"assert(c === 3);"},{"text":"<p>You should use the <code>/=</code> operator for each variable.</p>","testString":"assert(code.match(/\\/=/g).length === 3);"},{"text":"<p>You should not modify the code above the specified comment.</p>","testString":"assert(\n  /let a = 48;/.test(code) &&\n    /let b = 108;/.test(code) &&\n    /let c = 33;/.test(code)\n);"}],"description":"<section id=\"description\">\n<p>The <code>/=</code> operator divides a variable by another number.</p>\n<pre><code class=\"language-js\">myVar = myVar / 5;\n</code></pre>\n<p>Will divide <code>myVar</code> by <code>5</code>. This can be rewritten as:</p>\n<pre><code class=\"language-js\">myVar /= 5;\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Convert the assignments for <code>a</code>, <code>b</code>, and <code>c</code> to use the <code>/=</code> operator.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":23,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244b1","title":"Compound Assignment With Augmented Multiplication","challengeType":1,"videoUrl":"https://scrimba.com/c/c83vrfa","forumTopicId":16662,"dashedName":"compound-assignment-with-augmented-multiplication","challengeFiles":[{"head":"","tail":"(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let a = 5;\nlet b = 12;\nlet c = 4.6;\n\n// Only change code below this line\na = a * 5;\nb = 3 * b;\nc = c * 10;","error":null,"seed":"let a = 5;\nlet b = 12;\nlet c = 4.6;\n\n// Only change code below this line\na = a * 5;\nb = 3 * b;\nc = c * 10;"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let a = 5;\nlet b = 12;\nlet c = 4.6;\n\na *= 5;\nb *= 3;\nc *= 10;","error":null,"seed":"let a = 5;\nlet b = 12;\nlet c = 4.6;\n\na *= 5;\nb *= 3;\nc *= 10;"}]],"tests":[{"text":"<p><code>a</code> should equal <code>25</code>.</p>","testString":"assert(a === 25);"},{"text":"<p><code>b</code> should equal <code>36</code>.</p>","testString":"assert(b === 36);"},{"text":"<p><code>c</code> should equal <code>46</code>.</p>","testString":"assert(c === 46);"},{"text":"<p>You should use the <code>*=</code> operator for each variable.</p>","testString":"assert(code.match(/\\*=/g).length === 3);"},{"text":"<p>You should not modify the code above the specified comment.</p>","testString":"assert(\n  /let a = 5;/.test(code) &&\n    /let b = 12;/.test(code) &&\n    /let c = 4\\.6;/.test(code)\n);"}],"description":"<section id=\"description\">\n<p>The <code>*=</code> operator multiplies a variable by a number.</p>\n<pre><code class=\"language-js\">myVar = myVar * 5;\n</code></pre>\n<p>will multiply <code>myVar</code> by <code>5</code>. This can be rewritten as:</p>\n<pre><code class=\"language-js\">myVar *= 5;\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Convert the assignments for <code>a</code>, <code>b</code>, and <code>c</code> to use the <code>*=</code> operator.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":22,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244b0","title":"Compound Assignment With Augmented Subtraction","challengeType":1,"videoUrl":"https://scrimba.com/c/c2Qv7AV","forumTopicId":16660,"dashedName":"compound-assignment-with-augmented-subtraction","challengeFiles":[{"head":"","tail":"(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = \" + c; })(a,b,c);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let a = 11;\nlet b = 9;\nlet c = 3;\n\n// Only change code below this line\na = a - 6;\nb = b - 15;\nc = c - 1;","error":null,"seed":"let a = 11;\nlet b = 9;\nlet c = 3;\n\n// Only change code below this line\na = a - 6;\nb = b - 15;\nc = c - 1;"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let a = 11;\nlet b = 9;\nlet c = 3;\n\na -= 6;\nb -= 15;\nc -= 1;","error":null,"seed":"let a = 11;\nlet b = 9;\nlet c = 3;\n\na -= 6;\nb -= 15;\nc -= 1;"}]],"tests":[{"text":"<p><code>a</code> should equal <code>5</code>.</p>","testString":"assert(a === 5);"},{"text":"<p><code>b</code> should equal <code>-6</code>.</p>","testString":"assert(b === -6);"},{"text":"<p><code>c</code> should equal <code>2</code>.</p>","testString":"assert(c === 2);"},{"text":"<p>You should use the <code>-=</code> operator for each variable.</p>","testString":"assert(code.match(/-=/g).length === 3);"},{"text":"<p>You should not modify the code above the specified comment.</p>","testString":"assert(\n  /let a = 11;/.test(code) && /let b = 9;/.test(code) && /let c = 3;/.test(code)\n);"}],"description":"<section id=\"description\">\n<p>Like the <code>+=</code> operator, <code>-=</code> subtracts a number from a variable.</p>\n<pre><code class=\"language-js\">myVar = myVar - 5;\n</code></pre>\n<p>will subtract <code>5</code> from <code>myVar</code>. This can be rewritten as:</p>\n<pre><code class=\"language-js\">myVar -= 5;\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Convert the assignments for <code>a</code>, <code>b</code>, and <code>c</code> to use the <code>-=</code> operator.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":21,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244b7","title":"Concatenating Strings with Plus Operator","challengeType":1,"videoUrl":"https://scrimba.com/c/cNpM8AN","forumTopicId":16802,"dashedName":"concatenating-strings-with-plus-operator","challengeFiles":[{"head":"","tail":"(function(){\n  if(typeof myStr === 'string') {\n    return 'myStr = \"' + myStr + '\"';\n  } else {\n    return 'myStr is not a string';\n  }\n})();","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myStr = \"\"; // Change this line","error":null,"seed":"const myStr = \"\"; // Change this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myStr = \"This is the start. \" + \"This is the end.\";","error":null,"seed":"const myStr = \"This is the start. \" + \"This is the end.\";"}]],"tests":[{"text":"<p><code>myStr</code> should have a single space character between the two strings.</p>","testString":"assert(/start\\. This/.test(myStr));"},{"text":"<p><code>myStr</code> should have a value of the string <code>This is the start. This is the end.</code></p>","testString":"assert(myStr === 'This is the start. This is the end.');"},{"text":"<p>You should use the <code>+</code> operator to build <code>myStr</code>.</p>","testString":"assert(code.match(/([\"']).*\\1\\s*\\+\\s*([\"']).*\\2/g));"},{"text":"<p><code>myStr</code> should be created using the <code>const</code> keyword.</p>","testString":"assert(/const\\s+myStr/.test(code));"},{"text":"<p>You should assign the result to the <code>myStr</code> variable.</p>","testString":"assert(/myStr\\s*=/.test(code));"}],"description":"<section id=\"description\">\n<p>In JavaScript, when the <code>+</code> operator is used with a <code>String</code> value, it is called the <dfn>concatenation</dfn> operator. You can build a new string out of other strings by <dfn>concatenating</dfn> them together.</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-js\">'My name is Alan,' + ' I concatenate.'\n</code></pre>\n<p><strong>Note:</strong> Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">const ourStr = \"I come first. \" + \"I come second.\";\n</code></pre>\n<p>The string <code>I come first. I come second.</code> would be displayed in the console.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Build <code>myStr</code> from the strings <code>This is the start.</code> and <code>This is the end.</code> using the <code>+</code> operator. Be sure to include a space between the two strings.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":27,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244b8","title":"Concatenating Strings with the Plus Equals Operator","challengeType":1,"videoUrl":"https://scrimba.com/c/cbQmmC4","forumTopicId":16803,"dashedName":"concatenating-strings-with-the-plus-equals-operator","challengeFiles":[{"head":"","tail":"(function(){\n  if(typeof myStr === 'string') {\n    return 'myStr = \"' + myStr + '\"';\n  } else {\n    return 'myStr is not a string';\n  }\n})();","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let myStr;","error":null,"seed":"let myStr;"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let myStr = \"This is the first sentence. \";\nmyStr += \"This is the second sentence.\";","error":null,"seed":"let myStr = \"This is the first sentence. \";\nmyStr += \"This is the second sentence.\";"}]],"tests":[{"text":"<p><code>myStr</code> should have a single space character between the two strings.</p>","testString":"assert(/sentence\\. This/.test(myStr));"},{"text":"<p><code>myStr</code> should have a value of the string <code>This is the first sentence. This is the second sentence.</code></p>","testString":"assert(myStr === 'This is the first sentence. This is the second sentence.');"},{"text":"<p>You should use the <code>+=</code> operator to build <code>myStr</code>.</p>","testString":"assert(code.match(/myStr\\s*\\+=\\s*([\"']).*\\1/g));"}],"description":"<section id=\"description\">\n<p>We can also use the <code>+=</code> operator to <dfn>concatenate</dfn> a string onto the end of an existing string variable. This can be very helpful to break a long string over several lines.</p>\n<p><strong>Note:</strong> Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">let ourStr = \"I come first. \";\nourStr += \"I come second.\";\n</code></pre>\n<p><code>ourStr</code> now has a value of the string <code>I come first. I come second.</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Build <code>myStr</code> over several lines by concatenating these two strings: <code>This is the first sentence.</code> and <code>This is the second sentence.</code> using the <code>+=</code> operator. Use the <code>+=</code> operator similar to how it is shown in the example and be sure to include a space between the two strings. Start by assigning the first string to <code>myStr</code>, then add on the second string.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":28,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244b9","title":"Constructing Strings with Variables","challengeType":1,"videoUrl":"https://scrimba.com/c/cqk8rf4","forumTopicId":16805,"dashedName":"constructing-strings-with-variables","challengeFiles":[{"head":"","tail":"(function(){\n  var output = [];\n  if(typeof myName === 'string') {\n    output.push('myName = \"' + myName + '\"');\n  } else {\n    output.push('myName is not a string');\n  }\n  if(typeof myStr === 'string') {\n    output.push('myStr = \"' + myStr + '\"');\n  } else {\n    output.push('myStr is not a string');\n  }\n  return output.join('\\n');\n})();","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Only change code below this line\nconst myName = \"\";\nconst myStr = \"\";","error":null,"seed":"// Only change code below this line\nconst myName = \"\";\nconst myStr = \"\";"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myName = \"Bob\";\nconst myStr = \"My name is \" + myName + \" and I am well!\";","error":null,"seed":"const myName = \"Bob\";\nconst myStr = \"My name is \" + myName + \" and I am well!\";"}]],"tests":[{"text":"<p><code>myName</code> should be set to a string at least 3 characters long.</p>","testString":"assert(typeof myName !== 'undefined' && myName.length > 2);"},{"text":"<p>You should use two <code>+</code> operators to build <code>myStr</code> with <code>myName</code> inside it.</p>","testString":"assert(code.match(/[\"']\\s*\\+\\s*myName\\s*\\+\\s*[\"']/g).length > 0);"}],"description":"<section id=\"description\">\n<p>Sometimes you will need to build a string. By using the concatenation operator (<code>+</code>), you can insert one or more variables into a string you're building.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">const ourName = \"freeCodeCamp\";\nconst ourStr = \"Hello, our name is \" + ourName + \", how are you?\";\n</code></pre>\n<p><code>ourStr</code> would have a value of the string <code>Hello, our name is freeCodeCamp, how are you?</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Set <code>myName</code> to a string equal to your name and build <code>myStr</code> with <code>myName</code> between the strings <code>My name is </code> and <code> and I am well!</code></p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":29,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56105e7b514f539506016a5e","title":"Count Backwards With a For Loop","challengeType":1,"videoUrl":"https://scrimba.com/c/c2R6BHa","forumTopicId":16808,"dashedName":"count-backwards-with-a-for-loop","challengeFiles":[{"head":"","tail":"if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst myArray = [];\n\n// Only change code below this line\n","error":null,"seed":"// Setup\nconst myArray = [];\n\n// Only change code below this line\n"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myArray = [];\nfor (let i = 9; i > 0; i -= 2) {\n  myArray.push(i);\n}","error":null,"seed":"const myArray = [];\nfor (let i = 9; i > 0; i -= 2) {\n  myArray.push(i);\n}"}]],"tests":[{"text":"<p>You should be using a <code>for</code> loop for this.</p>","testString":"assert(/for\\s*\\([^)]+?\\)/.test(code));"},{"text":"<p>You should be using the array method <code>push</code>.</p>","testString":"assert(code.match(/myArray.push/));"},{"text":"<p><code>myArray</code> should equal <code>[9, 7, 5, 3, 1]</code>.</p>","testString":"assert.deepEqual(myArray, [9, 7, 5, 3, 1]);"}],"description":"<section id=\"description\">\n<p>A for loop can also count backwards, so long as we can define the right conditions.</p>\n<p>In order to decrement by two each iteration, we'll need to change our initialization, condition, and final expression.</p>\n<p>We'll start at <code>i = 10</code> and loop while <code>i > 0</code>. We'll decrement <code>i</code> by 2 each loop with <code>i -= 2</code>.</p>\n<pre><code class=\"language-js\">const ourArray = [];\n\nfor (let i = 10; i > 0; i -= 2) {\n  ourArray.push(i);\n}\n</code></pre>\n<p><code>ourArray</code> will now contain <code>[10, 8, 6, 4, 2]</code>. Let's change our initialization and final expression so we can count backwards by twos to create an array of descending odd numbers.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Push the odd numbers from 9 through 1 to <code>myArray</code> using a <code>for</code> loop.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":98,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"565bbe00e9cc8ac0725390f4","title":"Counting Cards","challengeType":1,"videoUrl":"https://scrimba.com/c/c6KE7ty","forumTopicId":16809,"dashedName":"counting-cards","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let count = 0;\n\nfunction cc(card) {\n  // Only change code below this line\n\n\n  return \"Change Me\";\n  // Only change code above this line\n}\n\ncc(2); cc(3); cc(7); cc('K'); cc('A');","error":null,"seed":"let count = 0;\n\nfunction cc(card) {\n  // Only change code below this line\n\n\n  return \"Change Me\";\n  // Only change code above this line\n}\n\ncc(2); cc(3); cc(7); cc('K'); cc('A');"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let count = 0;\nfunction cc(card) {\n  switch(card) {\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n      count++;\n      break;\n    case 10:\n    case 'J':\n    case 'Q':\n    case 'K':\n    case 'A':\n      count--;\n  }\n  if(count > 0) {\n    return count + \" Bet\";\n  } else {\n    return count + \" Hold\";\n  }\n}","error":null,"seed":"let count = 0;\nfunction cc(card) {\n  switch(card) {\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n      count++;\n      break;\n    case 10:\n    case 'J':\n    case 'Q':\n    case 'K':\n    case 'A':\n      count--;\n  }\n  if(count > 0) {\n    return count + \" Bet\";\n  } else {\n    return count + \" Hold\";\n  }\n}"}]],"tests":[{"text":"<p>Your function should return a value for count and the text (<code>Bet</code> or <code>Hold</code>) with one space character between them.</p>","testString":"assert(//\n  (function () {\n    count = 0;\n    let out = cc(10);\n    const hasSpace = /-?\\d+ (Bet|Hold)/.test('' + out);\n    return hasSpace;\n  })()\n);"},{"text":"<p>Cards Sequence 2, 3, 4, 5, 6 should return the string <code>5 Bet</code></p>","testString":"assert(\n  (function () {\n    count = 0;\n    cc(2);\n    cc(3);\n    cc(4);\n    cc(5);\n    var out = cc(6);\n    if (out === '5 Bet') {\n      return true;\n    }\n    return false;\n  })()\n);"},{"text":"<p>Cards Sequence 7, 8, 9 should return the string <code>0 Hold</code></p>","testString":"assert(\n  (function () {\n    count = 0;\n    cc(7);\n    cc(8);\n    var out = cc(9);\n    if (out === '0 Hold') {\n      return true;\n    }\n    return false;\n  })()\n);"},{"text":"<p>Cards Sequence 10, J, Q, K, A should return the string <code>-5 Hold</code></p>","testString":"assert(\n  (function () {\n    count = 0;\n    cc(10);\n    cc('J');\n    cc('Q');\n    cc('K');\n    var out = cc('A');\n    if (out === '-5 Hold') {\n      return true;\n    }\n    return false;\n  })()\n);"},{"text":"<p>Cards Sequence 3, 7, Q, 8, A should return the string <code>-1 Hold</code></p>","testString":"assert(\n  (function () {\n    count = 0;\n    cc(3);\n    cc(7);\n    cc('Q');\n    cc(8);\n    var out = cc('A');\n    if (out === '-1 Hold') {\n      return true;\n    }\n    return false;\n  })()\n);"},{"text":"<p>Cards Sequence 2, J, 9, 2, 7 should return the string <code>1 Bet</code></p>","testString":"assert(\n  (function () {\n    count = 0;\n    cc(2);\n    cc('J');\n    cc(9);\n    cc(2);\n    var out = cc(7);\n    if (out === '1 Bet') {\n      return true;\n    }\n    return false;\n  })()\n);"},{"text":"<p>Cards Sequence 2, 2, 10 should return the string <code>1 Bet</code></p>","testString":"assert(\n  (function () {\n    count = 0;\n    cc(2);\n    cc(2);\n    var out = cc(10);\n    if (out === '1 Bet') {\n      return true;\n    }\n    return false;\n  })()\n);"},{"text":"<p>Cards Sequence 3, 2, A, 10, K should return the string <code>-1 Hold</code></p>","testString":"assert(\n  (function () {\n    count = 0;\n    cc(3);\n    cc(2);\n    cc('A');\n    cc(10);\n    var out = cc('K');\n    if (out === '-1 Hold') {\n      return true;\n    }\n    return false;\n  })()\n);"}],"description":"<section id=\"description\">\n<p>In the casino game Blackjack, a player can determine whether they have an advantage on the next hand over the house by keeping track of the relative number of high and low cards remaining in the deck. This is called Card Counting.</p>\n<p>Having more high cards remaining in the deck favors the player. Each card is assigned a value according to the table below. When the count is positive, the player should bet high. When the count is zero or negative, the player should bet low.</p>\n<table class='table table-striped'><thead><tr><th>Count Change</th><th>Cards</th></tr></thead><tbody><tr><td>+1</td><td>2, 3, 4, 5, 6</td></tr><tr><td>0</td><td>7, 8, 9</td></tr><tr><td>-1</td><td>10, 'J', 'Q', 'K', 'A'</td></tr></tbody></table>\n<p>You will write a card counting function. It will receive a <code>card</code> parameter, which can be a number or a string, and increment or decrement the global <code>count</code> variable according to the card's value (see table). The function will then return a string with the current count and the string <code>Bet</code> if the count is positive, or <code>Hold</code> if the count is zero or negative. The current count and the player's decision (<code>Bet</code> or <code>Hold</code>) should be separated by a single space.</p>\n<p><strong>Example Outputs:</strong> <code>-3 Hold</code> or <code>5 Bet</code></p>\n<p><strong>Hint</strong><br>\nDo NOT reset <code>count</code> to 0 when value is 7, 8, or 9.<br>\nDo NOT return an array.<br>\nDo NOT include quotes (single or double) in the output.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":81,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"cf1391c1c11feddfaeb4bdef","title":"Create Decimal Numbers with JavaScript","challengeType":1,"videoUrl":"https://scrimba.com/c/ca8GEuW","forumTopicId":16826,"dashedName":"create-decimal-numbers-with-javascript","challengeFiles":[{"head":"","tail":"(function(){if(typeof myDecimal !== \"undefined\"){return myDecimal;}})();","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const ourDecimal = 5.7;\n\n// Only change code below this line\n","error":null,"seed":"const ourDecimal = 5.7;\n\n// Only change code below this line\n"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myDecimal = 9.9;","error":null,"seed":"const myDecimal = 9.9;"}]],"tests":[{"text":"<p><code>myDecimal</code> should be a number.</p>","testString":"assert(typeof myDecimal === 'number');"},{"text":"<p><code>myDecimal</code> should have a decimal point</p>","testString":"assert(myDecimal % 1 != 0);"}],"description":"<section id=\"description\">\n<p>We can store decimal numbers in variables too. Decimal numbers are sometimes referred to as <dfn>floating point</dfn> numbers or <dfn>floats</dfn>.</p>\n<p><strong>Note:</strong> when you compute numbers, they are computed with finite precision. Operations using floating points may lead to different results than the desired outcome. If you are getting one of these results, open a topic on the <a href=\"https://forum.freecodecamp.org/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">freeCodeCamp forum</a>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create a variable <code>myDecimal</code> and give it a decimal value with a fractional part (e.g. <code>5.7</code>).</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":16,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b87367417b2b2512b41","title":"Declare a Read-Only Variable with the const Keyword","challengeType":1,"forumTopicId":301201,"dashedName":"declare-a-read-only-variable-with-the-const-keyword","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"var fCC = \"freeCodeCamp\"; // Change this line\nvar fact = \"is cool!\"; // Change this line\nfact = \"is awesome!\";\nconsole.log(fCC, fact); // Change this line","error":null,"seed":"var fCC = \"freeCodeCamp\"; // Change this line\nvar fact = \"is cool!\"; // Change this line\nfact = \"is awesome!\";\nconsole.log(fCC, fact); // Change this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const FCC = \"freeCodeCamp\";\nlet fact = \"is cool!\";\n\nfact = \"is awesome!\";\nconsole.log(FCC, fact);","error":null,"seed":"const FCC = \"freeCodeCamp\";\nlet fact = \"is cool!\";\n\nfact = \"is awesome!\";\nconsole.log(FCC, fact);"}]],"tests":[{"text":"<p><code>var</code> should not exist in your code.</p>","testString":"assert.notMatch(code, /var/g);"},{"text":"<p>You should change <code>fCC</code> to all uppercase.</p>","testString":"assert.match(code, /(FCC)/);\nassert.notMatch(code, /(fCC)/);"},{"text":"<p><code>FCC</code> should be a constant variable declared with <code>const</code>.</p>","testString":"assert.match(code, /const\\s+FCC/);"},{"text":"<p>The string assigned to <code>FCC</code> should not be changed.</p>","testString":"assert.equal(FCC, 'freeCodeCamp');"},{"text":"<p><code>fact</code> should be declared with <code>let</code>.</p>","testString":"assert.match(code, /(let\\s+fact)/g);"},{"text":"<p><code>console.log</code> should be changed to print the <code>FCC</code> and <code>fact</code> variables.</p>","testString":"assert.match(code, /console\\.log\\(\\s*FCC\\s*\\,\\s*fact\\s*\\)\\s*;?/g);"}],"description":"<section id=\"description\">\n<p>The keyword <code>let</code> is not the only new way to declare variables. In ES6, you can also declare variables using the <code>const</code> keyword.</p>\n<p><code>const</code> has all the awesome features that <code>let</code> has, with the added bonus that variables declared using <code>const</code> are read-only. They are a constant value, which means that once a variable is assigned with <code>const</code>, it cannot be reassigned:</p>\n<pre><code class=\"language-js\">const FAV_PET = \"Cats\";\nFAV_PET = \"Dogs\";\n</code></pre>\n<p>The console will display an error due to reassigning the value of <code>FAV_PET</code>.</p>\n<p>You should always name variables you don't want to reassign using the <code>const</code> keyword. This helps when you accidentally attempt to reassign a variable that is meant to stay constant.</p>\n<p><strong>Note:</strong> It is common for developers to use uppercase variable identifiers for immutable values and lowercase or camelCase for mutable values (objects and arrays). You will learn more about objects, arrays, and immutable and mutable values in later challenges. Also in later challenges, you will see examples of uppercase, lowercase, or camelCase variable identifiers.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the code so that all variables are declared using <code>let</code> or <code>const</code>. Use <code>let</code> when you want the variable to change, and <code>const</code> when you want the variable to remain constant. Also, rename variables declared with <code>const</code> to conform to common practices. Do not change the strings assigned to the variables.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":9,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"bd7123c9c443eddfaeb5bdef","title":"Declare JavaScript Variables","challengeType":1,"videoUrl":"https://scrimba.com/c/cNanrHq","forumTopicId":17556,"dashedName":"declare-javascript-variables","challengeFiles":[{"head":"","tail":"if(typeof myName !== \"undefined\"){(function(v){return v;})(myName);}","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"","error":null,"seed":""}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"var myName;","error":null,"seed":"var myName;"}]],"tests":[{"text":"<p>You should declare <code>myName</code> with the <code>var</code> keyword, ending with a semicolon</p>","testString":"assert(/var\\s+myName\\s*;/.test(code));"}],"description":"<section id=\"description\">\n<p>In computer science, <dfn>data</dfn> is anything that is meaningful to the computer. JavaScript provides eight different <dfn>data types</dfn> which are <code>undefined</code>, <code>null</code>, <code>boolean</code>, <code>string</code>, <code>symbol</code>, <code>bigint</code>, <code>number</code>, and <code>object</code>.</p>\n<p>For example, computers distinguish between numbers, such as the number <code>12</code>, and <code>strings</code>, such as <code>\"12\"</code>, <code>\"dog\"</code>, or <code>\"123 cats\"</code>, which are collections of characters. Computers can perform mathematical operations on a number, but not on a string.</p>\n<p><dfn>Variables</dfn> allow computers to store and manipulate data in a dynamic fashion. They do this by using a \"label\" to point to the data rather than using the data itself. Any of the eight data types may be stored in a variable.</p>\n<p>Variables are similar to the x and y variables you use in mathematics, which means they're a simple name to represent the data we want to refer to. Computer variables differ from mathematical variables in that they can store different values at different times.</p>\n<p>We tell JavaScript to create or <dfn>declare</dfn> a variable by putting the keyword <code>var</code> in front of it, like so:</p>\n<pre><code class=\"language-js\">var ourName;\n</code></pre>\n<p>creates a variable called <code>ourName</code>. In JavaScript we end statements with semicolons. Variable names can be made up of numbers, letters, and <code>$</code> or <code>_</code>, but may not contain spaces or start with a number.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the <code>var</code> keyword to create a variable called <code>myName</code>.</p>\n<p><strong>Hint</strong><br>\nLook at the <code>ourName</code> example above if you get stuck.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":1,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"bd7123c9c444eddfaeb5bdef","title":"Declare String Variables","challengeType":1,"videoUrl":"https://scrimba.com/c/c2QvWU6","forumTopicId":17557,"dashedName":"declare-string-variables","challengeFiles":[{"head":"","tail":"if(typeof myFirstName !== \"undefined\" && typeof myLastName !== \"undefined\"){(function(){return myFirstName + ', ' + myLastName;})();}","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"","error":null,"seed":""}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"var myFirstName = \"Alan\";\nvar myLastName = \"Turing\";","error":null,"seed":"var myFirstName = \"Alan\";\nvar myLastName = \"Turing\";"}]],"tests":[{"text":"<p><code>myFirstName</code> should be a string with at least one character in it.</p>","testString":"assert(\n  (function () {\n    if (\n      typeof myFirstName !== 'undefined' &&\n      typeof myFirstName === 'string' &&\n      myFirstName.length > 0\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })()\n);"},{"text":"<p><code>myLastName</code> should be a string with at least one character in it.</p>","testString":"assert(\n  (function () {\n    if (\n      typeof myLastName !== 'undefined' &&\n      typeof myLastName === 'string' &&\n      myLastName.length > 0\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })()\n);"}],"description":"<section id=\"description\">\n<p>Previously you used the following code to declare a variable:</p>\n<pre><code class=\"language-js\">var myName;\n</code></pre>\n<p>But you can also declare a string variable like this:</p>\n<pre><code class=\"language-js\">var myName = \"your name\";\n</code></pre>\n<p><code>\"your name\"</code> is called a <dfn>string</dfn> <dfn>literal</dfn>. A string literal, or string, is a series of zero or more characters enclosed in single or double quotes.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create two new string variables: <code>myFirstName</code> and <code>myLastName</code> and assign them the values of your first and last name, respectively.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":5,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244ad","title":"Decrement a Number with JavaScript","challengeType":1,"videoUrl":"https://scrimba.com/c/cM2KeS2","forumTopicId":17558,"dashedName":"decrement-a-number-with-javascript","challengeFiles":[{"head":"","tail":"(function(z){return 'myVar = ' + z;})(myVar);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let myVar = 11;\n\n// Only change code below this line\nmyVar = myVar - 1;","error":null,"seed":"let myVar = 11;\n\n// Only change code below this line\nmyVar = myVar - 1;"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let myVar = 11;\nmyVar--;","error":null,"seed":"let myVar = 11;\nmyVar--;"}]],"tests":[{"text":"<p><code>myVar</code> should equal <code>10</code>.</p>","testString":"assert(myVar === 10);"},{"text":"<p><code>myVar = myVar - 1;</code> should be changed.</p>","testString":"assert(!code.match(/myVar\\s*=\\s*myVar\\s*[-]\\s*1.*?;?/));"},{"text":"<p>You should not assign <code>myVar</code> with <code>10</code>.</p>","testString":"assert(!code.match(/myVar\\s*=\\s*10.*?;?/));"},{"text":"<p>You should use the <code>--</code> operator on <code>myVar</code>.</p>","testString":"assert(/[-]{2}\\s*myVar|myVar\\s*[-]{2}/.test(code));"},{"text":"<p>You should not change code above the specified comment.</p>","testString":"assert(/let myVar = 11;/.test(code));"}],"description":"<section id=\"description\">\n<p>You can easily <dfn>decrement</dfn> or decrease a variable by one with the <code>--</code> operator.</p>\n<pre><code class=\"language-js\">i--;\n</code></pre>\n<p>is the equivalent of</p>\n<pre><code class=\"language-js\">i = i - 1;\n</code></pre>\n<p><strong>Note:</strong> The entire line becomes <code>i--;</code>, eliminating the need for the equal sign.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the code to use the <code>--</code> operator on <code>myVar</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":15,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56bbb991ad1ed5201cd392d3","title":"Delete Properties from a JavaScript Object","challengeType":1,"videoUrl":"https://scrimba.com/c/cDqKdTv","forumTopicId":17560,"dashedName":"delete-properties-from-a-javascript-object","challengeFiles":[{"head":"","tail":"(function(z){return z;})(myDog);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"],\n  \"bark\": \"woof\"\n};\n\n// Only change code below this line\n","error":null,"seed":"// Setup\nconst myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"],\n  \"bark\": \"woof\"\n};\n\n// Only change code below this line\n"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"],\n  \"bark\": \"woof\"\n};\ndelete myDog.tails;","error":null,"seed":"const myDog = {\n  \"name\": \"Happy Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"],\n  \"bark\": \"woof\"\n};\ndelete myDog.tails;"}]],"tests":[{"text":"<p>You should delete the property <code>tails</code> from <code>myDog</code>.</p>","testString":"assert(typeof myDog === 'object' && myDog.tails === undefined);"},{"text":"<p>You should not modify the <code>myDog</code> setup.</p>","testString":"assert(code.match(/\"tails\": 1/g).length > 0);"}],"description":"<section id=\"description\">\n<p>We can also delete properties from objects like this:</p>\n<pre><code class=\"language-js\">delete ourDog.bark;\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-js\">const ourDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"],\n  \"bark\": \"bow-wow\"\n};\n\ndelete ourDog.bark;\n</code></pre>\n<p>After the last line shown above, <code>ourDog</code> looks like:</p>\n<pre><code class=\"language-js\">{\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"]\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Delete the <code>tails</code> property from <code>myDog</code>. You may use either dot or bracket notation.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":88,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"bd7993c9ca9feddfaeb7bdef","title":"Divide One Decimal by Another with JavaScript","challengeType":1,"videoUrl":"https://scrimba.com/c/cBZe9AW","forumTopicId":18255,"dashedName":"divide-one-decimal-by-another-with-javascript","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const quotient = 0.0 / 2.0; // Change this line","error":null,"seed":"const quotient = 0.0 / 2.0; // Change this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const quotient = 4.4 / 2.0;","error":null,"seed":"const quotient = 4.4 / 2.0;"}]],"tests":[{"text":"<p>The variable <code>quotient</code> should equal <code>2.2</code></p>","testString":"assert(quotient === 2.2);"},{"text":"<p>You should use the <code>/</code> operator to divide 4.4 by 2</p>","testString":"assert(/4\\.40*\\s*\\/\\s*2\\.*0*/.test(code));"},{"text":"<p>The quotient variable should only be assigned once</p>","testString":"assert(code.match(/quotient/g).length === 1);"}],"description":"<section id=\"description\">\n<p>Now let's divide one decimal by another.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the <code>0.0</code> so that <code>quotient</code> will equal to <code>2.2</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":18,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"cf1111c1c11feddfaeb6bdef","title":"Divide One Number by Another with JavaScript","challengeType":1,"videoUrl":"https://scrimba.com/c/cqkbdAr","forumTopicId":17566,"dashedName":"divide-one-number-by-another-with-javascript","challengeFiles":[{"head":"","tail":"(function(z){return 'quotient = '+z;})(quotient);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const quotient = 66 / 0;","error":null,"seed":"const quotient = 66 / 0;"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const quotient = 66 / 33;","error":null,"seed":"const quotient = 66 / 33;"}]],"tests":[{"text":"<p>The variable <code>quotient</code> should be equal to 2.</p>","testString":"assert(quotient === 2);"},{"text":"<p>You should use the <code>/</code> operator.</p>","testString":"assert(/\\d+\\s*\\/\\s*\\d+/.test(code));"}],"description":"<section id=\"description\">\n<p>We can also divide one number by another.</p>\n<p>JavaScript uses the <code>/</code> symbol for division.</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-js\">const myVar = 16 / 2;\n</code></pre>\n<p><code>myVar</code> now has the value <code>8</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the <code>0</code> so that the <code>quotient</code> is equal to <code>2</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":13,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244b6","title":"Escape Sequences in Strings","challengeType":1,"videoUrl":"https://scrimba.com/c/cvmqRh6","forumTopicId":17567,"dashedName":"escape-sequences-in-strings","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myStr = \"\"; // Change this line","error":null,"seed":"const myStr = \"\"; // Change this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myStr = \"FirstLine\\n\\t\\\\SecondLine\\nThirdLine\";","error":null,"seed":"const myStr = \"FirstLine\\n\\t\\\\SecondLine\\nThirdLine\";"}]],"tests":[{"text":"<p><code>myStr</code> should not contain any spaces</p>","testString":"assert(!/ /.test(myStr));"},{"text":"<p><code>myStr</code> should contain the strings <code>FirstLine</code>, <code>SecondLine</code> and <code>ThirdLine</code> (remember case sensitivity)</p>","testString":"assert(\n  /FirstLine/.test(myStr) && /SecondLine/.test(myStr) && /ThirdLine/.test(myStr)\n);"},{"text":"<p><code>FirstLine</code> should be followed by the newline character <code>\\n</code></p>","testString":"assert(/FirstLine\\n/.test(myStr));"},{"text":"<p><code>myStr</code> should contain a tab character <code>\\t</code> which follows a newline character</p>","testString":"assert(/\\n\\t/.test(myStr));"},{"text":"<p><code>SecondLine</code> should be preceded by the backslash character <code>\\</code></p>","testString":"assert(/\\\\SecondLine/.test(myStr));"},{"text":"<p>There should be a newline character between <code>SecondLine</code> and <code>ThirdLine</code></p>","testString":"assert(/SecondLine\\nThirdLine/.test(myStr));"},{"text":"<p><code>myStr</code> should only contain characters shown in the instructions</p>","testString":"assert(myStr === 'FirstLine\\n\\t\\\\SecondLine\\nThirdLine');"}],"description":"<section id=\"description\">\n<p>Quotes are not the only characters that can be <dfn>escaped</dfn> inside a string. There are two reasons to use escaping characters:</p>\n<ol>\n<li>To allow you to use characters you may not otherwise be able to type out, such as a newline.</li>\n<li>To allow you to represent multiple quotes in a string without JavaScript misinterpreting what you mean.</li>\n</ol>\n<p>We learned this in the previous challenge.</p>\n<table class='table table-striped'><thead><tr><th>Code</th><th>Output</th></tr></thead><tbody><tr><td><code>\\'</code></td><td>single quote</td></tr><tr><td><code>\\\"</code></td><td>double quote</td></tr><tr><td><code>\\\\</code></td><td>backslash</td></tr><tr><td><code>\\n</code></td><td>newline</td></tr><tr><td><code>\\t</code></td><td>tab</td></tr><tr><td><code>\\r</code></td><td>carriage return</td></tr><tr><td><code>\\b</code></td><td>word boundary</td></tr><tr><td><code>\\f</code></td><td>form feed</td></tr></tbody></table>\n<p><em>Note that the backslash itself must be escaped in order to display as a backslash.</em></p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Assign the following three lines of text into the single variable <code>myStr</code> using escape sequences.</p>\n<blockquote>FirstLine<br>    \\SecondLine<br>ThirdLine</blockquote>\n<p>You will need to use escape sequences to insert special characters correctly. You will also need to follow the spacing as it looks above, with no spaces between escape sequences or words.</p>\n<p><strong>Note:</strong> The indentation for <code>SecondLine</code> is achieved with the tab escape character, not spaces.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":26,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244b5","title":"Escaping Literal Quotes in Strings","challengeType":1,"videoUrl":"https://scrimba.com/c/c2QvgSr","forumTopicId":17568,"dashedName":"escaping-literal-quotes-in-strings","challengeFiles":[{"head":"","tail":"(function(){\n  if(typeof myStr === 'string') {\n    console.log(\"myStr = \\\"\" + myStr + \"\\\"\");\n  } else {\n    console.log(\"myStr is undefined\");\n  }\n})();","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myStr = \"\"; // Change this line","error":null,"seed":"const myStr = \"\"; // Change this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myStr = \"I am a \\\"double quoted\\\" string inside \\\"double quotes\\\".\";","error":null,"seed":"const myStr = \"I am a \\\"double quoted\\\" string inside \\\"double quotes\\\".\";"}]],"tests":[{"text":"<p>You should use two double quotes (<code>\"</code>) and four escaped double quotes (<code>\\\"</code>).</p>","testString":"assert(code.match(/\\\\\"/g).length === 4 && code.match(/[^\\\\]\"/g).length === 2);"},{"text":"<p>Variable <code>myStr</code> should contain the string: <code>I am a \"double quoted\" string inside \"double quotes\".</code></p>","testString":"assert(/I am a \"double quoted\" string inside \"double quotes(\\.\"|\"\\.)$/.test(myStr));"}],"description":"<section id=\"description\">\n<p>When you are defining a string you must start and end with a single or double quote. What happens when you need a literal quote: <code>\"</code> or <code>'</code> inside of your string?</p>\n<p>In JavaScript, you can <dfn>escape</dfn> a quote from considering it as an end of string quote by placing a <dfn>backslash</dfn> (<code>\\</code>) in front of the quote.</p>\n<pre><code class=\"language-js\">const sampleStr = \"Alan said, \\\"Peter is learning JavaScript\\\".\";\n</code></pre>\n<p>This signals to JavaScript that the following quote is not the end of the string, but should instead appear inside the string. So if you were to print this to the console, you would get:</p>\n<pre><code class=\"language-js\">Alan said, \"Peter is learning JavaScript\".\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use <dfn>backslashes</dfn> to assign a string to the <code>myStr</code> variable so that if you were to print it to the console, you would see:</p>\n<pre><code class=\"language-js\">I am a \"double quoted\" string inside \"double quotes\".\n</code></pre>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":24,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b87367417b2b2512b3f","title":"Explore Differences Between the var and let Keywords","challengeType":1,"forumTopicId":301202,"dashedName":"explore-differences-between-the-var-and-let-keywords","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"var catName = \"Oliver\";\nvar catSound = \"Meow!\";","error":null,"seed":"var catName = \"Oliver\";\nvar catSound = \"Meow!\";"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let catName = \"Oliver\";\nlet catSound = \"Meow!\";","error":null,"seed":"let catName = \"Oliver\";\nlet catSound = \"Meow!\";"}]],"tests":[{"text":"<p><code>var</code> should not exist in the code.</p>","testString":"assert.notMatch(code, /var/g);"},{"text":"<p><code>catName</code> should be the string <code>Oliver</code>.</p>","testString":"assert.equal(catName, 'Oliver');"},{"text":"<p><code>catSound</code> should be the string <code>Meow!</code></p>","testString":"assert.equal(catSound, 'Meow!');"}],"description":"<section id=\"description\">\n<p>One of the biggest problems with declaring variables with the <code>var</code> keyword is that you can easily overwrite variable declarations:</p>\n<pre><code class=\"language-js\">var camper = \"James\";\nvar camper = \"David\";\nconsole.log(camper);\n</code></pre>\n<p>In the code above, the <code>camper</code> variable is originally declared as <code>James</code>, and is then overridden to be <code>David</code>. The console then displays the string <code>David</code>.</p>\n<p>In a small application, you might not run into this type of problem. But as your codebase becomes larger, you might accidentally overwrite a variable that you did not intend to. Because this behavior does not throw an error, searching for and fixing bugs becomes more difficult.</p>\n<p>A keyword called <code>let</code> was introduced in ES6, a major update to JavaScript, to solve this potential issue with the <code>var</code> keyword. You'll learn about other ES6 features in later challenges.</p>\n<p>If you replace <code>var</code> with <code>let</code> in the code above, it results in an error:</p>\n<pre><code class=\"language-js\">let camper = \"James\";\nlet camper = \"David\";\n</code></pre>\n<p>The error can be seen in your browser console.</p>\n<p>So unlike <code>var</code>, when you use <code>let</code>, a variable with the same name can only be declared once.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Update the code so it only uses the <code>let</code> keyword.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":8,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"bd7123c9c448eddfaeb5bdef","title":"Find the Length of a String","challengeType":1,"videoUrl":"https://scrimba.com/c/cvmqEAd","forumTopicId":18182,"dashedName":"find-the-length-of-a-string","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nlet lastNameLength = 0;\nconst lastName = \"Lovelace\";\n\n// Only change code below this line\nlastNameLength = lastName;","error":null,"seed":"// Setup\nlet lastNameLength = 0;\nconst lastName = \"Lovelace\";\n\n// Only change code below this line\nlastNameLength = lastName;"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let lastNameLength = 0;\nconst lastName = \"Lovelace\";\nlastNameLength = lastName.length;","error":null,"seed":"let lastNameLength = 0;\nconst lastName = \"Lovelace\";\nlastNameLength = lastName.length;"}]],"tests":[{"text":"<p>You should not change the variable declarations in the <code>// Setup</code> section.</p>","testString":"assert(\n  code.match(/let lastNameLength = 0;/) &&\n    code.match(/const lastName = \"Lovelace\";/)\n);"},{"text":"<p><code>lastNameLength</code> should be equal to eight.</p>","testString":"assert(typeof lastNameLength !== 'undefined' && lastNameLength === 8);"},{"text":"<p>You should be getting the length of <code>lastName</code> by using <code>.length</code> like this: <code>lastName.length</code>.</p>","testString":"assert(code.match(/=\\s*lastName\\.length/g) && !code.match(/lastName\\s*=\\s*8/));"}],"description":"<section id=\"description\">\n<p>You can find the length of a <code>String</code> value by writing <code>.length</code> after the string variable or string literal.</p>\n<pre><code class=\"language-js\">console.log(\"Alan Peter\".length);\n</code></pre>\n<p>The value <code>10</code> would be displayed in the console. Note that the space character between \"Alan\" and \"Peter\" is also counted.</p>\n<p>For example, if we created a variable <code>const firstName = \"Ada\"</code>, we could find out how long the string <code>Ada</code> is by using the <code>firstName.length</code> property.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the <code>.length</code> property to set <code>lastNameLength</code> to the number of characters in <code>lastName</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":31,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244ae","title":"Finding a Remainder in JavaScript","challengeType":1,"videoUrl":"https://scrimba.com/c/cWP24Ub","forumTopicId":18184,"dashedName":"finding-a-remainder-in-javascript","challengeFiles":[{"head":"","tail":"(function(y){return 'remainder = '+y;})(remainder);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const remainder = 0;","error":null,"seed":"const remainder = 0;"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const remainder = 11 % 3;","error":null,"seed":"const remainder = 11 % 3;"}]],"tests":[{"text":"<p>The variable <code>remainder</code> should be initialized</p>","testString":"assert(/(const|let|var)\\s+?remainder/.test(code));"},{"text":"<p>The value of <code>remainder</code> should be <code>2</code></p>","testString":"assert(remainder === 2);"},{"text":"<p>You should use the <code>%</code> operator</p>","testString":"assert(/\\s+?remainder\\s*?=\\s*?.*%.*;?/.test(code));"}],"description":"<section id=\"description\">\n<p>The <dfn>remainder</dfn> operator <code>%</code> gives the remainder of the division of two numbers.</p>\n<p><strong>Example</strong></p>\n<blockquote>5 % 2 = 1 because<br>Math.floor(5 / 2) = 2 (Quotient)<br>2 * 2 = 4<br>5 - 4 = 1 (Remainder)</blockquote>\n<p><strong>Usage</strong><br>\nIn mathematics, a number can be checked to be even or odd by checking the remainder of the division of the number by <code>2</code>.</p>\n<blockquote>17 % 2 = 1 (17 is Odd)<br>48 % 2 = 0 (48 is Even)</blockquote>\n<p><strong>Note:</strong> The <dfn>remainder</dfn> operator is sometimes incorrectly referred to as the modulus operator. It is very similar to modulus, but does not work properly with negative numbers.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Set <code>remainder</code> equal to the remainder of <code>11</code> divided by <code>3</code> using the <dfn>remainder</dfn> (<code>%</code>) operator.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":19,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"cf1111c1c11feddfaeb9bdef","title":"Generate Random Fractions with JavaScript","challengeType":1,"videoUrl":"https://scrimba.com/c/cyWJJs3","forumTopicId":18185,"dashedName":"generate-random-fractions-with-javascript","challengeFiles":[{"head":"","tail":"(function(){return randomFraction();})();","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function randomFraction() {\n\n  // Only change code below this line\n\n  return 0;\n\n  // Only change code above this line\n}","error":null,"seed":"function randomFraction() {\n\n  // Only change code below this line\n\n  return 0;\n\n  // Only change code above this line\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function randomFraction() {\n  return Math.random();\n}","error":null,"seed":"function randomFraction() {\n  return Math.random();\n}"}]],"tests":[{"text":"<p><code>randomFraction</code> should return a random number.</p>","testString":"assert(typeof randomFraction() === 'number');"},{"text":"<p>The number returned by <code>randomFraction</code> should be a decimal.</p>","testString":"assert((randomFraction() + '').match(/\\./g));"},{"text":"<p>You should be using <code>Math.random</code> to generate the random decimal number.</p>","testString":"assert(code.match(/Math\\.random/g).length >= 0);"}],"description":"<section id=\"description\">\n<p>Random numbers are useful for creating random behavior.</p>\n<p>JavaScript has a <code>Math.random()</code> function that generates a random decimal number between <code>0</code> (inclusive) and <code>1</code> (exclusive). Thus <code>Math.random()</code> can return a <code>0</code> but never return a <code>1</code>.</p>\n<p><strong>Note:</strong> Like <a href=\"/learn/javascript-algorithms-and-data-structures/basic-javascript/storing-values-with-the-assignment-operator\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Storing Values with the Assignment Operator</a>, all function calls will be resolved before the <code>return</code> executes, so we can <code>return</code> the value of the <code>Math.random()</code> function.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change <code>randomFraction</code> to return a random number instead of returning <code>0</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":104,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"cf1111c1c12feddfaeb1bdef","title":"Generate Random Whole Numbers with JavaScript","challengeType":1,"videoUrl":"https://scrimba.com/c/cRn6bfr","forumTopicId":18186,"dashedName":"generate-random-whole-numbers-with-javascript","challengeFiles":[{"head":"","tail":"(function(){return randomWholeNum();})();","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function randomWholeNum() {\n\n  // Only change code below this line\n\n  return Math.random();\n}","error":null,"seed":"function randomWholeNum() {\n\n  // Only change code below this line\n\n  return Math.random();\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function randomWholeNum() {\n  return Math.floor(Math.random() * 10);\n}","error":null,"seed":"function randomWholeNum() {\n  return Math.floor(Math.random() * 10);\n}"}]],"tests":[{"text":"<p>The result of <code>randomWholeNum</code> should be a whole number.</p>","testString":"assert(\n  typeof randomWholeNum() === 'number' &&\n    (function () {\n      var r = randomWholeNum();\n      return Math.floor(r) === r;\n    })()\n);"},{"text":"<p>You should use <code>Math.random</code> to generate a random number.</p>","testString":"assert(code.match(/Math.random/g).length >= 1);"},{"text":"<p>You should have multiplied the result of <code>Math.random</code> by 10 to make it a number that is between zero and nine.</p>","testString":"assert(\n  code.match(/\\s*?Math.random\\s*?\\(\\s*?\\)\\s*?\\*\\s*?10[\\D]\\s*?/g) ||\n    code.match(/\\s*?10\\s*?\\*\\s*?Math.random\\s*?\\(\\s*?\\)\\s*?/g)\n);"},{"text":"<p>You should use <code>Math.floor</code> to remove the decimal part of the number.</p>","testString":"assert(code.match(/Math.floor/g).length >= 1);"}],"description":"<section id=\"description\">\n<p>It's great that we can generate random decimal numbers, but it's even more useful if we use it to generate random whole numbers.</p>\n<ol><li>Use <code>Math.random()</code> to generate a random decimal.</li><li>Multiply that random decimal by <code>20</code>.</li><li>Use another function, <code>Math.floor()</code> to round the number down to its nearest whole number.</li></ol>\n<p>Remember that <code>Math.random()</code> can never quite return a <code>1</code> and, because we're rounding down, it's impossible to actually get <code>20</code>. This technique will give us a whole number between <code>0</code> and <code>19</code>.</p>\n<p>Putting everything together, this is what our code looks like:</p>\n<pre><code class=\"language-js\">Math.floor(Math.random() * 20);\n</code></pre>\n<p>We are calling <code>Math.random()</code>, multiplying the result by 20, then passing the value to <code>Math.floor()</code> function to round the value down to the nearest whole number.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use this technique to generate and return a random whole number between <code>0</code> and <code>9</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":105,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"cf1111c1c12feddfaeb2bdef","title":"Generate Random Whole Numbers within a Range","challengeType":1,"videoUrl":"https://scrimba.com/c/cm83yu6","forumTopicId":18187,"dashedName":"generate-random-whole-numbers-within-a-range","challengeFiles":[{"head":"","tail":"var calcMin = 100;\nvar calcMax = -100;\nfor(var i = 0; i < 100; i++) {\n  var result = randomRange(5,15);\n  calcMin = Math.min(calcMin, result);\n  calcMax = Math.max(calcMax, result);\n}\n(function(){\n  if(typeof myRandom === 'number') {\n    return \"myRandom = \" + myRandom;\n  } else {\n    return \"myRandom undefined\";\n  }\n})()","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function randomRange(myMin, myMax) {\n  // Only change code below this line\n  return 0;\n  // Only change code above this line\n}","error":null,"seed":"function randomRange(myMin, myMax) {\n  // Only change code below this line\n  return 0;\n  // Only change code above this line\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function randomRange(myMin, myMax) {\n  return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;\n}","error":null,"seed":"function randomRange(myMin, myMax) {\n  return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;\n}"}]],"tests":[{"text":"<p>The lowest random number that can be generated by <code>randomRange</code> should be equal to your minimum number, <code>myMin</code>.</p>","testString":"assert(calcMin === 5);"},{"text":"<p>The highest random number that can be generated by <code>randomRange</code> should be equal to your maximum number, <code>myMax</code>.</p>","testString":"assert(calcMax === 15);"},{"text":"<p>The random number generated by <code>randomRange</code> should be an integer, not a decimal.</p>","testString":"assert(randomRange(0, 1) % 1 === 0);"},{"text":"<p><code>randomRange</code> should use both <code>myMax</code> and <code>myMin</code>, and return a random number in your range.</p>","testString":"assert(\n  (function () {\n    if (\n      code.match(/myMax/g).length > 1 &&\n      code.match(/myMin/g).length > 2 &&\n      code.match(/Math.floor/g) &&\n      code.match(/Math.random/g)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })()\n);"}],"description":"<section id=\"description\">\n<p>Instead of generating a random whole number between zero and a given number like we did before, we can generate a random whole number that falls within a range of two specific numbers.</p>\n<p>To do this, we'll define a minimum number <code>min</code> and a maximum number <code>max</code>.</p>\n<p>Here's the formula we'll use. Take a moment to read it and try to understand what this code is doing:</p>\n<pre><code class=\"language-js\">Math.floor(Math.random() * (max - min + 1)) + min\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create a function called <code>randomRange</code> that takes a range <code>myMin</code> and <code>myMax</code> and returns a random whole number that's greater than or equal to <code>myMin</code>, and is less than or equal to <code>myMax</code>, inclusive.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":106,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244be","title":"Global Scope and Functions","challengeType":1,"videoUrl":"https://scrimba.com/c/cQM7mCN","forumTopicId":18193,"dashedName":"global-scope-and-functions","challengeFiles":[{"head":"var logOutput = \"\";\nvar originalConsole = console\nfunction capture() {\n    var nativeLog = console.log;\n    console.log = function (message) {\n        logOutput = message;\n        if(nativeLog.apply) {\n          nativeLog.apply(originalConsole, arguments);\n        } else {\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n          nativeLog(nativeMsg);\n        }\n    };\n}\n\nfunction uncapture() {\n  console.log = originalConsole.log;\n}\nvar oopsGlobal;\ncapture();","tail":"fun1();\nfun2();\nuncapture();\n(function() { return logOutput || \"console.log never called\"; })();","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Declare the myGlobal variable below this line\n\n\nfunction fun1() {\n  // Assign 5 to oopsGlobal here\n\n}\n\n// Only change code above this line\n\nfunction fun2() {\n  let output = \"\";\n  if (typeof myGlobal != \"undefined\") {\n    output += \"myGlobal: \" + myGlobal;\n  }\n  if (typeof oopsGlobal != \"undefined\") {\n    output += \" oopsGlobal: \" + oopsGlobal;\n  }\n  console.log(output);\n}","error":null,"seed":"// Declare the myGlobal variable below this line\n\n\nfunction fun1() {\n  // Assign 5 to oopsGlobal here\n\n}\n\n// Only change code above this line\n\nfunction fun2() {\n  let output = \"\";\n  if (typeof myGlobal != \"undefined\") {\n    output += \"myGlobal: \" + myGlobal;\n  }\n  if (typeof oopsGlobal != \"undefined\") {\n    output += \" oopsGlobal: \" + oopsGlobal;\n  }\n  console.log(output);\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myGlobal = 10;\n\nfunction fun1() {\n  oopsGlobal = 5;\n}\n\nfunction fun2() {\n  let output = \"\";\n  if(typeof myGlobal != \"undefined\") {\n    output += \"myGlobal: \" + myGlobal;\n  }\n  if(typeof oopsGlobal != \"undefined\") {\n    output += \" oopsGlobal: \" + oopsGlobal;\n  }\n  console.log(output);\n}","error":null,"seed":"const myGlobal = 10;\n\nfunction fun1() {\n  oopsGlobal = 5;\n}\n\nfunction fun2() {\n  let output = \"\";\n  if(typeof myGlobal != \"undefined\") {\n    output += \"myGlobal: \" + myGlobal;\n  }\n  if(typeof oopsGlobal != \"undefined\") {\n    output += \" oopsGlobal: \" + oopsGlobal;\n  }\n  console.log(output);\n}"}]],"tests":[{"text":"<p><code>myGlobal</code> should be defined</p>","testString":"assert(typeof myGlobal != 'undefined');"},{"text":"<p><code>myGlobal</code> should have a value of <code>10</code></p>","testString":"assert(myGlobal === 10);"},{"text":"<p><code>myGlobal</code> should be declared using the <code>let</code> or <code>const</code> keywords</p>","testString":"assert(/(let|const)\\s+myGlobal/.test(code));"},{"text":"<p><code>oopsGlobal</code> should be a global variable and have a value of <code>5</code></p>","testString":"assert(typeof oopsGlobal != 'undefined' && oopsGlobal === 5);"}],"description":"<section id=\"description\">\n<p>In JavaScript, <dfn>scope</dfn> refers to the visibility of variables. Variables which are defined outside of a function block have <dfn>Global</dfn> scope. This means, they can be seen everywhere in your JavaScript code.</p>\n<p>Variables which are declared without the <code>let</code> or <code>const</code> keywords are automatically created in the <code>global</code> scope. This can create unintended consequences elsewhere in your code or when running a function again. You should always declare your variables with <code>let</code> or <code>const</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Using <code>let</code> or <code>const</code>, declare a global variable named <code>myGlobal</code> outside of any function. Initialize it with a value of <code>10</code>.</p>\n<p>Inside function <code>fun1</code>, assign <code>5</code> to <code>oopsGlobal</code> <em><strong>without</strong></em> using the <code>var</code>, <code>let</code> or <code>const</code> keywords.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":51,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244c0","title":"Global vs. Local Scope in Functions","challengeType":1,"videoUrl":"https://scrimba.com/c/c2QwKH2","forumTopicId":18194,"dashedName":"global-vs--local-scope-in-functions","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst outerWear = \"T-Shirt\";\n\nfunction myOutfit() {\n  // Only change code below this line\n\n  // Only change code above this line\n  return outerWear;\n}\n\nmyOutfit();","error":null,"seed":"// Setup\nconst outerWear = \"T-Shirt\";\n\nfunction myOutfit() {\n  // Only change code below this line\n\n  // Only change code above this line\n  return outerWear;\n}\n\nmyOutfit();"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const outerWear = \"T-Shirt\";\nfunction myOutfit() {\n  const outerWear = \"sweater\";\n  return outerWear;\n}","error":null,"seed":"const outerWear = \"T-Shirt\";\nfunction myOutfit() {\n  const outerWear = \"sweater\";\n  return outerWear;\n}"}]],"tests":[{"text":"<p>You should not change the value of the global <code>outerWear</code>.</p>","testString":"assert(outerWear === 'T-Shirt');"},{"text":"<p><code>myOutfit</code> should return the string <code>sweater</code>.</p>","testString":"assert(myOutfit() === 'sweater');"},{"text":"<p>You should not change the return statement.</p>","testString":"assert(/return outerWear/.test(code));"}],"description":"<section id=\"description\">\n<p>It is possible to have both <dfn>local</dfn> and <dfn>global</dfn> variables with the same name. When you do this, the local variable takes precedence over the global variable.</p>\n<p>In this example:</p>\n<pre><code class=\"language-js\">const someVar = \"Hat\";\n\nfunction myFun() {\n  const someVar = \"Head\";\n  return someVar;\n}\n</code></pre>\n<p>The function <code>myFun</code> will return the string <code>Head</code> because the local version of the variable is present.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add a local variable to <code>myOutfit</code> function to override the value of <code>outerWear</code> with the string <code>sweater</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":53,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5664820f61c48e80c9fa476c","title":"Golf Code","challengeType":1,"videoUrl":"https://scrimba.com/c/c9ykNUR","forumTopicId":18195,"dashedName":"golf-code","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const names = [\"Hole-in-one!\", \"Eagle\", \"Birdie\", \"Par\", \"Bogey\", \"Double Bogey\", \"Go Home!\"];\n\nfunction golfScore(par, strokes) {\n  // Only change code below this line\n\n\n  return \"Change Me\";\n  // Only change code above this line\n}\n\ngolfScore(5, 4);","error":null,"seed":"const names = [\"Hole-in-one!\", \"Eagle\", \"Birdie\", \"Par\", \"Bogey\", \"Double Bogey\", \"Go Home!\"];\n\nfunction golfScore(par, strokes) {\n  // Only change code below this line\n\n\n  return \"Change Me\";\n  // Only change code above this line\n}\n\ngolfScore(5, 4);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function golfScore(par, strokes) {\n  if (strokes === 1) {\n    return \"Hole-in-one!\";\n  }\n\n  if (strokes <= par - 2) {\n    return \"Eagle\";\n  }\n\n  if (strokes === par - 1) {\n    return \"Birdie\";\n  }\n\n  if (strokes === par) {\n    return \"Par\";\n  }\n\n  if (strokes === par + 1) {\n    return \"Bogey\";\n  }\n\n  if(strokes === par + 2) {\n    return \"Double Bogey\";\n  }\n\n  return \"Go Home!\";\n}","error":null,"seed":"function golfScore(par, strokes) {\n  if (strokes === 1) {\n    return \"Hole-in-one!\";\n  }\n\n  if (strokes <= par - 2) {\n    return \"Eagle\";\n  }\n\n  if (strokes === par - 1) {\n    return \"Birdie\";\n  }\n\n  if (strokes === par) {\n    return \"Par\";\n  }\n\n  if (strokes === par + 1) {\n    return \"Bogey\";\n  }\n\n  if(strokes === par + 2) {\n    return \"Double Bogey\";\n  }\n\n  return \"Go Home!\";\n}"}]],"tests":[{"text":"<p><code>golfScore(4, 1)</code> should return the string <code>Hole-in-one!</code></p>","testString":"assert(golfScore(4, 1) === 'Hole-in-one!');"},{"text":"<p><code>golfScore(4, 2)</code> should return the string <code>Eagle</code></p>","testString":"assert(golfScore(4, 2) === 'Eagle');"},{"text":"<p><code>golfScore(5, 2)</code> should return the string <code>Eagle</code></p>","testString":"assert(golfScore(5, 2) === 'Eagle');"},{"text":"<p><code>golfScore(4, 3)</code> should return the string <code>Birdie</code></p>","testString":"assert(golfScore(4, 3) === 'Birdie');"},{"text":"<p><code>golfScore(4, 4)</code> should return the string <code>Par</code></p>","testString":"assert(golfScore(4, 4) === 'Par');"},{"text":"<p><code>golfScore(1, 1)</code> should return the string <code>Hole-in-one!</code></p>","testString":"assert(golfScore(1, 1) === 'Hole-in-one!');"},{"text":"<p><code>golfScore(5, 5)</code> should return the string <code>Par</code></p>","testString":"assert(golfScore(5, 5) === 'Par');"},{"text":"<p><code>golfScore(4, 5)</code> should return the string <code>Bogey</code></p>","testString":"assert(golfScore(4, 5) === 'Bogey');"},{"text":"<p><code>golfScore(4, 6)</code> should return the string <code>Double Bogey</code></p>","testString":"assert(golfScore(4, 6) === 'Double Bogey');"},{"text":"<p><code>golfScore(4, 7)</code> should return the string <code>Go Home!</code></p>","testString":"assert(golfScore(4, 7) === 'Go Home!');"},{"text":"<p><code>golfScore(5, 9)</code> should return the string <code>Go Home!</code></p>","testString":"assert(golfScore(5, 9) === 'Go Home!');"}],"description":"<section id=\"description\">\n<p>In the game of Golf, each hole has a <code>par</code>, meaning, the average number of <code>strokes</code> a golfer is expected to make in order to sink the ball in the hole to complete the play. Depending on how far above or below <code>par</code> your <code>strokes</code> are, there is a different nickname.</p>\n<p>Your function will be passed <code>par</code> and <code>strokes</code> arguments. Return the correct string according to this table which lists the strokes in order of priority; top (highest) to bottom (lowest):</p>\n<table class='table table-striped'><thead><tr><th>Strokes</th><th>Return</th></tr></thead><tbody><tr><td>1</td><td>\"Hole-in-one!\"</td></tr><tr><td>&#x3C;= par - 2</td><td>\"Eagle\"</td></tr><tr><td>par - 1</td><td>\"Birdie\"</td></tr><tr><td>par</td><td>\"Par\"</td></tr><tr><td>par + 1</td><td>\"Bogey\"</td></tr><tr><td>par + 2</td><td>\"Double Bogey\"</td></tr><tr><td>>= par + 3</td><td>\"Go Home!\"</td></tr></tbody></table>\n<p><code>par</code> and <code>strokes</code> will always be numeric and positive. We have added an array of all the names for your convenience.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":74,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244ac","title":"Increment a Number with JavaScript","challengeType":1,"videoUrl":"https://scrimba.com/c/ca8GLT9","forumTopicId":18201,"dashedName":"increment-a-number-with-javascript","challengeFiles":[{"head":"","tail":"(function(z){return 'myVar = ' + z;})(myVar);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let myVar = 87;\n\n// Only change code below this line\nmyVar = myVar + 1;","error":null,"seed":"let myVar = 87;\n\n// Only change code below this line\nmyVar = myVar + 1;"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let myVar = 87;\nmyVar++;","error":null,"seed":"let myVar = 87;\nmyVar++;"}]],"tests":[{"text":"<p><code>myVar</code> should equal <code>88</code>.</p>","testString":"assert(myVar === 88);"},{"text":"<p>You should not use the assignment operator.</p>","testString":"assert(\n  /let\\s*myVar\\s*=\\s*87;\\s*\\/*.*\\s*([+]{2}\\s*myVar|myVar\\s*[+]{2})/.test(code)\n);"},{"text":"<p>You should use the <code>++</code> operator.</p>","testString":"assert(/[+]{2}\\s*myVar|myVar\\s*[+]{2}/.test(code));"},{"text":"<p>You should not change code above the specified comment.</p>","testString":"assert(/let myVar = 87;/.test(code));"}],"description":"<section id=\"description\">\n<p>You can easily <dfn>increment</dfn> or add one to a variable with the <code>++</code> operator.</p>\n<pre><code class=\"language-js\">i++;\n</code></pre>\n<p>is the equivalent of</p>\n<pre><code class=\"language-js\">i = i + 1;\n</code></pre>\n<p><strong>Note:</strong> The entire line becomes <code>i++;</code>, eliminating the need for the equal sign.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the code to use the <code>++</code> operator on <code>myVar</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":14,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244a9","title":"Initializing Variables with the Assignment Operator","challengeType":1,"videoUrl":"https://scrimba.com/c/cWJ4Bfb","forumTopicId":301171,"dashedName":"initializing-variables-with-the-assignment-operator","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"","error":null,"seed":""}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"var a = 9;","error":null,"seed":"var a = 9;"}]],"tests":[{"text":"<p>You should initialize <code>a</code> to a value of <code>9</code>.</p>","testString":"assert(/var\\s+a\\s*=\\s*9(\\s*;?\\s*)$/.test(code));"}],"description":"<section id=\"description\">\n<p>It is common to <dfn>initialize</dfn> a variable to an initial value in the same line as it is declared.</p>\n<pre><code class=\"language-js\">var myVar = 0;\n</code></pre>\n<p>Creates a new variable called <code>myVar</code> and assigns it an initial value of <code>0</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Define a variable <code>a</code> with <code>var</code> and initialize it to a value of <code>9</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":4,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244db","title":"Introducing Else If Statements","challengeType":1,"videoUrl":"https://scrimba.com/c/caeJ2hm","forumTopicId":18206,"dashedName":"introducing-else-if-statements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testElseIf(val) {\n  if (val > 10) {\n    return \"Greater than 10\";\n  }\n\n  if (val < 5) {\n    return \"Smaller than 5\";\n  }\n\n  return \"Between 5 and 10\";\n}\n\ntestElseIf(7);","error":null,"seed":"function testElseIf(val) {\n  if (val > 10) {\n    return \"Greater than 10\";\n  }\n\n  if (val < 5) {\n    return \"Smaller than 5\";\n  }\n\n  return \"Between 5 and 10\";\n}\n\ntestElseIf(7);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testElseIf(val) {\n  if(val > 10) {\n    return \"Greater than 10\";\n  } else if(val < 5) {\n    return \"Smaller than 5\";\n  } else {\n    return \"Between 5 and 10\";\n  }\n}","error":null,"seed":"function testElseIf(val) {\n  if(val > 10) {\n    return \"Greater than 10\";\n  } else if(val < 5) {\n    return \"Smaller than 5\";\n  } else {\n    return \"Between 5 and 10\";\n  }\n}"}]],"tests":[{"text":"<p>You should have at least two <code>else</code> statements</p>","testString":"assert(code.match(/else/g).length > 1);"},{"text":"<p>You should have at least two <code>if</code> statements</p>","testString":"assert(code.match(/if/g).length > 1);"},{"text":"<p>You should have closing and opening curly braces for each <code>if else</code> code block.</p>","testString":"assert(\n  code.match(\n    /if\\s*\\((.+)\\)\\s*\\{[\\s\\S]+\\}\\s*else\\s+if\\s*\\((.+)\\)\\s*\\{[\\s\\S]+\\}\\s*else\\s*\\{[\\s\\S]+\\s*\\}/\n  )\n);"},{"text":"<p><code>testElseIf(0)</code> should return the string <code>Smaller than 5</code></p>","testString":"assert(testElseIf(0) === 'Smaller than 5');"},{"text":"<p><code>testElseIf(5)</code> should return the string <code>Between 5 and 10</code></p>","testString":"assert(testElseIf(5) === 'Between 5 and 10');"},{"text":"<p><code>testElseIf(7)</code> should return the string <code>Between 5 and 10</code></p>","testString":"assert(testElseIf(7) === 'Between 5 and 10');"},{"text":"<p><code>testElseIf(10)</code> should return the string <code>Between 5 and 10</code></p>","testString":"assert(testElseIf(10) === 'Between 5 and 10');"},{"text":"<p><code>testElseIf(12)</code> should return the string <code>Greater than 10</code></p>","testString":"assert(testElseIf(12) === 'Greater than 10');"}],"description":"<section id=\"description\">\n<p>If you have multiple conditions that need to be addressed, you can chain <code>if</code> statements together with <code>else if</code> statements.</p>\n<pre><code class=\"language-js\">if (num > 15) {\n  return \"Bigger than 15\";\n} else if (num &#x3C; 5) {\n  return \"Smaller than 5\";\n} else {\n  return \"Between 5 and 15\";\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Convert the logic to use <code>else if</code> statements.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":71,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244da","title":"Introducing Else Statements","challengeType":1,"videoUrl":"https://scrimba.com/c/cek4Efq","forumTopicId":18207,"dashedName":"introducing-else-statements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testElse(val) {\n  let result = \"\";\n  // Only change code below this line\n\n  if (val > 5) {\n    result = \"Bigger than 5\";\n  }\n\n  if (val <= 5) {\n    result = \"5 or Smaller\";\n  }\n\n  // Only change code above this line\n  return result;\n}\n\ntestElse(4);","error":null,"seed":"function testElse(val) {\n  let result = \"\";\n  // Only change code below this line\n\n  if (val > 5) {\n    result = \"Bigger than 5\";\n  }\n\n  if (val <= 5) {\n    result = \"5 or Smaller\";\n  }\n\n  // Only change code above this line\n  return result;\n}\n\ntestElse(4);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function testElse(val) {\n  let result = \"\";\n  if(val > 5) {\n    result = \"Bigger than 5\";\n  } else {\n    result = \"5 or Smaller\";\n  }\n  return result;\n}","error":null,"seed":"function testElse(val) {\n  let result = \"\";\n  if(val > 5) {\n    result = \"Bigger than 5\";\n  } else {\n    result = \"5 or Smaller\";\n  }\n  return result;\n}"}]],"tests":[{"text":"<p>You should only have one <code>if</code> statement in the editor</p>","testString":"assert(code.match(/if/g).length === 1);"},{"text":"<p>You should use an <code>else</code> statement</p>","testString":"assert(/else/g.test(code));"},{"text":"<p><code>testElse(4)</code> should return the string <code>5 or Smaller</code></p>","testString":"assert(testElse(4) === '5 or Smaller');"},{"text":"<p><code>testElse(5)</code> should return the string <code>5 or Smaller</code></p>","testString":"assert(testElse(5) === '5 or Smaller');"},{"text":"<p><code>testElse(6)</code> should return the string <code>Bigger than 5</code></p>","testString":"assert(testElse(6) === 'Bigger than 5');"},{"text":"<p><code>testElse(10)</code> should return the string <code>Bigger than 5</code></p>","testString":"assert(testElse(10) === 'Bigger than 5');"},{"text":"<p>You should not change the code above or below the specified comments.</p>","testString":"assert(/let result = \"\";/.test(code) && /return result;/.test(code));"}],"description":"<section id=\"description\">\n<p>When a condition for an <code>if</code> statement is true, the block of code following it is executed. What about when that condition is false? Normally nothing would happen. With an <code>else</code> statement, an alternate block of code can be executed.</p>\n<pre><code class=\"language-js\">if (num > 10) {\n  return \"Bigger than 10\";\n} else {\n  return \"10 or Less\";\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Combine the <code>if</code> statements into a single <code>if/else</code> statement.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":70,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56104e9e514f539506016a5c","title":"Iterate Odd Numbers With a For Loop","challengeType":1,"videoUrl":"https://scrimba.com/c/cm8n7T9","forumTopicId":18212,"dashedName":"iterate-odd-numbers-with-a-for-loop","challengeFiles":[{"head":"","tail":"if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst myArray = [];\n\n// Only change code below this line\n","error":null,"seed":"// Setup\nconst myArray = [];\n\n// Only change code below this line\n"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myArray = [];\nfor (let i = 1; i < 10; i += 2) {\n  myArray.push(i);\n}","error":null,"seed":"const myArray = [];\nfor (let i = 1; i < 10; i += 2) {\n  myArray.push(i);\n}"}]],"tests":[{"text":"<p>You should be using a <code>for</code> loop for this.</p>","testString":"assert(/for\\s*\\([^)]+?\\)/.test(code));"},{"text":"<p><code>myArray</code> should equal <code>[1, 3, 5, 7, 9]</code>.</p>","testString":"assert.deepEqual(myArray, [1, 3, 5, 7, 9]);"}],"description":"<section id=\"description\">\n<p>For loops don't have to iterate one at a time. By changing our <code>final-expression</code>, we can count by even numbers.</p>\n<p>We'll start at <code>i = 0</code> and loop while <code>i &#x3C; 10</code>. We'll increment <code>i</code> by 2 each loop with <code>i += 2</code>.</p>\n<pre><code class=\"language-js\">const ourArray = [];\n\nfor (let i = 0; i &#x3C; 10; i += 2) {\n  ourArray.push(i);\n}\n</code></pre>\n<p><code>ourArray</code> will now contain <code>[0, 2, 4, 6, 8]</code>. Let's change our <code>initialization</code> so we can count by odd numbers.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Push the odd numbers from 1 through 9 to <code>myArray</code> using a <code>for</code> loop.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":97,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5675e877dbd60be8ad28edc6","title":"Iterate Through an Array with a For Loop","challengeType":1,"videoUrl":"https://scrimba.com/c/caeR3HB","forumTopicId":18216,"dashedName":"iterate-through-an-array-with-a-for-loop","challengeFiles":[{"head":"","tail":"(function(){if(typeof total !== 'undefined') { return \"total = \" + total; } else { return \"total is undefined\";}})()","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst myArr = [2, 3, 4, 5, 6];\n\n// Only change code below this line\n","error":null,"seed":"// Setup\nconst myArr = [2, 3, 4, 5, 6];\n\n// Only change code below this line\n"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myArr = [2, 3, 4, 5, 6];\nlet total = 0;\n\nfor (let i = 0; i < myArr.length; i++) {\n  total += myArr[i];\n}","error":null,"seed":"const myArr = [2, 3, 4, 5, 6];\nlet total = 0;\n\nfor (let i = 0; i < myArr.length; i++) {\n  total += myArr[i];\n}"}]],"tests":[{"text":"<p><code>total</code> should be declared and initialized to 0.</p>","testString":"assert(code.match(/(var|let|const)\\s*?total\\s*=\\s*0.*?;?/));"},{"text":"<p><code>total</code> should equal 20.</p>","testString":"assert(total === 20);"},{"text":"<p>You should use a <code>for</code> loop to iterate through <code>myArr</code>.</p>","testString":"assert(/for\\s*\\(/g.test(code) && /myArr\\s*\\[/g.test(code));"},{"text":"<p>You should not attempt to directly assign the value 20 to <code>total</code>.</p>","testString":"assert(!__helpers.removeWhiteSpace(code).match(/total[=+-]0*[1-9]+/gm));"}],"description":"<section id=\"description\">\n<p>A common task in JavaScript is to iterate through the contents of an array. One way to do that is with a <code>for</code> loop. This code will output each element of the array <code>arr</code> to the console:</p>\n<pre><code class=\"language-js\">const arr = [10, 9, 8, 7, 6];\n\nfor (let i = 0; i &#x3C; arr.length; i++) {\n   console.log(arr[i]);\n}\n</code></pre>\n<p>Remember that arrays have zero-based indexing, which means the last index of the array is <code>length - 1</code>. Our condition for this loop is <code>i &#x3C; arr.length</code>, which stops the loop when <code>i</code> is equal to <code>length</code>. In this case the last iteration is <code>i === 4</code> i.e. when <code>i</code> becomes equal to <code>arr.length - 1</code> and outputs <code>6</code> to the console. Then <code>i</code> increases to <code>5</code>, and the loop terminates because <code>i &#x3C; arr.length</code> is <code>false</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Declare and initialize a variable <code>total</code> to <code>0</code>. Use a <code>for</code> loop to add the value of each element of the <code>myArr</code> array to <code>total</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":99,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a2efd662fb457916e1fe604","title":"Iterate with JavaScript Do...While Loops","challengeType":1,"videoUrl":"https://scrimba.com/c/cDqWGcp","forumTopicId":301172,"dashedName":"iterate-with-javascript-do---while-loops","challengeFiles":[{"head":"","tail":"if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst myArray = [];\nlet i = 10;\n\n// Only change code below this line\nwhile (i < 5) {\n  myArray.push(i);\n  i++;\n}","error":null,"seed":"// Setup\nconst myArray = [];\nlet i = 10;\n\n// Only change code below this line\nwhile (i < 5) {\n  myArray.push(i);\n  i++;\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myArray = [];\nlet i = 10;\ndo {\n  myArray.push(i);\n  i++;\n} while (i < 5)","error":null,"seed":"const myArray = [];\nlet i = 10;\ndo {\n  myArray.push(i);\n  i++;\n} while (i < 5)"}]],"tests":[{"text":"<p>You should be using a <code>do...while</code> loop for this exercise.</p>","testString":"assert(code.match(/do/g));"},{"text":"<p><code>myArray</code> should equal <code>[10]</code>.</p>","testString":"assert.deepEqual(myArray, [10]);"},{"text":"<p><code>i</code> should equal <code>11</code></p>","testString":"assert.equal(i, 11);"}],"description":"<section id=\"description\">\n<p>The next type of loop you will learn is called a <code>do...while</code> loop. It is called a <code>do...while</code> loop because it will first <code>do</code> one pass of the code inside the loop no matter what, and then continue to run the loop <code>while</code> the specified condition evaluates to <code>true</code>.</p>\n<pre><code class=\"language-js\">const ourArray = [];\nlet i = 0;\n\ndo {\n  ourArray.push(i);\n  i++;\n} while (i &#x3C; 5);\n</code></pre>\n<p>The example above behaves similar to other types of loops, and the resulting array will look like <code>[0, 1, 2, 3, 4]</code>. However, what makes the <code>do...while</code> different from other loops is how it behaves when the condition fails on the first check. Let's see this in action. Here is a regular <code>while</code> loop that will run the code in the loop as long as <code>i &#x3C; 5</code>:</p>\n<pre><code class=\"language-js\">const ourArray = []; \nlet i = 5;\n\nwhile (i &#x3C; 5) {\n  ourArray.push(i);\n  i++;\n}\n</code></pre>\n<p>In this example, we initialize the value of <code>ourArray</code> to an empty array and the value of <code>i</code> to 5. When we execute the <code>while</code> loop, the condition evaluates to <code>false</code> because <code>i</code> is not less than 5, so we do not execute the code inside the loop. The result is that <code>ourArray</code> will end up with no values added to it, and it will still look like <code>[]</code> when all of the code in the example above has completed running. Now, take a look at a <code>do...while</code> loop:</p>\n<pre><code class=\"language-js\">const ourArray = []; \nlet i = 5;\n\ndo {\n  ourArray.push(i);\n  i++;\n} while (i &#x3C; 5);\n</code></pre>\n<p>In this case, we initialize the value of <code>i</code> to 5, just like we did with the <code>while</code> loop. When we get to the next line, there is no condition to evaluate, so we go to the code inside the curly braces and execute it. We will add a single element to the array and then increment <code>i</code> before we get to the condition check. When we finally evaluate the condition <code>i &#x3C; 5</code> on the last line, we see that <code>i</code> is now 6, which fails the conditional check, so we exit the loop and are done. At the end of the above example, the value of <code>ourArray</code> is <code>[5]</code>. Essentially, a <code>do...while</code> loop ensures that the code inside the loop will run at least once. Let's try getting a <code>do...while</code> loop to work by pushing values to an array.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the <code>while</code> loop in the code to a <code>do...while</code> loop so the loop will push only the number <code>10</code> to <code>myArray</code>, and <code>i</code> will be equal to <code>11</code> when your code has finished running.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":101,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"cf1111c1c11feddfaeb5bdef","title":"Iterate with JavaScript For Loops","challengeType":1,"videoUrl":"https://scrimba.com/c/c9yNVCe","forumTopicId":18219,"dashedName":"iterate-with-javascript-for-loops","challengeFiles":[{"head":"","tail":"if (typeof myArray !== \"undefined\"){(function(){return myArray;})();}","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst myArray = [];\n\n// Only change code below this line\n","error":null,"seed":"// Setup\nconst myArray = [];\n\n// Only change code below this line\n"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myArray = [];\nfor (let i = 1; i < 6; i++) {\n  myArray.push(i);\n}","error":null,"seed":"const myArray = [];\nfor (let i = 1; i < 6; i++) {\n  myArray.push(i);\n}"}]],"tests":[{"text":"<p>You should be using a <code>for</code> loop for this.</p>","testString":"assert(/for\\s*\\([^)]+?\\)/.test(code));"},{"text":"<p><code>myArray</code> should equal <code>[1, 2, 3, 4, 5]</code>.</p>","testString":"assert.deepEqual(myArray, [1, 2, 3, 4, 5]);"}],"description":"<section id=\"description\">\n<p>You can run the same code multiple times by using a loop.</p>\n<p>The most common type of JavaScript loop is called a <code>for</code> loop because it runs for a specific number of times.</p>\n<p>For loops are declared with three optional expressions separated by semicolons:</p>\n<p><code>for (a; b; c)</code>, where <code>a</code> is the initialization statement, <code>b</code> is the condition statement, and <code>c</code> is the final expression.</p>\n<p>The initialization statement is executed one time only before the loop starts. It is typically used to define and setup your loop variable.</p>\n<p>The condition statement is evaluated at the beginning of every loop iteration and will continue as long as it evaluates to <code>true</code>. When the condition is <code>false</code> at the start of the iteration, the loop will stop executing. This means if the condition starts as false, your loop will never execute.</p>\n<p>The final expression is executed at the end of each loop iteration, prior to the next condition check and is usually used to increment or decrement your loop counter.</p>\n<p>In the following example we initialize with <code>i = 0</code> and iterate while our condition <code>i &#x3C; 5</code> is true. We'll increment <code>i</code> by <code>1</code> in each loop iteration with <code>i++</code> as our final expression.</p>\n<pre><code class=\"language-js\">const ourArray = [];\n\nfor (let i = 0; i &#x3C; 5; i++) {\n  ourArray.push(i);\n}\n</code></pre>\n<p><code>ourArray</code> will now have the value <code>[0, 1, 2, 3, 4]</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use a <code>for</code> loop to push the values 1 through 5 onto <code>myArray</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":96,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"cf1111c1c11feddfaeb1bdef","title":"Iterate with JavaScript While Loops","challengeType":1,"videoUrl":"https://scrimba.com/c/c8QbnCM","forumTopicId":18220,"dashedName":"iterate-with-javascript-while-loops","challengeFiles":[{"head":"","tail":"if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst myArray = [];\n\n// Only change code below this line\n","error":null,"seed":"// Setup\nconst myArray = [];\n\n// Only change code below this line\n"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myArray = [];\nlet i = 5;\nwhile (i >= 0) {\n  myArray.push(i);\n  i--;\n}","error":null,"seed":"const myArray = [];\nlet i = 5;\nwhile (i >= 0) {\n  myArray.push(i);\n  i--;\n}"}]],"tests":[{"text":"<p>You should be using a <code>while</code> loop for this.</p>","testString":"assert(code.match(/while/g));"},{"text":"<p><code>myArray</code> should equal <code>[5, 4, 3, 2, 1, 0]</code>.</p>","testString":"assert.deepEqual(myArray, [5, 4, 3, 2, 1, 0]);"}],"description":"<section id=\"description\">\n<p>You can run the same code multiple times by using a loop.</p>\n<p>The first type of loop we will learn is called a <code>while</code> loop because it runs while a specified condition is true and stops once that condition is no longer true.</p>\n<pre><code class=\"language-js\">const ourArray = [];\nlet i = 0;\n\nwhile (i &#x3C; 5) {\n  ourArray.push(i);\n  i++;\n}\n</code></pre>\n<p>In the code example above, the <code>while</code> loop will execute 5 times and append the numbers 0 through 4 to <code>ourArray</code>.</p>\n<p>Let's try getting a while loop to work by pushing values to an array.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the numbers 5 through 0 (inclusive) in descending order to <code>myArray</code> using a <code>while</code> loop.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":95,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244bf","title":"Local Scope and Functions","challengeType":1,"videoUrl":"https://scrimba.com/c/cd62NhM","forumTopicId":18227,"dashedName":"local-scope-and-functions","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function myLocalScope() {\n  // Only change code below this line\n\n  console.log('inside myLocalScope', myVar);\n}\nmyLocalScope();\n\n// Run and check the console\n// myVar is not defined outside of myLocalScope\nconsole.log('outside myLocalScope', myVar);","error":null,"seed":"function myLocalScope() {\n  // Only change code below this line\n\n  console.log('inside myLocalScope', myVar);\n}\nmyLocalScope();\n\n// Run and check the console\n// myVar is not defined outside of myLocalScope\nconsole.log('outside myLocalScope', myVar);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function myLocalScope() {\n  // Only change code below this line\n  let myVar;\n  console.log('inside myLocalScope', myVar);\n}\nmyLocalScope();\n\n// Run and check the console\n// myVar is not defined outside of myLocalScope\nconsole.log('outside myLocalScope', myVar);","error":null,"seed":"function myLocalScope() {\n  // Only change code below this line\n  let myVar;\n  console.log('inside myLocalScope', myVar);\n}\nmyLocalScope();\n\n// Run and check the console\n// myVar is not defined outside of myLocalScope\nconsole.log('outside myLocalScope', myVar);"}]],"tests":[{"text":"<p>The code should not contain a global <code>myVar</code> variable.</p>","testString":"function declared() {\n  myVar;\n}\n\nassert.throws(declared, ReferenceError);"},{"text":"<p>You should add a local <code>myVar</code> variable.</p>","testString":"assert(\n  /functionmyLocalScope\\(\\)\\{.*(var|let|const)myVar[\\s\\S]*}/.test(\n    __helpers.removeWhiteSpace(code)\n  )\n);"}],"description":"<section id=\"description\">\n<p>Variables which are declared within a function, as well as the function parameters, have <dfn>local</dfn> scope. That means they are only visible within that function.</p>\n<p>Here is a function <code>myTest</code> with a local variable called <code>loc</code>.</p>\n<pre><code class=\"language-js\">function myTest() {\n  const loc = \"foo\";\n  console.log(loc);\n}\n\nmyTest();\nconsole.log(loc);\n</code></pre>\n<p>The <code>myTest()</code> function call will display the string <code>foo</code> in the console. The <code>console.log(loc)</code> line (outside of the <code>myTest</code> function) will throw an error, as <code>loc</code> is not defined outside of the function.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The editor has two <code>console.log</code>s to help you see what is happening. Check the console as you code to see how it changes. Declare a local variable <code>myVar</code> inside <code>myLocalScope</code> and run the tests.</p>\n<p><strong>Note:</strong> The console will still display <code>ReferenceError: myVar is not defined</code>, but this will not cause the tests to fail.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":52,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5690307fddb111c6084545d7","title":"Logical Order in If Else Statements","challengeType":1,"videoUrl":"https://scrimba.com/c/cwNvMUV","forumTopicId":18228,"dashedName":"logical-order-in-if-else-statements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function orderMyLogic(val) {\n  if (val < 10) {\n    return \"Less than 10\";\n  } else if (val < 5) {\n    return \"Less than 5\";\n  } else {\n    return \"Greater than or equal to 10\";\n  }\n}\n\norderMyLogic(7);","error":null,"seed":"function orderMyLogic(val) {\n  if (val < 10) {\n    return \"Less than 10\";\n  } else if (val < 5) {\n    return \"Less than 5\";\n  } else {\n    return \"Greater than or equal to 10\";\n  }\n}\n\norderMyLogic(7);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function orderMyLogic(val) {\n  if(val < 5) {\n    return \"Less than 5\";\n  } else if (val < 10) {\n    return \"Less than 10\";\n  } else {\n    return \"Greater than or equal to 10\";\n  }\n}","error":null,"seed":"function orderMyLogic(val) {\n  if(val < 5) {\n    return \"Less than 5\";\n  } else if (val < 10) {\n    return \"Less than 10\";\n  } else {\n    return \"Greater than or equal to 10\";\n  }\n}"}]],"tests":[{"text":"<p><code>orderMyLogic(4)</code> should return the string <code>Less than 5</code></p>","testString":"assert(orderMyLogic(4) === 'Less than 5');"},{"text":"<p><code>orderMyLogic(6)</code> should return the string <code>Less than 10</code></p>","testString":"assert(orderMyLogic(6) === 'Less than 10');"},{"text":"<p><code>orderMyLogic(11)</code> should return the string <code>Greater than or equal to 10</code></p>","testString":"assert(orderMyLogic(11) === 'Greater than or equal to 10');"}],"description":"<section id=\"description\">\n<p>Order is important in <code>if</code>, <code>else if</code> statements.</p>\n<p>The function is executed from top to bottom so you will want to be careful of what statement comes first.</p>\n<p>Take these two functions as an example.</p>\n<p>Here's the first:</p>\n<pre><code class=\"language-js\">function foo(x) {\n  if (x &#x3C; 1) {\n    return \"Less than one\";\n  } else if (x &#x3C; 2) {\n    return \"Less than two\";\n  } else {\n    return \"Greater than or equal to two\";\n  }\n}\n</code></pre>\n<p>And the second just switches the order of the statements:</p>\n<pre><code class=\"language-js\">function bar(x) {\n  if (x &#x3C; 2) {\n    return \"Less than two\";\n  } else if (x &#x3C; 1) {\n    return \"Less than one\";\n  } else {\n    return \"Greater than or equal to two\";\n  }\n}\n</code></pre>\n<p>While these two functions look nearly identical if we pass a number to both we get different outputs.</p>\n<pre><code class=\"language-js\">foo(0)\nbar(0)\n</code></pre>\n<p><code>foo(0)</code> will return the string <code>Less than one</code>, and <code>bar(0)</code> will return the string <code>Less than two</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the order of logic in the function so that it will return the correct statements in all cases.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":72,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56bbb991ad1ed5201cd392cc","title":"Manipulate Arrays With pop()","challengeType":1,"videoUrl":"https://scrimba.com/c/cRbVZAB","forumTopicId":18236,"dashedName":"manipulate-arrays-with-pop","challengeFiles":[{"head":"","tail":"if (typeof removedFromMyArray !== 'undefined') (function(y, z){return 'myArray = ' + JSON.stringify(y) + ' & removedFromMyArray = ' + JSON.stringify(z);})(myArray, removedFromMyArray);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst myArray = [[\"John\", 23], [\"cat\", 2]];\n\n// Only change code below this line\n","error":null,"seed":"// Setup\nconst myArray = [[\"John\", 23], [\"cat\", 2]];\n\n// Only change code below this line\n"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myArray = [[\"John\", 23], [\"cat\", 2]];\nconst removedFromMyArray = myArray.pop();","error":null,"seed":"const myArray = [[\"John\", 23], [\"cat\", 2]];\nconst removedFromMyArray = myArray.pop();"}]],"tests":[{"text":"<p><code>myArray</code> should only contain <code>[[\"John\", 23]]</code>.</p>","testString":"assert(\n  (function (d) {\n    if (d[0][0] == 'John' && d[0][1] === 23 && d[1] == undefined) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myArray)\n);"},{"text":"<p>You should use <code>pop()</code> on <code>myArray</code>.</p>","testString":"assert(/removedFromMyArray\\s*=\\s*myArray\\s*.\\s*pop\\s*(\\s*)/.test(code));"},{"text":"<p><code>removedFromMyArray</code> should only contain <code>[\"cat\", 2]</code>.</p>","testString":"assert(\n  (function (d) {\n    if (d[0] == 'cat' && d[1] === 2 && d[2] == undefined) {\n      return true;\n    } else {\n      return false;\n    }\n  })(removedFromMyArray)\n);"}],"description":"<section id=\"description\">\n<p>Another way to change the data in an array is with the <code>.pop()</code> function.</p>\n<p><code>.pop()</code> is used to pop a value off of the end of an array. We can store this popped off value by assigning it to a variable. In other words, <code>.pop()</code> removes the last element from an array and returns that element.</p>\n<p>Any type of entry can be popped off of an array - numbers, strings, even nested arrays.</p>\n<pre><code class=\"language-js\">const threeArr = [1, 4, 6];\nconst oneDown = threeArr.pop();\nconsole.log(oneDown);\nconsole.log(threeArr);\n</code></pre>\n<p>The first <code>console.log</code> will display the value <code>6</code>, and the second will display the value <code>[1, 4]</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the <code>.pop()</code> function to remove the last item from <code>myArray</code> and assign the popped off value to a new variable, <code>removedFromMyArray</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":44,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56bbb991ad1ed5201cd392cb","title":"Manipulate Arrays With push()","challengeType":1,"videoUrl":"https://scrimba.com/c/cnqmVtJ","forumTopicId":18237,"dashedName":"manipulate-arrays-with-push","challengeFiles":[{"head":"","tail":"(function(z){return 'myArray = ' + JSON.stringify(z);})(myArray);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst myArray = [[\"John\", 23], [\"cat\", 2]];\n\n// Only change code below this line\n","error":null,"seed":"// Setup\nconst myArray = [[\"John\", 23], [\"cat\", 2]];\n\n// Only change code below this line\n"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myArray = [[\"John\", 23], [\"cat\", 2]];\nmyArray.push([\"dog\",3]);","error":null,"seed":"const myArray = [[\"John\", 23], [\"cat\", 2]];\nmyArray.push([\"dog\",3]);"}]],"tests":[{"text":"<p><code>myArray</code> should now equal <code>[[\"John\", 23], [\"cat\", 2], [\"dog\", 3]]</code>.</p>","testString":"assert(\n  (function (d) {\n    if (\n      d[2] != undefined &&\n      d[0][0] == 'John' &&\n      d[0][1] === 23 &&\n      d[2][0] == 'dog' &&\n      d[2][1] === 3 &&\n      d[2].length == 2\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myArray)\n);"}],"description":"<section id=\"description\">\n<p>An easy way to append data to the end of an array is via the <code>push()</code> function.</p>\n<p><code>.push()</code> takes one or more <dfn>parameters</dfn> and \"pushes\" them onto the end of the array.</p>\n<p>Examples:</p>\n<pre><code class=\"language-js\">const arr1 = [1, 2, 3];\narr1.push(4);\n\nconst arr2 = [\"Stimpson\", \"J\", \"cat\"];\narr2.push([\"happy\", \"joy\"]);\n</code></pre>\n<p><code>arr1</code> now has the value <code>[1, 2, 3, 4]</code> and <code>arr2</code> has the value <code>[\"Stimpson\", \"J\", \"cat\", [\"happy\", \"joy\"]]</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Push <code>[\"dog\", 3]</code> onto the end of the <code>myArray</code> variable.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":43,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56bbb991ad1ed5201cd392cd","title":"Manipulate Arrays With shift()","challengeType":1,"videoUrl":"https://scrimba.com/c/cRbVETW","forumTopicId":18238,"dashedName":"manipulate-arrays-with-shift","challengeFiles":[{"head":"","tail":"if (typeof removedFromMyArray !== 'undefined') (function(y, z){return 'myArray = ' + JSON.stringify(y) + ' & removedFromMyArray = ' + JSON.stringify(z);})(myArray, removedFromMyArray);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst myArray = [[\"John\", 23], [\"dog\", 3]];\n\n// Only change code below this line\n","error":null,"seed":"// Setup\nconst myArray = [[\"John\", 23], [\"dog\", 3]];\n\n// Only change code below this line\n"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myArray = [[\"John\", 23], [\"dog\", 3]];\n\n// Only change code below this line\nconst removedFromMyArray = myArray.shift();","error":null,"seed":"const myArray = [[\"John\", 23], [\"dog\", 3]];\n\n// Only change code below this line\nconst removedFromMyArray = myArray.shift();"}]],"tests":[{"text":"<p><code>myArray</code> should now equal <code>[[\"dog\", 3]]</code>.</p>","testString":"assert(\n  (function (d) {\n    if (d[0][0] == 'dog' && d[0][1] === 3 && d[1] == undefined) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myArray)\n);"},{"text":"<p><code>removedFromMyArray</code> should contain <code>[\"John\", 23]</code>.</p>","testString":"assert(\n  (function (d) {\n    if (\n      d[0] == 'John' &&\n      d[1] === 23 &&\n      typeof removedFromMyArray === 'object'\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(removedFromMyArray)\n);"}],"description":"<section id=\"description\">\n<p><code>pop()</code> always removes the last element of an array. What if you want to remove the first?</p>\n<p>That's where <code>.shift()</code> comes in. It works just like <code>.pop()</code>, except it removes the first element instead of the last.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">const ourArray = [\"Stimpson\", \"J\", [\"cat\"]];\nconst removedFromOurArray = ourArray.shift();\n</code></pre>\n<p><code>removedFromOurArray</code> would have a value of the string <code>Stimpson</code>, and <code>ourArray</code> would have <code>[\"J\", [\"cat\"]]</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the <code>.shift()</code> function to remove the first item from <code>myArray</code> and assign the \"shifted off\" value to a new variable, <code>removedFromMyArray</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":45,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56bbb991ad1ed5201cd392ce","title":"Manipulate Arrays With unshift()","challengeType":1,"videoUrl":"https://scrimba.com/c/ckNDESv","forumTopicId":18239,"dashedName":"manipulate-arrays-with-unshift","challengeFiles":[{"head":"","tail":"(function(y, z){return 'myArray = ' + JSON.stringify(y);})(myArray);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst myArray = [[\"John\", 23], [\"dog\", 3]];\nmyArray.shift();\n\n// Only change code below this line\n","error":null,"seed":"// Setup\nconst myArray = [[\"John\", 23], [\"dog\", 3]];\nmyArray.shift();\n\n// Only change code below this line\n"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myArray = [[\"John\", 23], [\"dog\", 3]];\nmyArray.shift();\nmyArray.unshift([\"Paul\", 35]);","error":null,"seed":"const myArray = [[\"John\", 23], [\"dog\", 3]];\nmyArray.shift();\nmyArray.unshift([\"Paul\", 35]);"}]],"tests":[{"text":"<p><code>myArray</code> should now have <code>[[\"Paul\", 35], [\"dog\", 3]]</code>.</p>","testString":"assert(\n  (function (d) {\n    if (\n      typeof d[0] === 'object' &&\n      d[0][0] == 'Paul' &&\n      d[0][1] === 35 &&\n      d[1][0] != undefined &&\n      d[1][0] == 'dog' &&\n      d[1][1] != undefined &&\n      d[1][1] == 3\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myArray)\n);"}],"description":"<section id=\"description\">\n<p>Not only can you <code>shift</code> elements off of the beginning of an array, you can also <code>unshift</code> elements to the beginning of an array i.e. add elements in front of the array.</p>\n<p><code>.unshift()</code> works exactly like <code>.push()</code>, but instead of adding the element at the end of the array, <code>unshift()</code> adds the element at the beginning of the array.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">const ourArray = [\"Stimpson\", \"J\", \"cat\"];\nourArray.shift();\nourArray.unshift(\"Happy\");\n</code></pre>\n<p>After the <code>shift</code>, <code>ourArray</code> would have the value <code>[\"J\", \"cat\"]</code>. After the <code>unshift</code>, <code>ourArray</code> would have the value <code>[\"Happy\", \"J\", \"cat\"]</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add <code>[\"Paul\", 35]</code> to the beginning of the <code>myArray</code> variable using <code>unshift()</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":46,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244cb","title":"Manipulating Complex Objects","challengeType":1,"videoUrl":"https://scrimba.com/c/c9yNMfR","forumTopicId":18208,"dashedName":"manipulating-complex-objects","challengeFiles":[{"head":"","tail":"(function(x){ if (Array.isArray(x)) { return JSON.stringify(x); } return \"myMusic is not an array\"})(myMusic);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myMusic = [\n  {\n    \"artist\": \"Billy Joel\",\n    \"title\": \"Piano Man\",\n    \"release_year\": 1973,\n    \"formats\": [\n      \"CD\",\n      \"8T\",\n      \"LP\"\n    ],\n    \"gold\": true\n  }\n];","error":null,"seed":"const myMusic = [\n  {\n    \"artist\": \"Billy Joel\",\n    \"title\": \"Piano Man\",\n    \"release_year\": 1973,\n    \"formats\": [\n      \"CD\",\n      \"8T\",\n      \"LP\"\n    ],\n    \"gold\": true\n  }\n];"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myMusic = [\n  {\n    \"artist\": \"Billy Joel\",\n    \"title\": \"Piano Man\",\n    \"release_year\": 1973,\n    \"formats\": [\n      \"CS\",\n      \"8T\",\n      \"LP\" ],\n    \"gold\": true\n  },\n  {\n    \"artist\": \"ABBA\",\n    \"title\": \"Ring Ring\",\n    \"release_year\": 1973,\n    \"formats\": [\n      \"CS\",\n      \"8T\",\n      \"LP\",\n    \"CD\",\n  ]\n  }\n];","error":null,"seed":"const myMusic = [\n  {\n    \"artist\": \"Billy Joel\",\n    \"title\": \"Piano Man\",\n    \"release_year\": 1973,\n    \"formats\": [\n      \"CS\",\n      \"8T\",\n      \"LP\" ],\n    \"gold\": true\n  },\n  {\n    \"artist\": \"ABBA\",\n    \"title\": \"Ring Ring\",\n    \"release_year\": 1973,\n    \"formats\": [\n      \"CS\",\n      \"8T\",\n      \"LP\",\n    \"CD\",\n  ]\n  }\n];"}]],"tests":[{"text":"<p><code>myMusic</code> should be an array</p>","testString":"assert(Array.isArray(myMusic));"},{"text":"<p><code>myMusic</code> should have at least two elements</p>","testString":"assert(myMusic.length > 1);"},{"text":"<p>The elements in the <code>myMusic</code> array should be objects</p>","testString":"myMusic.forEach(object => {assert.typeOf(object, 'object')})"},{"text":"<p>Your object in <code>myMusic</code> should have at least 4 properties</p>","testString":"myMusic.forEach(object => {assert(Object.keys(object).length > 3); });"},{"text":"<p>Your object in <code>myMusic</code> should contain the property <code>artist</code> which is a string</p>","testString":"myMusic.forEach(object => {\n  assert.containsAllKeys(object, ['artist']);\n  assert.typeOf(object.artist, 'string')\n})"},{"text":"<p>Your object in <code>myMusic</code> should contain the property <code>title</code> which is a string</p>","testString":"myMusic.forEach(object => {\n  assert.containsAllKeys(object, ['title']);\n  assert.typeOf(object.title, 'string')\n})"},{"text":"<p>Your object in <code>myMusic</code> should contain the property <code>release_year</code> which is a number</p>","testString":"myMusic.forEach(object => {\n  assert.containsAllKeys(object, ['release_year']);\n  assert.typeOf(object.release_year, 'number')\n})"},{"text":"<p>Your object in <code>myMusic</code> should contain a <code>formats</code> property which is an array</p>","testString":"myMusic.forEach(object => {\n  assert.containsAllKeys(object, ['formats']);\n  assert.typeOf(object.formats, 'array')\n})"},{"text":"<p><code>formats</code> should be an array of strings with at least two elements</p>","testString":"myMusic.forEach(object => {\n  object.formats.forEach(format => {\n    assert.typeOf(format, 'string')\n  });\n  assert.isAtLeast(object.formats.length, 2)\n})"}],"description":"<section id=\"description\">\n<p>Sometimes you may want to store data in a flexible <dfn>Data Structure</dfn>. A JavaScript object is one way to handle flexible data. They allow for arbitrary combinations of <dfn>strings</dfn>, <dfn>numbers</dfn>, <dfn>booleans</dfn>, <dfn>arrays</dfn>, <dfn>functions</dfn>, and <dfn>objects</dfn>.</p>\n<p>Here's an example of a complex data structure:</p>\n<pre><code class=\"language-js\">const ourMusic = [\n  {\n    \"artist\": \"Daft Punk\",\n    \"title\": \"Homework\",\n    \"release_year\": 1997,\n    \"formats\": [ \n      \"CD\", \n      \"Cassette\", \n      \"LP\"\n    ],\n    \"gold\": true\n  }\n];\n</code></pre>\n<p>This is an array which contains one object inside. The object has various pieces of <dfn>metadata</dfn> about an album. It also has a nested <code>formats</code> array. If you want to add more album records, you can do this by adding records to the top level array. Objects hold data in a property, which has a key-value format. In the example above, <code>\"artist\": \"Daft Punk\"</code> is a property that has a key of <code>artist</code> and a value of <code>Daft Punk</code>.</p>\n<p><strong>Note:</strong> You will need to place a comma after every object in the array, unless it is the last object in the array.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add a new album to the <code>myMusic</code> array. Add <code>artist</code> and <code>title</code> strings, <code>release_year</code> number, and a <code>formats</code> array of strings.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":91,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"cf1111c1c11feddfaeb8bdef","title":"Modify Array Data With Indexes","challengeType":1,"videoUrl":"https://scrimba.com/c/czQM4A8","forumTopicId":18241,"dashedName":"modify-array-data-with-indexes","challengeFiles":[{"head":"","tail":"if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst myArray = [18, 64, 99];\n\n// Only change code below this line\n","error":null,"seed":"// Setup\nconst myArray = [18, 64, 99];\n\n// Only change code below this line\n"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myArray = [18, 64, 99];\nmyArray[0] = 45;","error":null,"seed":"const myArray = [18, 64, 99];\nmyArray[0] = 45;"}]],"tests":[{"text":"<p><code>myArray</code> should now be <code>[45, 64, 99]</code>.</p>","testString":"assert(\n  (function () {\n    if (\n      typeof myArray != 'undefined' &&\n      myArray[0] == 45 &&\n      myArray[1] == 64 &&\n      myArray[2] == 99\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })()\n);"},{"text":"<p>You should be using correct index to modify the value in <code>myArray</code>.</p>","testString":"assert(\n  (function () {\n    if (code.match(/myArray\\[0\\]\\s*=\\s*/g)) {\n      return true;\n    } else {\n      return false;\n    }\n  })()\n);"}],"description":"<section id=\"description\">\n<p>Unlike strings, the entries of arrays are <dfn>mutable</dfn> and can be changed freely, even if the array was declared with <code>const</code>.</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-js\">const ourArray = [50, 40, 30];\nourArray[0] = 15;\n</code></pre>\n<p><code>ourArray</code> now has the value <code>[15, 40, 30]</code>.</p>\n<p><strong>Note:</strong> There shouldn't be any spaces between the array name and the square brackets, like <code>array [0]</code>. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Modify the data stored at index <code>0</code> of <code>myArray</code> to a value of <code>45</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":41,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244df","title":"Multiple Identical Options in Switch Statements","challengeType":1,"videoUrl":"https://scrimba.com/c/cdBKWCV","forumTopicId":18242,"dashedName":"multiple-identical-options-in-switch-statements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function sequentialSizes(val) {\n  let answer = \"\";\n  // Only change code below this line\n\n\n\n  // Only change code above this line\n  return answer;\n}\n\nsequentialSizes(1);","error":null,"seed":"function sequentialSizes(val) {\n  let answer = \"\";\n  // Only change code below this line\n\n\n\n  // Only change code above this line\n  return answer;\n}\n\nsequentialSizes(1);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function sequentialSizes(val) {\n  let answer = \"\";\n\n  switch (val) {\n    case 1:\n    case 2:\n    case 3:\n      answer = \"Low\";\n      break;\n    case 4:\n    case 5:\n    case 6:\n      answer = \"Mid\";\n      break;\n    case 7:\n    case 8:\n    case 9:\n      answer = \"High\";\n  }\n\n  return answer;\n}","error":null,"seed":"function sequentialSizes(val) {\n  let answer = \"\";\n\n  switch (val) {\n    case 1:\n    case 2:\n    case 3:\n      answer = \"Low\";\n      break;\n    case 4:\n    case 5:\n    case 6:\n      answer = \"Mid\";\n      break;\n    case 7:\n    case 8:\n    case 9:\n      answer = \"High\";\n  }\n\n  return answer;\n}"}]],"tests":[{"text":"<p><code>sequentialSizes(1)</code> should return the string <code>Low</code></p>","testString":"assert(sequentialSizes(1) === 'Low');"},{"text":"<p><code>sequentialSizes(2)</code> should return the string <code>Low</code></p>","testString":"assert(sequentialSizes(2) === 'Low');"},{"text":"<p><code>sequentialSizes(3)</code> should return the string <code>Low</code></p>","testString":"assert(sequentialSizes(3) === 'Low');"},{"text":"<p><code>sequentialSizes(4)</code> should return the string <code>Mid</code></p>","testString":"assert(sequentialSizes(4) === 'Mid');"},{"text":"<p><code>sequentialSizes(5)</code> should return the string <code>Mid</code></p>","testString":"assert(sequentialSizes(5) === 'Mid');"},{"text":"<p><code>sequentialSizes(6)</code> should return the string <code>Mid</code></p>","testString":"assert(sequentialSizes(6) === 'Mid');"},{"text":"<p><code>sequentialSizes(7)</code> should return the string <code>High</code></p>","testString":"assert(sequentialSizes(7) === 'High');"},{"text":"<p><code>sequentialSizes(8)</code> should return the string <code>High</code></p>","testString":"assert(sequentialSizes(8) === 'High');"},{"text":"<p><code>sequentialSizes(9)</code> should return the string <code>High</code></p>","testString":"assert(sequentialSizes(9) === 'High');"},{"text":"<p>You should not use any <code>if</code> or <code>else</code> statements</p>","testString":"assert(!/else/g.test(code) || !/if/g.test(code));"},{"text":"<p>You should have nine <code>case</code> statements</p>","testString":"assert(code.match(/case/g).length === 9);"}],"description":"<section id=\"description\">\n<p>If the <code>break</code> statement is omitted from a <code>switch</code> statement's <code>case</code>, the following <code>case</code> statement(s) are executed until a <code>break</code> is encountered. If you have multiple inputs with the same output, you can represent them in a <code>switch</code> statement like this:</p>\n<pre><code class=\"language-js\">let result = \"\";\nswitch (val) {\n  case 1:\n  case 2:\n  case 3:\n    result = \"1, 2, or 3\";\n    break;\n  case 4:\n    result = \"4 alone\";\n}\n</code></pre>\n<p>Cases for 1, 2, and 3 will all produce the same result.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Write a switch statement to set <code>answer</code> for the following ranges:<br>\n<code>1-3</code> - <code>Low</code><br>\n<code>4-6</code> - <code>Mid</code><br>\n<code>7-9</code> - <code>High</code></p>\n<p><strong>Note:</strong> You will need to have a <code>case</code> statement for each number in the range.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":77,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"bd7993c9c69feddfaeb7bdef","title":"Multiply Two Decimals with JavaScript","challengeType":1,"videoUrl":"https://scrimba.com/c/ce2GeHq","forumTopicId":301173,"dashedName":"multiply-two-decimals-with-javascript","challengeFiles":[{"head":"","tail":"(function(y){return 'product = '+y;})(product);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const product = 2.0 * 0.0;","error":null,"seed":"const product = 2.0 * 0.0;"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const product = 2.0 * 2.5;","error":null,"seed":"const product = 2.0 * 2.5;"}]],"tests":[{"text":"<p>The variable <code>product</code> should equal <code>5.0</code>.</p>","testString":"assert(product === 5.0);"},{"text":"<p>You should use the <code>*</code> operator</p>","testString":"assert(/\\*/.test(code));"}],"description":"<section id=\"description\">\n<p>In JavaScript, you can also perform calculations with decimal numbers, just like whole numbers.</p>\n<p>Let's multiply two decimals together to get their product.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the <code>0.0</code> so that product will equal <code>5.0</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":17,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"cf1231c1c11feddfaeb5bdef","title":"Multiply Two Numbers with JavaScript","challengeType":1,"videoUrl":"https://scrimba.com/c/cP3y3Aq","forumTopicId":18243,"dashedName":"multiply-two-numbers-with-javascript","challengeFiles":[{"head":"","tail":"(function(z){return 'product = '+z;})(product);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const product = 8 * 0;","error":null,"seed":"const product = 8 * 0;"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const product = 8 * 10;","error":null,"seed":"const product = 8 * 10;"}]],"tests":[{"text":"<p>The variable <code>product</code> should be equal to 80.</p>","testString":"assert(product === 80);"},{"text":"<p>You should use the <code>*</code> operator.</p>","testString":"assert(/\\*/.test(code));"}],"description":"<section id=\"description\">\n<p>We can also multiply one number by another.</p>\n<p>JavaScript uses the <code>*</code> symbol for multiplication of two numbers.</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-js\">const myVar = 13 * 13;\n</code></pre>\n<p><code>myVar</code> would have the value <code>169</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the <code>0</code> so that product will equal <code>80</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":12,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"cf1111c1c11feddfaeb7bdef","title":"Nest one Array within Another Array","challengeType":1,"videoUrl":"https://scrimba.com/c/crZQZf8","forumTopicId":18247,"dashedName":"nest-one-array-within-another-array","challengeFiles":[{"head":"","tail":"if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Only change code below this line\nconst myArray = [];","error":null,"seed":"// Only change code below this line\nconst myArray = [];"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myArray = [[1, 2, 3]];","error":null,"seed":"const myArray = [[1, 2, 3]];"}]],"tests":[{"text":"<p><code>myArray</code> should have at least one array nested within another array.</p>","testString":"assert(Array.isArray(myArray) && myArray.some(Array.isArray));"}],"description":"<section id=\"description\">\n<p>You can also nest arrays within other arrays, like below:</p>\n<pre><code class=\"language-js\">const teams = [[\"Bulls\", 23], [\"White Sox\", 45]];\n</code></pre>\n<p>This is also called a <dfn>multi-dimensional array</dfn>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create a nested array called <code>myArray</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":39,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244e1","title":"Nesting For Loops","challengeType":1,"videoUrl":"https://scrimba.com/c/cRn6GHM","forumTopicId":18248,"dashedName":"nesting-for-loops","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function multiplyAll(arr) {\n  let product = 1;\n  // Only change code below this line\n\n  // Only change code above this line\n  return product;\n}\n\nmultiplyAll([[1, 2], [3, 4], [5, 6, 7]]);","error":null,"seed":"function multiplyAll(arr) {\n  let product = 1;\n  // Only change code below this line\n\n  // Only change code above this line\n  return product;\n}\n\nmultiplyAll([[1, 2], [3, 4], [5, 6, 7]]);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function multiplyAll(arr) {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      product *= arr[i][j];\n    }\n  }\n  return product;\n}","error":null,"seed":"function multiplyAll(arr) {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      product *= arr[i][j];\n    }\n  }\n  return product;\n}"}]],"tests":[{"text":"<p><code>multiplyAll([[1], [2], [3]])</code> should return <code>6</code></p>","testString":"assert(multiplyAll([[1], [2], [3]]) === 6);"},{"text":"<p><code>multiplyAll([[1, 2], [3, 4], [5, 6, 7]])</code> should return <code>5040</code></p>","testString":"assert(\n  multiplyAll([\n    [1, 2],\n    [3, 4],\n    [5, 6, 7]\n  ]) === 5040\n);"},{"text":"<p><code>multiplyAll([[5, 1], [0.2, 4, 0.5], [3, 9]])</code> should return <code>54</code></p>","testString":"assert(\n  multiplyAll([\n    [5, 1],\n    [0.2, 4, 0.5],\n    [3, 9]\n  ]) === 54\n);"}],"description":"<section id=\"description\">\n<p>If you have a multi-dimensional array, you can use the same logic as the prior waypoint to loop through both the array and any sub-arrays. Here is an example:</p>\n<pre><code class=\"language-js\">const arr = [\n  [1, 2], [3, 4], [5, 6]\n];\n\nfor (let i = 0; i &#x3C; arr.length; i++) {\n  for (let j = 0; j &#x3C; arr[i].length; j++) {\n    console.log(arr[i][j]);\n  }\n}\n</code></pre>\n<p>This outputs each sub-element in <code>arr</code> one at a time. Note that for the inner loop, we are checking the <code>.length</code> of <code>arr[i]</code>, since <code>arr[i]</code> is itself an array.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Modify function <code>multiplyAll</code> so that it returns the product of all the numbers in the sub-arrays of <code>arr</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":100,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244bd","title":"Passing Values to Functions with Arguments","challengeType":1,"videoUrl":"https://scrimba.com/c/cy8rahW","forumTopicId":18254,"dashedName":"passing-values-to-functions-with-arguments","challengeFiles":[{"head":"var logOutput = \"\";\nvar originalConsole = console\nfunction capture() {\n    var nativeLog = console.log;\n    console.log = function (message) {\n        if(message) logOutput = JSON.stringify(message).trim();\n        if(nativeLog.apply) {\n          nativeLog.apply(originalConsole, arguments);\n        } else {\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n          nativeLog(nativeMsg);\n        }\n    };\n}\n\nfunction uncapture() {\n  console.log = originalConsole.log;\n}\n\ncapture();","tail":"uncapture();\n\nif (typeof functionWithArgs !== \"function\") { \n  (function() { return \"functionWithArgs is not defined\"; })();\n} else {\n  (function() { return logOutput || \"console.log never called\"; })();\n}","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"","error":null,"seed":""}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function functionWithArgs(a, b) {\n  console.log(a + b);\n}\nfunctionWithArgs(10, 5);","error":null,"seed":"function functionWithArgs(a, b) {\n  console.log(a + b);\n}\nfunctionWithArgs(10, 5);"}]],"tests":[{"text":"<p><code>functionWithArgs</code> should be a function.</p>","testString":"assert(typeof functionWithArgs === 'function');"},{"text":"<p><code>functionWithArgs(1,2)</code> should output <code>3</code>.</p>","testString":"if (typeof functionWithArgs === 'function') {\n  capture();\n  functionWithArgs(1, 2);\n  uncapture();\n}\nassert(logOutput == 3);"},{"text":"<p><code>functionWithArgs(7,9)</code> should output <code>16</code>.</p>","testString":"if (typeof functionWithArgs === 'function') {\n  capture();\n  functionWithArgs(7, 9);\n  uncapture();\n}\nassert(logOutput == 16);"},{"text":"<p>You should call <code>functionWithArgs</code> with two numbers after you define it.</p>","testString":"assert(\n  /functionWithArgs\\([-+]?\\d*\\.?\\d*,[-+]?\\d*\\.?\\d*\\)/.test(\n    code.replace(/\\s/g, '')\n  )\n);"}],"description":"<section id=\"description\">\n<p><dfn>Parameters</dfn> are variables that act as placeholders for the values that are to be input to a function when it is called. When a function is defined, it is typically defined along with one or more parameters. The actual values that are input (or <dfn>\"passed\"</dfn>) into a function when it is called are known as <dfn>arguments</dfn>.</p>\n<p>Here is a function with two parameters, <code>param1</code> and <code>param2</code>:</p>\n<pre><code class=\"language-js\">function testFun(param1, param2) {\n  console.log(param1, param2);\n}\n</code></pre>\n<p>Then we can call <code>testFun</code> like this: <code>testFun(\"Hello\", \"World\");</code>. We have passed two string arguments, <code>Hello</code> and <code>World</code>. Inside the function, <code>param1</code> will equal the string <code>Hello</code> and <code>param2</code> will equal the string <code>World</code>. Note that you could call <code>testFun</code> again with different arguments and the parameters would take on the value of the new arguments.</p>\n</section>","instructions":"<section id=\"instructions\">\n<ol><li>Create a function called <code>functionWithArgs</code> that accepts two arguments and outputs their sum to the dev console.</li><li>Call the function with two numbers as arguments.</li></ol>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":49,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"599a789b454f2bbd91a3ff4d","title":"Practice comparing different values","challengeType":1,"videoUrl":"https://scrimba.com/c/cm8PqCa","forumTopicId":301174,"dashedName":"practice-comparing-different-values","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nfunction compareEquality(a, b) {\n  if (a == b) { // Change this line\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}\n\ncompareEquality(10, \"10\");","error":null,"seed":"// Setup\nfunction compareEquality(a, b) {\n  if (a == b) { // Change this line\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}\n\ncompareEquality(10, \"10\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function compareEquality(a,b) {\n  if (a === b) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}","error":null,"seed":"function compareEquality(a,b) {\n  if (a === b) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}"}]],"tests":[{"text":"<p><code>compareEquality(10, \"10\")</code> should return the string <code>Not Equal</code></p>","testString":"assert(compareEquality(10, '10') === 'Not Equal');"},{"text":"<p><code>compareEquality(\"20\", 20)</code> should return the string <code>Not Equal</code></p>","testString":"assert(compareEquality('20', 20) === 'Not Equal');"},{"text":"<p>You should use the <code>===</code> operator</p>","testString":"assert(code.match(/===/g));"}],"description":"<section id=\"description\">\n<p>In the last two challenges, we learned about the equality operator (<code>==</code>) and the strict equality operator (<code>===</code>). Let's do a quick review and practice using these operators some more.</p>\n<p>If the values being compared are not of the same type, the equality operator will perform a type conversion, and then evaluate the values. However, the strict equality operator will compare both the data type and value as-is, without converting one type to the other.</p>\n<p><strong>Examples</strong></p>\n<p><code>3 == '3'</code> returns <code>true</code> because JavaScript performs type conversion from string to number. <code>3 === '3'</code> returns <code>false</code> because the types are different and type conversion is not performed.</p>\n<p><strong>Note:</strong> In JavaScript, you can determine the type of a variable or a value with the <code>typeof</code> operator, as follows:</p>\n<pre><code class=\"language-js\">typeof 3\ntypeof '3'\n</code></pre>\n<p><code>typeof 3</code> returns the string <code>number</code>, and <code>typeof '3'</code> returns the string <code>string</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The <code>compareEquality</code> function in the editor compares two values using the equality operator. Modify the function so that it returns the string <code>Equal</code> only when the values are strictly equal.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":61,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5688e62ea601b2482ff8422b","title":"Profile Lookup","challengeType":1,"videoUrl":"https://scrimba.com/c/cDqW2Cg","forumTopicId":18259,"dashedName":"profile-lookup","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst contacts = [\n  {\n    firstName: \"Akira\",\n    lastName: \"Laine\",\n    number: \"0543236543\",\n    likes: [\"Pizza\", \"Coding\", \"Brownie Points\"],\n  },\n  {\n    firstName: \"Harry\",\n    lastName: \"Potter\",\n    number: \"0994372684\",\n    likes: [\"Hogwarts\", \"Magic\", \"Hagrid\"],\n  },\n  {\n    firstName: \"Sherlock\",\n    lastName: \"Holmes\",\n    number: \"0487345643\",\n    likes: [\"Intriguing Cases\", \"Violin\"],\n  },\n  {\n    firstName: \"Kristian\",\n    lastName: \"Vos\",\n    number: \"unknown\",\n    likes: [\"JavaScript\", \"Gaming\", \"Foxes\"],\n  },\n];\n\nfunction lookUpProfile(name, prop) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nlookUpProfile(\"Akira\", \"likes\");","error":null,"seed":"// Setup\nconst contacts = [\n  {\n    firstName: \"Akira\",\n    lastName: \"Laine\",\n    number: \"0543236543\",\n    likes: [\"Pizza\", \"Coding\", \"Brownie Points\"],\n  },\n  {\n    firstName: \"Harry\",\n    lastName: \"Potter\",\n    number: \"0994372684\",\n    likes: [\"Hogwarts\", \"Magic\", \"Hagrid\"],\n  },\n  {\n    firstName: \"Sherlock\",\n    lastName: \"Holmes\",\n    number: \"0487345643\",\n    likes: [\"Intriguing Cases\", \"Violin\"],\n  },\n  {\n    firstName: \"Kristian\",\n    lastName: \"Vos\",\n    number: \"unknown\",\n    likes: [\"JavaScript\", \"Gaming\", \"Foxes\"],\n  },\n];\n\nfunction lookUpProfile(name, prop) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nlookUpProfile(\"Akira\", \"likes\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const contacts = [\n  {\n    firstName: \"Akira\",\n    lastName: \"Laine\",\n    number: \"0543236543\",\n    likes: [\"Pizza\", \"Coding\", \"Brownie Points\"],\n  },\n  {\n    firstName: \"Harry\",\n    lastName: \"Potter\",\n    number: \"0994372684\",\n    likes: [\"Hogwarts\", \"Magic\", \"Hagrid\"],\n  },\n  {\n    firstName: \"Sherlock\",\n    lastName: \"Holmes\",\n    number: \"0487345643\",\n    likes: [\"Intriguing Cases\", \"Violin\"],\n  },\n  {\n    firstName: \"Kristian\",\n    lastName: \"Vos\",\n    number: \"unknown\",\n    likes: [\"JavaScript\", \"Gaming\", \"Foxes\"],\n  },\n];\nfunction lookUpProfile(name, prop) {\n  for (let i in contacts) {\n    if (contacts[i].firstName === name) {\n      return contacts[i][prop] || \"No such property\";\n    }\n  }\n  return \"No such contact\";\n}","error":null,"seed":"const contacts = [\n  {\n    firstName: \"Akira\",\n    lastName: \"Laine\",\n    number: \"0543236543\",\n    likes: [\"Pizza\", \"Coding\", \"Brownie Points\"],\n  },\n  {\n    firstName: \"Harry\",\n    lastName: \"Potter\",\n    number: \"0994372684\",\n    likes: [\"Hogwarts\", \"Magic\", \"Hagrid\"],\n  },\n  {\n    firstName: \"Sherlock\",\n    lastName: \"Holmes\",\n    number: \"0487345643\",\n    likes: [\"Intriguing Cases\", \"Violin\"],\n  },\n  {\n    firstName: \"Kristian\",\n    lastName: \"Vos\",\n    number: \"unknown\",\n    likes: [\"JavaScript\", \"Gaming\", \"Foxes\"],\n  },\n];\nfunction lookUpProfile(name, prop) {\n  for (let i in contacts) {\n    if (contacts[i].firstName === name) {\n      return contacts[i][prop] || \"No such property\";\n    }\n  }\n  return \"No such contact\";\n}"}]],"tests":[{"text":"<p><code>lookUpProfile(\"Kristian\", \"lastName\")</code> should return the string <code>Vos</code></p>","testString":"assert(lookUpProfile('Kristian', 'lastName') === 'Vos');"},{"text":"<p><code>lookUpProfile(\"Sherlock\", \"likes\")</code> should return <code>[\"Intriguing Cases\", \"Violin\"]</code></p>","testString":"assert.deepEqual(lookUpProfile('Sherlock', 'likes'), [\n  'Intriguing Cases',\n  'Violin'\n]);"},{"text":"<p><code>lookUpProfile(\"Harry\", \"likes\")</code> should return an array</p>","testString":"assert(typeof lookUpProfile('Harry', 'likes') === 'object');"},{"text":"<p><code>lookUpProfile(\"Bob\", \"number\")</code> should return the string <code>No such contact</code></p>","testString":"assert(lookUpProfile('Bob', 'number') === 'No such contact');"},{"text":"<p><code>lookUpProfile(\"Bob\", \"potato\")</code> should return the string <code>No such contact</code></p>","testString":"assert(lookUpProfile('Bob', 'potato') === 'No such contact');"},{"text":"<p><code>lookUpProfile(\"Akira\", \"address\")</code> should return the string <code>No such property</code></p>","testString":"assert(lookUpProfile('Akira', 'address') === 'No such property');"}],"description":"<section id=\"description\">\n<p>We have an array of objects representing different people in our contacts lists.</p>\n<p>A <code>lookUpProfile</code> function that takes <code>name</code> and a property (<code>prop</code>) as arguments has been pre-written for you.</p>\n<p>The function should check if <code>name</code> is an actual contact's <code>firstName</code> and the given property (<code>prop</code>) is a property of that contact.</p>\n<p>If both are true, then return the \"value\" of that property.</p>\n<p>If <code>name</code> does not correspond to any contacts then return the string <code>No such contact</code>.</p>\n<p>If <code>prop</code> does not correspond to any valid properties of a contact found to match <code>name</code> then return the string <code>No such property</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":103,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244b4","title":"Quoting Strings with Single Quotes","challengeType":1,"videoUrl":"https://scrimba.com/c/cbQmnhM","forumTopicId":18260,"dashedName":"quoting-strings-with-single-quotes","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myStr = \"<a href=\\\"http://www.example.com\\\" target=\\\"_blank\\\">Link</a>\";","error":null,"seed":"const myStr = \"<a href=\\\"http://www.example.com\\\" target=\\\"_blank\\\">Link</a>\";"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myStr = '<a href=\"http://www.example.com\" target=\"_blank\">Link</a>';","error":null,"seed":"const myStr = '<a href=\"http://www.example.com\" target=\"_blank\">Link</a>';"}]],"tests":[{"text":"<p>You should remove all the backslashes (<code>\\</code>).</p>","testString":"assert(\n  !/\\\\/g.test(code) &&\n    myStr.match(\n      '\\\\s*<a href\\\\s*=\\\\s*\"http://www.example.com\"\\\\s*target\\\\s*=\\\\s*\"_blank\">\\\\s*Link\\\\s*</a>\\\\s*'\n    )\n);"},{"text":"<p>You should have two single quotes <code>'</code> and four double quotes <code>\"</code>.</p>","testString":"assert(code.match(/\"/g).length === 4 && code.match(/'/g).length === 2);"}],"description":"<section id=\"description\">\n<p><dfn>String</dfn> values in JavaScript may be written with single or double quotes, as long as you start and end with the same type of quote. Unlike some other programming languages, single and double quotes work the same in JavaScript.</p>\n<pre><code class=\"language-js\">const doubleQuoteStr = \"This is a string\"; \nconst singleQuoteStr = 'This is also a string';\n</code></pre>\n<p>The reason why you might want to use one type of quote over the other is if you want to use both in a string. This might happen if you want to save a conversation in a string and have the conversation in quotes. Another use for it would be saving an <code>&#x3C;a></code> tag with various attributes in quotes, all within a string.</p>\n<pre><code class=\"language-js\">const conversation = 'Finn exclaims to Jake, \"Algebraic!\"';\n</code></pre>\n<p>However, this becomes a problem if you need to use the outermost quotes within it. Remember, a string has the same kind of quote at the beginning and end. But if you have that same quote somewhere in the middle, the string will stop early and throw an error.</p>\n<pre><code class=\"language-js\">const goodStr = 'Jake asks Finn, \"Hey, let\\'s go on an adventure?\"'; \nconst badStr = 'Finn responds, \"Let's go!\"';\n</code></pre>\n<p>Here <code>badStr</code> will throw an error.</p>\n<p>In the <dfn>goodStr</dfn> above, you can use both quotes safely by using the backslash <code>\\</code> as an escape character.</p>\n<p><strong>Note:</strong> The backslash <code>\\</code> should not be confused with the forward slash <code>/</code>. They do not do the same thing.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the provided string to a string with single quotes at the beginning and end and no escape characters.</p>\n<p>Right now, the <code>&#x3C;a></code> tag in the string uses double quotes everywhere. You will need to change the outer quotes to single quotes so you can remove the escape characters.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":25,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244cf","title":"Record Collection","challengeType":1,"forumTopicId":18261,"dashedName":"record-collection","challengeFiles":[{"head":"const _recordCollection = {\n  2548: {\n    albumTitle: 'Slippery When Wet',\n    artist: 'Bon Jovi',\n    tracks: ['Let It Rock', 'You Give Love a Bad Name']\n  },\n  2468: {\n    albumTitle: '1999',\n    artist: 'Prince',\n    tracks: ['1999', 'Little Red Corvette']\n  },\n  1245: {\n    artist: 'Robert Palmer',\n    tracks: []\n  },\n  5439: {\n    albumTitle: 'ABBA Gold'\n  }\n};","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst recordCollection = {\n  2548: {\n    albumTitle: 'Slippery When Wet',\n    artist: 'Bon Jovi',\n    tracks: ['Let It Rock', 'You Give Love a Bad Name']\n  },\n  2468: {\n    albumTitle: '1999',\n    artist: 'Prince',\n    tracks: ['1999', 'Little Red Corvette']\n  },\n  1245: {\n    artist: 'Robert Palmer',\n    tracks: []\n  },\n  5439: {\n    albumTitle: 'ABBA Gold'\n  }\n};\n\n// Only change code below this line\nfunction updateRecords(records, id, prop, value) {\n  return records;\n}\n\nupdateRecords(recordCollection, 5439, 'artist', 'ABBA');","error":null,"seed":"// Setup\nconst recordCollection = {\n  2548: {\n    albumTitle: 'Slippery When Wet',\n    artist: 'Bon Jovi',\n    tracks: ['Let It Rock', 'You Give Love a Bad Name']\n  },\n  2468: {\n    albumTitle: '1999',\n    artist: 'Prince',\n    tracks: ['1999', 'Little Red Corvette']\n  },\n  1245: {\n    artist: 'Robert Palmer',\n    tracks: []\n  },\n  5439: {\n    albumTitle: 'ABBA Gold'\n  }\n};\n\n// Only change code below this line\nfunction updateRecords(records, id, prop, value) {\n  return records;\n}\n\nupdateRecords(recordCollection, 5439, 'artist', 'ABBA');"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const recordCollection = {\n  2548: {\n    albumTitle: 'Slippery When Wet',\n    artist: 'Bon Jovi',\n    tracks: ['Let It Rock', 'You Give Love a Bad Name']\n  },\n  2468: {\n    albumTitle: '1999',\n    artist: 'Prince',\n    tracks: ['1999', 'Little Red Corvette']\n  },\n  1245: {\n    artist: 'Robert Palmer',\n    tracks: []\n  },\n  5439: {\n    albumTitle: 'ABBA Gold'\n  }\n};\n\n// Only change code below this line\nfunction updateRecords(records, id, prop, value) {\n  if (value === '') delete records[id][prop];\n  else if (prop === 'tracks') {\n    records[id][prop] = records[id][prop] || [];\n    records[id][prop].push(value);\n  } else {\n    records[id][prop] = value;\n  }\n\n  return records;\n}","error":null,"seed":"const recordCollection = {\n  2548: {\n    albumTitle: 'Slippery When Wet',\n    artist: 'Bon Jovi',\n    tracks: ['Let It Rock', 'You Give Love a Bad Name']\n  },\n  2468: {\n    albumTitle: '1999',\n    artist: 'Prince',\n    tracks: ['1999', 'Little Red Corvette']\n  },\n  1245: {\n    artist: 'Robert Palmer',\n    tracks: []\n  },\n  5439: {\n    albumTitle: 'ABBA Gold'\n  }\n};\n\n// Only change code below this line\nfunction updateRecords(records, id, prop, value) {\n  if (value === '') delete records[id][prop];\n  else if (prop === 'tracks') {\n    records[id][prop] = records[id][prop] || [];\n    records[id][prop].push(value);\n  } else {\n    records[id][prop] = value;\n  }\n\n  return records;\n}"}]],"tests":[{"text":"<p>After <code>updateRecords(recordCollection, 5439, \"artist\", \"ABBA\")</code>, <code>artist</code> should be the string <code>ABBA</code></p>","testString":"assert(\n  updateRecords(_recordCollection, 5439, 'artist', 'ABBA')[5439]['artist'] ===\n    'ABBA'\n);"},{"text":"<p>After <code>updateRecords(recordCollection, 5439, \"tracks\", \"Take a Chance on Me\")</code>, <code>tracks</code> should have the string <code>Take a Chance on Me</code> as the last and only element.</p>","testString":"assert(\n  updateRecords(_recordCollection, 5439, 'tracks', 'Take a Chance on Me') &&\n  _recordCollection[5439]['tracks'].length === 1 &&\n  _recordCollection[5439]['tracks'].pop() === 'Take a Chance on Me'\n);"},{"text":"<p>After <code>updateRecords(recordCollection, 2548, \"artist\", \"\")</code>, <code>artist</code> should not be set</p>","testString":"updateRecords(_recordCollection, 2548, 'artist', '');\nassert(!_recordCollection[2548].hasOwnProperty('artist'));"},{"text":"<p>After <code>updateRecords(recordCollection, 1245, \"tracks\", \"Addicted to Love\")</code>, <code>tracks</code> should have the string <code>Addicted to Love</code> as the last element.</p>","testString":"assert(\n  updateRecords(_recordCollection, 1245, 'tracks', 'Addicted to Love')[1245][\n    'tracks'\n  ].pop() === 'Addicted to Love'\n);"},{"text":"<p>After <code>updateRecords(recordCollection, 2468, \"tracks\", \"Free\")</code>, <code>tracks</code> should have the string <code>1999</code> as the first element.</p>","testString":"assert(\n  updateRecords(_recordCollection, 2468, 'tracks', 'Free')[2468][\n    'tracks'\n  ][0] === '1999'\n);"},{"text":"<p>After <code>updateRecords(recordCollection, 2548, \"tracks\", \"\")</code>, <code>tracks</code> should not be set</p>","testString":"updateRecords(_recordCollection, 2548, 'tracks', '');\nassert(!_recordCollection[2548].hasOwnProperty('tracks'));"},{"text":"<p>After <code>updateRecords(recordCollection, 1245, \"albumTitle\", \"Riptide\")</code>, <code>albumTitle</code> should be the string <code>Riptide</code></p>","testString":"assert(\n  updateRecords(_recordCollection, 1245, 'albumTitle', 'Riptide')[1245][\n    'albumTitle'\n  ] === 'Riptide'\n);"}],"description":"<section id=\"description\">\n<p>You are given an object literal representing a part of your musical album collection. Each album has a unique id number as its key and several other properties. Not all albums have complete information.</p>\n<p>You start with an <code>updateRecords</code> function that takes an object literal, <code>records</code>, containing the musical album collection, an <code>id</code>, a <code>prop</code> (like <code>artist</code> or <code>tracks</code>), and a <code>value</code>. Complete the function using the rules below to modify the object passed to the function.</p>\n<ul>\n<li>Your function must always return the entire record collection object.</li>\n<li>If <code>prop</code> isn't <code>tracks</code> and <code>value</code> isn't an empty string, update or set that album's <code>prop</code> to <code>value</code>.</li>\n<li>If <code>prop</code> is <code>tracks</code> but the album doesn't have a <code>tracks</code> property, create an empty array and add <code>value</code> to it.</li>\n<li>If <code>prop</code> is <code>tracks</code> and <code>value</code> isn't an empty string, add <code>value</code> to the end of the album's existing <code>tracks</code> array.</li>\n<li>If <code>value</code> is an empty string, delete the given <code>prop</code> property from the album.</li>\n</ul>\n<p><strong>Note:</strong> A copy of the <code>recordCollection</code> object is used for the tests.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":94,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5cfa3679138e7d9595b9d9d4","title":"Replace Loops using Recursion","challengeType":1,"videoUrl":"https://www.freecodecamp.org/news/how-recursion-works-explained-with-flowcharts-and-a-video-de61f40cb7f9/","forumTopicId":301175,"dashedName":"replace-loops-using-recursion","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function sum(arr, n) {\n  // Only change code below this line\n\n  // Only change code above this line\n}","error":null,"seed":"function sum(arr, n) {\n  // Only change code below this line\n\n  // Only change code above this line\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function sum(arr, n) {\n  // Only change code below this line\n  if(n <= 0) {\n    return 0;\n  } else {\n    return sum(arr, n - 1) + arr[n - 1];\n  }\n  // Only change code above this line\n}","error":null,"seed":"function sum(arr, n) {\n  // Only change code below this line\n  if(n <= 0) {\n    return 0;\n  } else {\n    return sum(arr, n - 1) + arr[n - 1];\n  }\n  // Only change code above this line\n}"}]],"tests":[{"text":"<p><code>sum([1], 0)</code> should equal 0.</p>","testString":"assert.equal(sum([1], 0), 0);"},{"text":"<p><code>sum([2, 3, 4], 1)</code> should equal 2.</p>","testString":"assert.equal(sum([2, 3, 4], 1), 2);"},{"text":"<p><code>sum([2, 3, 4, 5], 3)</code> should equal 9.</p>","testString":"assert.equal(sum([2, 3, 4, 5], 3), 9);"},{"text":"<p>Your code should not rely on any kind of loops (<code>for</code> or <code>while</code> or higher order functions such as <code>forEach</code>, <code>map</code>, <code>filter</code>, or <code>reduce</code>.).</p>","testString":"assert(\n  !code.match(/for|while|forEach|map|filter|reduce/g)\n);"},{"text":"<p>You should use recursion to solve this problem.</p>","testString":"assert(\n  sum.toString().match(/sum\\(.*\\)/g).length > 1\n);"}],"description":"<section id=\"description\">\n<p>Recursion is the concept that a function can be expressed in terms of itself. To help understand this, start by thinking about the following task: multiply the first <code>n</code> elements of an array to create the product of those elements. Using a <code>for</code> loop, you could do this:</p>\n<pre><code class=\"language-js\">  function multiply(arr, n) {\n    let product = 1;\n    for (let i = 0; i &#x3C; n; i++) {\n      product *= arr[i];\n    }\n    return product;\n  }\n</code></pre>\n<p>However, notice that <code>multiply(arr, n) == multiply(arr, n - 1) * arr[n - 1]</code>. That means you can rewrite <code>multiply</code> in terms of itself and never need to use a loop.</p>\n<pre><code class=\"language-js\">  function multiply(arr, n) {\n    if (n &#x3C;= 0) {\n      return 1;\n    } else {\n      return multiply(arr, n - 1) * arr[n - 1];\n    }\n  }\n</code></pre>\n<p>The recursive version of <code>multiply</code> breaks down like this. In the <dfn>base case</dfn>, where <code>n &#x3C;= 0</code>, it returns 1. For larger values of <code>n</code>, it calls itself, but with <code>n - 1</code>. That function call is evaluated in the same way, calling <code>multiply</code> again until <code>n &#x3C;= 0</code>. At this point, all the functions can return and the original <code>multiply</code> returns the answer.</p>\n<p><strong>Note:</strong> Recursive functions must have a base case when they return without calling the function again (in this example, when <code>n &#x3C;= 0</code>), otherwise they can never finish executing.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Write a recursive function, <code>sum(arr, n)</code>, that returns the sum of the first <code>n</code> elements of an array <code>arr</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":102,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244e0","title":"Replacing If Else Chains with Switch","challengeType":1,"videoUrl":"https://scrimba.com/c/c3JE8fy","forumTopicId":18266,"dashedName":"replacing-if-else-chains-with-switch","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function chainToSwitch(val) {\n  let answer = \"\";\n  // Only change code below this line\n\n  if (val === \"bob\") {\n    answer = \"Marley\";\n  } else if (val === 42) {\n    answer = \"The Answer\";\n  } else if (val === 1) {\n    answer = \"There is no #1\";\n  } else if (val === 99) {\n    answer = \"Missed me by this much!\";\n  } else if (val === 7) {\n    answer = \"Ate Nine\";\n  }\n\n  // Only change code above this line\n  return answer;\n}\n\nchainToSwitch(7);","error":null,"seed":"function chainToSwitch(val) {\n  let answer = \"\";\n  // Only change code below this line\n\n  if (val === \"bob\") {\n    answer = \"Marley\";\n  } else if (val === 42) {\n    answer = \"The Answer\";\n  } else if (val === 1) {\n    answer = \"There is no #1\";\n  } else if (val === 99) {\n    answer = \"Missed me by this much!\";\n  } else if (val === 7) {\n    answer = \"Ate Nine\";\n  }\n\n  // Only change code above this line\n  return answer;\n}\n\nchainToSwitch(7);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function chainToSwitch(val) {\n  let answer = \"\";\n\n  switch (val) {\n    case \"bob\":\n      answer = \"Marley\";\n      break;\n    case 42:\n      answer = \"The Answer\";\n      break;\n    case 1:\n      answer = \"There is no #1\";\n      break;\n    case 99:\n      answer = \"Missed me by this much!\";\n      break;\n    case 7:\n      answer = \"Ate Nine\";\n  }\n  return answer;\n}","error":null,"seed":"function chainToSwitch(val) {\n  let answer = \"\";\n\n  switch (val) {\n    case \"bob\":\n      answer = \"Marley\";\n      break;\n    case 42:\n      answer = \"The Answer\";\n      break;\n    case 1:\n      answer = \"There is no #1\";\n      break;\n    case 99:\n      answer = \"Missed me by this much!\";\n      break;\n    case 7:\n      answer = \"Ate Nine\";\n  }\n  return answer;\n}"}]],"tests":[{"text":"<p>You should not use any <code>else</code> statements anywhere in the editor</p>","testString":"assert(!/else/g.test(code));"},{"text":"<p>You should not use any <code>if</code> statements anywhere in the editor</p>","testString":"assert(!/if/g.test(code));"},{"text":"<p>You should have at least four <code>break</code> statements</p>","testString":"assert(code.match(/break/g).length >= 4);"},{"text":"<p><code>chainToSwitch(\"bob\")</code> should be the string <code>Marley</code></p>","testString":"assert(chainToSwitch('bob') === 'Marley');"},{"text":"<p><code>chainToSwitch(42)</code> should be the string <code>The Answer</code></p>","testString":"assert(chainToSwitch(42) === 'The Answer');"},{"text":"<p><code>chainToSwitch(1)</code> should be the string <code>There is no #1</code></p>","testString":"assert(chainToSwitch(1) === 'There is no #1');"},{"text":"<p><code>chainToSwitch(99)</code> should be the string <code>Missed me by this much!</code></p>","testString":"assert(chainToSwitch(99) === 'Missed me by this much!');"},{"text":"<p><code>chainToSwitch(7)</code> should be the string <code>Ate Nine</code></p>","testString":"assert(chainToSwitch(7) === 'Ate Nine');"},{"text":"<p><code>chainToSwitch(\"John\")</code> should be <code>\"\"</code> (empty string)</p>","testString":"assert(chainToSwitch('John') === '');"},{"text":"<p><code>chainToSwitch(156)</code> should be <code>\"\"</code> (empty string)</p>","testString":"assert(chainToSwitch(156) === '');"}],"description":"<section id=\"description\">\n<p>If you have many options to choose from, a <code>switch</code> statement can be easier to write than many chained <code>if</code>/<code>else if</code> statements. The following:</p>\n<pre><code class=\"language-js\">if (val === 1) {\n  answer = \"a\";\n} else if (val === 2) {\n  answer = \"b\";\n} else {\n  answer = \"c\";\n}\n</code></pre>\n<p>can be replaced with:</p>\n<pre><code class=\"language-js\">switch (val) {\n  case 1:\n    answer = \"a\";\n    break;\n  case 2:\n    answer = \"b\";\n    break;\n  default:\n    answer = \"c\";\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the chained <code>if</code>/<code>else if</code> statements into a <code>switch</code> statement.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":78,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244c2","title":"Return a Value from a Function with Return","challengeType":1,"videoUrl":"https://scrimba.com/c/cy87wue","forumTopicId":18271,"dashedName":"return-a-value-from-a-function-with-return","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"","error":null,"seed":""}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function timesFive(num) {\n  return num * 5;\n}\ntimesFive(10);","error":null,"seed":"function timesFive(num) {\n  return num * 5;\n}\ntimesFive(10);"}]],"tests":[{"text":"<p><code>timesFive</code> should be a function</p>","testString":"assert(typeof timesFive === 'function');"},{"text":"<p><code>timesFive(5)</code> should return <code>25</code></p>","testString":"assert(timesFive(5) === 25);"},{"text":"<p><code>timesFive(2)</code> should return <code>10</code></p>","testString":"assert(timesFive(2) === 10);"},{"text":"<p><code>timesFive(0)</code> should return <code>0</code></p>","testString":"assert(timesFive(0) === 0);"}],"description":"<section id=\"description\">\n<p>We can pass values into a function with <dfn>arguments</dfn>. You can use a <code>return</code> statement to send a value back out of a function.</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-js\">function plusThree(num) {\n  return num + 3;\n}\n\nconst answer = plusThree(5);\n</code></pre>\n<p><code>answer</code> has the value <code>8</code>.</p>\n<p><code>plusThree</code> takes an <dfn>argument</dfn> for <code>num</code> and returns a value equal to <code>num + 3</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create a function <code>timesFive</code> that accepts one argument, multiplies it by <code>5</code>, and returns the new value.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":50,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244c4","title":"Return Early Pattern for Functions","challengeType":1,"videoUrl":"https://scrimba.com/c/cQe39Sq","forumTopicId":18272,"dashedName":"return-early-pattern-for-functions","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nfunction abTest(a, b) {\n  // Only change code below this line\n\n\n\n  // Only change code above this line\n\n  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));\n}\n\nabTest(2,2);","error":null,"seed":"// Setup\nfunction abTest(a, b) {\n  // Only change code below this line\n\n\n\n  // Only change code above this line\n\n  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));\n}\n\nabTest(2,2);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function abTest(a, b) {\n  if(a < 0 || b < 0) {\n    return undefined;\n  }\n  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));\n}","error":null,"seed":"function abTest(a, b) {\n  if(a < 0 || b < 0) {\n    return undefined;\n  }\n  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));\n}"}]],"tests":[{"text":"<p><code>abTest(2, 2)</code> should return a number</p>","testString":"assert(typeof abTest(2, 2) === 'number');"},{"text":"<p><code>abTest(2, 2)</code> should return <code>8</code></p>","testString":"assert(abTest(2, 2) === 8);"},{"text":"<p><code>abTest(-2, 2)</code> should return <code>undefined</code></p>","testString":"assert(abTest(-2, 2) === undefined);"},{"text":"<p><code>abTest(2, -2)</code> should return <code>undefined</code></p>","testString":"assert(abTest(2, -2) === undefined);"},{"text":"<p><code>abTest(2, 8)</code> should return <code>18</code></p>","testString":"assert(abTest(2, 8) === 18);"},{"text":"<p><code>abTest(3, 3)</code> should return <code>12</code></p>","testString":"assert(abTest(3, 3) === 12);"},{"text":"<p><code>abTest(0, 0)</code> should return <code>0</code></p>","testString":"assert(abTest(0, 0) === 0);"}],"description":"<section id=\"description\">\n<p>When a <code>return</code> statement is reached, the execution of the current function stops and control returns to the calling location.</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-js\">function myFun() {\n  console.log(\"Hello\");\n  return \"World\";\n  console.log(\"byebye\")\n}\nmyFun();\n</code></pre>\n<p>The above will display the string <code>Hello</code> in the console, and return the string <code>World</code>. The string <code>byebye</code> will never display in the console, because the function exits at the <code>return</code> statement.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Modify the function <code>abTest</code> so that if <code>a</code> or <code>b</code> are less than <code>0</code> the function will immediately exit with a value of <code>undefined</code>.</p>\n<p><strong>Hint</strong><br>\nRemember that <a href=\"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/understanding-uninitialized-variables\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><code>undefined</code> is a keyword</a>, not a string.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":80,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5679ceb97cbaa8c51670a16b","title":"Returning Boolean Values from Functions","challengeType":1,"videoUrl":"https://scrimba.com/c/cp62qAQ","forumTopicId":18273,"dashedName":"returning-boolean-values-from-functions","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function isLess(a, b) {\n  // Only change code below this line\n  if (a < b) {\n    return true;\n  } else {\n    return false;\n  }\n  // Only change code above this line\n}\n\nisLess(10, 15);","error":null,"seed":"function isLess(a, b) {\n  // Only change code below this line\n  if (a < b) {\n    return true;\n  } else {\n    return false;\n  }\n  // Only change code above this line\n}\n\nisLess(10, 15);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function isLess(a, b) {\n  return a < b;\n}","error":null,"seed":"function isLess(a, b) {\n  return a < b;\n}"}]],"tests":[{"text":"<p><code>isLess(10, 15)</code> should return <code>true</code></p>","testString":"assert(isLess(10, 15) === true);"},{"text":"<p><code>isLess(15, 10)</code> should return <code>false</code></p>","testString":"assert(isLess(15, 10) === false);"},{"text":"<p>You should not use any <code>if</code> or <code>else</code> statements</p>","testString":"assert(!/if|else/g.test(code));"}],"description":"<section id=\"description\">\n<p>You may recall from <a href=\"/learn/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-equality-operator\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Comparison with the Equality Operator</a> that all comparison operators return a boolean <code>true</code> or <code>false</code> value.</p>\n<p>Sometimes people use an <code>if/else</code> statement to do a comparison, like this:</p>\n<pre><code class=\"language-js\">function isEqual(a, b) {\n  if (a === b) {\n    return true;\n  } else {\n    return false;\n  }\n}\n</code></pre>\n<p>But there's a better way to do this. Since <code>===</code> returns <code>true</code> or <code>false</code>, we can return the result of the comparison:</p>\n<pre><code class=\"language-js\">function isEqual(a, b) {\n  return a === b;\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Fix the function <code>isLess</code> to remove the <code>if/else</code> statements.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":79,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244dd","title":"Selecting from Many Options with Switch Statements","challengeType":1,"videoUrl":"https://scrimba.com/c/c4mv4fm","forumTopicId":18277,"dashedName":"selecting-from-many-options-with-switch-statements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function caseInSwitch(val) {\n  let answer = \"\";\n  // Only change code below this line\n\n\n\n  // Only change code above this line\n  return answer;\n}\n\ncaseInSwitch(1);","error":null,"seed":"function caseInSwitch(val) {\n  let answer = \"\";\n  // Only change code below this line\n\n\n\n  // Only change code above this line\n  return answer;\n}\n\ncaseInSwitch(1);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function caseInSwitch(val) {\n  let answer = \"\";\n\n  switch (val) {\n    case 1:\n      answer = \"alpha\";\n      break;\n    case 2:\n      answer = \"beta\";\n      break;\n    case 3:\n      answer = \"gamma\";\n      break;\n    case 4:\n      answer = \"delta\";\n  }\n  return answer;\n}","error":null,"seed":"function caseInSwitch(val) {\n  let answer = \"\";\n\n  switch (val) {\n    case 1:\n      answer = \"alpha\";\n      break;\n    case 2:\n      answer = \"beta\";\n      break;\n    case 3:\n      answer = \"gamma\";\n      break;\n    case 4:\n      answer = \"delta\";\n  }\n  return answer;\n}"}]],"tests":[{"text":"<p><code>caseInSwitch(1)</code> should have a value of the string <code>alpha</code></p>","testString":"assert(caseInSwitch(1) === 'alpha');"},{"text":"<p><code>caseInSwitch(2)</code> should have a value of the string <code>beta</code></p>","testString":"assert(caseInSwitch(2) === 'beta');"},{"text":"<p><code>caseInSwitch(3)</code> should have a value of the string <code>gamma</code></p>","testString":"assert(caseInSwitch(3) === 'gamma');"},{"text":"<p><code>caseInSwitch(4)</code> should have a value of the string <code>delta</code></p>","testString":"assert(caseInSwitch(4) === 'delta');"},{"text":"<p>You should not use any <code>if</code> or <code>else</code> statements</p>","testString":"assert(!/else/g.test(code) || !/if/g.test(code));"},{"text":"<p>You should have at least 3 <code>break</code> statements</p>","testString":"assert(code.match(/break/g).length > 2);"}],"description":"<section id=\"description\">\n<p>If you have many options to choose from, use a <dfn>switch</dfn> statement. A <code>switch</code> statement tests a value and can have many <dfn>case</dfn> statements which define various possible values. Statements are executed from the first matched <code>case</code> value until a <code>break</code> is encountered.</p>\n<p>Here is an example of a <code>switch</code> statement:</p>\n<pre><code class=\"language-js\">switch (lowercaseLetter) {\n  case \"a\":\n    console.log(\"A\");\n    break;\n  case \"b\":\n    console.log(\"B\");\n    break;\n}\n</code></pre>\n<p><code>case</code> values are tested with strict equality (<code>===</code>). The <code>break</code> tells JavaScript to stop executing statements. If the <code>break</code> is omitted, the next statement will be executed.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Write a switch statement which tests <code>val</code> and sets <code>answer</code> for the following conditions:<br>\n<code>1</code> - <code>alpha</code><br>\n<code>2</code> - <code>beta</code><br>\n<code>3</code> - <code>gamma</code><br>\n<code>4</code> - <code>delta</code></p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":75,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244bc","title":"Shopping List","challengeType":1,"videoUrl":"https://scrimba.com/c/c9MEKHZ","forumTopicId":18280,"dashedName":"shopping-list","challengeFiles":[{"head":"","tail":"var count = 0;\nvar isArray = false;\nvar hasString = false;\nvar hasNumber = false;\n(function(list){\n  if(Array.isArray(myList)) {\n    isArray = true;\n    if(myList.length > 0) {\n      hasString = true;\n      hasNumber = true;\n      for (var elem of myList) {\n        if(!elem || !elem[0] || typeof elem[0] !== 'string') {\n          hasString = false;\n        }\n        if(!elem || typeof elem[1] !== 'number') {\n          hasNumber = false;\n        }\n      }\n    }\n    count = myList.length;\n    return JSON.stringify(myList);\n  } else {\n    return \"myList is not an array\";\n  }\n\n})(myList);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myList = [];","error":null,"seed":"const myList = [];"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myList = [\n  [\"Candy\", 10],\n  [\"Potatoes\", 12],\n  [\"Eggs\", 12],\n  [\"Catfood\", 1],\n  [\"Toads\", 9]\n];","error":null,"seed":"const myList = [\n  [\"Candy\", 10],\n  [\"Potatoes\", 12],\n  [\"Eggs\", 12],\n  [\"Catfood\", 1],\n  [\"Toads\", 9]\n];"}]],"tests":[{"text":"<p><code>myList</code> should be an array.</p>","testString":"assert(isArray);"},{"text":"<p>The first elements in each of your sub-arrays should all be strings.</p>","testString":"assert(hasString);"},{"text":"<p>The second elements in each of your sub-arrays should all be numbers.</p>","testString":"assert(hasNumber);"},{"text":"<p>You should have at least 5 items in your list.</p>","testString":"assert(count > 4);"}],"description":"<section id=\"description\">\n<p>Create a shopping list in the variable <code>myList</code>. The list should be a multi-dimensional array containing several sub-arrays.</p>\n<p>The first element in each sub-array should contain a string with the name of the item. The second element should be a number representing the quantity i.e.</p>\n<pre><code class=\"language-js\">[\"Chocolate Bar\", 15]\n</code></pre>\n<p>There should be at least 5 sub-arrays in the list.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":47,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244c6","title":"Stand in Line","challengeType":1,"videoUrl":"https://scrimba.com/c/ca8Q8tP","forumTopicId":18307,"dashedName":"stand-in-line","challengeFiles":[{"head":"var logOutput = [];\nvar originalConsole = console\nfunction capture() {\n    var nativeLog = console.log;\n    console.log = function (message) {\n        logOutput.push(message);\n        if(nativeLog.apply) {\n          nativeLog.apply(originalConsole, arguments);\n        } else {\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n          nativeLog(nativeMsg);\n        }\n    };\n}\n\nfunction uncapture() {\n  console.log = originalConsole.log;\n}\n\ncapture();","tail":"uncapture();\ntestArr = [1,2,3,4,5];\n(function() { return logOutput.join(\"\\n\");})();","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function nextInLine(arr, item) {\n  // Only change code below this line\n  \n  return item;\n  // Only change code above this line\n}\n\n// Setup\nlet testArr = [1, 2, 3, 4, 5];\n\n// Display code\nconsole.log(\"Before: \" + JSON.stringify(testArr));\nconsole.log(nextInLine(testArr, 6));\nconsole.log(\"After: \" + JSON.stringify(testArr));","error":null,"seed":"function nextInLine(arr, item) {\n  // Only change code below this line\n  \n  return item;\n  // Only change code above this line\n}\n\n// Setup\nlet testArr = [1, 2, 3, 4, 5];\n\n// Display code\nconsole.log(\"Before: \" + JSON.stringify(testArr));\nconsole.log(nextInLine(testArr, 6));\nconsole.log(\"After: \" + JSON.stringify(testArr));"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let testArr = [1, 2, 3, 4, 5];\n\nfunction nextInLine(arr, item) {\n    arr.push(item);\n    return arr.shift();\n}","error":null,"seed":"let testArr = [1, 2, 3, 4, 5];\n\nfunction nextInLine(arr, item) {\n    arr.push(item);\n    return arr.shift();\n}"}]],"tests":[{"text":"<p><code>nextInLine([], 5)</code> should return a number.</p>","testString":"assert.isNumber(nextInLine([], 5));"},{"text":"<p><code>nextInLine([], 1)</code> should return <code>1</code></p>","testString":"assert(nextInLine([], 1) === 1);"},{"text":"<p><code>nextInLine([2], 1)</code> should return <code>2</code></p>","testString":"assert(nextInLine([2], 1) === 2);"},{"text":"<p><code>nextInLine([5,6,7,8,9], 1)</code> should return <code>5</code></p>","testString":"assert(nextInLine([5, 6, 7, 8, 9], 1) === 5);"},{"text":"<p>After <code>nextInLine(testArr, 10)</code>, <code>testArr[4]</code> should be <code>10</code></p>","testString":"nextInLine(testArr, 10);\nassert(testArr[4] === 10);"}],"description":"<section id=\"description\">\n<p>In Computer Science a <dfn>queue</dfn> is an abstract <dfn>Data Structure</dfn> where items are kept in order. New items can be added at the back of the queue and old items are taken off from the front of the queue.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Write a function <code>nextInLine</code> which takes an array (<code>arr</code>) and a number (<code>item</code>) as arguments.</p>\n<p>Add the number to the end of the array, then remove the first element of the array.</p>\n<p>The <code>nextInLine</code> function should then return the element that was removed.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":56,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"bd7993c9c69feddfaeb8bdef","title":"Store Multiple Values in one Variable using JavaScript Arrays","challengeType":1,"videoUrl":"https://scrimba.com/c/crZQWAm","forumTopicId":18309,"dashedName":"store-multiple-values-in-one-variable-using-javascript-arrays","challengeFiles":[{"head":"","tail":"(function(z){return z;})(myArray);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Only change code below this line\nconst myArray = [];","error":null,"seed":"// Only change code below this line\nconst myArray = [];"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myArray = [\"The Answer\", 42];","error":null,"seed":"const myArray = [\"The Answer\", 42];"}]],"tests":[{"text":"<p><code>myArray</code> should be an array.</p>","testString":"assert(typeof myArray == 'object');"},{"text":"<p>The first item in <code>myArray</code> should be a string.</p>","testString":"assert(typeof myArray[0] !== 'undefined' && typeof myArray[0] == 'string');"},{"text":"<p>The second item in <code>myArray</code> should be a number.</p>","testString":"assert(typeof myArray[1] !== 'undefined' && typeof myArray[1] == 'number');"}],"description":"<section id=\"description\">\n<p>With JavaScript <code>array</code> variables, we can store several pieces of data in one place.</p>\n<p>You start an array declaration with an opening square bracket, end it with a closing square bracket, and put a comma between each entry, like this:</p>\n<pre><code class=\"language-js\">const sandwich = [\"peanut butter\", \"jelly\", \"bread\"];\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Modify the new array <code>myArray</code> so that it contains both a string and a number (in that order).</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":38,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244a8","title":"Storing Values with the Assignment Operator","challengeType":1,"videoUrl":"https://scrimba.com/c/cEanysE","forumTopicId":18310,"dashedName":"storing-values-with-the-assignment-operator","challengeFiles":[{"head":"if (typeof a != 'undefined') {\n  a = undefined;\n}","tail":"(function(a){return \"a = \" + a;})(a);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nvar a;\n\n// Only change code below this line","error":null,"seed":"// Setup\nvar a;\n\n// Only change code below this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"var a;\na = 7;","error":null,"seed":"var a;\na = 7;"}]],"tests":[{"text":"<p>You should not change code above the specified comment.</p>","testString":"assert(/var a;/.test(code));"},{"text":"<p><code>a</code> should have a value of 7.</p>","testString":"assert(typeof a === 'number' && a === 7);"}],"description":"<section id=\"description\">\n<p>In JavaScript, you can store a value in a variable with the <dfn>assignment</dfn> operator (<code>=</code>).</p>\n<pre><code class=\"language-js\">myVariable = 5;\n</code></pre>\n<p>This assigns the <code>Number</code> value <code>5</code> to <code>myVariable</code>.</p>\n<p>If there are any calculations to the right of the <code>=</code> operator, those are performed before the value is assigned to the variable on the left of the operator.</p>\n<pre><code class=\"language-js\">var myVar;\nmyVar = 5;\n</code></pre>\n<p>First, this code creates a variable named <code>myVar</code>. Then, the code assigns <code>5</code> to <code>myVar</code>. Now, if <code>myVar</code> appears again in the code, the program will treat it as if it is <code>5</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Assign the value <code>7</code> to variable <code>a</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":2,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"cf1111c1c11feddfaeb4bdef","title":"Subtract One Number from Another with JavaScript","challengeType":1,"videoUrl":"https://scrimba.com/c/cP3yQtk","forumTopicId":18314,"dashedName":"subtract-one-number-from-another-with-javascript","challengeFiles":[{"head":"","tail":"(function(z){return 'difference = '+z;})(difference);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const difference = 45 - 0;","error":null,"seed":"const difference = 45 - 0;"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const difference = 45 - 33;","error":null,"seed":"const difference = 45 - 33;"}]],"tests":[{"text":"<p>The variable <code>difference</code> should be equal to 12.</p>","testString":"assert(difference === 12);"},{"text":"<p>You should only subtract one number from 45.</p>","testString":"assert(/difference=45-33;?/.test(__helpers.removeWhiteSpace(code)));"}],"description":"<section id=\"description\">\n<p>We can also subtract one number from another.</p>\n<p>JavaScript uses the <code>-</code> symbol for subtraction.</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-js\">const myVar = 12 - 6;\n</code></pre>\n<p><code>myVar</code> would have the value <code>6</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the <code>0</code> so the difference is <code>12</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":11,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"567af2437cbaa8c51670a16c","title":"Testing Objects for Properties","challengeType":1,"forumTopicId":18324,"dashedName":"testing-objects-for-properties","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function checkObj(obj, checkProp) {\n  // Only change code below this line\n  return \"Change Me!\";\n  // Only change code above this line\n}","error":null,"seed":"function checkObj(obj, checkProp) {\n  // Only change code below this line\n  return \"Change Me!\";\n  // Only change code above this line\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function checkObj(obj, checkProp) {\n  if(obj.hasOwnProperty(checkProp)) {\n    return obj[checkProp];\n  } else {\n    return \"Not Found\";\n  }\n}","error":null,"seed":"function checkObj(obj, checkProp) {\n  if(obj.hasOwnProperty(checkProp)) {\n    return obj[checkProp];\n  } else {\n    return \"Not Found\";\n  }\n}"}]],"tests":[{"text":"<p><code>checkObj({gift: \"pony\", pet: \"kitten\", bed: \"sleigh\"}, \"gift\")</code> should return the string <code>pony</code>.</p>","testString":"assert(\n  checkObj({ gift: 'pony', pet: 'kitten', bed: 'sleigh' }, 'gift') === 'pony'\n);"},{"text":"<p><code>checkObj({gift: \"pony\", pet: \"kitten\", bed: \"sleigh\"}, \"pet\")</code> should return the string <code>kitten</code>.</p>","testString":"assert(\n  checkObj({ gift: 'pony', pet: 'kitten', bed: 'sleigh' }, 'pet') === 'kitten'\n);"},{"text":"<p><code>checkObj({gift: \"pony\", pet: \"kitten\", bed: \"sleigh\"}, \"house\")</code> should return the string <code>Not Found</code>.</p>","testString":"assert(\n  checkObj({ gift: 'pony', pet: 'kitten', bed: 'sleigh' }, 'house') ===\n    'Not Found'\n);"},{"text":"<p><code>checkObj({city: \"Seattle\"}, \"city\")</code> should return the string <code>Seattle</code>.</p>","testString":"assert(checkObj({ city: 'Seattle' }, 'city') === 'Seattle');"},{"text":"<p><code>checkObj({city: \"Seattle\"}, \"district\")</code> should return the string <code>Not Found</code>.</p>","testString":"assert(checkObj({ city: 'Seattle' }, 'district') === 'Not Found');"},{"text":"<p><code>checkObj({pet: \"kitten\", bed: \"sleigh\"}, \"gift\")</code> should return the string <code>Not Found</code>.</p>","testString":"assert(checkObj({ pet: 'kitten', bed: 'sleigh' }, 'gift') === 'Not Found');"}],"description":"<section id=\"description\">\n<p>Sometimes it is useful to check if the property of a given object exists or not. We can use the <code>.hasOwnProperty(propname)</code> method of objects to determine if that object has the given property name. <code>.hasOwnProperty()</code> returns <code>true</code> or <code>false</code> if the property is found or not.</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-js\">const myObj = {\n  top: \"hat\",\n  bottom: \"pants\"\n};\n\nmyObj.hasOwnProperty(\"top\");\nmyObj.hasOwnProperty(\"middle\");\n</code></pre>\n<p>The first <code>hasOwnProperty</code> returns <code>true</code>, while the second returns <code>false</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Modify the function <code>checkObj</code> to test if an object passed to the function (<code>obj</code>) contains a specific property (<code>checkProp</code>). If the property is found, return that property's value. If not, return <code>\"Not Found\"</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":90,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244ba","title":"Understand String Immutability","challengeType":1,"videoUrl":"https://scrimba.com/c/cWPVaUR","forumTopicId":18331,"dashedName":"understand-string-immutability","challengeFiles":[{"head":"","tail":"(function(v){return \"myStr = \" + v;})(myStr);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nlet myStr = \"Jello World\";\n\n// Only change code below this line\nmyStr[0] = \"H\"; // Change this line\n// Only change code above this line","error":null,"seed":"// Setup\nlet myStr = \"Jello World\";\n\n// Only change code below this line\nmyStr[0] = \"H\"; // Change this line\n// Only change code above this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let myStr = \"Jello World\";\nmyStr = \"Hello World\";","error":null,"seed":"let myStr = \"Jello World\";\nmyStr = \"Hello World\";"}]],"tests":[{"text":"<p><code>myStr</code> should have a value of the string <code>Hello World</code>.</p>","testString":"assert(myStr === 'Hello World');"},{"text":"<p>You should not change the code above the specified comment.</p>","testString":"assert(/myStr = \"Jello World\"/.test(code));"}],"description":"<section id=\"description\">\n<p>In JavaScript, <code>String</code> values are <dfn>immutable</dfn>, which means that they cannot be altered once created.</p>\n<p>For example, the following code will produce an error because the letter <code>B</code> in the string <code>Bob</code> cannot be changed to the letter <code>J</code>:</p>\n<pre><code class=\"language-js\">let myStr = \"Bob\";\nmyStr[0] = \"J\";\n</code></pre>\n<p>Note that this does <em>not</em> mean that <code>myStr</code> could not be re-assigned. The only way to change <code>myStr</code> would be to assign it with a new value, like this:</p>\n<pre><code class=\"language-js\">let myStr = \"Bob\";\nmyStr = \"Job\";\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Correct the assignment to <code>myStr</code> so it contains the string value of <code>Hello World</code> using the approach shown in the example above.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":33,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"bd7123c9c441eddfaeb5bdef","title":"Understanding Boolean Values","challengeType":1,"videoUrl":"https://scrimba.com/c/c9Me8t4","forumTopicId":301176,"dashedName":"understanding-boolean-values","challengeFiles":[{"head":"","tail":"welcomeToBooleans();","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function welcomeToBooleans() {\n  // Only change code below this line\n\n  return false; // Change this line\n\n  // Only change code above this line\n}","error":null,"seed":"function welcomeToBooleans() {\n  // Only change code below this line\n\n  return false; // Change this line\n\n  // Only change code above this line\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function welcomeToBooleans() {\n  return true; // Change this line\n}","error":null,"seed":"function welcomeToBooleans() {\n  return true; // Change this line\n}"}]],"tests":[{"text":"<p>The <code>welcomeToBooleans()</code> function should return a Boolean (<code>true</code> or <code>false</code>) value.</p>","testString":"assert(typeof welcomeToBooleans() === 'boolean');"},{"text":"<p><code>welcomeToBooleans()</code> should return <code>true</code>.</p>","testString":"assert(welcomeToBooleans() === true);"}],"description":"<section id=\"description\">\n<p>Another data type is the <dfn>Boolean</dfn>. Booleans may only be one of two values: <code>true</code> or <code>false</code>. They are basically little on-off switches, where <code>true</code> is on and <code>false</code> is off. These two states are mutually exclusive.</p>\n<p><strong>Note:</strong> Boolean values are never written with quotes. The strings <code>\"true\"</code> and <code>\"false\"</code> are not Boolean and have no special meaning in JavaScript.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Modify the <code>welcomeToBooleans</code> function so that it returns <code>true</code> instead of <code>false</code> when the run button is clicked.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":57,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244ab","title":"Understanding Case Sensitivity in Variables","challengeType":1,"videoUrl":"https://scrimba.com/c/cd6GDcD","forumTopicId":18334,"dashedName":"understanding-case-sensitivity-in-variables","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Variable declarations\nvar StUdLyCapVaR;\nvar properCamelCase;\nvar TitleCaseOver;\n\n// Variable assignments\nSTUDLYCAPVAR = 10;\nPRoperCAmelCAse = \"A String\";\ntITLEcASEoVER = 9000;","error":null,"seed":"// Variable declarations\nvar StUdLyCapVaR;\nvar properCamelCase;\nvar TitleCaseOver;\n\n// Variable assignments\nSTUDLYCAPVAR = 10;\nPRoperCAmelCAse = \"A String\";\ntITLEcASEoVER = 9000;"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"var studlyCapVar;\nvar properCamelCase;\nvar titleCaseOver;\n\nstudlyCapVar = 10;\nproperCamelCase = \"A String\";\ntitleCaseOver = 9000;","error":null,"seed":"var studlyCapVar;\nvar properCamelCase;\nvar titleCaseOver;\n\nstudlyCapVar = 10;\nproperCamelCase = \"A String\";\ntitleCaseOver = 9000;"}]],"tests":[{"text":"<p><code>studlyCapVar</code> should be defined and have a value of <code>10</code>.</p>","testString":"assert(typeof studlyCapVar !== 'undefined' && studlyCapVar === 10);"},{"text":"<p><code>properCamelCase</code> should be defined and have a value of the string <code>A String</code>.</p>","testString":"assert(\n  typeof properCamelCase !== 'undefined' && properCamelCase === 'A String'\n);"},{"text":"<p><code>titleCaseOver</code> should be defined and have a value of <code>9000</code>.</p>","testString":"assert(typeof titleCaseOver !== 'undefined' && titleCaseOver === 9000);"},{"text":"<p><code>studlyCapVar</code> should use camelCase in both declaration and assignment sections.</p>","testString":"assert(code.match(/studlyCapVar/g).length === 2);"},{"text":"<p><code>properCamelCase</code> should use camelCase in both declaration and assignment sections.</p>","testString":"assert(code.match(/properCamelCase/g).length === 2);"},{"text":"<p><code>titleCaseOver</code> should use camelCase in both declaration and assignment sections.</p>","testString":"assert(code.match(/titleCaseOver/g).length === 2);"}],"description":"<section id=\"description\">\n<p>In JavaScript all variables and function names are case sensitive. This means that capitalization matters.</p>\n<p><code>MYVAR</code> is not the same as <code>MyVar</code> nor <code>myvar</code>. It is possible to have multiple distinct variables with the same name but different casing. It is strongly recommended that for the sake of clarity, you <em>do not</em> use this language feature.</p>\n<p><strong>Best Practice</strong></p>\n<p>Write variable names in JavaScript in <dfn>camelCase</dfn>. In <dfn>camelCase</dfn>, multi-word variable names have the first word in lowercase and the first letter of each subsequent word is capitalized.</p>\n<p><strong>Examples:</strong></p>\n<pre><code class=\"language-js\">var someVariable;\nvar anotherVariableName;\nvar thisVariableNameIsSoLong;\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Modify the existing declarations and assignments so their names use <dfn>camelCase</dfn>.</p>\n<p>Do not create any new variables.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":7,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"598e8944f009e646fc236146","title":"Understanding Undefined Value returned from a Function","challengeType":1,"videoUrl":"https://scrimba.com/c/ce2p7cL","forumTopicId":301177,"dashedName":"understanding-undefined-value-returned-from-a-function","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nlet sum = 0;\n\nfunction addThree() {\n  sum = sum + 3;\n}\n\n// Only change code below this line\n\n\n// Only change code above this line\n\naddThree();\naddFive();","error":null,"seed":"// Setup\nlet sum = 0;\n\nfunction addThree() {\n  sum = sum + 3;\n}\n\n// Only change code below this line\n\n\n// Only change code above this line\n\naddThree();\naddFive();"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let sum = 0;\n\nfunction addThree() {\n  sum = sum + 3;\n}\n\nfunction addFive() {\n  sum = sum + 5;\n}\n\naddThree();\naddFive();","error":null,"seed":"let sum = 0;\n\nfunction addThree() {\n  sum = sum + 3;\n}\n\nfunction addFive() {\n  sum = sum + 5;\n}\n\naddThree();\naddFive();"}]],"tests":[{"text":"<p><code>addFive</code> should be a function.</p>","testString":"assert(typeof addFive === 'function');"},{"text":"<p>Once both functions have run, the <code>sum</code> should be equal to <code>8</code>.</p>","testString":"assert(sum === 8);"},{"text":"<p>Returned value from <code>addFive</code> should be <code>undefined</code>.</p>","testString":"assert(addFive() === undefined);"},{"text":"<p>Inside the <code>addFive</code> function, you should add <code>5</code> to the <code>sum</code> variable.</p>","testString":"assert(\n  __helpers.removeWhiteSpace(addFive.toString()).match(/sum=sum\\+5|sum\\+=5/)\n);"}],"description":"<section id=\"description\">\n<p>A function can include the <code>return</code> statement but it does not have to. In the case that the function doesn't have a <code>return</code> statement, when you call it, the function processes the inner code but the returned value is <code>undefined</code>.</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-js\">let sum = 0;\n\nfunction addSum(num) {\n  sum = sum + num;\n}\n\naddSum(3);\n</code></pre>\n<p><code>addSum</code> is a function without a <code>return</code> statement. The function will change the global <code>sum</code> variable but the returned value of the function is <code>undefined</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create a function <code>addFive</code> without any arguments. This function adds 5 to the <code>sum</code> variable, but its returned value is <code>undefined</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":54,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244aa","title":"Understanding Uninitialized Variables","challengeType":1,"videoUrl":"https://scrimba.com/c/cBa2JAL","forumTopicId":18335,"dashedName":"understanding-uninitialized-variables","challengeFiles":[{"head":"","tail":"(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = '\" + c + \"'\"; })(a,b,c);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Only change code below this line\nvar a;\nvar b;\nvar c;\n// Only change code above this line\n\na = a + 1;\nb = b + 5;\nc = c + \" String!\";","error":null,"seed":"// Only change code below this line\nvar a;\nvar b;\nvar c;\n// Only change code above this line\n\na = a + 1;\nb = b + 5;\nc = c + \" String!\";"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"var a = 5;\nvar b = 10;\nvar c = \"I am a\";\na = a + 1;\nb = b + 5;\nc = c + \" String!\";","error":null,"seed":"var a = 5;\nvar b = 10;\nvar c = \"I am a\";\na = a + 1;\nb = b + 5;\nc = c + \" String!\";"}]],"tests":[{"text":"<p><code>a</code> should be defined and have a final value of <code>6</code>.</p>","testString":"assert(typeof a === 'number' && a === 6);"},{"text":"<p><code>b</code> should be defined and have a final value of <code>15</code>.</p>","testString":"assert(typeof b === 'number' && b === 15);"},{"text":"<p><code>c</code> should not contain <code>undefined</code> and should have a final value of the string <code>I am a String!</code></p>","testString":"assert(!/undefined/.test(c) && c === 'I am a String!');"},{"text":"<p>You should not change code below the specified comment.</p>","testString":"assert(\n  /a = a \\+ 1;/.test(code) &&\n    /b = b \\+ 5;/.test(code) &&\n    /c = c \\+ \" String!\";/.test(code)\n);"}],"description":"<section id=\"description\">\n<p>When JavaScript variables are declared, they have an initial value of <code>undefined</code>. If you do a mathematical operation on an <code>undefined</code> variable your result will be <code>NaN</code> which means <dfn>\"Not a Number\"</dfn>. If you concatenate a string with an <code>undefined</code> variable, you will get a <dfn>string</dfn> of <code>undefined</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Initialize the three variables <code>a</code>, <code>b</code>, and <code>c</code> with <code>5</code>, <code>10</code>, and <code>\"I am a\"</code> respectively so that they will not be <code>undefined</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":6,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56bbb991ad1ed5201cd392d1","title":"Updating Object Properties","challengeType":1,"videoUrl":"https://scrimba.com/c/c9yEJT4","forumTopicId":18336,"dashedName":"updating-object-properties","challengeFiles":[{"head":"","tail":"(function(z){return z;})(myDog);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst myDog = {\n  \"name\": \"Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"]\n};\n\n// Only change code below this line\n","error":null,"seed":"// Setup\nconst myDog = {\n  \"name\": \"Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"]\n};\n\n// Only change code below this line\n"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myDog = {\n  \"name\": \"Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"]\n};\nmyDog.name = \"Happy Coder\";","error":null,"seed":"const myDog = {\n  \"name\": \"Coder\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"freeCodeCamp Campers\"]\n};\nmyDog.name = \"Happy Coder\";"}]],"tests":[{"text":"<p>You should update <code>myDog</code>'s <code>name</code> property to equal the string <code>Happy Coder</code>.</p>","testString":"assert(/happy coder/gi.test(myDog.name));"},{"text":"<p>You should not edit the <code>myDog</code> definition.</p>","testString":"assert(/\"name\": \"Coder\"/.test(code));"}],"description":"<section id=\"description\">\n<p>After you've created a JavaScript object, you can update its properties at any time just like you would update any other variable. You can use either dot or bracket notation to update.</p>\n<p>For example, let's look at <code>ourDog</code>:</p>\n<pre><code class=\"language-js\">const ourDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"]\n};\n</code></pre>\n<p>Since he's a particularly happy dog, let's change his name to the string <code>Happy Camper</code>. Here's how we update his object's name property: <code>ourDog.name = \"Happy Camper\";</code> or <code>ourDog[\"name\"] = \"Happy Camper\";</code> Now when we evaluate <code>ourDog.name</code>, instead of getting <code>Camper</code>, we'll get his new name, <code>Happy Camper</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Update the <code>myDog</code> object's name property. Let's change her name from <code>Coder</code> to <code>Happy Coder</code>. You can use either dot or bracket notation.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":86,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"bd7123c9c549eddfaeb5bdef","title":"Use Bracket Notation to Find the First Character in a String","challengeType":1,"videoUrl":"https://scrimba.com/c/ca8JwhW","forumTopicId":18341,"dashedName":"use-bracket-notation-to-find-the-first-character-in-a-string","challengeFiles":[{"head":"","tail":"(function(v){return v;})(firstLetterOfLastName);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nlet firstLetterOfLastName = \"\";\nconst lastName = \"Lovelace\";\n\n// Only change code below this line\nfirstLetterOfLastName = lastName; // Change this line","error":null,"seed":"// Setup\nlet firstLetterOfLastName = \"\";\nconst lastName = \"Lovelace\";\n\n// Only change code below this line\nfirstLetterOfLastName = lastName; // Change this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let firstLetterOfLastName = \"\";\nconst lastName = \"Lovelace\";\n\n// Only change code below this line\nfirstLetterOfLastName = lastName[0];","error":null,"seed":"let firstLetterOfLastName = \"\";\nconst lastName = \"Lovelace\";\n\n// Only change code below this line\nfirstLetterOfLastName = lastName[0];"}]],"tests":[{"text":"<p>The <code>firstLetterOfLastName</code> variable should have the value of <code>L</code>.</p>","testString":"assert(firstLetterOfLastName === 'L');"},{"text":"<p>You should use bracket notation.</p>","testString":"assert(code.match(/firstLetterOfLastName\\s*=\\s*lastName\\s*\\[\\s*\\d\\s*\\]/));"}],"description":"<section id=\"description\">\n<p><dfn>Bracket notation</dfn> is a way to get a character at a specific index within a string.</p>\n<p>Most modern programming languages, like JavaScript, don't start counting at 1 like humans do. They start at 0. This is referred to as <dfn>Zero-based</dfn> indexing.</p>\n<p>For example, the character at index 0 in the word <code>Charles</code> is <code>C</code>. So if <code>const firstName = \"Charles\"</code>, you can get the value of the first letter of the string by using <code>firstName[0]</code>.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">const firstName = \"Charles\";\nconst firstLetter = firstName[0];\n</code></pre>\n<p><code>firstLetter</code> would have a value of the string <code>C</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use bracket notation to find the first character in the <code>lastName</code> variable and assign it to <code>firstLetterOfLastName</code>.</p>\n<p><strong>Hint:</strong> Try looking at the example above if you get stuck.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":32,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"bd7123c9c451eddfaeb5bdef","title":"Use Bracket Notation to Find the Last Character in a String","challengeType":1,"videoUrl":"https://scrimba.com/c/cBZQGcv","forumTopicId":18342,"dashedName":"use-bracket-notation-to-find-the-last-character-in-a-string","challengeFiles":[{"head":"","tail":"(function(v){return v;})(lastLetterOfLastName);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst lastName = \"Lovelace\";\n\n// Only change code below this line\nconst lastLetterOfLastName = lastName; // Change this line","error":null,"seed":"// Setup\nconst lastName = \"Lovelace\";\n\n// Only change code below this line\nconst lastLetterOfLastName = lastName; // Change this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const lastName = \"Lovelace\";\nconst lastLetterOfLastName = lastName[lastName.length - 1];","error":null,"seed":"const lastName = \"Lovelace\";\nconst lastLetterOfLastName = lastName[lastName.length - 1];"}]],"tests":[{"text":"<p><code>lastLetterOfLastName</code> should be the letter <code>e</code>.</p>","testString":"assert(lastLetterOfLastName === 'e');"},{"text":"<p>You should use <code>.length</code> to get the last letter.</p>","testString":"assert(code.match(/\\.length/g).length > 0);"}],"description":"<section id=\"description\">\n<p>In order to get the last letter of a string, you can subtract one from the string's length.</p>\n<p>For example, if <code>const firstName = \"Ada\"</code>, you can get the value of the last letter of the string by using <code>firstName[firstName.length - 1]</code>.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">const firstName = \"Ada\";\nconst lastLetter = firstName[firstName.length - 1];\n</code></pre>\n<p><code>lastLetter</code> would have a value of the string <code>a</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use <dfn>bracket notation</dfn> to find the last character in the <code>lastName</code> variable.</p>\n<p><strong>Hint:</strong> Try looking at the example above if you get stuck.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":35,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"bd7123c9c450eddfaeb5bdef","title":"Use Bracket Notation to Find the Nth Character in a String","challengeType":1,"videoUrl":"https://scrimba.com/c/cWPVJua","forumTopicId":18343,"dashedName":"use-bracket-notation-to-find-the-nth-character-in-a-string","challengeFiles":[{"head":"","tail":"(function(v){return v;})(thirdLetterOfLastName);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst lastName = \"Lovelace\";\n\n// Only change code below this line\nconst thirdLetterOfLastName = lastName; // Change this line","error":null,"seed":"// Setup\nconst lastName = \"Lovelace\";\n\n// Only change code below this line\nconst thirdLetterOfLastName = lastName; // Change this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const lastName = \"Lovelace\";\nconst thirdLetterOfLastName = lastName[2];","error":null,"seed":"const lastName = \"Lovelace\";\nconst thirdLetterOfLastName = lastName[2];"}]],"tests":[{"text":"<p>The <code>thirdLetterOfLastName</code> variable should have the value of <code>v</code>.</p>","testString":"assert(thirdLetterOfLastName === 'v');"},{"text":"<p>You should use bracket notation.</p>","testString":"assert(code.match(/thirdLetterOfLastName\\s*=\\s*lastName\\s*\\[\\s*\\d\\s*\\]/));"}],"description":"<section id=\"description\">\n<p>You can also use <dfn>bracket notation</dfn> to get the character at other positions within a string.</p>\n<p>Remember that computers start counting at <code>0</code>, so the first character is actually the zeroth character.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">const firstName = \"Ada\";\nconst secondLetterOfFirstName = firstName[1];\n</code></pre>\n<p><code>secondLetterOfFirstName</code> would have a value of the string <code>d</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Let's try to set <code>thirdLetterOfLastName</code> to equal the third letter of the <code>lastName</code> variable using bracket notation.</p>\n<p><strong>Hint:</strong> Try looking at the example above if you get stuck.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":34,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"bd7123c9c452eddfaeb5bdef","title":"Use Bracket Notation to Find the Nth-to-Last Character in a String","challengeType":1,"videoUrl":"https://scrimba.com/c/cw4vkh9","forumTopicId":18344,"dashedName":"use-bracket-notation-to-find-the-nth-to-last-character-in-a-string","challengeFiles":[{"head":"","tail":"(function(v){return v;})(secondToLastLetterOfLastName);","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nconst lastName = \"Lovelace\";\n\n// Only change code below this line\nconst secondToLastLetterOfLastName = lastName; // Change this line","error":null,"seed":"// Setup\nconst lastName = \"Lovelace\";\n\n// Only change code below this line\nconst secondToLastLetterOfLastName = lastName; // Change this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const lastName = \"Lovelace\";\nconst secondToLastLetterOfLastName = lastName[lastName.length - 2];","error":null,"seed":"const lastName = \"Lovelace\";\nconst secondToLastLetterOfLastName = lastName[lastName.length - 2];"}]],"tests":[{"text":"<p><code>secondToLastLetterOfLastName</code> should be the letter <code>c</code>.</p>","testString":"assert(secondToLastLetterOfLastName === 'c');"},{"text":"<p>You should use <code>.length</code> to get the second last letter.</p>","testString":"assert(code.match(/\\.length/g).length > 0);"}],"description":"<section id=\"description\">\n<p>You can use the same principle we just used to retrieve the last character in a string to retrieve the Nth-to-last character.</p>\n<p>For example, you can get the value of the third-to-last letter of the <code>const firstName = \"Augusta\"</code> string by using <code>firstName[firstName.length - 3]</code></p>\n<p>Example:</p>\n<pre><code class=\"language-js\">const firstName = \"Augusta\";\nconst thirdToLastLetter = firstName[firstName.length - 3];\n</code></pre>\n<p><code>thirdToLastLetter</code> would have a value of the string <code>s</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use <dfn>bracket notation</dfn> to find the second-to-last character in the <code>lastName</code> string.</p>\n<p><strong>Hint:</strong> Try looking at the example above if you get stuck.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":36,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"cf1111c1c12feddfaeb3bdef","title":"Use Conditional Logic with If Statements","challengeType":1,"videoUrl":"https://scrimba.com/c/cy87mf3","forumTopicId":18348,"dashedName":"use-conditional-logic-with-if-statements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function trueOrFalse(wasThatTrue) {\n  // Only change code below this line\n\n\n\n  // Only change code above this line\n\n}","error":null,"seed":"function trueOrFalse(wasThatTrue) {\n  // Only change code below this line\n\n\n\n  // Only change code above this line\n\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function trueOrFalse(wasThatTrue) {\n  if (wasThatTrue) {\n    return \"Yes, that was true\";\n  }\n  return \"No, that was false\";\n}","error":null,"seed":"function trueOrFalse(wasThatTrue) {\n  if (wasThatTrue) {\n    return \"Yes, that was true\";\n  }\n  return \"No, that was false\";\n}"}]],"tests":[{"text":"<p><code>trueOrFalse</code> should be a function</p>","testString":"assert(typeof trueOrFalse === 'function');"},{"text":"<p><code>trueOrFalse(true)</code> should return a string</p>","testString":"assert(typeof trueOrFalse(true) === 'string');"},{"text":"<p><code>trueOrFalse(false)</code> should return a string</p>","testString":"assert(typeof trueOrFalse(false) === 'string');"},{"text":"<p><code>trueOrFalse(true)</code> should return the string <code>Yes, that was true</code></p>","testString":"assert(trueOrFalse(true) === 'Yes, that was true');"},{"text":"<p><code>trueOrFalse(false)</code> should return the string <code>No, that was false</code></p>","testString":"assert(trueOrFalse(false) === 'No, that was false');"}],"description":"<section id=\"description\">\n<p><code>if</code> statements are used to make decisions in code. The keyword <code>if</code> tells JavaScript to execute the code in the curly braces under certain conditions, defined in the parentheses. These conditions are known as <code>Boolean</code> conditions and they may only be <code>true</code> or <code>false</code>.</p>\n<p>When the condition evaluates to <code>true</code>, the program executes the statement inside the curly braces. When the Boolean condition evaluates to <code>false</code>, the statement inside the curly braces will not execute.</p>\n<p><strong>Pseudocode</strong></p>\n<blockquote>if (<i>condition is true</i>) {<br>  <i>statement is executed</i><br>}</blockquote>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-js\">function test (myCondition) {\n  if (myCondition) {\n    return \"It was true\";\n  }\n  return \"It was false\";\n}\n\ntest(true);\ntest(false);\n</code></pre>\n<p><code>test(true)</code> returns the string <code>It was true</code>, and <code>test(false)</code> returns the string <code>It was false</code>.</p>\n<p>When <code>test</code> is called with a value of <code>true</code>, the <code>if</code> statement evaluates <code>myCondition</code> to see if it is <code>true</code> or not. Since it is <code>true</code>, the function returns <code>It was true</code>. When we call <code>test</code> with a value of <code>false</code>, <code>myCondition</code> is <em>not</em> <code>true</code> and the statement in the curly braces is not executed and the function returns <code>It was false</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create an <code>if</code> statement inside the function to return <code>Yes, that was true</code> if the parameter <code>wasThatTrue</code> is <code>true</code> and return <code>No, that was false</code> otherwise.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":58,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b7e367417b2b2512b21","title":"Use Multiple Conditional (Ternary) Operators","challengeType":1,"videoUrl":"https://scrimba.com/c/cyWJBT4","forumTopicId":301179,"dashedName":"use-multiple-conditional-ternary-operators","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function checkSign(num) {\n\n}\n\ncheckSign(10);","error":null,"seed":"function checkSign(num) {\n\n}\n\ncheckSign(10);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function checkSign(num) {\n  return (num > 0) ? 'positive' : (num < 0) ? 'negative' : 'zero';\n}","error":null,"seed":"function checkSign(num) {\n  return (num > 0) ? 'positive' : (num < 0) ? 'negative' : 'zero';\n}"}]],"tests":[{"text":"<p><code>checkSign</code> should use multiple conditional operators</p>","testString":"assert(/.+?\\s*?\\?\\s*?.+?\\s*?:\\s*?.+?\\s*?\\?\\s*?.+?\\s*?:\\s*?.+?/gi.test(code));"},{"text":"<p><code>checkSign(10)</code> should return the string <code>positive</code>. Note that capitalization matters</p>","testString":"assert(checkSign(10) === 'positive');"},{"text":"<p><code>checkSign(-12)</code> should return the string <code>negative</code>. Note that capitalization matters</p>","testString":"assert(checkSign(-12) === 'negative');"},{"text":"<p><code>checkSign(0)</code> should return the string <code>zero</code>. Note that capitalization matters</p>","testString":"assert(checkSign(0) === 'zero');"}],"description":"<section id=\"description\">\n<p>In the previous challenge, you used a single conditional operator. You can also chain them together to check for multiple conditions.</p>\n<p>The following function uses <code>if</code>, <code>else if</code>, and <code>else</code> statements to check multiple conditions:</p>\n<pre><code class=\"language-js\">function findGreaterOrEqual(a, b) {\n  if (a === b) {\n    return \"a and b are equal\";\n  }\n  else if (a > b) {\n    return \"a is greater\";\n  }\n  else {\n    return \"b is greater\";\n  }\n}\n</code></pre>\n<p>The above function can be re-written using multiple conditional operators:</p>\n<pre><code class=\"language-js\">function findGreaterOrEqual(a, b) {\n  return (a === b) ? \"a and b are equal\" \n    : (a > b) ? \"a is greater\" \n    : \"b is greater\";\n}\n</code></pre>\n<p>It is considered best practice to format multiple conditional operators such that each condition is on a separate line, as shown above. Using multiple conditional operators without proper indentation may make your code hard to read. For example:</p>\n<pre><code class=\"language-js\">function findGreaterOrEqual(a, b) {\n  return (a === b) ? \"a and b are equal\" : (a > b) ? \"a is greater\" : \"b is greater\";\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>In the <code>checkSign</code> function, use multiple conditional operators - following the recommended format used in <code>findGreaterOrEqual</code> - to check if a number is positive, negative or zero. The function should return <code>positive</code>, <code>negative</code> or <code>zero</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":110,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5cd9a70215d3c4e65518328f","title":"Use Recursion to Create a Countdown","challengeType":1,"forumTopicId":305925,"dashedName":"use-recursion-to-create-a-countdown","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Only change code below this line\nfunction countdown(n){\n  return;\n}\n// Only change code above this line","error":null,"seed":"// Only change code below this line\nfunction countdown(n){\n  return;\n}\n// Only change code above this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function countdown(n){\n   return n < 1 ? [] : [n].concat(countdown(n - 1));\n}","error":null,"seed":"function countdown(n){\n   return n < 1 ? [] : [n].concat(countdown(n - 1));\n}"}]],"tests":[{"text":"<p><code>countdown(-1)</code> should return an empty array.</p>","testString":"assert.isEmpty(countdown(-1));"},{"text":"<p><code>countdown(10)</code> should return <code>[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</code></p>","testString":"assert.deepStrictEqual(countdown(10), [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);"},{"text":"<p><code>countdown(5)</code> should return <code>[5, 4, 3, 2, 1]</code></p>","testString":"assert.deepStrictEqual(countdown(5), [5, 4, 3, 2, 1]);"},{"text":"<p>Your code should not rely on any kind of loops (<code>for</code>, <code>while</code> or higher order functions such as <code>forEach</code>, <code>map</code>, <code>filter</code>, and <code>reduce</code>).</p>","testString":"assert(\n  !code.match(/for|while|forEach|map|filter|reduce/g)\n);"},{"text":"<p>You should use recursion to solve this problem.</p>","testString":"assert(\n  countdown.toString().match(/countdown\\s*\\(.+\\)/)\n);"},{"text":"<p>Global variables should not be used to cache the array.</p>","testString":"countdown(1)\nassert.deepStrictEqual(countdown(5), [5, 4, 3, 2, 1]);"}],"description":"<section id=\"description\">\n<p>In a <a href=\"/learn/javascript-algorithms-and-data-structures/basic-javascript/replace-loops-using-recursion\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">previous challenge</a>, you learned how to use recursion to replace a <code>for</code> loop. Now, let's look at a more complex function that returns an array of consecutive integers starting with <code>1</code> through the number passed to the function.</p>\n<p>As mentioned in the previous challenge, there will be a <dfn>base case</dfn>. The base case tells the recursive function when it no longer needs to call itself. It is a simple case where the return value is already known. There will also be a <dfn>recursive call</dfn> which executes the original function with different arguments. If the function is written correctly, eventually the base case will be reached.</p>\n<p>For example, say you want to write a recursive function that returns an array containing the numbers <code>1</code> through <code>n</code>. This function will need to accept an argument, <code>n</code>, representing the final number. Then it will need to call itself with progressively smaller values of <code>n</code> until it reaches <code>1</code>. You could write the function as follows:</p>\n<pre><code class=\"language-javascript\">function countup(n) {\n  if (n &#x3C; 1) {\n    return [];\n  } else {\n    const countArray = countup(n - 1);\n    countArray.push(n);\n    return countArray;\n  }\n}\nconsole.log(countup(5));\n</code></pre>\n<p>The value <code>[1, 2, 3, 4, 5]</code> will be displayed in the console.</p>\n<p>At first, this seems counterintuitive since the value of <code>n</code> <em>decreases</em>, but the values in the final array are <em>increasing</em>. This happens because the push happens last, after the recursive call has returned. At the point where <code>n</code> is pushed into the array, <code>countup(n - 1)</code> has already been evaluated and returned <code>[1, 2, ..., n - 1]</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>We have defined a function called <code>countdown</code> with one parameter (<code>n</code>). The function should use recursion to return an array containing the integers <code>n</code> through <code>1</code> based on the <code>n</code> parameter. If the function is called with a number less than 1, the function should return an empty array. For example, calling this function with <code>n = 5</code> should return the array <code>[5, 4, 3, 2, 1]</code>. Your function must use recursion by calling itself and must not use loops of any kind.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":111,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5cc0bd7a49b71cb96132e54c","title":"Use Recursion to Create a Range of Numbers","challengeType":1,"forumTopicId":301180,"dashedName":"use-recursion-to-create-a-range-of-numbers","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function rangeOfNumbers(startNum, endNum) {\n  return [];\n};","error":null,"seed":"function rangeOfNumbers(startNum, endNum) {\n  return [];\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function rangeOfNumbers(startNum, endNum) {\n  if (endNum - startNum === 0) {\n    return [startNum];\n  } else {\n    const numbers = rangeOfNumbers(startNum, endNum - 1);\n    numbers.push(endNum);\n    return numbers;\n  }\n}","error":null,"seed":"function rangeOfNumbers(startNum, endNum) {\n  if (endNum - startNum === 0) {\n    return [startNum];\n  } else {\n    const numbers = rangeOfNumbers(startNum, endNum - 1);\n    numbers.push(endNum);\n    return numbers;\n  }\n}"}]],"tests":[{"text":"<p>Your function should return an array.</p>","testString":"assert(Array.isArray(rangeOfNumbers(5, 10)));"},{"text":"<p>Your code should not use any loop syntax (<code>for</code> or <code>while</code> or higher order functions such as <code>forEach</code>, <code>map</code>, <code>filter</code>, or <code>reduce</code>).</p>","testString":"assert(\n  !code.match(/for|while|forEach|map|filter|reduce/g)\n);"},{"text":"<p><code>rangeOfNumbers</code> should use recursion (call itself) to solve this challenge.</p>","testString":"assert(\n  rangeOfNumbers.toString().match(/rangeOfNumbers\\s*\\(.+\\)/)\n);"},{"text":"<p><code>rangeOfNumbers(1, 5)</code> should return <code>[1, 2, 3, 4, 5]</code>.</p>","testString":"assert.deepStrictEqual(rangeOfNumbers(1, 5), [1, 2, 3, 4, 5]);"},{"text":"<p><code>rangeOfNumbers(6, 9)</code> should return <code>[6, 7, 8, 9]</code>.</p>","testString":"assert.deepStrictEqual(rangeOfNumbers(6, 9), [6, 7, 8, 9]);"},{"text":"<p><code>rangeOfNumbers(4, 4)</code> should return <code>[4]</code>.</p>","testString":"assert.deepStrictEqual(rangeOfNumbers(4, 4), [4]);"},{"text":"<p>Global variables should not be used to cache the array.</p>","testString":"rangeOfNumbers(1, 3)\nassert.deepStrictEqual(rangeOfNumbers(6, 9), [6, 7, 8, 9]);"}],"description":"<section id=\"description\">\n<p>Continuing from the previous challenge, we provide you another opportunity to create a recursive function to solve a problem.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>We have defined a function named <code>rangeOfNumbers</code> with two parameters. The function should return an array of integers which begins with a number represented by the <code>startNum</code> parameter and ends with a number represented by the <code>endNum</code> parameter. The starting number will always be less than or equal to the ending number. Your function must use recursion by calling itself and not use loops of any kind. It should also work for cases where both <code>startNum</code> and <code>endNum</code> are the same.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":112,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b7e367417b2b2512b24","title":"Use the Conditional (Ternary) Operator","challengeType":1,"forumTopicId":301181,"dashedName":"use-the-conditional-ternary-operator","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function checkEqual(a, b) {\n\n}\n\ncheckEqual(1, 2);","error":null,"seed":"function checkEqual(a, b) {\n\n}\n\ncheckEqual(1, 2);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function checkEqual(a, b) {\n  return a === b ? \"Equal\" : \"Not Equal\";\n}","error":null,"seed":"function checkEqual(a, b) {\n  return a === b ? \"Equal\" : \"Not Equal\";\n}"}]],"tests":[{"text":"<p><code>checkEqual</code> should use the conditional operator</p>","testString":"assert(/.+?\\s*?\\?\\s*?.+?\\s*?:\\s*?.+?/.test(code));"},{"text":"<p><code>checkEqual(1, 2)</code> should return the string <code>Not Equal</code></p>","testString":"assert(checkEqual(1, 2) === 'Not Equal');"},{"text":"<p><code>checkEqual(1, 1)</code> should return the string <code>Equal</code></p>","testString":"assert(checkEqual(1, 1) === 'Equal');"},{"text":"<p><code>checkEqual(1, -1)</code> should return the string <code>Not Equal</code></p>","testString":"assert(checkEqual(1, -1) === 'Not Equal');"}],"description":"<section id=\"description\">\n<p>The <dfn>conditional operator</dfn>, also called the <dfn>ternary operator</dfn>, can be used as a one line if-else expression.</p>\n<p>The syntax is <code>a ? b : c</code>, where <code>a</code> is the condition, <code>b</code> is the code to run when the condition returns <code>true</code>, and <code>c</code> is the code to run when the condition returns <code>false</code>.</p>\n<p>The following function uses an <code>if/else</code> statement to check a condition:</p>\n<pre><code class=\"language-js\">function findGreater(a, b) {\n  if(a > b) {\n    return \"a is greater\";\n  }\n  else {\n    return \"b is greater or equal\";\n  }\n}\n</code></pre>\n<p>This can be re-written using the conditional operator:</p>\n<pre><code class=\"language-js\">function findGreater(a, b) {\n  return a > b ? \"a is greater\" : \"b is greater or equal\";\n}\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the conditional operator in the <code>checkEqual</code> function to check if two numbers are equal or not. The function should return either the string <code>Equal</code> or the string <code>Not Equal</code>.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":109,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b7e367417b2b2512b22","title":"Use the parseInt Function with a Radix","challengeType":1,"videoUrl":"https://scrimba.com/c/c6K4Kh3","forumTopicId":301182,"dashedName":"use-the-parseint-function-with-a-radix","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function convertToInteger(str) {\n\n}\n\nconvertToInteger(\"10011\");","error":null,"seed":"function convertToInteger(str) {\n\n}\n\nconvertToInteger(\"10011\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function convertToInteger(str) {\n  return parseInt(str, 2);\n}","error":null,"seed":"function convertToInteger(str) {\n  return parseInt(str, 2);\n}"}]],"tests":[{"text":"<p><code>convertToInteger</code> should use the <code>parseInt()</code> function</p>","testString":"assert(/parseInt/g.test(code));"},{"text":"<p><code>convertToInteger(\"10011\")</code> should return a number</p>","testString":"assert(typeof convertToInteger('10011') === 'number');"},{"text":"<p><code>convertToInteger(\"10011\")</code> should return 19</p>","testString":"assert(convertToInteger('10011') === 19);"},{"text":"<p><code>convertToInteger(\"111001\")</code> should return 57</p>","testString":"assert(convertToInteger('111001') === 57);"},{"text":"<p><code>convertToInteger(\"JamesBond\")</code> should return <code>NaN</code></p>","testString":"assert.isNaN(convertToInteger('JamesBond'));"}],"description":"<section id=\"description\">\n<p>The <code>parseInt()</code> function parses a string and returns an integer. It takes a second argument for the radix, which specifies the base of the number in the string. The radix can be an integer between 2 and 36.</p>\n<p>The function call looks like:</p>\n<pre><code class=\"language-js\">parseInt(string, radix);\n</code></pre>\n<p>And here's an example:</p>\n<pre><code class=\"language-js\">const a = parseInt(\"11\", 2);\n</code></pre>\n<p>The radix variable says that <code>11</code> is in the binary system, or base 2. This example converts the string <code>11</code> to an integer <code>3</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use <code>parseInt()</code> in the <code>convertToInteger</code> function so it converts a binary number to an integer and returns it.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":108,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b7e367417b2b2512b23","title":"Use the parseInt Function","challengeType":1,"videoUrl":"https://scrimba.com/c/cm83LSW","forumTopicId":301183,"dashedName":"use-the-parseint-function","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function convertToInteger(str) {\n\n}\n\nconvertToInteger(\"56\");","error":null,"seed":"function convertToInteger(str) {\n\n}\n\nconvertToInteger(\"56\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function convertToInteger(str) {\n  return parseInt(str);\n}","error":null,"seed":"function convertToInteger(str) {\n  return parseInt(str);\n}"}]],"tests":[{"text":"<p><code>convertToInteger</code> should use the <code>parseInt()</code> function</p>","testString":"assert(/parseInt/g.test(code));"},{"text":"<p><code>convertToInteger(\"56\")</code> should return a number</p>","testString":"assert(typeof convertToInteger('56') === 'number');"},{"text":"<p><code>convertToInteger(\"56\")</code> should return 56</p>","testString":"assert(convertToInteger('56') === 56);"},{"text":"<p><code>convertToInteger(\"77\")</code> should return 77</p>","testString":"assert(convertToInteger('77') === 77);"},{"text":"<p><code>convertToInteger(\"JamesBond\")</code> should return <code>NaN</code></p>","testString":"assert.isNaN(convertToInteger('JamesBond'));"}],"description":"<section id=\"description\">\n<p>The <code>parseInt()</code> function parses a string and returns an integer. Here's an example:</p>\n<pre><code class=\"language-js\">const a = parseInt(\"007\");\n</code></pre>\n<p>The above function converts the string <code>007</code> to the integer <code>7</code>. If the first character in the string can't be converted into a number, then it returns <code>NaN</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use <code>parseInt()</code> in the <code>convertToInteger</code> function so it converts the input string <code>str</code> into an integer, and returns it.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":107,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244ca","title":"Using Objects for Lookups","challengeType":1,"videoUrl":"https://scrimba.com/c/cdBk8sM","forumTopicId":18373,"dashedName":"using-objects-for-lookups","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Setup\nfunction phoneticLookup(val) {\n  let result = \"\";\n\n  // Only change code below this line\n  switch(val) {\n    case \"alpha\":\n      result = \"Adams\";\n      break;\n    case \"bravo\":\n      result = \"Boston\";\n      break;\n    case \"charlie\":\n      result = \"Chicago\";\n      break;\n    case \"delta\":\n      result = \"Denver\";\n      break;\n    case \"echo\":\n      result = \"Easy\";\n      break;\n    case \"foxtrot\":\n      result = \"Frank\";\n  }\n\n  // Only change code above this line\n  return result;\n}\n\nphoneticLookup(\"charlie\");","error":null,"seed":"// Setup\nfunction phoneticLookup(val) {\n  let result = \"\";\n\n  // Only change code below this line\n  switch(val) {\n    case \"alpha\":\n      result = \"Adams\";\n      break;\n    case \"bravo\":\n      result = \"Boston\";\n      break;\n    case \"charlie\":\n      result = \"Chicago\";\n      break;\n    case \"delta\":\n      result = \"Denver\";\n      break;\n    case \"echo\":\n      result = \"Easy\";\n      break;\n    case \"foxtrot\":\n      result = \"Frank\";\n  }\n\n  // Only change code above this line\n  return result;\n}\n\nphoneticLookup(\"charlie\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function phoneticLookup(val) {\n  let result = \"\";\n\n  const lookup = {\n    alpha: \"Adams\",\n    bravo: \"Boston\",\n    charlie: \"Chicago\",\n    delta: \"Denver\",\n    echo: \"Easy\",\n    foxtrot: \"Frank\"\n  };\n\n  result = lookup[val];\n\n  return result;\n}","error":null,"seed":"function phoneticLookup(val) {\n  let result = \"\";\n\n  const lookup = {\n    alpha: \"Adams\",\n    bravo: \"Boston\",\n    charlie: \"Chicago\",\n    delta: \"Denver\",\n    echo: \"Easy\",\n    foxtrot: \"Frank\"\n  };\n\n  result = lookup[val];\n\n  return result;\n}"}]],"tests":[{"text":"<p><code>phoneticLookup(\"alpha\")</code> should equal the string <code>Adams</code></p>","testString":"assert(phoneticLookup('alpha') === 'Adams');"},{"text":"<p><code>phoneticLookup(\"bravo\")</code> should equal the string <code>Boston</code></p>","testString":"assert(phoneticLookup('bravo') === 'Boston');"},{"text":"<p><code>phoneticLookup(\"charlie\")</code> should equal the string <code>Chicago</code></p>","testString":"assert(phoneticLookup('charlie') === 'Chicago');"},{"text":"<p><code>phoneticLookup(\"delta\")</code> should equal the string <code>Denver</code></p>","testString":"assert(phoneticLookup('delta') === 'Denver');"},{"text":"<p><code>phoneticLookup(\"echo\")</code> should equal the string <code>Easy</code></p>","testString":"assert(phoneticLookup('echo') === 'Easy');"},{"text":"<p><code>phoneticLookup(\"foxtrot\")</code> should equal the string <code>Frank</code></p>","testString":"assert(phoneticLookup('foxtrot') === 'Frank');"},{"text":"<p><code>phoneticLookup(\"\")</code> should equal <code>undefined</code></p>","testString":"assert(typeof phoneticLookup('') === 'undefined');"},{"text":"<p>You should not modify the <code>return</code> statement</p>","testString":"assert(code.match(/return\\sresult;/));"},{"text":"<p>You should not use <code>case</code>, <code>switch</code>, or <code>if</code> statements</p>","testString":"assert(\n  !/case|switch|if/g.test(code.replace(/([/]{2}.*)|([/][*][^/*]*[*][/])/g, ''))\n);"}],"description":"<section id=\"description\">\n<p>Objects can be thought of as a key/value storage, like a dictionary. If you have tabular data, you can use an object to lookup values rather than a <code>switch</code> statement or an <code>if/else</code> chain. This is most useful when you know that your input data is limited to a certain range.</p>\n<p>Here is an example of an article object:</p>\n<pre><code class=\"language-js\">const article = {\n  \"title\": \"How to create objects in JavaScript\",\n  \"link\": \"https://www.freecodecamp.org/news/a-complete-guide-to-creating-objects-in-javascript-b0e2450655e8/\",\n  \"author\": \"Kaashan Hussain\",\n  \"language\": \"JavaScript\",\n  \"tags\": \"TECHNOLOGY\",\n  \"createdAt\": \"NOVEMBER 28, 2018\"\n};\n\nconst articleAuthor = article[\"author\"];\nconst articleLink = article[\"link\"];\n\nconst value = \"title\";\nconst valueLookup = article[value];\n</code></pre>\n<p><code>articleAuthor</code> is the string <code>Kaashan Hussain</code>, <code>articleLink</code> is the string <code>https://www.freecodecamp.org/news/a-complete-guide-to-creating-objects-in-javascript-b0e2450655e8/</code>, and <code>valueLookup</code> is the string <code>How to create objects in JavaScript</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Convert the switch statement into an object called <code>lookup</code>. Use it to look up <code>val</code> and assign the associated string to the <code>result</code> variable.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":89,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56533eb9ac21ba0edf2244bb","title":"Word Blanks","challengeType":1,"videoUrl":"https://scrimba.com/c/caqn8zuP","forumTopicId":18377,"dashedName":"word-blanks","challengeFiles":[{"head":"","tail":"const removeAssignments = str => str\n  .replace(/myNoun\\s*=\\s*[\"']dog[\"']/g, '')\n  .replace(/myAdjective\\s*=\\s*[\"']big[\"']/g, '')\n  .replace(/myVerb\\s*=\\s*[\"']ran[\"']/g, '')\n  .replace(/myAdverb\\s*=\\s*[\"']quickly[\"']/g, '');","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myNoun = \"dog\";\nconst myAdjective = \"big\";\nconst myVerb = \"ran\";\nconst myAdverb = \"quickly\";\n\n// Only change code below this line\nconst wordBlanks = \"\"; // Change this line\n// Only change code above this line","error":null,"seed":"const myNoun = \"dog\";\nconst myAdjective = \"big\";\nconst myVerb = \"ran\";\nconst myAdverb = \"quickly\";\n\n// Only change code below this line\nconst wordBlanks = \"\"; // Change this line\n// Only change code above this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myNoun = \"dog\";\nconst myAdjective = \"big\";\nconst myVerb = \"ran\";\nconst myAdverb = \"quickly\";\n\nlet wordBlanks = \"Once there was a \" + myNoun + \" which was very \" + myAdjective + \". \";\nwordBlanks += \"It \" + myVerb + \" \" + myAdverb + \" around the yard.\";","error":null,"seed":"const myNoun = \"dog\";\nconst myAdjective = \"big\";\nconst myVerb = \"ran\";\nconst myAdverb = \"quickly\";\n\nlet wordBlanks = \"Once there was a \" + myNoun + \" which was very \" + myAdjective + \". \";\nwordBlanks += \"It \" + myVerb + \" \" + myAdverb + \" around the yard.\";"}]],"tests":[{"text":"<p><code>wordBlanks</code> should be a string.</p>","testString":"assert(typeof wordBlanks === 'string');"},{"text":"<p>You should not change the values assigned to <code>myNoun</code>, <code>myVerb</code>, <code>myAdjective</code> or <code>myAdverb</code>.</p>","testString":"assert(\n  myNoun === 'dog' &&\n    myVerb === 'ran' &&\n    myAdjective === 'big' &&\n    myAdverb === 'quickly'\n);"},{"text":"<p>You should not directly use the values <code>dog</code>, <code>ran</code>, <code>big</code>, or <code>quickly</code> to create <code>wordBlanks</code>.</p>","testString":"const newCode = removeAssignments(code);\nassert(\n  !/dog/.test(newCode) &&\n    !/ran/.test(newCode) &&\n    !/big/.test(newCode) &&\n    !/quickly/.test(newCode)\n);"},{"text":"<p><code>wordBlanks</code> should contain all of the words assigned to the variables <code>myNoun</code>, <code>myVerb</code>, <code>myAdjective</code> and <code>myAdverb</code> separated by non-word characters (and any additional words of your choice).</p>","testString":"assert(\n  /\\bdog\\b/.test(wordBlanks) &&\n    /\\bbig\\b/.test(wordBlanks) &&\n    /\\bran\\b/.test(wordBlanks) &&\n    /\\bquickly\\b/.test(wordBlanks)\n);"}],"description":"<section id=\"description\">\n<p>You are provided sentences with some missing words, like nouns, verbs, adjectives and adverbs. You then fill in the missing pieces with words of your choice in a way that the completed sentence makes sense.</p>\n<p>Consider this sentence - It was really <strong>____</strong>, and we <strong>____</strong> ourselves <strong>____</strong>. This sentence has three missing pieces- an adjective, a verb and an adverb, and we can add words of our choice to complete it. We can then assign the completed sentence to a variable as follows:</p>\n<pre><code class=\"language-js\">const sentence = \"It was really \" + \"hot\" + \", and we \" + \"laughed\" + \" ourselves \" + \"silly\" + \".\";\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>In this challenge, we provide you with a noun, a verb, an adjective and an adverb. You need to form a complete sentence using words of your choice, along with the words we provide.</p>\n<p>You will need to use the string concatenation operator <code>+</code> to build a new string, using the provided variables: <code>myNoun</code>, <code>myAdjective</code>, <code>myVerb</code>, and <code>myAdverb</code>. You will then assign the formed string to the <code>wordBlanks</code> variable. You should not change the words assigned to the variables.</p>\n<p>You will also need to account for spaces in your string, so that the final sentence has spaces between all the words. The result should be a complete sentence.</p>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":37,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"56bbb991ad1ed5201cd392cf","title":"Write Reusable JavaScript with Functions","challengeType":1,"videoUrl":"https://scrimba.com/c/cL6dqfy","forumTopicId":18378,"dashedName":"write-reusable-javascript-with-functions","challengeFiles":[{"head":"","tail":"\nfunction testConsole() {\n  var logOutput = \"\";\n  var originalConsole = console;\n  var nativeLog = console.log;\n  var hiWorldWasLogged = false;\n  console.log = function (message) {\n    if(message === 'Hi World')  {\n      console.warn(message)\n      hiWorldWasLogged = true;\n    }\n    if(message && message.trim) logOutput = message.trim();\n    if(nativeLog.apply) {\n      nativeLog.apply(originalConsole, arguments);\n    } else {\n      var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n      nativeLog(nativeMsg);\n    }\n  };\n  reusableFunction();\n  console.log = nativeLog;\n  return hiWorldWasLogged;\n}\n","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"","error":null,"seed":""}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function reusableFunction() {\n  console.log(\"Hi World\");\n}\nreusableFunction();","error":null,"seed":"function reusableFunction() {\n  console.log(\"Hi World\");\n}\nreusableFunction();"}]],"tests":[{"text":"<p><code>reusableFunction</code> should be a function.</p>","testString":"assert(typeof reusableFunction === 'function');"},{"text":"<p>If <code>reusableFunction</code> is called, it should output the string <code>Hi World</code> to the console.</p>","testString":"assert(testConsole());"},{"text":"<p>You should call <code>reusableFunction</code> once it is defined.</p>","testString":"const functionStr = reusableFunction && __helpers.removeWhiteSpace(reusableFunction.toString());\nconst codeWithoutFunction = __helpers.removeWhiteSpace(code).replace(/reusableFunction\\(\\)\\{/g, '');\nassert(/reusableFunction\\(\\)/.test(codeWithoutFunction));"}],"description":"<section id=\"description\">\n<p>In JavaScript, we can divide up our code into reusable parts called <dfn>functions</dfn>.</p>\n<p>Here's an example of a function:</p>\n<pre><code class=\"language-js\">function functionName() {\n  console.log(\"Hello World\");\n}\n</code></pre>\n<p>You can call or <dfn>invoke</dfn> this function by using its name followed by parentheses, like this: <code>functionName();</code> Each time the function is called it will print out the message <code>Hello World</code> on the dev console. All of the code between the curly braces will be executed every time the function is called.</p>\n</section>","instructions":"<section id=\"instructions\">\n<ol>\n  <li>\n    Create a function called <code>reusableFunction</code> which prints the string <code>Hi World</code> to the dev console.\n  </li>\n  <li>\n    Call the function.\n  </li>\n</ol>\n</section>","block":"basic-javascript","hasEditableBoundaries":false,"order":0,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":48,"required":[],"template":"","time":"10 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false}]},"debugging":{"meta":{"name":"Debugging","isUpcomingChange":false,"dashedName":"debugging","order":3,"time":"1 hour","template":"","required":[],"superBlock":"javascript-algorithms-and-data-structures","challengeOrder":[["587d7b83367417b2b2512b33","Use the JavaScript Console to Check the Value of a Variable"],["587d7b83367417b2b2512b37","Understanding the Differences between the freeCodeCamp and Browser Console"],["587d7b84367417b2b2512b34","Use typeof to Check the Type of a Variable"],["587d7b84367417b2b2512b35","Catch Misspelled Variable and Function Names"],["587d7b84367417b2b2512b36","Catch Unclosed Parentheses, Brackets, Braces and Quotes"],["587d7b84367417b2b2512b37","Catch Mixed Usage of Single and Double Quotes"],["587d7b85367417b2b2512b38","Catch Use of Assignment Operator Instead of Equality Operator"],["587d7b85367417b2b2512b39","Catch Missing Open and Closing Parenthesis After a Function Call"],["587d7b85367417b2b2512b3a","Catch Arguments Passed in the Wrong Order When Calling a Function"],["587d7b86367417b2b2512b3b","Catch Off By One Errors When Using Indexing"],["587d7b86367417b2b2512b3c","Use Caution When Reinitializing Variables Inside a Loop"],["587d7b86367417b2b2512b3d","Prevent Infinite Loops with a Valid Terminal Condition"]]},"challenges":[{"id":"587d7b85367417b2b2512b3a","title":"Catch Arguments Passed in the Wrong Order When Calling a Function","challengeType":1,"forumTopicId":301184,"dashedName":"catch-arguments-passed-in-the-wrong-order-when-calling-a-function","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function raiseToPower(b, e) {\n  return Math.pow(b, e);\n}\n\nlet base = 2;\nlet exp = 3;\nlet power = raiseToPower(exp, base);\nconsole.log(power);","error":null,"seed":"function raiseToPower(b, e) {\n  return Math.pow(b, e);\n}\n\nlet base = 2;\nlet exp = 3;\nlet power = raiseToPower(exp, base);\nconsole.log(power);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function raiseToPower(b, e) {\n return Math.pow(b, e);\n}\n\nlet base = 2;\nlet exp = 3;\nlet power = raiseToPower(base, exp);\nconsole.log(power);","error":null,"seed":"function raiseToPower(b, e) {\n return Math.pow(b, e);\n}\n\nlet base = 2;\nlet exp = 3;\nlet power = raiseToPower(base, exp);\nconsole.log(power);"}]],"tests":[{"text":"<p>Your code should fix the variable <code>power</code> so it equals 2 raised to the 3rd power, not 3 raised to the 2nd power.</p>","testString":"assert(power == 8);"},{"text":"<p>Your code should use the correct order of the arguments for the <code>raiseToPower</code> function call.</p>","testString":"assert(code.match(/raiseToPower\\(\\s*?base\\s*?,\\s*?exp\\s*?\\);/g));"}],"description":"<section id=\"description\">\n<p>Continuing the discussion on calling functions, the next bug to watch out for is when a function's arguments are supplied in the incorrect order. If the arguments are different types, such as a function expecting an array and an integer, this will likely throw a runtime error. If the arguments are the same type (all integers, for example), then the logic of the code won't make sense. Make sure to supply all required arguments, in the proper order to avoid these issues.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The function <code>raiseToPower</code> raises a base to an exponent. Unfortunately, it's not called properly - fix the code so the value of <code>power</code> is the expected 8.</p>\n</section>","block":"debugging","hasEditableBoundaries":false,"order":3,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":8,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b85367417b2b2512b39","title":"Catch Missing Open and Closing Parenthesis After a Function Call","challengeType":1,"forumTopicId":301185,"dashedName":"catch-missing-open-and-closing-parenthesis-after-a-function-call","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function getNine() {\n  let x = 6;\n  let y = 3;\n  return x + y;\n}\n\nlet result = getNine;\nconsole.log(result);","error":null,"seed":"function getNine() {\n  let x = 6;\n  let y = 3;\n  return x + y;\n}\n\nlet result = getNine;\nconsole.log(result);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function getNine() {\n let x = 6;\n let y = 3;\n return x + y;\n}\n\nlet result = getNine();\nconsole.log(result);","error":null,"seed":"function getNine() {\n let x = 6;\n let y = 3;\n return x + y;\n}\n\nlet result = getNine();\nconsole.log(result);"}]],"tests":[{"text":"<p>Your code should fix the variable <code>result</code> so it is set to the number that the function <code>getNine</code> returns.</p>","testString":"assert(result == 9);"},{"text":"<p>Your code should call the <code>getNine</code> function.</p>","testString":"assert(code.match(/getNine\\(\\)/g).length == 2);"}],"description":"<section id=\"description\">\n<p>When a function or method doesn't take any arguments, you may forget to include the (empty) opening and closing parentheses when calling it. Often times the result of a function call is saved in a variable for other use in your code. This error can be detected by logging variable values (or their types) to the console and seeing that one is set to a function reference, instead of the expected value the function returns.</p>\n<p>The variables in the following example are different:</p>\n<pre><code class=\"language-js\">function myFunction() {\n  return \"You rock!\";\n}\nlet varOne = myFunction;\nlet varTwo = myFunction();\n</code></pre>\n<p>Here <code>varOne</code> is the function <code>myFunction</code>, and <code>varTwo</code> is the string <code>You rock!</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Fix the code so the variable <code>result</code> is set to the value returned from calling the function <code>getNine</code>.</p>\n</section>","block":"debugging","hasEditableBoundaries":false,"order":3,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":7,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b84367417b2b2512b35","title":"Catch Misspelled Variable and Function Names","challengeType":1,"forumTopicId":301186,"dashedName":"catch-misspelled-variable-and-function-names","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let receivables = 10;\nlet payables = 8;\nlet netWorkingCapital = recievables - payable;\nconsole.log(`Net working capital is: ${netWorkingCapital}`);","error":null,"seed":"let receivables = 10;\nlet payables = 8;\nlet netWorkingCapital = recievables - payable;\nconsole.log(`Net working capital is: ${netWorkingCapital}`);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let receivables = 10;\nlet payables = 8;\nlet netWorkingCapital = receivables - payables;\nconsole.log(`Net working capital is: ${netWorkingCapital}`);","error":null,"seed":"let receivables = 10;\nlet payables = 8;\nlet netWorkingCapital = receivables - payables;\nconsole.log(`Net working capital is: ${netWorkingCapital}`);"}]],"tests":[{"text":"<p>Check the spelling of the two variables used in the netWorkingCapital calculation, the console output should show that \"Net working capital is: 2\".</p>","testString":"assert(netWorkingCapital === 2);"},{"text":"<p>There should be no instances of misspelled variables in the code.</p>","testString":"assert(!code.match(/recievables/g));"},{"text":"<p>The <code>receivables</code> variable should be declared and used properly in the code.</p>","testString":"assert(code.match(/receivables/g).length == 2);"},{"text":"<p>There should be no instances of misspelled variables in the code.</p>","testString":"assert(!code.match(/payable;/g));"},{"text":"<p>The <code>payables</code> variable should be declared and used properly in the code.</p>","testString":"assert(code.match(/payables/g).length == 2);"}],"description":"<section id=\"description\">\n<p>The <code>console.log()</code> and <code>typeof</code> methods are the two primary ways to check intermediate values and types of program output. Now it's time to get into the common forms that bugs take. One syntax-level issue that fast typers can commiserate with is the humble spelling error.</p>\n<p>Transposed, missing, or mis-capitalized characters in a variable or function name will have the browser looking for an object that doesn't exist - and complain in the form of a reference error. JavaScript variable and function names are case-sensitive.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Fix the two spelling errors in the code so the <code>netWorkingCapital</code> calculation works.</p>\n</section>","block":"debugging","hasEditableBoundaries":false,"order":3,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":3,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b84367417b2b2512b37","title":"Catch Mixed Usage of Single and Double Quotes","challengeType":1,"forumTopicId":301188,"dashedName":"catch-mixed-usage-of-single-and-double-quotes","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let innerHtml = \"<p>Click here to <a href=\"#Home\">return home</a></p>\";\nconsole.log(innerHtml);","error":null,"seed":"let innerHtml = \"<p>Click here to <a href=\"#Home\">return home</a></p>\";\nconsole.log(innerHtml);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let innerHtml = \"<p>Click here to <a href=\\\"#Home\\\">return home</a></p>\";\nconsole.log(innerHtml);","error":null,"seed":"let innerHtml = \"<p>Click here to <a href=\\\"#Home\\\">return home</a></p>\";\nconsole.log(innerHtml);"}]],"tests":[{"text":"<p>Your code should fix the quotes around the <code>href</code> value <code>#Home</code> by either changing or escaping them.</p>","testString":"assert(code.match(/<a href=\\s*?('|\\\\\")#Home\\1\\s*?>/g));"},{"text":"<p>Your code should keep the double quotes around the entire string.</p>","testString":"assert(code.match(/\"<p>.*?<\\/p>\";/g));"}],"description":"<section id=\"description\">\n<p>JavaScript allows the use of both single (<code>'</code>) and double (<code>\"</code>) quotes to declare a string. Deciding which one to use generally comes down to personal preference, with some exceptions.</p>\n<p>Having two choices is great when a string has contractions or another piece of text that's in quotes. Just be careful that you don't close the string too early, which causes a syntax error.</p>\n<p>Here are some examples of mixing quotes:</p>\n<pre><code class=\"language-js\">const grouchoContraction = \"I've had a perfectly wonderful evening, but this wasn't it.\";\nconst quoteInString = \"Groucho Marx once said 'Quote me as saying I was mis-quoted.'\";\nconst uhOhGroucho = 'I've had a perfectly wonderful evening, but this wasn't it.';\n</code></pre>\n<p>The first two are correct, but the third is incorrect.</p>\n<p>Of course, it is okay to use only one style of quotes. You can escape the quotes inside the string by using the backslash (<code>\\</code>) escape character:</p>\n<pre><code class=\"language-js\">const allSameQuotes = 'I\\'ve had a perfectly wonderful evening, but this wasn\\'t it.';\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Fix the string so it either uses different quotes for the <code>href</code> value, or escape the existing ones. Keep the double quote marks around the entire string.</p>\n</section>","block":"debugging","hasEditableBoundaries":false,"order":3,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":5,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b86367417b2b2512b3b","title":"Catch Off By One Errors When Using Indexing","challengeType":1,"forumTopicId":301189,"dashedName":"catch-off-by-one-errors-when-using-indexing","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function countToFive() {\n  let firstFive = \"12345\";\n  let len = firstFive.length;\n  // Only change code below this line\n  for (let i = 1; i <= len; i++) {\n  // Only change code above this line\n    console.log(firstFive[i]);\n  }\n}\n\ncountToFive();","error":null,"seed":"function countToFive() {\n  let firstFive = \"12345\";\n  let len = firstFive.length;\n  // Only change code below this line\n  for (let i = 1; i <= len; i++) {\n  // Only change code above this line\n    console.log(firstFive[i]);\n  }\n}\n\ncountToFive();"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function countToFive() {\n let firstFive = \"12345\";\n let len = firstFive.length;\n // Only change code below this line\n for (let i = 0; i < len; i++) {\n // Only change code above this line\n   console.log(firstFive[i]);\n }\n}\n\ncountToFive();","error":null,"seed":"function countToFive() {\n let firstFive = \"12345\";\n let len = firstFive.length;\n // Only change code below this line\n for (let i = 0; i < len; i++) {\n // Only change code above this line\n   console.log(firstFive[i]);\n }\n}\n\ncountToFive();"}]],"tests":[{"text":"<p>Your code should set the initial condition of the loop so it starts at the first index.</p>","testString":"assert(code.match(/i\\s*?=\\s*?0\\s*?;/g).length == 1);"},{"text":"<p>Your code should fix the initial condition of the loop so that the index starts at 0.</p>","testString":"assert(!code.match(/i\\s?=\\s*?1\\s*?;/g));"},{"text":"<p>Your code should set the terminal condition of the loop so it stops at the last index.</p>","testString":"assert(code.match(/i\\s*<\\s*len\\s*;|i\\s*<=\\s*len\\s*-\\s*1\\s*;/g).length == 1);"},{"text":"<p>Your code should fix the terminal condition of the loop so that it stops at 1 before the length.</p>","testString":"assert(!code.match(/i\\s*?<=\\s*?len;/g));"}],"description":"<section id=\"description\">\n<p><dfn>Off by one errors</dfn> (sometimes called OBOE) crop up when you're trying to target a specific index of a string or array (to slice or access a segment), or when looping over the indices of them. JavaScript indexing starts at zero, not one, which means the last index is always one less than the length of the item. If you try to access an index equal to the length, the program may throw an \"index out of range\" reference error or print <code>undefined</code>.</p>\n<p>When you use string or array methods that take index ranges as arguments, it helps to read the documentation and understand if they are inclusive (the item at the given index is part of what's returned) or not. Here are some examples of off by one errors:</p>\n<pre><code class=\"language-js\">let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\nlet len = alphabet.length;\nfor (let i = 0; i &#x3C;= len; i++) {\n  console.log(alphabet[i]);\n}\nfor (let j = 1; j &#x3C; len; j++) {\n  console.log(alphabet[j]);\n}\nfor (let k = 0; k &#x3C; len; k++) {\n  console.log(alphabet[k]);\n}\n</code></pre>\n<p>The first example here loops one too many times, and the second loops one too few times (missing the first index, 0). The third example is correct.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Fix the two indexing errors in the following function so all the numbers 1 through 5 are printed to the console.</p>\n</section>","block":"debugging","hasEditableBoundaries":false,"order":3,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":9,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b84367417b2b2512b36","title":"Catch Unclosed Parentheses, Brackets, Braces and Quotes","challengeType":1,"forumTopicId":301190,"dashedName":"catch-unclosed-parentheses-brackets-braces-and-quotes","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let myArray = [1, 2, 3;\nlet arraySum = myArray.reduce((previous, current =>  previous + current);\nconsole.log(`Sum of array values is: ${arraySum}`);","error":null,"seed":"let myArray = [1, 2, 3;\nlet arraySum = myArray.reduce((previous, current =>  previous + current);\nconsole.log(`Sum of array values is: ${arraySum}`);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let myArray = [1, 2, 3];\nlet arraySum = myArray.reduce((previous, current) =>  previous + current);\nconsole.log(`Sum of array values is: ${arraySum}`);","error":null,"seed":"let myArray = [1, 2, 3];\nlet arraySum = myArray.reduce((previous, current) =>  previous + current);\nconsole.log(`Sum of array values is: ${arraySum}`);"}]],"tests":[{"text":"<p>Your code should fix the missing piece of the array.</p>","testString":"assert(code.match(/myArray\\s*?=\\s*?\\[\\s*?1\\s*?,\\s*?2\\s*?,\\s*?3\\s*?\\];/g));"},{"text":"<p>Your code should fix the missing piece of the <code>.reduce()</code> method. The console output should show that <code>Sum of array values is: 6</code>.</p>","testString":"assert(arraySum === 6);"}],"description":"<section id=\"description\">\n<p>Another syntax error to be aware of is that all opening parentheses, brackets, curly braces, and quotes have a closing pair. Forgetting a piece tends to happen when you're editing existing code and inserting items with one of the pair types. Also, take care when nesting code blocks into others, such as adding a callback function as an argument to a method.</p>\n<p>One way to avoid this mistake is as soon as the opening character is typed, immediately include the closing match, then move the cursor back between them and continue coding. Fortunately, most modern code editors generate the second half of the pair automatically.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Fix the two pair errors in the code.</p>\n</section>","block":"debugging","hasEditableBoundaries":false,"order":3,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":4,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b85367417b2b2512b38","title":"Catch Use of Assignment Operator Instead of Equality Operator","challengeType":1,"forumTopicId":301191,"dashedName":"catch-use-of-assignment-operator-instead-of-equality-operator","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let x = 7;\nlet y = 9;\nlet result = \"to come\";\n\nif(x = y) {\n  result = \"Equal!\";\n} else {\n  result = \"Not equal!\";\n}\n\nconsole.log(result);","error":null,"seed":"let x = 7;\nlet y = 9;\nlet result = \"to come\";\n\nif(x = y) {\n  result = \"Equal!\";\n} else {\n  result = \"Not equal!\";\n}\n\nconsole.log(result);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let x = 7;\nlet y = 9;\nlet result = \"to come\";\n\nif(x === y) {\n result = \"Equal!\";\n} else {\n result = \"Not equal!\";\n}\n\nconsole.log(result);","error":null,"seed":"let x = 7;\nlet y = 9;\nlet result = \"to come\";\n\nif(x === y) {\n result = \"Equal!\";\n} else {\n result = \"Not equal!\";\n}\n\nconsole.log(result);"}]],"tests":[{"text":"<p>Your code should fix the condition so it checks for equality, instead of using assignment.</p>","testString":"assert(result == 'Not equal!');"},{"text":"<p>The condition should use either <code>==</code> or <code>===</code> to test for equality.</p>","testString":"assert(code.match(/x\\s*?===?\\s*?y/g));"}],"description":"<section id=\"description\">\n<p>Branching programs, i.e. ones that do different things if certain conditions are met, rely on <code>if</code>, <code>else if</code>, and <code>else</code> statements in JavaScript. The condition sometimes takes the form of testing whether a result is equal to a value.</p>\n<p>This logic is spoken (in English, at least) as \"if x equals y, then ...\" which can literally translate into code using the <code>=</code>, or assignment operator. This leads to unexpected control flow in your program.</p>\n<p>As covered in previous challenges, the assignment operator (<code>=</code>) in JavaScript assigns a value to a variable name. And the <code>==</code> and <code>===</code> operators check for equality (the triple <code>===</code> tests for strict equality, meaning both value and type are the same).</p>\n<p>The code below assigns <code>x</code> to be 2, which evaluates as <code>true</code>. Almost every value on its own in JavaScript evaluates to <code>true</code>, except what are known as the \"falsy\" values: <code>false</code>, <code>0</code>, <code>\"\"</code> (an empty string), <code>NaN</code>, <code>undefined</code>, and <code>null</code>.</p>\n<pre><code class=\"language-js\">let x = 1;\nlet y = 2;\nif (x = y) {\n\n} else {\n\n}\n</code></pre>\n<p>In this example, the code block within the <code>if</code> statement will run for any value of <code>y</code>, unless <code>y</code> is falsy. The <code>else</code> block, which we expect to run here, will not actually run.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Fix the condition so the program runs the right branch, and the appropriate value is assigned to <code>result</code>.</p>\n</section>","block":"debugging","hasEditableBoundaries":false,"order":3,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":6,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b86367417b2b2512b3d","title":"Prevent Infinite Loops with a Valid Terminal Condition","challengeType":1,"forumTopicId":301192,"dashedName":"prevent-infinite-loops-with-a-valid-terminal-condition","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function myFunc() {\n  for (let i = 1; i != 4; i += 2) {\n    console.log(\"Still going!\");\n  }\n}","error":null,"seed":"function myFunc() {\n  for (let i = 1; i != 4; i += 2) {\n    console.log(\"Still going!\");\n  }\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function myFunc() {\n for (let i = 1; i <= 4; i += 2) {\n   console.log(\"Still going!\");\n }\n}","error":null,"seed":"function myFunc() {\n for (let i = 1; i <= 4; i += 2) {\n   console.log(\"Still going!\");\n }\n}"}]],"tests":[{"text":"<p>Your code should change the comparison operator in the terminal condition (the middle part) of the <code>for</code> loop.</p>","testString":"assert(code.match(/i\\s*?<=\\s*?4;/g).length == 1);"},{"text":"<p>Your code should fix the comparison operator in the terminal condition of the loop.</p>","testString":"assert(!code.match(/i\\s*?!=\\s*?4;/g));"}],"description":"<section id=\"description\">\n<p>The final topic is the dreaded infinite loop. Loops are great tools when you need your program to run a code block a certain number of times or until a condition is met, but they need a terminal condition that ends the looping. Infinite loops are likely to freeze or crash the browser, and cause general program execution mayhem, which no one wants.</p>\n<p>There was an example of an infinite loop in the introduction to this section - it had no terminal condition to break out of the <code>while</code> loop inside <code>loopy()</code>. Do NOT call this function!</p>\n<pre><code class=\"language-js\">function loopy() {\n  while(true) {\n    console.log(\"Hello, world!\");\n  }\n}\n</code></pre>\n<p>It's the programmer's job to ensure that the terminal condition, which tells the program when to break out of the loop code, is eventually reached. One error is incrementing or decrementing a counter variable in the wrong direction from the terminal condition. Another one is accidentally resetting a counter or index variable within the loop code, instead of incrementing or decrementing it.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The <code>myFunc()</code> function contains an infinite loop because the terminal condition <code>i != 4</code> will never evaluate to <code>false</code> (and break the looping) - <code>i</code> will increment by 2 each pass, and jump right over 4 since <code>i</code> is odd to start. Fix the comparison operator in the terminal condition so the loop only runs for <code>i</code> less than or equal to 4.</p>\n</section>","block":"debugging","hasEditableBoundaries":false,"order":3,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":11,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b83367417b2b2512b37","title":"Understanding the Differences between the freeCodeCamp and Browser Console","challengeType":1,"forumTopicId":301193,"dashedName":"understanding-the-differences-between-the-freecodecamp-and-browser-console","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let output = \"Get this to show once in the freeCodeCamp console and not at all in the browser console\";\n","error":null,"seed":"let output = \"Get this to show once in the freeCodeCamp console and not at all in the browser console\";\n"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let output = \"Get this to show once in the freeCodeCamp console and not at all in the browser console\";\n\nconsole.log(output);\nconsole.clear();","error":null,"seed":"let output = \"Get this to show once in the freeCodeCamp console and not at all in the browser console\";\n\nconsole.log(output);\nconsole.clear();"}]],"tests":[{"text":"<p>You should use <code>console.log()</code> to print the <code>output</code> variable.</p>","testString":"assert(__helpers.removeWhiteSpace(code).match(/console\\.log\\(output\\)/));"},{"text":"<p>You should use <code>console.clear()</code> to clear the browser console.</p>","testString":"assert(\n  __helpers\n    .removeWhiteSpace(code)\n    .match(/console.clear\\(\\)/)\n);"},{"text":"<p>You should clear the console after your log.</p>","testString":"assert(\n  __helpers\n    .removeWhiteSpace(code)\n    .match(/console\\.log\\(output\\)[\\s\\S]*console.clear\\(\\)/)\n);"}],"description":"<section id=\"description\">\n<p>You may have noticed that some freeCodeCamp challenges include their own console. This console behaves a little differently than the browser console.</p>\n<p>There are many methods to use with <code>console</code> to output messages. <code>log</code>, <code>warn</code>, and <code>clear</code> to name a few. The freeCodeCamp console will only output <code>log</code> messages, while the browser console will output all messages. When you make changes to your code, it will automatically run and show the logs. The freeCodeCamp console is then cleared each time your code runs.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>First, open your browser console so you can see the logs. To do that, you can right-click the freeCodeCamp navigation bar at the top and click <code>inspect</code> on most browsers. Then find the <code>console</code> tab in the window that opens.</p>\n<p>After that, use <code>console.log</code> to log the <code>output</code> variable. View the two consoles to see the log. Finally, use <code>console.clear</code> after your log to clear the browser console. View the difference in the two consoles.</p>\n</section>","block":"debugging","hasEditableBoundaries":false,"order":3,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":1,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b86367417b2b2512b3c","title":"Use Caution When Reinitializing Variables Inside a Loop","challengeType":1,"forumTopicId":301194,"dashedName":"use-caution-when-reinitializing-variables-inside-a-loop","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function zeroArray(m, n) {\n  // Creates a 2-D array with m rows and n columns of zeroes\n  let newArray = [];\n  let row = [];\n  for (let i = 0; i < m; i++) {\n    // Adds the m-th row into newArray\n\n    for (let j = 0; j < n; j++) {\n      // Pushes n zeroes into the current row to create the columns\n      row.push(0);\n    }\n    // Pushes the current row, which now has n zeroes in it, to the array\n    newArray.push(row);\n  }\n  return newArray;\n}\n\nlet matrix = zeroArray(3, 2);\nconsole.log(matrix);\n","error":null,"seed":"function zeroArray(m, n) {\n  // Creates a 2-D array with m rows and n columns of zeroes\n  let newArray = [];\n  let row = [];\n  for (let i = 0; i < m; i++) {\n    // Adds the m-th row into newArray\n\n    for (let j = 0; j < n; j++) {\n      // Pushes n zeroes into the current row to create the columns\n      row.push(0);\n    }\n    // Pushes the current row, which now has n zeroes in it, to the array\n    newArray.push(row);\n  }\n  return newArray;\n}\n\nlet matrix = zeroArray(3, 2);\nconsole.log(matrix);\n"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function zeroArray(m, n) {\n // Creates a 2-D array with m rows and n columns of zeroes\n let newArray = [];\n for (let i = 0; i < m; i++) {\n   let row = [];\n   // Adds the m-th row into newArray\n\n   for (let j = 0; j < n; j++) {\n     // Pushes n zeroes into the current row to create the columns\n     row.push(0);\n   }\n   // Pushes the current row, which now has n zeroes in it, to the array\n   newArray.push(row);\n }\n return newArray;\n}\n\nlet matrix = zeroArray(3, 2);\nconsole.log(matrix);\n","error":null,"seed":"function zeroArray(m, n) {\n // Creates a 2-D array with m rows and n columns of zeroes\n let newArray = [];\n for (let i = 0; i < m; i++) {\n   let row = [];\n   // Adds the m-th row into newArray\n\n   for (let j = 0; j < n; j++) {\n     // Pushes n zeroes into the current row to create the columns\n     row.push(0);\n   }\n   // Pushes the current row, which now has n zeroes in it, to the array\n   newArray.push(row);\n }\n return newArray;\n}\n\nlet matrix = zeroArray(3, 2);\nconsole.log(matrix);\n"}]],"tests":[{"text":"<p>Your code should set the <code>matrix</code> variable to an array holding 3 rows of 2 columns of zeroes each.</p>","testString":"assert(JSON.stringify(matrix) == '[[0,0],[0,0],[0,0]]');"},{"text":"<p>The <code>matrix</code> variable should have 3 rows.</p>","testString":"assert(matrix.length == 3);"},{"text":"<p>The <code>matrix</code> variable should have 2 columns in each row.</p>","testString":"assert(\n  matrix[0].length == 2 && matrix[1].length === 2 && matrix[2].length === 2\n);"},{"text":"<p><code>zeroArray(4,3)</code> should return an array holding 4 rows of 3 columns of zeroes each.</p>","testString":"assert(JSON.stringify(zeroArray(4,3)) == '[[0,0,0],[0,0,0],[0,0,0],[0,0,0]]');"}],"description":"<section id=\"description\">\n<p>Sometimes it's necessary to save information, increment counters, or re-set variables within a loop. A potential issue is when variables either should be reinitialized, and aren't, or vice versa. This is particularly dangerous if you accidentally reset the variable being used for the terminal condition, causing an infinite loop.</p>\n<p>Printing variable values with each cycle of your loop by using <code>console.log()</code> can uncover buggy behavior related to resetting, or failing to reset a variable.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The following function is supposed to create a two-dimensional array with <code>m</code> rows and <code>n</code> columns of zeroes. Unfortunately, it's not producing the expected output because the <code>row</code> variable isn't being reinitialized (set back to an empty array) in the outer loop. Fix the code so it returns a correct 3x2 array of zeroes, which looks like <code>[[0, 0], [0, 0], [0, 0]]</code>.</p>\n</section>","block":"debugging","hasEditableBoundaries":false,"order":3,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":10,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b83367417b2b2512b33","title":"Use the JavaScript Console to Check the Value of a Variable","challengeType":1,"forumTopicId":18372,"dashedName":"use-the-javascript-console-to-check-the-value-of-a-variable","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let a = 5;\nlet b = 1;\na++;\n// Only change code below this line\n\n\nlet sumAB = a + b;\nconsole.log(sumAB);","error":null,"seed":"let a = 5;\nlet b = 1;\na++;\n// Only change code below this line\n\n\nlet sumAB = a + b;\nconsole.log(sumAB);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"var a = 5; console.log(a);","error":null,"seed":"var a = 5; console.log(a);"}]],"tests":[{"text":"<p>Your code should use <code>console.log()</code> to check the value of the variable <code>a</code>.</p>","testString":"assert(code.match(/console\\.log\\(a\\)/g));"}],"description":"<section id=\"description\">\n<p>Both Chrome and Firefox have excellent JavaScript consoles, also known as DevTools, for debugging your JavaScript.</p>\n<p>You can find Developer tools in your Chrome's menu or Web Console in Firefox's menu. If you're using a different browser, or a mobile phone, we strongly recommend switching to desktop Firefox or Chrome.</p>\n<p>The <code>console.log()</code> method, which \"prints\" the output of what's within its parentheses to the console, will likely be the most helpful debugging tool. Placing it at strategic points in your code can show you the intermediate values of variables. It's good practice to have an idea of what the output should be before looking at what it is. Having check points to see the status of your calculations throughout your code will help narrow down where the problem is.</p>\n<p>Here's an example to print the string <code>Hello world!</code> to the console:</p>\n<pre><code class=\"language-js\">console.log('Hello world!');\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the <code>console.log()</code> method to print the value of the variable <code>a</code> where noted in the code.</p>\n</section>","block":"debugging","hasEditableBoundaries":false,"order":3,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":0,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b84367417b2b2512b34","title":"Use typeof to Check the Type of a Variable","challengeType":1,"forumTopicId":18374,"dashedName":"use-typeof-to-check-the-type-of-a-variable","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let seven = 7;\nlet three = \"3\";\nconsole.log(seven + three);\n// Only change code below this line","error":null,"seed":"let seven = 7;\nlet three = \"3\";\nconsole.log(seven + three);\n// Only change code below this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let seven = 7;let three = \"3\";console.log(typeof seven);\nconsole.log(typeof three);","error":null,"seed":"let seven = 7;let three = \"3\";console.log(typeof seven);\nconsole.log(typeof three);"}]],"tests":[{"text":"<p>Your code should use <code>typeof</code> in two <code>console.log()</code> statements to check the type of the variables.</p>","testString":"assert(code.match(/console\\.log\\s*\\(typeof[\\( ].*\\)?\\)/g).length == 2);"},{"text":"<p>Your code should use <code>typeof</code> to check the type of the variable <code>seven</code>.</p>","testString":"assert(code.match(/typeof[\\( ]seven\\)?/g));"},{"text":"<p>Your code should use <code>typeof</code> to check the type of the variable <code>three</code>.</p>","testString":"assert(code.match(/typeof[\\( ]three\\)?/g));"}],"description":"<section id=\"description\">\n<p>You can use <code>typeof</code> to check the data structure, or type, of a variable. This is useful in debugging when working with multiple data types. If you think you're adding two numbers, but one is actually a string, the results can be unexpected. Type errors can lurk in calculations or function calls. Be careful especially when you're accessing and working with external data in the form of a JavaScript Object Notation (JSON) object.</p>\n<p>Here are some examples using <code>typeof</code>:</p>\n<pre><code class=\"language-js\">console.log(typeof \"\");\nconsole.log(typeof 0);\nconsole.log(typeof []);\nconsole.log(typeof {});\n</code></pre>\n<p>In order, the console will display the strings <code>string</code>, <code>number</code>, <code>object</code>, and <code>object</code>.</p>\n<p>JavaScript recognizes seven primitive (immutable) data types: <code>Boolean</code>, <code>Null</code>, <code>Undefined</code>, <code>Number</code>, <code>String</code>, <code>Symbol</code> (new with ES6), and <code>BigInt</code> (new with ES2020), and one type for mutable items: <code>Object</code>. Note that in JavaScript, arrays are technically a type of object.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add two <code>console.log()</code> statements to check the <code>typeof</code> each of the two variables <code>seven</code> and <code>three</code> in the code.</p>\n</section>","block":"debugging","hasEditableBoundaries":false,"order":3,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":2,"required":[],"template":"","time":"1 hour","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false}]},"es6":{"meta":{"name":"ES6","isUpcomingChange":false,"dashedName":"es6","order":1,"time":"5 hours","template":"","required":[],"superBlock":"javascript-algorithms-and-data-structures","challengeOrder":[["587d7b87367417b2b2512b40","Compare Scopes of the var and let Keywords"],["587d7b87367417b2b2512b42","Mutate an Array Declared with const"],["598f48a36c8c40764b4e52b3","Prevent Object Mutation"],["587d7b87367417b2b2512b43","Use Arrow Functions to Write Concise Anonymous Functions"],["587d7b88367417b2b2512b44","Write Arrow Functions with Parameters"],["587d7b88367417b2b2512b46","Set Default Parameters for Your Functions"],["587d7b88367417b2b2512b47","Use the Rest Parameter with Function Parameters"],["587d7b89367417b2b2512b48","Use the Spread Operator to Evaluate Arrays In-Place"],["5cfa550e84205a357704ccb6","Use Destructuring Assignment to Extract Values from Objects"],["587d7b89367417b2b2512b49","Use Destructuring Assignment to Assign Variables from Objects"],["587d7b89367417b2b2512b4a","Use Destructuring Assignment to Assign Variables from Nested Objects"],["587d7b89367417b2b2512b4b","Use Destructuring Assignment to Assign Variables from Arrays"],["587d7b8a367417b2b2512b4c","Use Destructuring Assignment with the Rest Parameter to Reassign Array Elements"],["587d7b8a367417b2b2512b4d","Use Destructuring Assignment to Pass an Object as a Function's Parameters"],["587d7b8a367417b2b2512b4e","Create Strings using Template Literals"],["587d7b8a367417b2b2512b4f","Write Concise Object Literal Declarations Using Object Property Shorthand"],["587d7b8b367417b2b2512b50","Write Concise Declarative Functions with ES6"],["587d7b8b367417b2b2512b53","Use class Syntax to Define a Constructor Function"],["587d7b8c367417b2b2512b54","Use getters and setters to Control Access to an Object"],["5cddbfd622f1a59093ec611d","Create a Module Script"],["587d7b8c367417b2b2512b56","Use export to Share a Code Block"],["587d7b8c367417b2b2512b55","Reuse JavaScript Code Using import"],["587d7b8c367417b2b2512b57","Use * to Import Everything from a File"],["587d7b8c367417b2b2512b58","Create an Export Fallback with export default"],["587d7b8d367417b2b2512b59","Import a Default Export"],["5cdafbb0291309899753167f","Create a JavaScript Promise"],["5cdafbc32913098997531680","Complete a Promise with resolve and reject"],["5cdafbd72913098997531681","Handle a Fulfilled Promise with then"],["5cdafbe72913098997531682","Handle a Rejected Promise with catch"]]},"challenges":[{"id":"587d7b87367417b2b2512b40","title":"Compare Scopes of the var and let Keywords","challengeType":1,"forumTopicId":301195,"dashedName":"compare-scopes-of-the-var-and-let-keywords","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function checkScope() {\n  var i = 'function scope';\n  if (true) {\n    i = 'block scope';\n    console.log('Block scope i is: ', i);\n  }\n  console.log('Function scope i is: ', i);\n  return i;\n}","error":null,"seed":"function checkScope() {\n  var i = 'function scope';\n  if (true) {\n    i = 'block scope';\n    console.log('Block scope i is: ', i);\n  }\n  console.log('Function scope i is: ', i);\n  return i;\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function checkScope() {\n  let i = 'function scope';\n  if (true) {\n    let i = 'block scope';\n    console.log('Block scope i is: ', i);\n  }\n \n  console.log('Function scope i is: ', i);\n  return i;\n}","error":null,"seed":"function checkScope() {\n  let i = 'function scope';\n  if (true) {\n    let i = 'block scope';\n    console.log('Block scope i is: ', i);\n  }\n \n  console.log('Function scope i is: ', i);\n  return i;\n}"}]],"tests":[{"text":"<p><code>var</code> should not exist in code.</p>","testString":"assert(!code.match(/var/g));"},{"text":"<p>The variable <code>i</code> declared in the <code>if</code> statement should equal the string <code>block scope</code>.</p>","testString":"assert(code.match(/(i\\s*=\\s*).*\\s*.*\\s*.*\\1('|\")block\\s*scope\\2/g));"},{"text":"<p><code>checkScope()</code> should return the string <code>function scope</code></p>","testString":"assert(checkScope() === 'function scope');"}],"description":"<section id=\"description\">\n<p>If you are unfamiliar with <code>let</code>, check out <a href=\"/learn/javascript-algorithms-and-data-structures/basic-javascript/explore-differences-between-the-var-and-let-keywords\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this challenge about the difference between <code>let</code> and <code>var</code></a>.</p>\n<p>When you declare a variable with the <code>var</code> keyword, it is declared globally, or locally if declared inside a function.</p>\n<p>The <code>let</code> keyword behaves similarly, but with some extra features. When you declare a variable with the <code>let</code> keyword inside a block, statement, or expression, its scope is limited to that block, statement, or expression.</p>\n<p>For example:</p>\n<pre><code class=\"language-js\">var numArray = [];\nfor (var i = 0; i &#x3C; 3; i++) {\n  numArray.push(i);\n}\nconsole.log(numArray);\nconsole.log(i);\n</code></pre>\n<p>Here the console will display the values <code>[0, 1, 2]</code> and <code>3</code>.</p>\n<p>With the <code>var</code> keyword, <code>i</code> is declared globally. So when <code>i++</code> is executed, it updates the global variable. This code is similar to the following:</p>\n<pre><code class=\"language-js\">var numArray = [];\nvar i;\nfor (i = 0; i &#x3C; 3; i++) {\n  numArray.push(i);\n}\nconsole.log(numArray);\nconsole.log(i);\n</code></pre>\n<p>Here the console will display the values <code>[0, 1, 2]</code> and <code>3</code>.</p>\n<p>This behavior will cause problems if you were to create a function and store it for later use inside a <code>for</code> loop that uses the <code>i</code> variable. This is because the stored function will always refer to the value of the updated global <code>i</code> variable.</p>\n<pre><code class=\"language-js\">var printNumTwo;\nfor (var i = 0; i &#x3C; 3; i++) {\n  if (i === 2) {\n    printNumTwo = function() {\n      return i;\n    };\n  }\n}\nconsole.log(printNumTwo());\n</code></pre>\n<p>Here the console will display the value <code>3</code>.</p>\n<p>As you can see, <code>printNumTwo()</code> prints 3 and not 2. This is because the value assigned to <code>i</code> was updated and the <code>printNumTwo()</code> returns the global <code>i</code> and not the value <code>i</code> had when the function was created in the for loop. The <code>let</code> keyword does not follow this behavior:</p>\n<pre><code class=\"language-js\">let printNumTwo;\nfor (let i = 0; i &#x3C; 3; i++) {\n  if (i === 2) {\n    printNumTwo = function() {\n      return i;\n    };\n  }\n}\nconsole.log(printNumTwo());\nconsole.log(i);\n</code></pre>\n<p>Here the console will display the value <code>2</code>, and an error that <code>i is not defined</code>.</p>\n<p><code>i</code> is not defined because it was not declared in the global scope. It is only declared within the <code>for</code> loop statement. <code>printNumTwo()</code> returned the correct value because three different <code>i</code> variables with unique values (0, 1, and 2) were created by the <code>let</code> keyword within the loop statement.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Fix the code so that <code>i</code> declared in the <code>if</code> statement is a separate variable than <code>i</code> declared in the first line of the function. Be certain not to use the <code>var</code> keyword anywhere in your code.</p>\n<p>This exercise is designed to illustrate the difference between how <code>var</code> and <code>let</code> keywords assign scope to the declared variable. When programming a function similar to the one used in this exercise, it is often better to use different variable names to avoid confusion.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":0,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5cdafbc32913098997531680","title":"Complete a Promise with resolve and reject","challengeType":1,"forumTopicId":301196,"dashedName":"complete-a-promise-with-resolve-and-reject","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer represents a response from a server\n  let responseFromServer;\n    \n  if(responseFromServer) {\n    // Change this line\n  } else {  \n    // Change this line\n  }\n});","error":null,"seed":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer represents a response from a server\n  let responseFromServer;\n    \n  if(responseFromServer) {\n    // Change this line\n  } else {  \n    // Change this line\n  }\n});"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer represents a response from a server\n  let responseFromServer;\n\n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});","error":null,"seed":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer represents a response from a server\n  let responseFromServer;\n\n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});"}]],"tests":[{"text":"<p><code>resolve</code> should be called with the expected string when the <code>if</code> condition is <code>true</code>.</p>","testString":"assert(\n  code.match(/if\\s*\\(\\s*responseFromServer\\s*\\)\\s*{\\s*resolve\\s*\\(\\s*('|\"|`)We got the data\\1\\s*\\)(\\s*|\\s*;\\s*)}/g)\n);"},{"text":"<p><code>reject</code> should be called with the expected string when the <code>if</code> condition is <code>false</code>.</p>","testString":"assert(\n  code.match(/}\\s*else\\s*{\\s*reject\\s*\\(\\s*('|\"|`)Data not received\\1\\s*\\)(\\s*|\\s*;\\s*)}/g)\n);"}],"description":"<section id=\"description\">\n<p>A promise has three states: <code>pending</code>, <code>fulfilled</code>, and <code>rejected</code>. The promise you created in the last challenge is forever stuck in the <code>pending</code> state because you did not add a way to complete the promise. The <code>resolve</code> and <code>reject</code> parameters given to the promise argument are used to do this. <code>resolve</code> is used when you want your promise to succeed, and <code>reject</code> is used when you want it to fail. These are methods that take an argument, as seen below.</p>\n<pre><code class=\"language-js\">const myPromise = new Promise((resolve, reject) => {\n  if(condition here) {\n    resolve(\"Promise was fulfilled\");\n  } else {\n    reject(\"Promise was rejected\");\n  }\n});\n</code></pre>\n<p>The example above uses strings for the argument of these functions, but it can really be anything. Often, it might be an object, that you would use data from, to put on your website or elsewhere.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Make the promise handle success and failure. If <code>responseFromServer</code> is <code>true</code>, call the <code>resolve</code> method to successfully complete the promise. Pass <code>resolve</code> a string with the value <code>We got the data</code>. If <code>responseFromServer</code> is <code>false</code>, use the <code>reject</code> method instead and pass it the string: <code>Data not received</code>.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":26,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5cdafbb0291309899753167f","title":"Create a JavaScript Promise","challengeType":1,"forumTopicId":301197,"dashedName":"create-a-javascript-promise","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"","error":null,"seed":""}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const makeServerRequest = new Promise((resolve, reject) => {\n\n});","error":null,"seed":"const makeServerRequest = new Promise((resolve, reject) => {\n\n});"}]],"tests":[{"text":"<p>You should assign a promise to a declared variable named <code>makeServerRequest</code>.</p>","testString":"assert(makeServerRequest instanceof Promise);"},{"text":"<p>Your promise should receive a function with <code>resolve</code> and <code>reject</code> as parameters.</p>","testString":"assert(\n  code.match(\n    /Promise\\s*\\(\\s*(function\\s*\\(\\s*resolve\\s*,\\s*reject\\s*\\)\\s*{|\\(\\s*resolve\\s*,\\s*reject\\s*\\)\\s*=>\\s*{)[^}]*}/g\n  )\n);"}],"description":"<section id=\"description\">\n<p>A promise in JavaScript is exactly what it sounds like - you use it to make a promise to do something, usually asynchronously. When the task completes, you either fulfill your promise or fail to do so. <code>Promise</code> is a constructor function, so you need to use the <code>new</code> keyword to create one. It takes a function, as its argument, with two parameters - <code>resolve</code> and <code>reject</code>. These are methods used to determine the outcome of the promise. The syntax looks like this:</p>\n<pre><code class=\"language-js\">const myPromise = new Promise((resolve, reject) => {\n\n});\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create a new promise called <code>makeServerRequest</code>. Pass in a function with <code>resolve</code> and <code>reject</code> parameters to the constructor.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":25,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5cddbfd622f1a59093ec611d","title":"Create a Module Script","challengeType":6,"forumTopicId":301198,"dashedName":"create-a-module-script","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<html>\n  <body>\n    <!-- Only change code below this line -->\n\n    <!-- Only change code above this line -->\n  </body>\n</html>","error":null,"seed":"<html>\n  <body>\n    <!-- Only change code below this line -->\n\n    <!-- Only change code above this line -->\n  </body>\n</html>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<html>\n  <body>\n    <script type=\"module\" src=\"index.js\"></script>\n  </body>\n</html>","error":null,"seed":"<html>\n  <body>\n    <script type=\"module\" src=\"index.js\"></script>\n  </body>\n</html>"}]],"tests":[{"text":"<p>You should create a <code>script</code> tag.</p>","testString":"assert(code.match(/<\\s*script[^>]*>\\s*<\\/\\s*script\\s*>/g));"},{"text":"<p>Your <code>script</code> tag should have the <code>type</code> attribute with a value of <code>module</code>.</p>","testString":"assert(\n  code.match(\n    /<\\s*script\\s+[^t]*type\\s*=\\s*('|\")module\\1[^>]*>\\s*<\\/\\s*script\\s*>/g\n  )\n);"},{"text":"<p>Your <code>script</code> tag should have a <code>src</code> of <code>index.js</code>.</p>","testString":"assert(\n  code.match(\n    /<\\s*script\\s+[^s]*src\\s*=\\s*('|\")index\\.js\\1[^>]*>\\s*<\\/\\s*script\\s*>/g\n  )\n);"}],"description":"<section id=\"description\">\n<p>JavaScript started with a small role to play on an otherwise mostly HTML web. Today, it’s huge, and some websites are built almost entirely with JavaScript. In order to make JavaScript more modular, clean, and maintainable; ES6 introduced a way to easily share code among JavaScript files. This involves exporting parts of a file for use in one or more other files, and importing the parts you need, where you need them. In order to take advantage of this functionality, you need to create a script in your HTML document with a <code>type</code> of <code>module</code>. Here’s an example:</p>\n<pre><code class=\"language-html\">&#x3C;script type=\"module\" src=\"filename.js\">&#x3C;/script>\n</code></pre>\n<p>A script that uses this <code>module</code> type can now use the <code>import</code> and <code>export</code> features you will learn about in the upcoming challenges.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add a script to the HTML document of type <code>module</code> and give it the source file of <code>index.js</code></p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":19,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8c367417b2b2512b58","title":"Create an Export Fallback with export default","challengeType":1,"forumTopicId":301199,"dashedName":"create-an-export-fallback-with-export-default","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function subtract(x, y) {\n  return x - y;\n}","error":null,"seed":"function subtract(x, y) {\n  return x - y;\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"export default function subtract(x, y) {\n  return x - y;\n}","error":null,"seed":"export default function subtract(x, y) {\n  return x - y;\n}"}]],"tests":[{"text":"<p>Your code should use an <code>export</code> fallback.</p>","testString":"assert(\n  code.match(\n    /export\\s+default\\s+function(\\s+subtract\\s*|\\s*)\\(\\s*x,\\s*y\\s*\\)\\s*{/g\n  )\n);"}],"description":"<section id=\"description\">\n<p>In the <code>export</code> lesson, you learned about the syntax referred to as a <dfn>named export</dfn>. This allowed you to make multiple functions and variables available for use in other files.</p>\n<p>There is another <code>export</code> syntax you need to know, known as <dfn>export default</dfn>. Usually you will use this syntax if only one value is being exported from a file. It is also used to create a fallback value for a file or module.</p>\n<p>Below are examples using <code>export default</code>:</p>\n<pre><code class=\"language-js\">export default function add(x, y) {\n  return x + y;\n}\n\nexport default function(x, y) {\n  return x + y;\n}\n</code></pre>\n<p>The first is a named function, and the second is an anonymous function.</p>\n<p>Since <code>export default</code> is used to declare a fallback value for a module or file, you can only have one value be a default export in each module or file. Additionally, you cannot use <code>export default</code> with <code>var</code>, <code>let</code>, or <code>const</code></p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The following function should be the fallback value for the module. Please add the necessary code to do so.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":23,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8a367417b2b2512b4e","title":"Create Strings using Template Literals","challengeType":1,"forumTopicId":301200,"dashedName":"create-strings-using-template-literals","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const result = {\n  success: [\"max-length\", \"no-amd\", \"prefer-arrow-functions\"],\n  failure: [\"no-var\", \"var-on-top\", \"linebreak\"],\n  skipped: [\"no-extra-semi\", \"no-dup-keys\"]\n};\nfunction makeList(arr) {\n  // Only change code below this line\n  const failureItems = [];\n  // Only change code above this line\n\n  return failureItems;\n}\n\nconst failuresList = makeList(result.failure);","error":null,"seed":"const result = {\n  success: [\"max-length\", \"no-amd\", \"prefer-arrow-functions\"],\n  failure: [\"no-var\", \"var-on-top\", \"linebreak\"],\n  skipped: [\"no-extra-semi\", \"no-dup-keys\"]\n};\nfunction makeList(arr) {\n  // Only change code below this line\n  const failureItems = [];\n  // Only change code above this line\n\n  return failureItems;\n}\n\nconst failuresList = makeList(result.failure);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const result = {\n  success: [\"max-length\", \"no-amd\", \"prefer-arrow-functions\"],\n  failure: [\"no-var\", \"var-on-top\", \"linebreak\"],\n  skipped: [\"no-extra-semi\", \"no-dup-keys\"]\n};\nfunction makeList(arr) {\n  return arr.map(val => `<li class=\"text-warning\">${val}</li>`);\n}\n\nconst failuresList = makeList(result.failure);","error":null,"seed":"const result = {\n  success: [\"max-length\", \"no-amd\", \"prefer-arrow-functions\"],\n  failure: [\"no-var\", \"var-on-top\", \"linebreak\"],\n  skipped: [\"no-extra-semi\", \"no-dup-keys\"]\n};\nfunction makeList(arr) {\n  return arr.map(val => `<li class=\"text-warning\">${val}</li>`);\n}\n\nconst failuresList = makeList(result.failure);"}]],"tests":[{"text":"<p><code>failuresList</code> should be an array containing <code>result failure</code> messages.</p>","testString":"assert(\n  typeof makeList(result.failure) === 'object' && failuresList.length === 3\n);"},{"text":"<p><code>failuresList</code> should be equal to the specified output.</p>","testString":"assert(\n  makeList(result.failure).every(\n    (v, i) =>\n      v === `<li class=\"text-warning\">${result.failure[i]}</li>` ||\n      v === `<li class='text-warning'>${result.failure[i]}</li>`\n  )\n);"},{"text":"<p>Template strings and expression interpolation should be used.</p>","testString":"(getUserInput) => assert(getUserInput('index').match(/(`.*\\${.*}.*`)/));"},{"text":"<p>An iterator should be used.</p>","testString":"(getUserInput) =>\n  assert(getUserInput('index').match(/for|map|reduce|forEach|while/));"}],"description":"<section id=\"description\">\n<p>A new feature of ES6 is the <dfn>template literal</dfn>. This is a special type of string that makes creating complex strings easier.</p>\n<p>Template literals allow you to create multi-line strings and to use string interpolation features to create strings.</p>\n<p>Consider the code below:</p>\n<pre><code class=\"language-js\">const person = {\n  name: \"Zodiac Hasbro\",\n  age: 56\n};\n\nconst greeting = `Hello, my name is ${person.name}!\nI am ${person.age} years old.`;\n\nconsole.log(greeting);\n</code></pre>\n<p>The console will display the strings <code>Hello, my name is Zodiac Hasbro!</code> and <code>I am 56 years old.</code>.</p>\n<p>A lot of things happened there. Firstly, the example uses backticks (<code>`</code>), not quotes (<code>'</code> or <code>\"</code>), to wrap the string. Secondly, notice that the string is multi-line, both in the code and the output. This saves inserting <code>\\n</code> within strings. The <code>${variable}</code> syntax used above is a placeholder. Basically, you won't have to use concatenation with the <code>+</code> operator anymore. To add variables to strings, you just drop the variable in a template string and wrap it with <code>${</code> and <code>}</code>. Similarly, you can include other expressions in your string literal, for example <code>${a + b}</code>. This new way of creating strings gives you more flexibility to create robust strings.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use template literal syntax with backticks to create an array of list element (<code>li</code>) strings. Each list element's text should be one of the array elements from the <code>failure</code> property on the <code>result</code> object and have a <code>class</code> attribute with the value <code>text-warning</code>. The <code>makeList</code> function should return the array of list item strings.</p>\n<p>Use an iterator method (any kind of loop) to get the desired output (shown below).</p>\n<pre><code class=\"language-js\">[\n  '&#x3C;li class=\"text-warning\">no-var&#x3C;/li>',\n  '&#x3C;li class=\"text-warning\">var-on-top&#x3C;/li>',\n  '&#x3C;li class=\"text-warning\">linebreak&#x3C;/li>'\n]\n</code></pre>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":14,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5cdafbd72913098997531681","title":"Handle a Fulfilled Promise with then","challengeType":1,"forumTopicId":301203,"dashedName":"handle-a-fulfilled-promise-with-then","challengeFiles":[{"head":"","tail":"const resultIsParameter = /\\.then\\((function\\(result\\){|result|\\(result\\)=>)/.test(__helpers.removeWhiteSpace(code));","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to true to represent a successful response from a server\n  let responseFromServer = true;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});","error":null,"seed":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to true to represent a successful response from a server\n  let responseFromServer = true;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to true to represent a successful response from a server\n  let responseFromServer = true;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});","error":null,"seed":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to true to represent a successful response from a server\n  let responseFromServer = true;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});"}]],"tests":[{"text":"<p>You should call the <code>then</code> method on the promise.</p>","testString":"assert(\n  __helpers.removeWhiteSpace(code).match(/(makeServerRequest|\\))\\.then\\(/g)\n);"},{"text":"<p>Your <code>then</code> method should have a callback function with <code>result</code> as its parameter.</p>","testString":"assert(resultIsParameter);"},{"text":"<p>You should log <code>result</code> to the console.</p>","testString":"assert(\n  resultIsParameter &&\n    __helpers\n      .removeWhiteSpace(code)\n      .match(/\\.then\\(.*?result.*?console.log\\(result\\).*?\\)/)\n);"}],"description":"<section id=\"description\">\n<p>Promises are most useful when you have a process that takes an unknown amount of time in your code (i.e. something asynchronous), often a server request. When you make a server request it takes some amount of time, and after it completes you usually want to do something with the response from the server. This can be achieved by using the <code>then</code> method. The <code>then</code> method is executed immediately after your promise is fulfilled with <code>resolve</code>. Here’s an example:</p>\n<pre><code class=\"language-js\">myPromise.then(result => {\n  \n});\n</code></pre>\n<p><code>result</code> comes from the argument given to the <code>resolve</code> method.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the <code>then</code> method to your promise. Use <code>result</code> as the parameter of its callback function and log <code>result</code> to the console.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":27,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5cdafbe72913098997531682","title":"Handle a Rejected Promise with catch","challengeType":1,"forumTopicId":301204,"dashedName":"handle-a-rejected-promise-with-catch","challengeFiles":[{"head":"","tail":"const errorIsParameter = /\\.catch\\((function\\(error\\){|error|\\(error\\)=>)/.test(__helpers.removeWhiteSpace(code));","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to false to represent an unsuccessful response from a server\n  let responseFromServer = false;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});","error":null,"seed":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to false to represent an unsuccessful response from a server\n  let responseFromServer = false;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to false to represent an unsuccessful response from a server\n  let responseFromServer = false;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});\n\nmakeServerRequest.catch(error => {\n  console.log(error);\n});","error":null,"seed":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to false to represent an unsuccessful response from a server\n  let responseFromServer = false;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});\n\nmakeServerRequest.catch(error => {\n  console.log(error);\n});"}]],"tests":[{"text":"<p>You should call the <code>catch</code> method on the promise.</p>","testString":"assert(\n  __helpers.removeWhiteSpace(code).match(/(makeServerRequest|\\))\\.catch\\(/g)\n);"},{"text":"<p>Your <code>catch</code> method should have a callback function with <code>error</code> as its parameter.</p>","testString":"assert(errorIsParameter);"},{"text":"<p>You should log <code>error</code> to the console.</p>","testString":"assert(\n  errorIsParameter &&\n    __helpers\n      .removeWhiteSpace(code)\n      .match(/\\.catch\\(.*?error.*?console.log\\(error\\).*?\\)/)\n);"}],"description":"<section id=\"description\">\n<p><code>catch</code> is the method used when your promise has been rejected. It is executed immediately after a promise's <code>reject</code> method is called. Here’s the syntax:</p>\n<pre><code class=\"language-js\">myPromise.catch(error => {\n  \n});\n</code></pre>\n<p><code>error</code> is the argument passed in to the <code>reject</code> method.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the <code>catch</code> method to your promise. Use <code>error</code> as the parameter of its callback function and log <code>error</code> to the console.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":28,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8d367417b2b2512b59","title":"Import a Default Export","challengeType":1,"forumTopicId":301205,"dashedName":"import-a-default-export","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"  \n// Only change code above this line\n\nsubtract(7,4);","error":null,"seed":"  \n// Only change code above this line\n\nsubtract(7,4);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"import subtract from \"./math_functions.js\";\n\nsubtract(7,4);","error":null,"seed":"import subtract from \"./math_functions.js\";\n\nsubtract(7,4);"}]],"tests":[{"text":"<p>You should properly import <code>subtract</code> from <code>math_functions.js</code>.</p>","testString":"assert(code.match(/import\\s+subtract\\s+from\\s+('|\")\\.\\/math_functions\\.js\\1/g));"}],"description":"<section id=\"description\">\n<p>In the last challenge, you learned about <code>export default</code> and its uses. To import a default export, you need to use a different <code>import</code> syntax. In the following example, <code>add</code> is the default export of the <code>math_functions.js</code> file. Here is how to import it:</p>\n<pre><code class=\"language-js\">import add from \"./math_functions.js\";\n</code></pre>\n<p>The syntax differs in one key place. The imported value, <code>add</code>, is not surrounded by curly braces (<code>{}</code>). <code>add</code> here is simply a variable name for whatever the default export of the <code>math_functions.js</code> file is. You can use any name here when importing a default.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>In the following code, import the default export from the <code>math_functions.js</code> file, found in the same directory as this file. Give the import the name <code>subtract</code>.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":24,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b87367417b2b2512b42","title":"Mutate an Array Declared with const","challengeType":1,"forumTopicId":301206,"dashedName":"mutate-an-array-declared-with-const","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const s = [5, 7, 2];\nfunction editInPlace() {\n  // Only change code below this line\n\n  // Using s = [2, 5, 7] would be invalid\n\n  // Only change code above this line\n}\neditInPlace();","error":null,"seed":"const s = [5, 7, 2];\nfunction editInPlace() {\n  // Only change code below this line\n\n  // Using s = [2, 5, 7] would be invalid\n\n  // Only change code above this line\n}\neditInPlace();"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const s = [5, 7, 2];\nfunction editInPlace() {\n  s[0] = 2;\n  s[1] = 5;\n  s[2] = 7;\n}\neditInPlace();","error":null,"seed":"const s = [5, 7, 2];\nfunction editInPlace() {\n  s[0] = 2;\n  s[1] = 5;\n  s[2] = 7;\n}\neditInPlace();"}]],"tests":[{"text":"<p>You should not replace <code>const</code> keyword.</p>","testString":"(getUserInput) => assert(getUserInput('index').match(/const/g));"},{"text":"<p><code>s</code> should be a constant variable (by using <code>const</code>).</p>","testString":"(getUserInput) => assert(getUserInput('index').match(/const\\s+s/g));"},{"text":"<p>You should not change the original array declaration.</p>","testString":"(getUserInput) =>\n  assert(\n    getUserInput('index').match(\n      /const\\s+s\\s*=\\s*\\[\\s*5\\s*,\\s*7\\s*,\\s*2\\s*\\]\\s*;?/g\n    )\n  );"},{"text":"<p><code>s</code> should be equal to <code>[2, 5, 7]</code>.</p>","testString":"assert.deepEqual(s, [2, 5, 7]);"}],"description":"<section id=\"description\">\n<p>If you are unfamiliar with <code>const</code>, check out <a href=\"/learn/javascript-algorithms-and-data-structures/basic-javascript/declare-a-read-only-variable-with-the-const-keyword\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this challenge about the <code>const</code> keyword</a>.</p>\n<p>The <code>const</code> declaration has many use cases in modern JavaScript.</p>\n<p>Some developers prefer to assign all their variables using <code>const</code> by default, unless they know they will need to reassign the value. Only in that case, they use <code>let</code>.</p>\n<p>However, it is important to understand that objects (including arrays and functions) assigned to a variable using <code>const</code> are still mutable. Using the <code>const</code> declaration only prevents reassignment of the variable identifier.</p>\n<pre><code class=\"language-js\">const s = [5, 6, 7];\ns = [1, 2, 3];\ns[2] = 45;\nconsole.log(s);\n</code></pre>\n<p><code>s = [1, 2, 3]</code> will result in an error. After commenting out that line, the <code>console.log</code> will display the value <code>[5, 6, 45]</code>.</p>\n<p>As you can see, you can mutate the object <code>[5, 6, 7]</code> itself and the variable <code>s</code> will still point to the altered array <code>[5, 6, 45]</code>. Like all arrays, the array elements in <code>s</code> are mutable, but because <code>const</code> was used, you cannot use the variable identifier <code>s</code> to point to a different array using the assignment operator.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>An array is declared as <code>const s = [5, 7, 2]</code>. Change the array to <code>[2, 5, 7]</code> using various element assignments.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":1,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"598f48a36c8c40764b4e52b3","title":"Prevent Object Mutation","challengeType":1,"forumTopicId":301207,"dashedName":"prevent-object-mutation","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function freezeObj() {\n  const MATH_CONSTANTS = {\n    PI: 3.14\n  };\n  // Only change code below this line\n\n\n  // Only change code above this line\n  try {\n    MATH_CONSTANTS.PI = 99;\n  } catch(ex) {\n    console.log(ex);\n  }\n  return MATH_CONSTANTS.PI;\n}\nconst PI = freezeObj();","error":null,"seed":"function freezeObj() {\n  const MATH_CONSTANTS = {\n    PI: 3.14\n  };\n  // Only change code below this line\n\n\n  // Only change code above this line\n  try {\n    MATH_CONSTANTS.PI = 99;\n  } catch(ex) {\n    console.log(ex);\n  }\n  return MATH_CONSTANTS.PI;\n}\nconst PI = freezeObj();"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function freezeObj() {\n  const MATH_CONSTANTS = {\n    PI: 3.14\n  };\n  Object.freeze(MATH_CONSTANTS);\n\n  try {\n    MATH_CONSTANTS.PI = 99;\n  } catch(ex) {\n    console.log(ex);\n  }\n  return MATH_CONSTANTS.PI;\n}\nconst PI = freezeObj();","error":null,"seed":"function freezeObj() {\n  const MATH_CONSTANTS = {\n    PI: 3.14\n  };\n  Object.freeze(MATH_CONSTANTS);\n\n  try {\n    MATH_CONSTANTS.PI = 99;\n  } catch(ex) {\n    console.log(ex);\n  }\n  return MATH_CONSTANTS.PI;\n}\nconst PI = freezeObj();"}]],"tests":[{"text":"<p>You should not replace the <code>const</code> keyword.</p>","testString":"(getUserInput) => assert(getUserInput('index').match(/const/g));"},{"text":"<p><code>MATH_CONSTANTS</code> should be a constant variable (by using <code>const</code>).</p>","testString":"(getUserInput) =>\n  assert(getUserInput('index').match(/const\\s+MATH_CONSTANTS/g));"},{"text":"<p>You should not change the original declaration of <code>MATH_CONSTANTS</code>.</p>","testString":"(getUserInput) =>\n  assert(\n    getUserInput('index').match(\n      /const\\s+MATH_CONSTANTS\\s+=\\s+{\\s+PI:\\s+3.14\\s+};/g\n    )\n  );"},{"text":"<p><code>PI</code> should equal <code>3.14</code>.</p>","testString":"assert(PI === 3.14);"}],"description":"<section id=\"description\">\n<p>As seen in the previous challenge, <code>const</code> declaration alone doesn't really protect your data from mutation. To ensure your data doesn't change, JavaScript provides a function <code>Object.freeze</code> to prevent data mutation.</p>\n<p>Any attempt at changing the object will be rejected, with an error thrown if the script is running in strict mode.</p>\n<pre><code class=\"language-js\">let obj = {\n  name:\"FreeCodeCamp\",\n  review:\"Awesome\"\n};\nObject.freeze(obj);\nobj.review = \"bad\";\nobj.newProp = \"Test\";\nconsole.log(obj); \n</code></pre>\n<p>The <code>obj.review</code> and <code>obj.newProp</code> assignments will result in errors, because our editor runs in strict mode by default, and the console will display the value <code>{ name: \"FreeCodeCamp\", review: \"Awesome\" }</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>In this challenge you are going to use <code>Object.freeze</code> to prevent mathematical constants from changing. You need to freeze the <code>MATH_CONSTANTS</code> object so that no one is able to alter the value of <code>PI</code>, add, or delete properties.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":2,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8c367417b2b2512b55","title":"Reuse JavaScript Code Using import","challengeType":1,"forumTopicId":301208,"dashedName":"reuse-javascript-code-using-import","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"  \n// Only change code above this line\n\nuppercaseString(\"hello\");\nlowercaseString(\"WORLD!\");","error":null,"seed":"  \n// Only change code above this line\n\nuppercaseString(\"hello\");\nlowercaseString(\"WORLD!\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"import { uppercaseString, lowercaseString } from './string_functions.js';\n\nuppercaseString(\"hello\");\nlowercaseString(\"WORLD!\");","error":null,"seed":"import { uppercaseString, lowercaseString } from './string_functions.js';\n\nuppercaseString(\"hello\");\nlowercaseString(\"WORLD!\");"}]],"tests":[{"text":"<p>You should properly import <code>uppercaseString</code>.</p>","testString":"assert(\n  code.match(\n    /import\\s*{\\s*(uppercaseString[^}]*|[^,]*,\\s*uppercaseString\\s*)}\\s+from\\s+('|\")\\.\\/string_functions\\.js\\2/g\n  )\n);"},{"text":"<p>You should properly import <code>lowercaseString</code>.</p>","testString":"assert(\n  code.match(\n    /import\\s*{\\s*(lowercaseString[^}]*|[^,]*,\\s*lowercaseString\\s*)}\\s+from\\s+('|\")\\.\\/string_functions\\.js\\2/g\n  )\n);"}],"description":"<section id=\"description\">\n<p><code>import</code> allows you to choose which parts of a file or module to load. In the previous lesson, the examples exported <code>add</code> from the <code>math_functions.js</code> file. Here's how you can import it to use in another file:</p>\n<pre><code class=\"language-js\">import { add } from './math_functions.js';\n</code></pre>\n<p>Here, <code>import</code> will find <code>add</code> in <code>math_functions.js</code>, import just that function for you to use, and ignore the rest. The <code>./</code> tells the import to look for the <code>math_functions.js</code> file in the same folder as the current file. The relative file path (<code>./</code>) and file extension (<code>.js</code>) are required when using import in this way.</p>\n<p>You can import more than one item from the file by adding them in the <code>import</code> statement like this:</p>\n<pre><code class=\"language-js\">import { add, subtract } from './math_functions.js';\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the appropriate <code>import</code> statement that will allow the current file to use the <code>uppercaseString</code> and <code>lowercaseString</code> functions you exported in the previous lesson. These functions are in a file called <code>string_functions.js</code>, which is in the same directory as the current file.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":21,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b88367417b2b2512b46","title":"Set Default Parameters for Your Functions","challengeType":1,"forumTopicId":301209,"dashedName":"set-default-parameters-for-your-functions","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Only change code below this line\nconst increment = (number, value) => number + value;\n// Only change code above this line","error":null,"seed":"// Only change code below this line\nconst increment = (number, value) => number + value;\n// Only change code above this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const increment = (number, value = 1) => number + value;","error":null,"seed":"const increment = (number, value = 1) => number + value;"}]],"tests":[{"text":"<p>The result of <code>increment(5, 2)</code> should be <code>7</code>.</p>","testString":"assert(increment(5, 2) === 7);"},{"text":"<p>The result of <code>increment(5)</code> should be <code>6</code>.</p>","testString":"assert(increment(5) === 6);"},{"text":"<p>A default parameter value of <code>1</code> should be used for <code>value</code>.</p>","testString":"assert(code.match(/value\\s*=\\s*1/g));"}],"description":"<section id=\"description\">\n<p>In order to help us create more flexible functions, ES6 introduces <dfn>default parameters</dfn> for functions.</p>\n<p>Check out this code:</p>\n<pre><code class=\"language-js\">const greeting = (name = \"Anonymous\") => \"Hello \" + name;\n\nconsole.log(greeting(\"John\"));\nconsole.log(greeting());\n</code></pre>\n<p>The console will display the strings <code>Hello John</code> and <code>Hello Anonymous</code>.</p>\n<p>The default parameter kicks in when the argument is not specified (it is undefined). As you can see in the example above, the parameter <code>name</code> will receive its default value <code>Anonymous</code> when you do not provide a value for the parameter. You can add default values for as many parameters as you want.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Modify the function <code>increment</code> by adding default parameters so that it will add 1 to <code>number</code> if <code>value</code> is not specified.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":5,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8c367417b2b2512b57","title":"Use * to Import Everything from a File","challengeType":1,"forumTopicId":301210,"dashedName":"use--to-import-everything-from-a-file","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"\n// Only change code above this line\n\nstringFunctions.uppercaseString(\"hello\");\nstringFunctions.lowercaseString(\"WORLD!\");","error":null,"seed":"\n// Only change code above this line\n\nstringFunctions.uppercaseString(\"hello\");\nstringFunctions.lowercaseString(\"WORLD!\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"import * as stringFunctions from \"./string_functions.js\";\n\n// add code above this line\nstringFunctions.uppercaseString(\"hello\");\nstringFunctions.lowercaseString(\"WORLD!\");","error":null,"seed":"import * as stringFunctions from \"./string_functions.js\";\n\n// add code above this line\nstringFunctions.uppercaseString(\"hello\");\nstringFunctions.lowercaseString(\"WORLD!\");"}]],"tests":[{"text":"<p>Your code should properly use <code>import * as</code> syntax.</p>","testString":"assert(\n  code.match(\n    /import\\s*\\*\\s*as\\s+stringFunctions\\s+from\\s*('|\")\\.\\/string_functions\\.js\\1/g\n  )\n);"}],"description":"<section id=\"description\">\n<p>Suppose you have a file and you wish to import all of its contents into the current file. This can be done with the <code>import * as</code> syntax. Here's an example where the contents of a file named <code>math_functions.js</code> are imported into a file in the same directory:</p>\n<pre><code class=\"language-js\">import * as myMathModule from \"./math_functions.js\";\n</code></pre>\n<p>The above <code>import</code> statement will create an object called <code>myMathModule</code>. This is just a variable name, you can name it anything. The object will contain all of the exports from <code>math_functions.js</code> in it, so you can access the functions like you would any other object property. Here's how you can use the <code>add</code> and <code>subtract</code> functions that were imported:</p>\n<pre><code class=\"language-js\">myMathModule.add(2,3);\nmyMathModule.subtract(5,3);\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>The code in this file requires the contents of the file: <code>string_functions.js</code>, that is in the same directory as the current file. Use the <code>import * as</code> syntax to import everything from the file into an object called <code>stringFunctions</code>.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":22,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b87367417b2b2512b43","title":"Use Arrow Functions to Write Concise Anonymous Functions","challengeType":1,"forumTopicId":301211,"dashedName":"use-arrow-functions-to-write-concise-anonymous-functions","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"var magic = function() {\n  return new Date();\n};","error":null,"seed":"var magic = function() {\n  return new Date();\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const magic = () => {\n  return new Date();\n};","error":null,"seed":"const magic = () => {\n  return new Date();\n};"}]],"tests":[{"text":"<p>You should replace the <code>var</code> keyword.</p>","testString":"assert.notMatch(code, /var/g)"},{"text":"<p><code>magic</code> should be a constant variable (by using <code>const</code>).</p>","testString":"assert.match(code, /const\\s+magic/g)"},{"text":"<p><code>magic</code> should be a <code>function</code>.</p>","testString":"assert(typeof magic === 'function');"},{"text":"<p><code>magic()</code> should return the correct date.</p>","testString":"assert(magic().setHours(0, 0, 0, 0) === new Date().setHours(0, 0, 0, 0));"},{"text":"<p>The <code>function</code> keyword should not be used.</p>","testString":"assert.notMatch(code, /function/g)"}],"description":"<section id=\"description\">\n<p>In JavaScript, we often don't need to name our functions, especially when passing a function as an argument to another function. Instead, we create inline functions. We don't need to name these functions because we do not reuse them anywhere else.</p>\n<p>To achieve this, we often use the following syntax:</p>\n<pre><code class=\"language-js\">const myFunc = function() {\n  const myVar = \"value\";\n  return myVar;\n}\n</code></pre>\n<p>ES6 provides us with the syntactic sugar to not have to write anonymous functions this way. Instead, you can use <strong>arrow function syntax</strong>:</p>\n<pre><code class=\"language-js\">const myFunc = () => {\n  const myVar = \"value\";\n  return myVar;\n}\n</code></pre>\n<p>When there is no function body, and only a return value, arrow function syntax allows you to omit the keyword <code>return</code> as well as the brackets surrounding the code. This helps simplify smaller functions into one-line statements:</p>\n<pre><code class=\"language-js\">const myFunc = () => \"value\";\n</code></pre>\n<p>This code will still return the string <code>value</code> by default.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Rewrite the function assigned to the variable <code>magic</code> which returns a <code>new Date()</code> to use arrow function syntax. Also, make sure nothing is defined using the keyword <code>var</code>.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":3,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8b367417b2b2512b53","title":"Use class Syntax to Define a Constructor Function","challengeType":1,"forumTopicId":301212,"dashedName":"use-class-syntax-to-define-a-constructor-function","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Only change code below this line\n\n// Only change code above this line\n\nconst carrot = new Vegetable('carrot');\nconsole.log(carrot.name); // Should display 'carrot'","error":null,"seed":"// Only change code below this line\n\n// Only change code above this line\n\nconst carrot = new Vegetable('carrot');\nconsole.log(carrot.name); // Should display 'carrot'"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"class Vegetable {\n  constructor(name) {\n    this.name = name;\n  }\n}\nconst carrot = new Vegetable('carrot');","error":null,"seed":"class Vegetable {\n  constructor(name) {\n    this.name = name;\n  }\n}\nconst carrot = new Vegetable('carrot');"}]],"tests":[{"text":"<p><code>Vegetable</code> should be a <code>class</code> with a defined <code>constructor</code> method.</p>","testString":"assert(\n  typeof Vegetable === 'function' && typeof Vegetable.constructor === 'function'\n);"},{"text":"<p>The <code>class</code> keyword should be used.</p>","testString":"assert(code.match(/class/g));"},{"text":"<p><code>Vegetable</code> should be able to be instantiated.</p>","testString":"assert(() => {\n  const a = new Vegetable('apple');\n  return typeof a === 'object';\n});"},{"text":"<p><code>carrot.name</code> should return <code>carrot</code>.</p>","testString":"assert(carrot.name == 'carrot');"}],"description":"<section id=\"description\">\n<p>ES6 provides a new syntax to create objects, using the <dfn>class</dfn> keyword.</p>\n<p>It should be noted that the <code>class</code> syntax is just syntax, and not a full-fledged class-based implementation of an object-oriented paradigm, unlike in languages such as Java, Python, Ruby, etc.</p>\n<p>In ES5, an object can be created by defining a <code>constructor</code> function and using the <code>new</code> keyword to instantiate the object.</p>\n<p>In ES6, a <code>class</code> declaration has a <code>constructor</code> method that is invoked with the <code>new</code> keyword. If the <code>constructor</code> method is not explicitly defined, then it is implicitly defined with no arguments.</p>\n<pre><code class=\"language-js\">// Explicit constructor\nclass SpaceShuttle {\n  constructor(targetPlanet) {\n    this.targetPlanet = targetPlanet;\n  }\n  takeOff() {\n    console.log(\"To \" + this.targetPlanet + \"!\");\n  }\n}\n\n// Implicit constructor \nclass Rocket {\n  launch() {\n    console.log(\"To the moon!\");\n  }\n}\n\nconst zeus = new SpaceShuttle('Jupiter');\n// prints To Jupiter! in console\nzeus.takeOff();\n\nconst atlas = new Rocket();\n// prints To the moon! in console\natlas.launch();\n</code></pre>\n<p>It should be noted that the <code>class</code> keyword declares a new function, to which a constructor is added. This constructor is invoked when <code>new</code> is called to create a new object.</p>\n<p><strong>Note:</strong> UpperCamelCase should be used by convention for ES6 class names, as in <code>SpaceShuttle</code> used above.</p>\n<p>The <code>constructor</code> method is a special method for creating and initializing an object created with a class. You will learn more about it in the Object Oriented Programming section of the JavaScript Algorithms And Data Structures Certification.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the <code>class</code> keyword and write a <code>constructor</code> to create the <code>Vegetable</code> class.</p>\n<p>The <code>Vegetable</code> class allows you to create a vegetable object with a property <code>name</code> that gets passed to the <code>constructor</code>.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":17,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b89367417b2b2512b4b","title":"Use Destructuring Assignment to Assign Variables from Arrays","challengeType":1,"forumTopicId":301213,"dashedName":"use-destructuring-assignment-to-assign-variables-from-arrays","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let a = 8, b = 6;\n// Only change code below this line","error":null,"seed":"let a = 8, b = 6;\n// Only change code below this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let a = 8, b = 6;\n[a, b] = [b, a];","error":null,"seed":"let a = 8, b = 6;\n[a, b] = [b, a];"}]],"tests":[{"text":"<p>The value of <code>a</code> should be <code>6</code>, after swapping.</p>","testString":"assert(a === 6);"},{"text":"<p>The value of <code>b</code> should be <code>8</code>, after swapping.</p>","testString":"assert(b === 8);"},{"text":"<p>You should use array destructuring to swap <code>a</code> and <code>b</code>.</p>","testString":"assert(/\\[\\s*(\\w)\\s*,\\s*(\\w)\\s*\\]\\s*=\\s*\\[\\s*\\2\\s*,\\s*\\1\\s*\\]/g.test(code));"}],"description":"<section id=\"description\">\n<p>ES6 makes destructuring arrays as easy as destructuring objects.</p>\n<p>One key difference between the spread operator and array destructuring is that the spread operator unpacks all contents of an array into a comma-separated list. Consequently, you cannot pick or choose which elements you want to assign to variables.</p>\n<p>Destructuring an array lets us do exactly that:</p>\n<pre><code class=\"language-js\">const [a, b] = [1, 2, 3, 4, 5, 6];\nconsole.log(a, b);\n</code></pre>\n<p>The console will display the values of <code>a</code> and <code>b</code> as <code>1, 2</code>.</p>\n<p>The variable <code>a</code> is assigned the first value of the array, and <code>b</code> is assigned the second value of the array. We can also access the value at any index in an array with destructuring by using commas to reach the desired index:</p>\n<pre><code class=\"language-js\">const [a, b,,, c] = [1, 2, 3, 4, 5, 6];\nconsole.log(a, b, c);\n</code></pre>\n<p>The console will display the values of <code>a</code>, <code>b</code>, and <code>c</code> as <code>1, 2, 5</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use destructuring assignment to swap the values of <code>a</code> and <code>b</code> so that <code>a</code> receives the value stored in <code>b</code>, and <code>b</code> receives the value stored in <code>a</code>.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":11,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b89367417b2b2512b4a","title":"Use Destructuring Assignment to Assign Variables from Nested Objects","challengeType":1,"forumTopicId":301214,"dashedName":"use-destructuring-assignment-to-assign-variables-from-nested-objects","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const LOCAL_FORECAST = {\n  yesterday: { low: 61, high: 75 },\n  today: { low: 64, high: 77 },\n  tomorrow: { low: 68, high: 80 }\n};\n\n// Only change code below this line\n  \nconst lowToday = LOCAL_FORECAST.today.low;\nconst highToday = LOCAL_FORECAST.today.high;\n\n// Only change code above this line","error":null,"seed":"const LOCAL_FORECAST = {\n  yesterday: { low: 61, high: 75 },\n  today: { low: 64, high: 77 },\n  tomorrow: { low: 68, high: 80 }\n};\n\n// Only change code below this line\n  \nconst lowToday = LOCAL_FORECAST.today.low;\nconst highToday = LOCAL_FORECAST.today.high;\n\n// Only change code above this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const LOCAL_FORECAST = {\n  yesterday: { low: 61, high: 75 },\n  today: { low: 64, high: 77 },\n  tomorrow: { low: 68, high: 80 }\n};\n \nconst { today: { low: lowToday, high: highToday }} = LOCAL_FORECAST;","error":null,"seed":"const LOCAL_FORECAST = {\n  yesterday: { low: 61, high: 75 },\n  today: { low: 64, high: 77 },\n  tomorrow: { low: 68, high: 80 }\n};\n \nconst { today: { low: lowToday, high: highToday }} = LOCAL_FORECAST;"}]],"tests":[{"text":"<p>You should remove the ES5 assignment syntax.</p>","testString":"assert(\n  !code.match(/lowToday = LOCAL_FORECAST\\.today\\.low/g) &&\n    !code.match(/highToday = LOCAL_FORECAST\\.today.high/g)\n);"},{"text":"<p>You should use destructuring to create the <code>lowToday</code> variable.</p>","testString":"assert(\n  code.match(\n    /(var|const|let)\\s*{\\s*today\\s*:\\s*{\\s*(low\\s*:\\s*lowToday[^}]*|[^,]*,\\s*low\\s*:\\s*lowToday\\s*)},?\\s*}\\s*=\\s*LOCAL_FORECAST(;|\\s+|\\/\\/)/g\n  )\n);"},{"text":"<p>You should use destructuring to create the <code>highToday</code> variable.</p>","testString":"assert(\n  code.match(\n    /(var|const|let)\\s*{\\s*today\\s*:\\s*{\\s*(high\\s*:\\s*highToday[^}]*|[^,]*,\\s*high\\s*:\\s*highToday,?\\s*)},?\\s*}\\s*=\\s*LOCAL_FORECAST(;|\\s+|\\/\\/)/g\n  )\n);"},{"text":"<p><code>lowToday</code> should be equal to <code>64</code> and <code>highToday</code> should be equal to <code>77</code>.</p>","testString":"assert(lowToday === 64 && highToday === 77);"}],"description":"<section id=\"description\">\n<p>You can use the same principles from the previous two lessons to destructure values from nested objects.</p>\n<p>Using an object similar to previous examples:</p>\n<pre><code class=\"language-js\">const user = {\n  johnDoe: { \n    age: 34,\n    email: 'johnDoe@freeCodeCamp.com'\n  }\n};\n</code></pre>\n<p>Here's how to extract the values of object properties and assign them to variables with the same name:</p>\n<pre><code class=\"language-js\">const { johnDoe: { age, email }} = user;\n</code></pre>\n<p>And here's how you can assign an object properties' values to variables with different names:</p>\n<pre><code class=\"language-js\">const { johnDoe: { age: userAge, email: userEmail }} = user;\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Replace the two assignments with an equivalent destructuring assignment. It should still assign the variables <code>lowToday</code> and <code>highToday</code> the values of <code>today.low</code> and <code>today.high</code> from the <code>LOCAL_FORECAST</code> object.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":10,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b89367417b2b2512b49","title":"Use Destructuring Assignment to Assign Variables from Objects","challengeType":1,"forumTopicId":301215,"dashedName":"use-destructuring-assignment-to-assign-variables-from-objects","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const HIGH_TEMPERATURES = {\n  yesterday: 75,\n  today: 77,\n  tomorrow: 80\n};\n\n// Only change code below this line\n  \nconst highToday = HIGH_TEMPERATURES.today;\nconst highTomorrow = HIGH_TEMPERATURES.tomorrow; \n\n// Only change code above this line","error":null,"seed":"const HIGH_TEMPERATURES = {\n  yesterday: 75,\n  today: 77,\n  tomorrow: 80\n};\n\n// Only change code below this line\n  \nconst highToday = HIGH_TEMPERATURES.today;\nconst highTomorrow = HIGH_TEMPERATURES.tomorrow; \n\n// Only change code above this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const HIGH_TEMPERATURES = {\n  yesterday: 75,\n  today: 77,\n  tomorrow: 80\n};\n\nconst { today: highToday, tomorrow: highTomorrow } = HIGH_TEMPERATURES;","error":null,"seed":"const HIGH_TEMPERATURES = {\n  yesterday: 75,\n  today: 77,\n  tomorrow: 80\n};\n\nconst { today: highToday, tomorrow: highTomorrow } = HIGH_TEMPERATURES;"}]],"tests":[{"text":"<p>You should remove the ES5 assignment syntax.</p>","testString":"assert(\n  !code.match(/highToday = HIGH_TEMPERATURES\\.today/g) &&\n    !code.match(/highTomorrow = HIGH_TEMPERATURES\\.tomorrow/g)\n);"},{"text":"<p>You should use destructuring to create the <code>highToday</code> variable.</p>","testString":"assert(\n  code.match(\n    /(var|const|let)\\s*{\\s*(today\\s*:\\s*highToday[^}]*|[^,]*,\\s*today\\s*:\\s*highToday\\s*)}\\s*=\\s*HIGH_TEMPERATURES(;|\\s+|\\/\\/)/g\n  )\n);"},{"text":"<p>You should use destructuring to create the <code>highTomorrow</code> variable.</p>","testString":"assert(\n  code.match(\n    /(var|const|let)\\s*{\\s*(tomorrow\\s*:\\s*highTomorrow[^}]*|[^,]*,\\s*tomorrow\\s*:\\s*highTomorrow\\s*)}\\s*=\\s*HIGH_TEMPERATURES(;|\\s+|\\/\\/)/g\n  )\n);"},{"text":"<p><code>highToday</code> should be equal to <code>77</code> and <code>highTomorrow</code> should be equal to <code>80</code>.</p>","testString":"assert(highToday === 77 && highTomorrow === 80);"}],"description":"<section id=\"description\">\n<p>Destructuring allows you to assign a new variable name when extracting values. You can do this by putting the new name after a colon when assigning the value.</p>\n<p>Using the same object from the last example:</p>\n<pre><code class=\"language-js\">const user = { name: 'John Doe', age: 34 };\n</code></pre>\n<p>Here's how you can give new variable names in the assignment:</p>\n<pre><code class=\"language-js\">const { name: userName, age: userAge } = user;\n</code></pre>\n<p>You may read it as \"get the value of <code>user.name</code> and assign it to a new variable named <code>userName</code>\" and so on. The value of <code>userName</code> would be the string <code>John Doe</code>, and the value of <code>userAge</code> would be the number <code>34</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Replace the two assignments with an equivalent destructuring assignment. It should still assign the variables <code>highToday</code> and <code>highTomorrow</code> the values of <code>today</code> and <code>tomorrow</code> from the <code>HIGH_TEMPERATURES</code> object.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":9,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5cfa550e84205a357704ccb6","title":"Use Destructuring Assignment to Extract Values from Objects","challengeType":1,"forumTopicId":301216,"dashedName":"use-destructuring-assignment-to-extract-values-from-objects","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const HIGH_TEMPERATURES = {\n  yesterday: 75,\n  today: 77,\n  tomorrow: 80\n};\n\n// Only change code below this line\n\nconst today = HIGH_TEMPERATURES.today;\nconst tomorrow = HIGH_TEMPERATURES.tomorrow;\n\n// Only change code above this line","error":null,"seed":"const HIGH_TEMPERATURES = {\n  yesterday: 75,\n  today: 77,\n  tomorrow: 80\n};\n\n// Only change code below this line\n\nconst today = HIGH_TEMPERATURES.today;\nconst tomorrow = HIGH_TEMPERATURES.tomorrow;\n\n// Only change code above this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const HIGH_TEMPERATURES = {\n  yesterday: 75,\n  today: 77,\n  tomorrow: 80\n};\n\nconst { today, tomorrow } = HIGH_TEMPERATURES;","error":null,"seed":"const HIGH_TEMPERATURES = {\n  yesterday: 75,\n  today: 77,\n  tomorrow: 80\n};\n\nconst { today, tomorrow } = HIGH_TEMPERATURES;"}]],"tests":[{"text":"<p>You should remove the ES5 assignment syntax.</p>","testString":"assert(\n  !code.match(/today\\s*=\\s*HIGH_TEMPERATURES\\.(today|tomorrow)/g)\n);"},{"text":"<p>You should use destructuring to create the <code>today</code> variable.</p>","testString":"assert(\n  code.match(/(var|let|const)\\s*{\\s*(today[^}]*|[^,]*,\\s*today)\\s*}\\s*=\\s*HIGH_TEMPERATURES(;|\\s+|\\/\\/)/g)\n);"},{"text":"<p>You should use destructuring to create the <code>tomorrow</code> variable.</p>","testString":"assert(\n  code.match(/(var|let|const)\\s*{\\s*(tomorrow[^}]*|[^,]*,\\s*tomorrow)\\s*}\\s*=\\s*HIGH_TEMPERATURES(;|\\s+|\\/\\/)/g)\n);"},{"text":"<p><code>today</code> should be equal to <code>77</code> and <code>tomorrow</code> should be equal to <code>80</code>.</p>","testString":"assert(today === 77 && tomorrow === 80);"}],"description":"<section id=\"description\">\n<p><dfn>Destructuring assignment</dfn> is special syntax introduced in ES6, for neatly assigning values taken directly from an object.</p>\n<p>Consider the following ES5 code:</p>\n<pre><code class=\"language-js\">const user = { name: 'John Doe', age: 34 };\n\nconst name = user.name;\nconst age = user.age;\n</code></pre>\n<p><code>name</code> would have a value of the string <code>John Doe</code>, and <code>age</code> would have the number <code>34</code>.</p>\n<p>Here's an equivalent assignment statement using the ES6 destructuring syntax:</p>\n<pre><code class=\"language-js\">const { name, age } = user;\n</code></pre>\n<p>Again, <code>name</code> would have a value of the string <code>John Doe</code>, and <code>age</code> would have the number <code>34</code>.</p>\n<p>Here, the <code>name</code> and <code>age</code> variables will be created and assigned the values of their respective values from the <code>user</code> object. You can see how much cleaner this is.</p>\n<p>You can extract as many or few values from the object as you want.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Replace the two assignments with an equivalent destructuring assignment. It should still assign the variables <code>today</code> and <code>tomorrow</code> the values of <code>today</code> and <code>tomorrow</code> from the <code>HIGH_TEMPERATURES</code> object.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":8,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8a367417b2b2512b4d","title":"Use Destructuring Assignment to Pass an Object as a Function's Parameters","challengeType":1,"forumTopicId":301217,"dashedName":"use-destructuring-assignment-to-pass-an-object-as-a-functions-parameters","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const stats = {\n  max: 56.78,\n  standard_deviation: 4.34,\n  median: 34.54,\n  mode: 23.87,\n  min: -0.75,\n  average: 35.85\n};\n\n// Only change code below this line\nconst half = (stats) => (stats.max + stats.min) / 2.0; \n// Only change code above this line","error":null,"seed":"const stats = {\n  max: 56.78,\n  standard_deviation: 4.34,\n  median: 34.54,\n  mode: 23.87,\n  min: -0.75,\n  average: 35.85\n};\n\n// Only change code below this line\nconst half = (stats) => (stats.max + stats.min) / 2.0; \n// Only change code above this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const stats = {\n  max: 56.78,\n  standard_deviation: 4.34,\n  median: 34.54,\n  mode: 23.87,\n  min: -0.75,\n  average: 35.85\n};\n\nconst half = ( {max, min} ) => (max + min) / 2.0;","error":null,"seed":"const stats = {\n  max: 56.78,\n  standard_deviation: 4.34,\n  median: 34.54,\n  mode: 23.87,\n  min: -0.75,\n  average: 35.85\n};\n\nconst half = ( {max, min} ) => (max + min) / 2.0;"}]],"tests":[{"text":"<p><code>stats</code> should be an <code>object</code>.</p>","testString":"assert(typeof stats === 'object');"},{"text":"<p><code>half(stats)</code> should be <code>28.015</code></p>","testString":"assert(half(stats) === 28.015);"},{"text":"<p>Destructuring should be used.</p>","testString":"assert(__helpers.removeWhiteSpace(code).match(/half=\\({\\w+,\\w+}\\)/));"},{"text":"<p>Destructured parameter should be used.</p>","testString":"assert(!code.match(/stats\\.max|stats\\.min/));"}],"description":"<section id=\"description\">\n<p>In some cases, you can destructure the object in a function argument itself.</p>\n<p>Consider the code below:</p>\n<pre><code class=\"language-js\">const profileUpdate = (profileData) => {\n  const { name, age, nationality, location } = profileData;\n\n}\n</code></pre>\n<p>This effectively destructures the object sent into the function. This can also be done in-place:</p>\n<pre><code class=\"language-js\">const profileUpdate = ({ name, age, nationality, location }) => {\n\n}\n</code></pre>\n<p>When <code>profileData</code> is passed to the above function, the values are destructured from the function parameter for use within the function.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use destructuring assignment within the argument to the function <code>half</code> to send only <code>max</code> and <code>min</code> inside the function.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":13,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8a367417b2b2512b4c","title":"Destructuring via rest elements","challengeType":1,"forumTopicId":301218,"dashedName":"use-destructuring-assignment-with-the-rest-parameter-to-reassign-array-elements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function removeFirstTwo(list) {\n  // Only change code below this line\n  const shorterList = list; // Change this line\n  // Only change code above this line\n  return shorterList;\n}\n\nconst source = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst sourceWithoutFirstTwo = removeFirstTwo(source);","error":null,"seed":"function removeFirstTwo(list) {\n  // Only change code below this line\n  const shorterList = list; // Change this line\n  // Only change code above this line\n  return shorterList;\n}\n\nconst source = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst sourceWithoutFirstTwo = removeFirstTwo(source);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function removeFirstTwo(list) {\n  const [, , ...shorterList] = list;\n  return shorterList;\n}\n\nconst source = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst sourceWithoutFirstTwo = removeFirstTwo(source);","error":null,"seed":"function removeFirstTwo(list) {\n  const [, , ...shorterList] = list;\n  return shorterList;\n}\n\nconst source = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst sourceWithoutFirstTwo = removeFirstTwo(source);"}]],"tests":[{"text":"<p><code>removeFirstTwo([1, 2, 3, 4, 5])</code> should be <code>[3, 4, 5]</code></p>","testString":"const testArr_ = [1, 2, 3, 4, 5];\nconst testArrWORemoved_ = removeFirstTwo(testArr_);\nassert(testArrWORemoved_.every((e, i) => e === i + 3) && testArrWORemoved_.length === 3);"},{"text":"<p><code>removeFirstTwo()</code> should not modify <code>list</code></p>","testString":"const testArr_ = [1, 2, 3, 4, 5];\nconst testArrWORemoved_ = removeFirstTwo(testArr_);\nassert(testArr_.every((e, i) => e === i + 1) && testArr_.length === 5);"},{"text":"<p><code>Array.slice()</code> should not be used.</p>","testString":"(getUserInput) => assert(!getUserInput('index').match(/slice/g));"},{"text":"<p>Destructuring on <code>list</code> should be used.</p>","testString":"assert(\n  __helpers\n    .removeWhiteSpace(code)\n    .match(/\\[(([_$a-z]\\w*)?,){1,}\\.\\.\\.shorterList\\]=list/i)\n);"}],"description":"<section id=\"description\">\n<p>In some situations involving array destructuring, we might want to collect the rest of the elements into a separate array.</p>\n<p>The result is similar to <code>Array.prototype.slice()</code>, as shown below:</p>\n<pre><code class=\"language-js\">const [a, b, ...arr] = [1, 2, 3, 4, 5, 7];\nconsole.log(a, b);\nconsole.log(arr);\n</code></pre>\n<p>The console would display the values <code>1, 2</code> and <code>[3, 4, 5, 7]</code>.</p>\n<p>Variables <code>a</code> and <code>b</code> take the first and second values from the array. After that, because of the rest syntax presence, <code>arr</code> gets the rest of the values in the form of an array. The rest element only works correctly as the last variable in the list. As in, you cannot use the rest syntax to catch a subarray that leaves out the last element of the original array.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use a destructuring assignment with the rest syntax to emulate the behavior of <code>Array.prototype.slice()</code>. <code>removeFirstTwo()</code> should return a sub-array of the original array <code>list</code> with the first two elements omitted.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":12,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8c367417b2b2512b56","title":"Use export to Share a Code Block","challengeType":1,"forumTopicId":301219,"dashedName":"use-export-to-share-a-code-block","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const uppercaseString = (string) => {\n  return string.toUpperCase();\n}\n\nconst lowercaseString = (string) => {\n  return string.toLowerCase()\n}","error":null,"seed":"const uppercaseString = (string) => {\n  return string.toUpperCase();\n}\n\nconst lowercaseString = (string) => {\n  return string.toLowerCase()\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"export const uppercaseString = (string) => {\n  return string.toUpperCase();\n}\n\nexport const lowercaseString = (string) => {\n  return string.toLowerCase()\n}","error":null,"seed":"export const uppercaseString = (string) => {\n  return string.toUpperCase();\n}\n\nexport const lowercaseString = (string) => {\n  return string.toLowerCase()\n}"}]],"tests":[{"text":"<p>You should properly export <code>uppercaseString</code>.</p>","testString":"assert(\n  code.match(\n    /(export\\s+const\\s+uppercaseString|export\\s*{\\s*(uppercaseString[^}]*|[^,]*,\\s*uppercaseString\\s*)})/g\n  )\n);"},{"text":"<p>You should properly export <code>lowercaseString</code>.</p>","testString":"assert(\n  code.match(\n    /(export\\s+const\\s+lowercaseString|export\\s*{\\s*(lowercaseString[^}]*|[^,]*,\\s*lowercaseString\\s*)})/g\n  )\n);"}],"description":"<section id=\"description\">\n<p>Imagine a file called <code>math_functions.js</code> that contains several functions related to mathematical operations. One of them is stored in a variable, <code>add</code>, that takes in two numbers and returns their sum. You want to use this function in several different JavaScript files. In order to share it with these other files, you first need to <code>export</code> it.</p>\n<pre><code class=\"language-js\">export const add = (x, y) => {\n  return x + y;\n}\n</code></pre>\n<p>The above is a common way to export a single function, but you can achieve the same thing like this:</p>\n<pre><code class=\"language-js\">const add = (x, y) => {\n  return x + y;\n}\n\nexport { add };\n</code></pre>\n<p>When you export a variable or function, you can import it in another file and use it without having to rewrite the code. You can export multiple things by repeating the first example for each thing you want to export, or by placing them all in the export statement of the second example, like this:</p>\n<pre><code class=\"language-js\">export { add, subtract };\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>There are two string-related functions in the editor. Export both of them using the method of your choice.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":20,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8c367417b2b2512b54","title":"Use getters and setters to Control Access to an Object","challengeType":1,"forumTopicId":301220,"dashedName":"use-getters-and-setters-to-control-access-to-an-object","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Only change code below this line\n\n// Only change code above this line\n\nconst thermos = new Thermostat(76); // Setting in Fahrenheit scale\nlet temp = thermos.temperature; // 24.44 in Celsius\nthermos.temperature = 26;\ntemp = thermos.temperature; // 26 in Celsius","error":null,"seed":"// Only change code below this line\n\n// Only change code above this line\n\nconst thermos = new Thermostat(76); // Setting in Fahrenheit scale\nlet temp = thermos.temperature; // 24.44 in Celsius\nthermos.temperature = 26;\ntemp = thermos.temperature; // 26 in Celsius"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"class Thermostat {\n  constructor(fahrenheit) {\n    this._tempInCelsius = 5/9 * (fahrenheit - 32);\n  }\n  get temperature(){\n    return this._tempInCelsius;\n  }\n  set temperature(newTemp){\n    this._tempInCelsius = newTemp;\n  }\n}\n\nconst thermos = new Thermostat(76); // Setting in Fahrenheit scale\nlet temp = thermos.temperature; // 24.44 in Celsius\nthermos.temperature = 26;\ntemp = thermos.temperature; // 26 in Celsius","error":null,"seed":"class Thermostat {\n  constructor(fahrenheit) {\n    this._tempInCelsius = 5/9 * (fahrenheit - 32);\n  }\n  get temperature(){\n    return this._tempInCelsius;\n  }\n  set temperature(newTemp){\n    this._tempInCelsius = newTemp;\n  }\n}\n\nconst thermos = new Thermostat(76); // Setting in Fahrenheit scale\nlet temp = thermos.temperature; // 24.44 in Celsius\nthermos.temperature = 26;\ntemp = thermos.temperature; // 26 in Celsius"}]],"tests":[{"text":"<p><code>Thermostat</code> should be a <code>class</code> with a defined <code>constructor</code> method.</p>","testString":"assert(\n  typeof Thermostat === 'function' &&\n    typeof Thermostat.constructor === 'function'\n);"},{"text":"<p><code>class</code> keyword should be used.</p>","testString":"assert(code.match(/class/g));"},{"text":"<p><code>Thermostat</code> should be able to be instantiated.</p>","testString":"assert(\n  (() => {\n    const t = new Thermostat(122);\n    return typeof t === 'object';\n  })()\n);"},{"text":"<p>When instantiated with a Fahrenheit value, <code>Thermostat</code> should set the correct <code>temperature</code>.</p>","testString":"assert(\n  (() => {\n    const t = new Thermostat(122);\n    return t.temperature === 50;\n  })()\n);"},{"text":"<p>A <code>getter</code> should be defined.</p>","testString":"assert(\n  (() => {\n    const desc = Object.getOwnPropertyDescriptor(\n      Thermostat.prototype,\n      'temperature'\n    );\n    return !!desc && typeof desc.get === 'function';\n  })()\n);"},{"text":"<p>A <code>setter</code> should be defined.</p>","testString":"assert(\n  (() => {\n    const desc = Object.getOwnPropertyDescriptor(\n      Thermostat.prototype,\n      'temperature'\n    );\n    return !!desc && typeof desc.set === 'function';\n  })()\n);"},{"text":"<p>Calling the <code>setter</code> with a Celsius value should set the <code>temperature</code>.</p>","testString":"assert(\n  (() => {\n    const t = new Thermostat(32);\n    t.temperature = 26;\n    const u = new Thermostat(32);\n    u.temperature = 50;\n    return t.temperature === 26 && u.temperature === 50;\n  })()\n);"}],"description":"<section id=\"description\">\n<p>You can obtain values from an object and set the value of a property within an object.</p>\n<p>These are classically called <dfn>getters</dfn> and <dfn>setters</dfn>.</p>\n<p>Getter functions are meant to simply return (get) the value of an object's private variable to the user without the user directly accessing the private variable.</p>\n<p>Setter functions are meant to modify (set) the value of an object's private variable based on the value passed into the setter function. This change could involve calculations, or even overwriting the previous value completely.</p>\n<pre><code class=\"language-js\">class Book {\n  constructor(author) {\n    this._author = author;\n  }\n  // getter\n  get writer() {\n    return this._author;\n  }\n  // setter\n  set writer(updatedAuthor) {\n    this._author = updatedAuthor;\n  }\n}\nconst novel = new Book('anonymous');\nconsole.log(novel.writer);\nnovel.writer = 'newAuthor';\nconsole.log(novel.writer);\n</code></pre>\n<p>The console would display the strings <code>anonymous</code> and <code>newAuthor</code>.</p>\n<p>Notice the syntax used to invoke the getter and setter. They do not even look like functions. Getters and setters are important because they hide internal implementation details.</p>\n<p><strong>Note:</strong> It is convention to precede the name of a private variable with an underscore (<code>_</code>). However, the practice itself does not make a variable private.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the <code>class</code> keyword to create a <code>Thermostat</code> class. The <code>constructor</code> accepts a Fahrenheit temperature.</p>\n<p>In the class, create a <code>getter</code> to obtain the temperature in Celsius and a <code>setter</code> to set the temperature in Celsius.</p>\n<p>Remember that <code>C = 5/9 * (F - 32)</code> and <code>F = C * 9.0 / 5 + 32</code>, where <code>F</code> is the value of temperature in Fahrenheit, and <code>C</code> is the value of the same temperature in Celsius.</p>\n<p><strong>Note:</strong> When you implement this, you will track the temperature inside the class in one scale, either Fahrenheit or Celsius.</p>\n<p>This is the power of a getter and a setter. You are creating an API for another user, who can get the correct result regardless of which one you track.</p>\n<p>In other words, you are abstracting implementation details from the user.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":18,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b88367417b2b2512b47","title":"Use the Rest Parameter with Function Parameters","challengeType":1,"forumTopicId":301221,"dashedName":"use-the-rest-parameter-with-function-parameters","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const sum = (x, y, z) => {\n  const args = [x, y, z];\n  return args.reduce((a, b) => a + b, 0);\n}","error":null,"seed":"const sum = (x, y, z) => {\n  const args = [x, y, z];\n  return args.reduce((a, b) => a + b, 0);\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const sum = (...args) => {\n  return args.reduce((a, b) => a + b, 0);\n}","error":null,"seed":"const sum = (...args) => {\n  return args.reduce((a, b) => a + b, 0);\n}"}]],"tests":[{"text":"<p>The result of <code>sum(0,1,2)</code> should be 3</p>","testString":"assert(sum(0, 1, 2) === 3);"},{"text":"<p>The result of <code>sum(1,2,3,4)</code> should be 10</p>","testString":"assert(sum(1, 2, 3, 4) === 10);"},{"text":"<p>The result of <code>sum(5)</code> should be 5</p>","testString":"assert(sum(5) === 5);"},{"text":"<p>The result of <code>sum()</code> should be 0</p>","testString":"assert(sum() === 0);"},{"text":"<p><code>sum</code> should be an arrow function which uses the rest parameter syntax (<code>...</code>) on the <code>args</code> parameter.</p>","testString":"assert(__helpers.removeWhiteSpace(code).match(/sum=\\(\\.\\.\\.args\\)=>/));"}],"description":"<section id=\"description\">\n<p>In order to help us create more flexible functions, ES6 introduces the <dfn>rest parameter</dfn> for function parameters. With the rest parameter, you can create functions that take a variable number of arguments. These arguments are stored in an array that can be accessed later from inside the function.</p>\n<p>Check out this code:</p>\n<pre><code class=\"language-js\">function howMany(...args) {\n  return \"You have passed \" + args.length + \" arguments.\";\n}\nconsole.log(howMany(0, 1, 2));\nconsole.log(howMany(\"string\", null, [1, 2, 3], { }));\n</code></pre>\n<p>The console would display the strings <code>You have passed 3 arguments.</code> and <code>You have passed 4 arguments.</code>.</p>\n<p>The rest parameter eliminates the need to check the <code>args</code> array and allows us to apply <code>map()</code>, <code>filter()</code> and <code>reduce()</code> on the parameters array.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Modify the function <code>sum</code> using the rest parameter in such a way that the function <code>sum</code> is able to take any number of arguments and return their sum.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":6,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b89367417b2b2512b48","title":"Use the Spread Operator to Evaluate Arrays In-Place","challengeType":1,"forumTopicId":301222,"dashedName":"use-the-spread-operator-to-evaluate-arrays-in-place","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];\nlet arr2;\n\narr2 = [];  // Change this line\n\nconsole.log(arr2);","error":null,"seed":"const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];\nlet arr2;\n\narr2 = [];  // Change this line\n\nconsole.log(arr2);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];\nlet arr2;\n\narr2 = [...arr1];","error":null,"seed":"const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];\nlet arr2;\n\narr2 = [...arr1];"}]],"tests":[{"text":"<p><code>arr2</code> should be correct copy of <code>arr1</code>.</p>","testString":"assert(arr2.every((v, i) => v === arr1[i]) && arr2.length);"},{"text":"<p><code>...</code> spread operator should be used to duplicate <code>arr1</code>.</p>","testString":"assert(code.match(/Array\\(\\s*\\.\\.\\.arr1\\s*\\)|\\[\\s*\\.\\.\\.arr1\\s*\\]/));"},{"text":"<p><code>arr2</code> should remain unchanged when <code>arr1</code> is changed.</p>","testString":"assert((arr1, arr2) => {\n  arr1.push('JUN');\n  return arr2.length < arr1.length;\n});"}],"description":"<section id=\"description\">\n<p>ES6 introduces the <dfn>spread operator</dfn>, which allows us to expand arrays and other expressions in places where multiple parameters or elements are expected.</p>\n<p>The ES5 code below uses <code>apply()</code> to compute the maximum value in an array:</p>\n<pre><code class=\"language-js\">var arr = [6, 89, 3, 45];\nvar maximus = Math.max.apply(null, arr);\n</code></pre>\n<p><code>maximus</code> would have a value of <code>89</code>.</p>\n<p>We had to use <code>Math.max.apply(null, arr)</code> because <code>Math.max(arr)</code> returns <code>NaN</code>. <code>Math.max()</code> expects comma-separated arguments, but not an array. The spread operator makes this syntax much better to read and maintain.</p>\n<pre><code class=\"language-js\">const arr = [6, 89, 3, 45];\nconst maximus = Math.max(...arr);\n</code></pre>\n<p><code>maximus</code> would have a value of <code>89</code>.</p>\n<p><code>...arr</code> returns an unpacked array. In other words, it <em>spreads</em> the array. However, the spread operator only works in-place, like in an argument to a function or in an array literal. The following code will not work:</p>\n<pre><code class=\"language-js\">const spreaded = ...arr;\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Copy all contents of <code>arr1</code> into another array <code>arr2</code> using the spread operator.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":7,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b88367417b2b2512b44","title":"Write Arrow Functions with Parameters","challengeType":1,"forumTopicId":301223,"dashedName":"write-arrow-functions-with-parameters","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"var myConcat = function(arr1, arr2) {\n  return arr1.concat(arr2);\n};\n\nconsole.log(myConcat([1, 2], [3, 4, 5]));","error":null,"seed":"var myConcat = function(arr1, arr2) {\n  return arr1.concat(arr2);\n};\n\nconsole.log(myConcat([1, 2], [3, 4, 5]));"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const myConcat = (arr1, arr2) =>  {\n  return arr1.concat(arr2);\n};\n\nconsole.log(myConcat([1, 2], [3, 4, 5]));","error":null,"seed":"const myConcat = (arr1, arr2) =>  {\n  return arr1.concat(arr2);\n};\n\nconsole.log(myConcat([1, 2], [3, 4, 5]));"}]],"tests":[{"text":"<p>You should replace the <code>var</code> keyword.</p>","testString":"assert.notMatch(code, /var/g);"},{"text":"<p><code>myConcat</code> should be a constant variable (by using <code>const</code>).</p>","testString":"assert.match(code, /const\\s+myConcat/g);"},{"text":"<p><code>myConcat</code> should be an arrow function with two parameters</p>","testString":"assert(\n  /myConcat=\\(\\w+,\\w+\\)=>/.test(code.replace(/\\s/g, '')) &&\n    typeof myConcat === 'function'\n);"},{"text":"<p><code>myConcat()</code> should return <code>[1, 2, 3, 4, 5]</code>.</p>","testString":"assert.deepEqual(myConcat([1, 2], [3, 4, 5]), [1, 2, 3, 4, 5]);"},{"text":"<p>The <code>function</code> keyword should not be used.</p>","testString":"assert.notMatch(code, /function/g);"}],"description":"<section id=\"description\">\n<p>Just like a regular function, you can pass arguments into an arrow function.</p>\n<pre><code class=\"language-js\">const doubler = (item) => item * 2;\ndoubler(4);\n</code></pre>\n<p><code>doubler(4)</code> would return the value <code>8</code>.</p>\n<p>If an arrow function has a single parameter, the parentheses enclosing the parameter may be omitted.</p>\n<pre><code class=\"language-js\">const doubler = item => item * 2;\n</code></pre>\n<p>It is possible to pass more than one argument into an arrow function.</p>\n<pre><code class=\"language-js\">const multiplier = (item, multi) => item * multi;\nmultiplier(4, 2);\n</code></pre>\n<p><code>multiplier(4, 2)</code> would return the value <code>8</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Rewrite the <code>myConcat</code> function which appends contents of <code>arr2</code> to <code>arr1</code> so that the function uses arrow function syntax.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":4,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8b367417b2b2512b50","title":"Write Concise Declarative Functions with ES6","challengeType":1,"forumTopicId":301224,"dashedName":"write-concise-declarative-functions-with-es6","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Only change code below this line\nconst bicycle = {\n  gear: 2,\n  setGear: function(newGear) {\n    this.gear = newGear;\n  }\n};\n// Only change code above this line\nbicycle.setGear(3);\nconsole.log(bicycle.gear);","error":null,"seed":"// Only change code below this line\nconst bicycle = {\n  gear: 2,\n  setGear: function(newGear) {\n    this.gear = newGear;\n  }\n};\n// Only change code above this line\nbicycle.setGear(3);\nconsole.log(bicycle.gear);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const bicycle = {\n  gear: 2,\n  setGear(newGear) {\n    this.gear = newGear;\n  }\n};\nbicycle.setGear(3);","error":null,"seed":"const bicycle = {\n  gear: 2,\n  setGear(newGear) {\n    this.gear = newGear;\n  }\n};\nbicycle.setGear(3);"}]],"tests":[{"text":"<p>Traditional function expression should not be used.</p>","testString":"(getUserInput) => assert(!code.match(/function/));"},{"text":"<p><code>setGear</code> should be a declarative function.</p>","testString":"assert(\n  typeof bicycle.setGear === 'function' && code.match(/setGear\\s*\\(.+\\)\\s*\\{/)\n);"},{"text":"<p><code>bicycle.setGear(48)</code> should change the <code>gear</code> value to 48.</p>","testString":"bicycle.setGear(48);\nassert(bicycle.gear === 48);"}],"description":"<section id=\"description\">\n<p>When defining functions within objects in ES5, we have to use the keyword <code>function</code> as follows:</p>\n<pre><code class=\"language-js\">const person = {\n  name: \"Taylor\",\n  sayHello: function() {\n    return `Hello! My name is ${this.name}.`;\n  }\n};\n</code></pre>\n<p>With ES6, you can remove the <code>function</code> keyword and colon altogether when defining functions in objects. Here's an example of this syntax:</p>\n<pre><code class=\"language-js\">const person = {\n  name: \"Taylor\",\n  sayHello() {\n    return `Hello! My name is ${this.name}.`;\n  }\n};\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Refactor the function <code>setGear</code> inside the object <code>bicycle</code> to use the shorthand syntax described above.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":16,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8a367417b2b2512b4f","title":"Write Concise Object Literal Declarations Using Object Property Shorthand","challengeType":1,"forumTopicId":301225,"dashedName":"write-concise-object-literal-declarations-using-object-property-shorthand","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const createPerson = (name, age, gender) => {\n  // Only change code below this line\n  return {\n    name: name,\n    age: age,\n    gender: gender\n  };\n  // Only change code above this line\n};","error":null,"seed":"const createPerson = (name, age, gender) => {\n  // Only change code below this line\n  return {\n    name: name,\n    age: age,\n    gender: gender\n  };\n  // Only change code above this line\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const createPerson = (name, age, gender) => {\n  return {\n    name,\n    age,\n    gender\n  };\n};","error":null,"seed":"const createPerson = (name, age, gender) => {\n  return {\n    name,\n    age,\n    gender\n  };\n};"}]],"tests":[{"text":"<p><code>createPerson(\"Zodiac Hasbro\", 56, \"male\")</code> should return <code>{name: \"Zodiac Hasbro\", age: 56, gender: \"male\"}</code>.</p>","testString":"assert.deepEqual(\n  { name: 'Zodiac Hasbro', age: 56, gender: 'male' },\n  createPerson('Zodiac Hasbro', 56, 'male')\n);"},{"text":"<p>Your code should not use <code>key:value</code>.</p>","testString":"(getUserInput) => assert(!getUserInput('index').match(/:/g));"}],"description":"<section id=\"description\">\n<p>ES6 adds some nice support for easily defining object literals.</p>\n<p>Consider the following code:</p>\n<pre><code class=\"language-js\">const getMousePosition = (x, y) => ({\n  x: x,\n  y: y\n});\n</code></pre>\n<p><code>getMousePosition</code> is a simple function that returns an object containing two properties. ES6 provides the syntactic sugar to eliminate the redundancy of having to write <code>x: x</code>. You can simply write <code>x</code> once, and it will be converted to<code>x: x</code> (or something equivalent) under the hood. Here is the same function from above rewritten to use this new syntax:</p>\n<pre><code class=\"language-js\">const getMousePosition = (x, y) => ({ x, y });\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use object property shorthand with object literals to create and return an object with <code>name</code>, <code>age</code> and <code>gender</code> properties.</p>\n</section>","block":"es6","hasEditableBoundaries":false,"order":1,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":15,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false}]},"functional-programming":{"meta":{"name":"Functional Programming","isUpcomingChange":false,"dashedName":"functional-programming","order":7,"time":"5 hours","template":"","required":[],"superBlock":"javascript-algorithms-and-data-structures","challengeOrder":[["587d7b8d367417b2b2512b5b","Learn About Functional Programming"],["587d7b8e367417b2b2512b5c","Understand Functional Programming Terminology"],["587d7b8e367417b2b2512b5d","Understand the Hazards of Using Imperative Code"],["587d7b8e367417b2b2512b5e","Avoid Mutations and Side Effects Using Functional Programming"],["587d7b8e367417b2b2512b5f","Pass Arguments to Avoid External Dependence in a Function"],["587d7b8f367417b2b2512b60","Refactor Global Variables Out of Functions"],["587d7b8f367417b2b2512b61","Use the map Method to Extract Data from an Array"],["587d7b8f367417b2b2512b62","Implement map on a Prototype"],["587d7b8f367417b2b2512b63","Use the filter Method to Extract Data from an Array"],["587d7b8f367417b2b2512b64","Implement the filter Method on a Prototype"],["587d7b90367417b2b2512b65","Return Part of an Array Using the slice Method"],["9d7123c8c441eeafaeb5bdef","Remove Elements from an Array Using slice Instead of splice"],["587d7da9367417b2b2512b66","Combine Two Arrays Using the concat Method"],["587d7da9367417b2b2512b67","Add Elements to the End of an Array Using concat Instead of push"],["587d7da9367417b2b2512b68","Use the reduce Method to Analyze Data"],["587d7b88367417b2b2512b45","Use Higher-Order Functions map, filter, or reduce to Solve a Complex Problem"],["587d7da9367417b2b2512b69","Sort an Array Alphabetically using the sort Method"],["587d7da9367417b2b2512b6a","Return a Sorted Array Without Changing the Original Array"],["587d7daa367417b2b2512b6b","Split a String into an Array Using the split Method"],["587d7daa367417b2b2512b6c","Combine an Array into a String Using the join Method"],["587d7dab367417b2b2512b6d","Apply Functional Programming to Convert Strings to URL Slugs"],["587d7dab367417b2b2512b6e","Use the every Method to Check that Every Element in an Array Meets a Criteria"],["587d7dab367417b2b2512b6f","Use the some Method to Check that Any Elements in an Array Meet a Criteria"],["587d7dab367417b2b2512b70","Introduction to Currying and Partial Application"]]},"challenges":[{"id":"587d7da9367417b2b2512b67","title":"Add Elements to the End of an Array Using concat Instead of push","challengeType":1,"forumTopicId":301226,"dashedName":"add-elements-to-the-end-of-an-array-using-concat-instead-of-push","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function nonMutatingPush(original, newItem) {\n  // Only change code below this line\n  return original.push(newItem);\n\n  // Only change code above this line\n}\n\nconst first = [1, 2, 3];\nconst second = [4, 5];\nnonMutatingPush(first, second);","error":null,"seed":"function nonMutatingPush(original, newItem) {\n  // Only change code below this line\n  return original.push(newItem);\n\n  // Only change code above this line\n}\n\nconst first = [1, 2, 3];\nconst second = [4, 5];\nnonMutatingPush(first, second);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function nonMutatingPush(original, newItem) {\n  return original.concat(newItem);\n}\nconst first = [1, 2, 3];\nconst second = [4, 5];","error":null,"seed":"function nonMutatingPush(original, newItem) {\n  return original.concat(newItem);\n}\nconst first = [1, 2, 3];\nconst second = [4, 5];"}]],"tests":[{"text":"<p>Your code should use the <code>concat</code> method.</p>","testString":"assert(code.match(/\\.concat/g));"},{"text":"<p>Your code should not use the <code>push</code> method.</p>","testString":"assert(!code.match(/\\.?[\\s\\S]*?push/g));"},{"text":"<p>The <code>first</code> array should not change.</p>","testString":"assert(JSON.stringify(first) === JSON.stringify([1, 2, 3]));"},{"text":"<p>The <code>second</code> array should not change.</p>","testString":"assert(JSON.stringify(second) === JSON.stringify([4, 5]));"},{"text":"<p><code>nonMutatingPush([1, 2, 3], [4, 5])</code> should return <code>[1, 2, 3, 4, 5]</code>.</p>","testString":"assert(\n  JSON.stringify(nonMutatingPush([1, 2, 3], [4, 5])) ===\n    JSON.stringify([1, 2, 3, 4, 5])\n);"}],"description":"<section id=\"description\">\n<p>Functional programming is all about creating and using non-mutating functions.</p>\n<p>The last challenge introduced the <code>concat</code> method as a way to merge arrays into a new array without mutating the original arrays. Compare <code>concat</code> to the <code>push</code> method. <code>push</code> adds items to the end of the same array it is called on, which mutates that array. Here's an example:</p>\n<pre><code class=\"language-js\">const arr = [1, 2, 3];\narr.push(4, 5, 6);\n</code></pre>\n<p><code>arr</code> would have a modified value of <code>[1, 2, 3, 4, 5, 6]</code>, which is not the functional programming way.</p>\n<p><code>concat</code> offers a way to merge new items to the end of an array without any mutating side effects.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change the <code>nonMutatingPush</code> function so it uses <code>concat</code> to merge <code>newItem</code> to the end of <code>original</code> without mutating <code>original</code> or <code>newItem</code> arrays. The function should return an array.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":13,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7dab367417b2b2512b6d","title":"Apply Functional Programming to Convert Strings to URL Slugs","challengeType":1,"forumTopicId":301227,"dashedName":"apply-functional-programming-to-convert-strings-to-url-slugs","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Only change code below this line\nfunction urlSlug(title) {\n\n\n}\n// Only change code above this line\nurlSlug(\"A Mind Needs Books Like A Sword Needs A Whetstone\");","error":null,"seed":"// Only change code below this line\nfunction urlSlug(title) {\n\n\n}\n// Only change code above this line\nurlSlug(\"A Mind Needs Books Like A Sword Needs A Whetstone\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function urlSlug(title) {\n  return title.trim().split(/\\s+/).join(\"-\").toLowerCase();\n}","error":null,"seed":"function urlSlug(title) {\n  return title.trim().split(/\\s+/).join(\"-\").toLowerCase();\n}"}]],"tests":[{"text":"<p>Your code should not use the <code>replace</code> method for this challenge.</p>","testString":"assert(!code.match(/\\.?[\\s\\S]*?replace/g));"},{"text":"<p><code>urlSlug(\"Winter Is Coming\")</code> should return the string <code>winter-is-coming</code>.</p>","testString":"assert(urlSlug('Winter Is Coming') === 'winter-is-coming');"},{"text":"<p><code>urlSlug(\" Winter Is  Coming\")</code> should return the string <code>winter-is-coming</code>.</p>","testString":"assert(urlSlug(' Winter Is  Coming') === 'winter-is-coming');"},{"text":"<p><code>urlSlug(\"A Mind Needs Books Like A Sword Needs A Whetstone\")</code> should return the string <code>a-mind-needs-books-like-a-sword-needs-a-whetstone</code>.</p>","testString":"assert(\n  urlSlug('A Mind Needs Books Like A Sword Needs A Whetstone') ===\n    'a-mind-needs-books-like-a-sword-needs-a-whetstone'\n);"},{"text":"<p><code>urlSlug(\"Hold The Door\")</code> should return the string <code>hold-the-door</code>.</p>","testString":"assert(urlSlug('Hold The Door') === 'hold-the-door');"}],"description":"<section id=\"description\">\n<p>The last several challenges covered a number of useful array and string methods that follow functional programming principles. We've also learned about <code>reduce</code>, which is a powerful method used to reduce problems to simpler forms. From computing averages to sorting, any array operation can be achieved by applying it. Recall that <code>map</code> and <code>filter</code> are special cases of <code>reduce</code>.</p>\n<p>Let's combine what we've learned to solve a practical problem.</p>\n<p>Many content management sites (CMS) have the titles of a post added to part of the URL for simple bookmarking purposes. For example, if you write a Medium post titled <code>Stop Using Reduce</code>, it's likely the URL would have some form of the title string in it (<code>.../stop-using-reduce</code>). You may have already noticed this on the freeCodeCamp site.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Fill in the <code>urlSlug</code> function so it converts a string <code>title</code> and returns the hyphenated version for the URL. You can use any of the methods covered in this section, and don't use <code>replace</code>. Here are the requirements:</p>\n<p>The input is a string with spaces and title-cased words</p>\n<p>The output is a string with the spaces between words replaced by a hyphen (<code>-</code>)</p>\n<p>The output should be all lower-cased letters</p>\n<p>The output should not have any spaces</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":20,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8e367417b2b2512b5e","title":"Avoid Mutations and Side Effects Using Functional Programming","challengeType":1,"forumTopicId":301228,"dashedName":"avoid-mutations-and-side-effects-using-functional-programming","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// The global variable\nlet fixedValue = 4;\n\nfunction incrementer() {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}","error":null,"seed":"// The global variable\nlet fixedValue = 4;\n\nfunction incrementer() {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let fixedValue = 4\n\nfunction incrementer() {\n  return fixedValue + 1\n}","error":null,"seed":"let fixedValue = 4\n\nfunction incrementer() {\n  return fixedValue + 1\n}"}]],"tests":[{"text":"<p>Your function <code>incrementer</code> should not change the value of <code>fixedValue</code> (which is <code>4</code>).</p>","testString":"incrementer();\nassert(fixedValue === 4);"},{"text":"<p>Your <code>incrementer</code> function should return a value that is one larger than the <code>fixedValue</code> value.</p>","testString":"const __newValue = incrementer();\nassert(__newValue === 5);"},{"text":"<p>Your <code>incrementer</code> function should return a value based on the global <code>fixedValue</code> variable value.</p>","testString":"(function () {\n  fixedValue = 10;\n  const newValue = incrementer();\n  assert(fixedValue === 10 && newValue === 11);\n  fixedValue = 4;\n})();"}],"description":"<section id=\"description\">\n<p>If you haven't already figured it out, the issue in the previous challenge was with the <code>splice</code> call in the <code>tabClose()</code> function. Unfortunately, <code>splice</code> changes the original array it is called on, so the second call to it used a modified array, and gave unexpected results.</p>\n<p>This is a small example of a much larger pattern - you call a function on a variable, array, or an object, and the function changes the variable or something in the object.</p>\n<p>One of the core principles of functional programming is to not change things. Changes lead to bugs. It's easier to prevent bugs knowing that your functions don't change anything, including the function arguments or any global variable.</p>\n<p>The previous example didn't have any complicated operations but the <code>splice</code> method changed the original array, and resulted in a bug.</p>\n<p>Recall that in functional programming, changing or altering things is called <dfn>mutation</dfn>, and the outcome is called a <dfn>side effect</dfn>. A function, ideally, should be a <dfn>pure function</dfn>, meaning that it does not cause any side effects.</p>\n<p>Let's try to master this discipline and not alter any variable or object in our code.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Fill in the code for the function <code>incrementer</code> so it returns the value of the global variable <code>fixedValue</code> increased by one.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":3,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7daa367417b2b2512b6c","title":"Combine an Array into a String Using the join Method","challengeType":1,"forumTopicId":18221,"dashedName":"combine-an-array-into-a-string-using-the-join-method","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function sentensify(str) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\nsentensify(\"May-the-force-be-with-you\");","error":null,"seed":"function sentensify(str) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\nsentensify(\"May-the-force-be-with-you\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function sentensify(str) {\n  return str.split(/\\W/).join(' ');\n}","error":null,"seed":"function sentensify(str) {\n  return str.split(/\\W/).join(' ');\n}"}]],"tests":[{"text":"<p>Your code should use the <code>join</code> method.</p>","testString":"assert(code.match(/\\.join/g));"},{"text":"<p>Your code should not use the <code>replace</code> method.</p>","testString":"assert(!code.match(/\\.?[\\s\\S]*?replace/g));"},{"text":"<p><code>sentensify(\"May-the-force-be-with-you\")</code> should return a string.</p>","testString":"assert(typeof sentensify('May-the-force-be-with-you') === 'string');"},{"text":"<p><code>sentensify(\"May-the-force-be-with-you\")</code> should return the string <code>May the force be with you</code>.</p>","testString":"assert(sentensify('May-the-force-be-with-you') === 'May the force be with you');"},{"text":"<p><code>sentensify(\"The.force.is.strong.with.this.one\")</code> should return the string <code>The force is strong with this one</code>.</p>","testString":"assert(\n  sentensify('The.force.is.strong.with.this.one') ===\n    'The force is strong with this one'\n);"},{"text":"<p><code>sentensify(\"There,has,been,an,awakening\")</code> should return the string <code>There has been an awakening</code>.</p>","testString":"assert(\n  sentensify('There,has,been,an,awakening') === 'There has been an awakening'\n);"}],"description":"<section id=\"description\">\n<p>The <code>join</code> method is used to join the elements of an array together to create a string. It takes an argument for the delimiter that is used to separate the array elements in the string.</p>\n<p>Here's an example:</p>\n<pre><code class=\"language-js\">const arr = [\"Hello\", \"World\"];\nconst str = arr.join(\" \");\n</code></pre>\n<p><code>str</code> would have a value of the string <code>Hello World</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the <code>join</code> method (among others) inside the <code>sentensify</code> function to make a sentence from the words in the string <code>str</code>. The function should return a string. For example, <code>I-like-Star-Wars</code> would be converted to <code>I like Star Wars</code>. For this challenge, do not use the <code>replace</code> method.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":19,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7da9367417b2b2512b66","title":"Combine Two Arrays Using the concat Method","challengeType":1,"forumTopicId":301229,"dashedName":"combine-two-arrays-using-the-concat-method","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function nonMutatingConcat(original, attach) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\nconst first = [1, 2, 3];\nconst second = [4, 5];\nnonMutatingConcat(first, second);","error":null,"seed":"function nonMutatingConcat(original, attach) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\nconst first = [1, 2, 3];\nconst second = [4, 5];\nnonMutatingConcat(first, second);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function nonMutatingConcat(original, attach) {\n  return original.concat(attach);\n}\nconst first = [1, 2, 3];\nconst second = [4, 5];","error":null,"seed":"function nonMutatingConcat(original, attach) {\n  return original.concat(attach);\n}\nconst first = [1, 2, 3];\nconst second = [4, 5];"}]],"tests":[{"text":"<p>Your code should use the <code>concat</code> method.</p>","testString":"assert(code.match(/\\.concat/g));"},{"text":"<p>The <code>first</code> array should not change.</p>","testString":"assert(JSON.stringify(first) === JSON.stringify([1, 2, 3]));"},{"text":"<p>The <code>second</code> array should not change.</p>","testString":"assert(JSON.stringify(second) === JSON.stringify([4, 5]));"},{"text":"<p><code>nonMutatingConcat([1, 2, 3], [4, 5])</code> should return <code>[1, 2, 3, 4, 5]</code>.</p>","testString":"assert(\n  JSON.stringify(nonMutatingConcat([1, 2, 3], [4, 5])) ===\n    JSON.stringify([1, 2, 3, 4, 5])\n);"}],"description":"<section id=\"description\">\n<p><dfn>Concatenation</dfn> means to join items end to end. JavaScript offers the <code>concat</code> method for both strings and arrays that work in the same way. For arrays, the method is called on one, then another array is provided as the argument to <code>concat</code>, which is added to the end of the first array. It returns a new array and does not mutate either of the original arrays. Here's an example:</p>\n<pre><code class=\"language-js\">[1, 2, 3].concat([4, 5, 6]);\n</code></pre>\n<p>The returned array would be <code>[1, 2, 3, 4, 5, 6]</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the <code>concat</code> method in the <code>nonMutatingConcat</code> function to concatenate <code>attach</code> to the end of <code>original</code>. The function should return the concatenated array.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":12,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8f367417b2b2512b62","title":"Implement map on a Prototype","challengeType":1,"forumTopicId":301230,"dashedName":"implement-map-on-a-prototype","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"Array.prototype.myMap = function(callback) {\n  const newArray = [];\n  // Only change code below this line\n\n  // Only change code above this line\n  return newArray;\n};","error":null,"seed":"Array.prototype.myMap = function(callback) {\n  const newArray = [];\n  // Only change code below this line\n\n  // Only change code above this line\n  return newArray;\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"Array.prototype.myMap = function(callback) {\n  const newArray = [];\n  for (let i = 0; i < this.length; i++) {\n    newArray.push(callback(this[i], i, this));\n  }\n  return newArray;\n};\n\n// Test case\nconst s = [23, 65, 98, 5];\nconst doubled_s = s.myMap(item => item * 2);","error":null,"seed":"Array.prototype.myMap = function(callback) {\n  const newArray = [];\n  for (let i = 0; i < this.length; i++) {\n    newArray.push(callback(this[i], i, this));\n  }\n  return newArray;\n};\n\n// Test case\nconst s = [23, 65, 98, 5];\nconst doubled_s = s.myMap(item => item * 2);"}]],"tests":[{"text":"<p><code>[23, 65, 98, 5, 13].myMap(item => item * 2)</code> should equal <code>[46, 130, 196, 10, 26]</code>.</p>","testString":"const _test_s = [23, 65, 98, 5, 13];\nconst _callback = item => item * 2;\nassert(JSON.stringify(_test_s.map(_callback)) === JSON.stringify(_test_s.myMap(_callback)));"},{"text":"<p><code>[\"naomi\", \"quincy\", \"camperbot\"].myMap(element => element.toUpperCase())</code> should return <code>[\"NAOMI\", \"QUINCY\", \"CAMPERBOT\"]</code>.</p>","testString":"const _test_s = [\"naomi\", \"quincy\", \"camperbot\"];\nconst _callback = element => element.toUpperCase();\nassert(JSON.stringify(_test_s.map(_callback)) === JSON.stringify(_test_s.myMap(_callback)));"},{"text":"<p><code>[1, 1, 2, 5, 2].myMap((element, index, array) => array[index + 1] || array[0])</code> should return <code>[1, 2, 5, 2, 1]</code>.</p>","testString":"const _test_s = [1, 1, 2, 5, 2];\nconst _callback = (element, index, array) => array[index + 1] || array[0];\nassert(JSON.stringify(_test_s.map(_callback)) === JSON.stringify(_test_s.myMap(_callback)));"},{"text":"<p>Your code should not use the <code>map</code> method.</p>","testString":"assert(!code.match(/\\.?[\\s\\S]*?map/g));"}],"description":"<section id=\"description\">\n<p>As you have seen from applying <code>Array.prototype.map()</code>, or simply <code>map()</code> earlier, the <code>map</code> method returns an array of the same length as the one it was called on. It also doesn't alter the original array, as long as its callback function doesn't.</p>\n<p>In other words, <code>map</code> is a pure function, and its output depends solely on its inputs. Plus, it takes another function as its argument.</p>\n<p>You might learn a lot about the <code>map</code> method if you implement your own version of it. It is recommended you use a <code>for</code> loop or <code>Array.prototype.forEach()</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Write your own <code>Array.prototype.myMap()</code>, which should behave exactly like <code>Array.prototype.map()</code>. You should not use the built-in <code>map</code> method. The <code>Array</code> instance can be accessed in the <code>myMap</code> method using <code>this</code>.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":7,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8f367417b2b2512b64","title":"Implement the filter Method on a Prototype","challengeType":1,"forumTopicId":301231,"dashedName":"implement-the-filter-method-on-a-prototype","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"Array.prototype.myFilter = function(callback) {\n  const newArray = [];\n  // Only change code below this line\n\n  // Only change code above this line\n  return newArray;\n};","error":null,"seed":"Array.prototype.myFilter = function(callback) {\n  const newArray = [];\n  // Only change code below this line\n\n  // Only change code above this line\n  return newArray;\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"Array.prototype.myFilter = function(callback) {\n  const newArray = [];\n  for (let i = 0; i < this.length; i++) {\n    if (callback(this[i], i, this)) newArray.push(this[i]);\n  }\n  return newArray;\n};\n\n// Test case\nconst s = [23, 65, 98, 5];\nconst odd_s = s.myFilter(item => item % 2 === 1);","error":null,"seed":"Array.prototype.myFilter = function(callback) {\n  const newArray = [];\n  for (let i = 0; i < this.length; i++) {\n    if (callback(this[i], i, this)) newArray.push(this[i]);\n  }\n  return newArray;\n};\n\n// Test case\nconst s = [23, 65, 98, 5];\nconst odd_s = s.myFilter(item => item % 2 === 1);"}]],"tests":[{"text":"<p><code>[23, 65, 98, 5, 13].myFilter(item => item % 2)</code> should equal <code>[23, 65, 5, 13]</code>.</p>","testString":"const _test_s = [23, 65, 98, 5, 13];\nconst _callback = item => item % 2;\nassert(JSON.stringify(_test_s.filter(_callback)) === JSON.stringify(_test_s.myFilter(_callback)));"},{"text":"<p><code>[\"naomi\", \"quincy\", \"camperbot\"].myFilter(element => element === \"naomi\")</code> should return <code>[\"naomi\"]</code>.</p>","testString":"const _test_s = [\"naomi\", \"quincy\", \"camperbot\"];\nconst _callback = element => element === \"naomi\";\nassert(JSON.stringify(_test_s.filter(_callback)) === JSON.stringify(_test_s.myFilter(_callback)));"},{"text":"<p><code>[1, 1, 2, 5, 2].myFilter((element, index, array) => array.indexOf(element) === index)</code> should return <code>[1, 2, 5]</code>.</p>","testString":"const _test_s = [1, 1, 2, 5, 2];\nconst _callback = (element, index, array) => array.indexOf(element) === index;\nassert(JSON.stringify(_test_s.filter(_callback)) === JSON.stringify(_test_s.myFilter(_callback)));"},{"text":"<p>Your code should not use the <code>filter</code> method.</p>","testString":"assert(!code.match(/\\.?[\\s\\S]*?filter/g));"}],"description":"<section id=\"description\">\n<p>You might learn a lot about the <code>filter</code> method if you implement your own version of it. It is recommended you use a <code>for</code> loop or <code>Array.prototype.forEach()</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Write your own <code>Array.prototype.myFilter()</code>, which should behave exactly like <code>Array.prototype.filter()</code>. You should not use the built-in <code>filter</code> method. The <code>Array</code> instance can be accessed in the <code>myFilter</code> method using <code>this</code>.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":9,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7dab367417b2b2512b70","title":"Introduction to Currying and Partial Application","challengeType":1,"forumTopicId":301232,"dashedName":"introduction-to-currying-and-partial-application","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function add(x) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\nadd(10)(20)(30);","error":null,"seed":"function add(x) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\nadd(10)(20)(30);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const add = x => y => z => x + y + z","error":null,"seed":"const add = x => y => z => x + y + z"}]],"tests":[{"text":"<p><code>add(10)(20)(30)</code> should return <code>60</code>.</p>","testString":"assert(add(10)(20)(30) === 60);"},{"text":"<p><code>add(1)(2)(3)</code> should return <code>6</code>.</p>","testString":"assert(add(1)(2)(3) === 6);"},{"text":"<p><code>add(11)(22)(33)</code> should return <code>66</code>.</p>","testString":"assert(add(11)(22)(33) === 66);"},{"text":"<p>Your code should include a final statement that returns <code>x + y + z</code>.</p>","testString":"assert(code.match(/[xyz]\\s*?\\+\\s*?[xyz]\\s*?\\+\\s*?[xyz]/g));"}],"description":"<section id=\"description\">\n<p>The <dfn>arity</dfn> of a function is the number of arguments it requires. <dfn>Currying</dfn> a function means to convert a function of N arity into N functions of arity 1.</p>\n<p>In other words, it restructures a function so it takes one argument, then returns another function that takes the next argument, and so on.</p>\n<p>Here's an example:</p>\n<pre><code class=\"language-js\">function unCurried(x, y) {\n  return x + y;\n}\n\nfunction curried(x) {\n  return function(y) {\n    return x + y;\n  }\n}\n\nconst curried = x => y => x + y\n\ncurried(1)(2)\n</code></pre>\n<p><code>curried(1)(2)</code> would return <code>3</code>.</p>\n<p>This is useful in your program if you can't supply all the arguments to a function at one time. You can save each function call into a variable, which will hold the returned function reference that takes the next argument when it's available. Here's an example using the curried function in the example above:</p>\n<pre><code class=\"language-js\">const funcForY = curried(1);\nconsole.log(funcForY(2)); // 3\n</code></pre>\n<p>Similarly, <dfn>partial application</dfn> can be described as applying a few arguments to a function at a time and returning another function that is applied to more arguments. Here's an example:</p>\n<pre><code class=\"language-js\">function impartial(x, y, z) {\n  return x + y + z;\n}\n\nconst partialFn = impartial.bind(this, 1, 2);\npartialFn(10); // 13\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Fill in the body of the <code>add</code> function so it uses currying to add parameters <code>x</code>, <code>y</code>, and <code>z</code>.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":23,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8d367417b2b2512b5b","title":"Learn About Functional Programming","challengeType":1,"forumTopicId":301233,"dashedName":"learn-about-functional-programming","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Function that returns a string representing a cup of green tea\nconst prepareTea = () => 'greenTea';\n\n/*\nGiven a function (representing the tea type) and number of cups needed, the\nfollowing function returns an array of strings (each representing a cup of\na specific type of tea).\n*/\nconst getTea = (numOfCups) => {\n  const teaCups = [];\n\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n  return teaCups;\n};\n\n// Only change code below this line\nconst tea4TeamFCC = null;\n// Only change code above this line","error":null,"seed":"// Function that returns a string representing a cup of green tea\nconst prepareTea = () => 'greenTea';\n\n/*\nGiven a function (representing the tea type) and number of cups needed, the\nfollowing function returns an array of strings (each representing a cup of\na specific type of tea).\n*/\nconst getTea = (numOfCups) => {\n  const teaCups = [];\n\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n  return teaCups;\n};\n\n// Only change code below this line\nconst tea4TeamFCC = null;\n// Only change code above this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const prepareTea = () => 'greenTea';\n\nconst getTea = (numOfCups) => {\n  const teaCups = [];\n  \n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n\n  return teaCups;\n};\n\nconst tea4TeamFCC = getTea(40); ","error":null,"seed":"const prepareTea = () => 'greenTea';\n\nconst getTea = (numOfCups) => {\n  const teaCups = [];\n  \n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n\n  return teaCups;\n};\n\nconst tea4TeamFCC = getTea(40); "}]],"tests":[{"text":"<p>The <code>tea4TeamFCC</code> variable should hold 40 cups of tea for the team.</p>","testString":"assert(tea4TeamFCC.length === 40);"},{"text":"<p>The <code>tea4TeamFCC</code> variable should hold cups of green tea.</p>","testString":"assert(tea4TeamFCC[0] === 'greenTea');"}],"description":"<section id=\"description\">\n<p>Functional programming is a style of programming where solutions are simple, isolated functions, without any side effects outside of the function scope: <code>INPUT -> PROCESS -> OUTPUT</code></p>\n<p>Functional programming is about:</p>\n<ol>\n<li>\n<p>Isolated functions - there is no dependence on the state of the program, which includes global variables that are subject to change</p>\n</li>\n<li>\n<p>Pure functions - the same input always gives the same output</p>\n</li>\n<li>\n<p>Functions with limited side effects - any changes, or mutations, to the state of the program outside the function are carefully controlled</p>\n</li>\n</ol>\n</section>","instructions":"<section id=\"instructions\">\n<p>The members of freeCodeCamp happen to love tea.</p>\n<p>In the code editor, the <code>prepareTea</code> and <code>getTea</code> functions are already defined for you. Call the <code>getTea</code> function to get 40 cups of tea for the team, and store them in the <code>tea4TeamFCC</code> variable.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":0,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8e367417b2b2512b5f","title":"Pass Arguments to Avoid External Dependence in a Function","challengeType":1,"forumTopicId":301234,"dashedName":"pass-arguments-to-avoid-external-dependence-in-a-function","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// The global variable\nlet fixedValue = 4;\n\n// Only change code below this line\nfunction incrementer() {\n\n\n  // Only change code above this line\n}","error":null,"seed":"// The global variable\nlet fixedValue = 4;\n\n// Only change code below this line\nfunction incrementer() {\n\n\n  // Only change code above this line\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let fixedValue = 4;\n\nfunction incrementer(fixedValue) {\n  return fixedValue + 1;\n}","error":null,"seed":"let fixedValue = 4;\n\nfunction incrementer(fixedValue) {\n  return fixedValue + 1;\n}"}]],"tests":[{"text":"<p>Your function <code>incrementer</code> should not change the value of <code>fixedValue</code> (which is <code>4</code>).</p>","testString":"assert(fixedValue === 4);"},{"text":"<p>Your <code>incrementer</code> function should take an argument.</p>","testString":"assert(incrementer.length === 1);"},{"text":"<p>Your <code>incrementer</code> function should return a value that is one larger than the <code>fixedValue</code> value.</p>","testString":"const __newValue = incrementer(fixedValue);\nassert(__newValue === 5);"}],"description":"<section id=\"description\">\n<p>The last challenge was a step closer to functional programming principles, but there is still something missing.</p>\n<p>We didn't alter the global variable value, but the function <code>incrementer</code> would not work without the global variable <code>fixedValue</code> being there.</p>\n<p>Another principle of functional programming is to always declare your dependencies explicitly. This means if a function depends on a variable or object being present, then pass that variable or object directly into the function as an argument.</p>\n<p>There are several good consequences from this principle. The function is easier to test, you know exactly what input it takes, and it won't depend on anything else in your program.</p>\n<p>This can give you more confidence when you alter, remove, or add new code. You would know what you can or cannot change and you can see where the potential traps are.</p>\n<p>Finally, the function would always produce the same output for the same set of inputs, no matter what part of the code executes it.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Let's update the <code>incrementer</code> function to clearly declare its dependencies.</p>\n<p>Write the <code>incrementer</code> function so it takes an argument, and then returns a result after increasing the value by one.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":4,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8f367417b2b2512b60","title":"Refactor Global Variables Out of Functions","challengeType":1,"forumTopicId":301235,"dashedName":"refactor-global-variables-out-of-functions","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// The global variable\nconst bookList = [\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"];\n\n// Change code below this line\nfunction add(bookName) {\n\n  bookList.push(bookName);\n  return bookList;\n  \n  // Change code above this line\n}\n\n// Change code below this line\nfunction remove(bookName) {\n  const book_index = bookList.indexOf(bookName);\n  if (book_index >= 0) {\n\n    bookList.splice(book_index, 1);\n    return bookList;\n\n    // Change code above this line\n    }\n}","error":null,"seed":"// The global variable\nconst bookList = [\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"];\n\n// Change code below this line\nfunction add(bookName) {\n\n  bookList.push(bookName);\n  return bookList;\n  \n  // Change code above this line\n}\n\n// Change code below this line\nfunction remove(bookName) {\n  const book_index = bookList.indexOf(bookName);\n  if (book_index >= 0) {\n\n    bookList.splice(book_index, 1);\n    return bookList;\n\n    // Change code above this line\n    }\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// The global variable\nconst bookList = [\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"];\n\nfunction add(bookList, bookName) {\n  return [...bookList, bookName];\n}\n\nfunction remove(bookList, bookName) {\n  const bookListCopy = [...bookList];\n  const bookNameIndex = bookList.indexOf(bookName);\n  if (bookNameIndex >= 0) {\n    bookListCopy.splice(bookNameIndex, 1);\n  }\n  return bookListCopy;\n}","error":null,"seed":"// The global variable\nconst bookList = [\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"];\n\nfunction add(bookList, bookName) {\n  return [...bookList, bookName];\n}\n\nfunction remove(bookList, bookName) {\n  const bookListCopy = [...bookList];\n  const bookNameIndex = bookList.indexOf(bookName);\n  if (bookNameIndex >= 0) {\n    bookListCopy.splice(bookNameIndex, 1);\n  }\n  return bookListCopy;\n}"}]],"tests":[{"text":"<p><code>bookList</code> should not change and still equal <code>[\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]</code>.</p>","testString":"add(bookList, \"Test\");\nremove(bookList, \"The Hound of the Baskervilles\");\nassert(\n  JSON.stringify(bookList) ===\n    JSON.stringify([\n      'The Hound of the Baskervilles',\n      'On The Electrodynamics of Moving Bodies',\n      'Philosophiæ Naturalis Principia Mathematica',\n      'Disquisitiones Arithmeticae'\n    ])\n);"},{"text":"<p><code>add(bookList, \"A Brief History of Time\")</code> should return <code>[\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\", \"A Brief History of Time\"]</code>.</p>","testString":"assert(\n  JSON.stringify(add(bookList, \"A Brief History of Time\")) ===\n    JSON.stringify([\n      'The Hound of the Baskervilles',\n      'On The Electrodynamics of Moving Bodies',\n      'Philosophiæ Naturalis Principia Mathematica',\n      'Disquisitiones Arithmeticae',\n      'A Brief History of Time'\n    ])\n);"},{"text":"<p><code>remove(bookList, \"On The Electrodynamics of Moving Bodies\")</code> should return <code>[\"The Hound of the Baskervilles\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]</code>.</p>","testString":"assert(\n  JSON.stringify(remove(bookList, 'On The Electrodynamics of Moving Bodies')) ===\n    JSON.stringify([\n      'The Hound of the Baskervilles',\n      'Philosophiæ Naturalis Principia Mathematica',\n      'Disquisitiones Arithmeticae'\n    ])\n);"},{"text":"<p><code>remove(add(bookList, \"A Brief History of Time\"), \"On The Electrodynamics of Moving Bodies\");</code> should equal <code>[\"The Hound of the Baskervilles\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\", \"A Brief History of Time\"]</code>.</p>","testString":"assert(\n  JSON.stringify(remove(add(bookList, 'A Brief History of Time'), 'On The Electrodynamics of Moving Bodies')) ===\n    JSON.stringify([\n      'The Hound of the Baskervilles',\n      'Philosophiæ Naturalis Principia Mathematica',\n      'Disquisitiones Arithmeticae',\n      'A Brief History of Time'\n    ])\n);"}],"description":"<section id=\"description\">\n<p>So far, we have seen two distinct principles for functional programming:</p>\n<ol>\n<li>\n<p>Don't alter a variable or object - create new variables and objects and return them if need be from a function. Hint: using something like <code>const newArr = arrVar</code>, where <code>arrVar</code> is an array will simply create a reference to the existing variable and not a copy. So changing a value in <code>newArr</code> would change the value in <code>arrVar</code>.</p>\n</li>\n<li>\n<p>Declare function parameters - any computation inside a function depends only on the arguments passed to the function, and not on any global object or variable.</p>\n</li>\n</ol>\n<p>Adding one to a number is not very exciting, but we can apply these principles when working with arrays or more complex objects.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Rewrite the code so the global array <code>bookList</code> is not changed inside either function. The <code>add</code> function should add the given <code>bookName</code> to the end of the array passed to it and return a new array (list). The <code>remove</code> function should remove the given <code>bookName</code> from the array passed to it.</p>\n<p><strong>Note:</strong> Both functions should return an array, and any new parameters should be added before the <code>bookName</code> parameter.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":5,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"9d7123c8c441eeafaeb5bdef","title":"Remove Elements from an Array Using slice Instead of splice","challengeType":1,"forumTopicId":301236,"dashedName":"remove-elements-from-an-array-using-slice-instead-of-splice","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function nonMutatingSplice(cities) {\n  // Only change code below this line\n  return cities.splice(3);\n\n  // Only change code above this line\n}\n\nconst inputCities = [\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"];\nnonMutatingSplice(inputCities);","error":null,"seed":"function nonMutatingSplice(cities) {\n  // Only change code below this line\n  return cities.splice(3);\n\n  // Only change code above this line\n}\n\nconst inputCities = [\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"];\nnonMutatingSplice(inputCities);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function nonMutatingSplice(cities) {\n  return cities.slice(0,3);\n}\nconst inputCities = [\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"];","error":null,"seed":"function nonMutatingSplice(cities) {\n  return cities.slice(0,3);\n}\nconst inputCities = [\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"];"}]],"tests":[{"text":"<p>Your code should use the <code>slice</code> method.</p>","testString":"assert(code.match(/\\.slice/g));"},{"text":"<p>Your code should not use the <code>splice</code> method.</p>","testString":"assert(!code.match(/\\.?[\\s\\S]*?splice/g));"},{"text":"<p>The <code>inputCities</code> array should not change.</p>","testString":"assert(\n  JSON.stringify(inputCities) ===\n    JSON.stringify(['Chicago', 'Delhi', 'Islamabad', 'London', 'Berlin'])\n);"},{"text":"<p><code>nonMutatingSplice([\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"])</code> should return <code>[\"Chicago\", \"Delhi\", \"Islamabad\"]</code>.</p>","testString":"assert(\n  JSON.stringify(\n    nonMutatingSplice(['Chicago', 'Delhi', 'Islamabad', 'London', 'Berlin'])\n  ) === JSON.stringify(['Chicago', 'Delhi', 'Islamabad'])\n);"}],"description":"<section id=\"description\">\n<p>A common pattern while working with arrays is when you want to remove items and keep the rest of the array. JavaScript offers the <code>splice</code> method for this, which takes arguments for the index of where to start removing items, then the number of items to remove. If the second argument is not provided, the default is to remove items through the end. However, the <code>splice</code> method mutates the original array it is called on. Here's an example:</p>\n<pre><code class=\"language-js\">const cities = [\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"];\ncities.splice(3, 1);\n</code></pre>\n<p>Here <code>splice</code> returns the string <code>London</code> and deletes it from the cities array. <code>cities</code> will have the value <code>[\"Chicago\", \"Delhi\", \"Islamabad\", \"Berlin\"]</code>.</p>\n<p>As we saw in the last challenge, the <code>slice</code> method does not mutate the original array, but returns a new one which can be saved into a variable. Recall that the <code>slice</code> method takes two arguments for the indices to begin and end the slice (the end is non-inclusive), and returns those items in a new array. Using the <code>slice</code> method instead of <code>splice</code> helps to avoid any array-mutating side effects.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Rewrite the function <code>nonMutatingSplice</code> by using <code>slice</code> instead of <code>splice</code>. It should limit the provided <code>cities</code> array to a length of 3, and return a new array with only the first three items.</p>\n<p>Do not mutate the original array provided to the function.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":11,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7da9367417b2b2512b6a","title":"Return a Sorted Array Without Changing the Original Array","challengeType":1,"forumTopicId":301237,"dashedName":"return-a-sorted-array-without-changing-the-original-array","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const globalArray = [5, 6, 3, 2, 9];\n\nfunction nonMutatingSort(arr) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\nnonMutatingSort(globalArray);","error":null,"seed":"const globalArray = [5, 6, 3, 2, 9];\n\nfunction nonMutatingSort(arr) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\nnonMutatingSort(globalArray);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const globalArray = [5, 6, 3, 2, 9];\nfunction nonMutatingSort(arr) {\n  return [].concat(arr).sort((a,b) => a-b);\n}","error":null,"seed":"const globalArray = [5, 6, 3, 2, 9];\nfunction nonMutatingSort(arr) {\n  return [].concat(arr).sort((a,b) => a-b);\n}"}]],"tests":[{"text":"<p>Your code should use the <code>sort</code> method.</p>","testString":"assert(nonMutatingSort.toString().match(/\\.sort/g));"},{"text":"<p>The <code>globalArray</code> variable should not change.</p>","testString":"assert(JSON.stringify(globalArray) === JSON.stringify([5, 6, 3, 2, 9]));"},{"text":"<p><code>nonMutatingSort(globalArray)</code> should return <code>[2, 3, 5, 6, 9]</code>.</p>","testString":"assert(\n  JSON.stringify(nonMutatingSort(globalArray)) ===\n    JSON.stringify([2, 3, 5, 6, 9])\n);"},{"text":"<p><code>nonMutatingSort(globalArray)</code> should not be hard coded.</p>","testString":"assert(!nonMutatingSort.toString().match(/\\[.*?[23569].*?\\]/gs));"},{"text":"<p>The function should return a new array, not the array passed to it.</p>","testString":"assert(nonMutatingSort(globalArray) !== globalArray);"},{"text":"<p><code>nonMutatingSort([1, 30, 4, 21, 100000])</code> should return <code>[1, 4, 21, 30, 100000]</code>.</p>","testString":"assert(JSON.stringify(nonMutatingSort([1, 30, 4, 21, 100000])) ===\n    JSON.stringify([1, 4, 21, 30, 100000]))"},{"text":"<p><code>nonMutatingSort([140000, 104, 99])</code> should return <code>[99, 104, 140000]</code>.</p>","testString":"assert(JSON.stringify(nonMutatingSort([140000, 104, 99])) ===\n    JSON.stringify([99, 104, 140000]))"}],"description":"<section id=\"description\">\n<p>A side effect of the <code>sort</code> method is that it changes the order of the elements in the original array. In other words, it mutates the array in place. One way to avoid this is to first concatenate an empty array to the one being sorted (remember that <code>slice</code> and <code>concat</code> return a new array), then run the <code>sort</code> method.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the <code>sort</code> method in the <code>nonMutatingSort</code> function to sort the elements of an array in ascending order. The function should return a new array, and not mutate the <code>globalArray</code> variable.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":17,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b90367417b2b2512b65","title":"Return Part of an Array Using the slice Method","challengeType":1,"forumTopicId":301239,"dashedName":"return-part-of-an-array-using-the-slice-method","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function sliceArray(anim, beginSlice, endSlice) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\nconst inputAnim = [\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"];\nsliceArray(inputAnim, 1, 3);","error":null,"seed":"function sliceArray(anim, beginSlice, endSlice) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\nconst inputAnim = [\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"];\nsliceArray(inputAnim, 1, 3);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function sliceArray(anim, beginSlice, endSlice) {\n  return anim.slice(beginSlice, endSlice);\n}\nconst inputAnim = [\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"];","error":null,"seed":"function sliceArray(anim, beginSlice, endSlice) {\n  return anim.slice(beginSlice, endSlice);\n}\nconst inputAnim = [\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"];"}]],"tests":[{"text":"<p>Your code should use the <code>slice</code> method.</p>","testString":"assert(code.match(/\\.slice/g));"},{"text":"<p>The <code>inputAnim</code> variable should not change.</p>","testString":"assert(\n  JSON.stringify(inputAnim) ===\n    JSON.stringify(['Cat', 'Dog', 'Tiger', 'Zebra', 'Ant'])\n);"},{"text":"<p><code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 3)</code> should return <code>[\"Dog\", \"Tiger\"]</code>.</p>","testString":"assert(\n  JSON.stringify(sliceArray(['Cat', 'Dog', 'Tiger', 'Zebra', 'Ant'], 1, 3)) ===\n    JSON.stringify(['Dog', 'Tiger'])\n);"},{"text":"<p><code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 0, 1)</code> should return <code>[\"Cat\"]</code>.</p>","testString":"assert(\n  JSON.stringify(sliceArray(['Cat', 'Dog', 'Tiger', 'Zebra', 'Ant'], 0, 1)) ===\n    JSON.stringify(['Cat'])\n);"},{"text":"<p><code>sliceArray([\"Cat\", \"Dog\", \"Tiger\", \"Zebra\", \"Ant\"], 1, 4)</code> should return <code>[\"Dog\", \"Tiger\", \"Zebra\"]</code>.</p>","testString":"assert(\n  JSON.stringify(sliceArray(['Cat', 'Dog', 'Tiger', 'Zebra', 'Ant'], 1, 4)) ===\n    JSON.stringify(['Dog', 'Tiger', 'Zebra'])\n);"}],"description":"<section id=\"description\">\n<p>The <code>slice</code> method returns a copy of certain elements of an array. It can take two arguments, the first gives the index of where to begin the slice, the second is the index for where to end the slice (and it's non-inclusive). If the arguments are not provided, the default is to start at the beginning of the array through the end, which is an easy way to make a copy of the entire array. The <code>slice</code> method does not mutate the original array, but returns a new one.</p>\n<p>Here's an example:</p>\n<pre><code class=\"language-js\">const arr = [\"Cat\", \"Dog\", \"Tiger\", \"Zebra\"];\nconst newArray = arr.slice(1, 3);\n</code></pre>\n<p><code>newArray</code> would have the value <code>[\"Dog\", \"Tiger\"]</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the <code>slice</code> method in the <code>sliceArray</code> function to return part of the <code>anim</code> array given the provided <code>beginSlice</code> and <code>endSlice</code> indices. The function should return an array.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":10,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7da9367417b2b2512b69","title":"Sort an Array Alphabetically using the sort Method","challengeType":1,"forumTopicId":18303,"dashedName":"sort-an-array-alphabetically-using-the-sort-method","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function alphabeticalOrder(arr) {\n  // Only change code below this line\n\n  return arr\n  // Only change code above this line\n}\n\nalphabeticalOrder([\"a\", \"d\", \"c\", \"a\", \"z\", \"g\"]);","error":null,"seed":"function alphabeticalOrder(arr) {\n  // Only change code below this line\n\n  return arr\n  // Only change code above this line\n}\n\nalphabeticalOrder([\"a\", \"d\", \"c\", \"a\", \"z\", \"g\"]);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function alphabeticalOrder(arr) {\n  return arr.sort();\n}","error":null,"seed":"function alphabeticalOrder(arr) {\n  return arr.sort();\n}"}]],"tests":[{"text":"<p>Your code should use the <code>sort</code> method.</p>","testString":"assert(code.match(/\\.sort/g));"},{"text":"<p><code>alphabeticalOrder([\"a\", \"d\", \"c\", \"a\", \"z\", \"g\"])</code> should return <code>[\"a\", \"a\", \"c\", \"d\", \"g\", \"z\"]</code>.</p>","testString":"assert(\n  JSON.stringify(alphabeticalOrder(['a', 'd', 'c', 'a', 'z', 'g'])) ===\n    JSON.stringify(['a', 'a', 'c', 'd', 'g', 'z'])\n);"},{"text":"<p><code>alphabeticalOrder([\"x\", \"h\", \"a\", \"m\", \"n\", \"m\"])</code> should return <code>[\"a\", \"h\", \"m\", \"m\", \"n\", \"x\"]</code>.</p>","testString":"assert(\n  JSON.stringify(alphabeticalOrder(['x', 'h', 'a', 'm', 'n', 'm'])) ===\n    JSON.stringify(['a', 'h', 'm', 'm', 'n', 'x'])\n);"},{"text":"<p><code>alphabeticalOrder([\"a\", \"a\", \"a\", \"a\", \"x\", \"t\"])</code> should return <code>[\"a\", \"a\", \"a\", \"a\", \"t\", \"x\"]</code>.</p>","testString":"assert(\n  JSON.stringify(alphabeticalOrder(['a', 'a', 'a', 'a', 'x', 't'])) ===\n    JSON.stringify(['a', 'a', 'a', 'a', 't', 'x'])\n);"}],"description":"<section id=\"description\">\n<p>The <code>sort</code> method sorts the elements of an array according to the callback function.</p>\n<p>For example:</p>\n<pre><code class=\"language-js\">function ascendingOrder(arr) {\n  return arr.sort(function(a, b) {\n    return a - b;\n  });\n}\n\nascendingOrder([1, 5, 2, 3, 4]);\n</code></pre>\n<p>This would return the value <code>[1, 2, 3, 4, 5]</code>.</p>\n<pre><code class=\"language-js\">function reverseAlpha(arr) {\n  return arr.sort(function(a, b) {\n    return a === b ? 0 : a &#x3C; b ? 1 : -1;\n  });\n}\n\nreverseAlpha(['l', 'h', 'z', 'b', 's']);\n</code></pre>\n<p>This would return the value <code>['z', 's', 'l', 'h', 'b']</code>.</p>\n<p>JavaScript's default sorting method is by string Unicode point value, which may return unexpected results. Therefore, it is encouraged to provide a callback function to specify how to sort the array items. When such a callback function, normally called <code>compareFunction</code>, is supplied, the array elements are sorted according to the return value of the <code>compareFunction</code>: If <code>compareFunction(a,b)</code> returns a value less than 0 for two elements <code>a</code> and <code>b</code>, then <code>a</code> will come before <code>b</code>. If <code>compareFunction(a,b)</code> returns a value greater than 0 for two elements <code>a</code> and <code>b</code>, then <code>b</code> will come before <code>a</code>. If <code>compareFunction(a,b)</code> returns a value equal to 0 for two elements <code>a</code> and <code>b</code>, then <code>a</code> and <code>b</code> will remain unchanged.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the <code>sort</code> method in the <code>alphabeticalOrder</code> function to sort the elements of <code>arr</code> in alphabetical order. The function should return the sorted array.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":16,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7daa367417b2b2512b6b","title":"Split a String into an Array Using the split Method","challengeType":1,"forumTopicId":18305,"dashedName":"split-a-string-into-an-array-using-the-split-method","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function splitify(str) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\nsplitify(\"Hello World,I-am code\");","error":null,"seed":"function splitify(str) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\nsplitify(\"Hello World,I-am code\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function splitify(str) {\n  return str.split(/\\W/);\n}","error":null,"seed":"function splitify(str) {\n  return str.split(/\\W/);\n}"}]],"tests":[{"text":"<p>Your code should use the <code>split</code> method.</p>","testString":"assert(code.match(/\\.split/g));"},{"text":"<p><code>splitify(\"Hello World,I-am code\")</code> should return <code>[\"Hello\", \"World\", \"I\", \"am\", \"code\"]</code>.</p>","testString":"assert(\n  JSON.stringify(splitify('Hello World,I-am code')) ===\n    JSON.stringify(['Hello', 'World', 'I', 'am', 'code'])\n);"},{"text":"<p><code>splitify(\"Earth-is-our home\")</code> should return <code>[\"Earth\", \"is\", \"our\", \"home\"]</code>.</p>","testString":"assert(\n  JSON.stringify(splitify('Earth-is-our home')) ===\n    JSON.stringify(['Earth', 'is', 'our', 'home'])\n);"},{"text":"<p><code>splitify(\"This.is.a-sentence\")</code> should return <code>[\"This\", \"is\", \"a\", \"sentence\"]</code>.</p>","testString":"assert(\n  JSON.stringify(splitify('This.is.a-sentence')) ===\n    JSON.stringify(['This', 'is', 'a', 'sentence'])\n);"}],"description":"<section id=\"description\">\n<p>The <code>split</code> method splits a string into an array of strings. It takes an argument for the delimiter, which can be a character to use to break up the string or a regular expression. For example, if the delimiter is a space, you get an array of words, and if the delimiter is an empty string, you get an array of each character in the string.</p>\n<p>Here are two examples that split one string by spaces, then another by digits using a regular expression:</p>\n<pre><code class=\"language-js\">const str = \"Hello World\";\nconst bySpace = str.split(\" \");\n\nconst otherString = \"How9are7you2today\";\nconst byDigits = otherString.split(/\\d/);\n</code></pre>\n<p><code>bySpace</code> would have the value <code>[\"Hello\", \"World\"]</code> and <code>byDigits</code> would have the value <code>[\"How\", \"are\", \"you\", \"today\"]</code>.</p>\n<p>Since strings are immutable, the <code>split</code> method makes it easier to work with them.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the <code>split</code> method inside the <code>splitify</code> function to split <code>str</code> into an array of words. The function should return the array. Note that the words are not always separated by spaces, and the array should not contain punctuation.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":18,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8e367417b2b2512b5c","title":"Understand Functional Programming Terminology","challengeType":1,"forumTopicId":301240,"dashedName":"understand-functional-programming-terminology","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Function that returns a string representing a cup of green tea\nconst prepareGreenTea = () => 'greenTea';\n\n// Function that returns a string representing a cup of black tea\nconst prepareBlackTea = () => 'blackTea';\n\n/*\nGiven a function (representing the tea type) and number of cups needed, the\nfollowing function returns an array of strings (each representing a cup of\na specific type of tea).\n*/\nconst getTea = (prepareTea, numOfCups) => {\n  const teaCups = [];\n\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n  return teaCups;\n};\n\n// Only change code below this line\nconst tea4GreenTeamFCC = null;\nconst tea4BlackTeamFCC = null;\n// Only change code above this line\n\nconsole.log(\n  tea4GreenTeamFCC,\n  tea4BlackTeamFCC\n);","error":null,"seed":"// Function that returns a string representing a cup of green tea\nconst prepareGreenTea = () => 'greenTea';\n\n// Function that returns a string representing a cup of black tea\nconst prepareBlackTea = () => 'blackTea';\n\n/*\nGiven a function (representing the tea type) and number of cups needed, the\nfollowing function returns an array of strings (each representing a cup of\na specific type of tea).\n*/\nconst getTea = (prepareTea, numOfCups) => {\n  const teaCups = [];\n\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n  return teaCups;\n};\n\n// Only change code below this line\nconst tea4GreenTeamFCC = null;\nconst tea4BlackTeamFCC = null;\n// Only change code above this line\n\nconsole.log(\n  tea4GreenTeamFCC,\n  tea4BlackTeamFCC\n);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const prepareGreenTea = () => 'greenTea';\nconst prepareBlackTea = () => 'blackTea';\n\nconst getTea = (prepareTea, numOfCups) => {\n  const teaCups = [];\n\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n  return teaCups;\n};\n\nconst tea4BlackTeamFCC = getTea(prepareBlackTea, 13);\nconst tea4GreenTeamFCC = getTea(prepareGreenTea, 27);","error":null,"seed":"const prepareGreenTea = () => 'greenTea';\nconst prepareBlackTea = () => 'blackTea';\n\nconst getTea = (prepareTea, numOfCups) => {\n  const teaCups = [];\n\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n  return teaCups;\n};\n\nconst tea4BlackTeamFCC = getTea(prepareBlackTea, 13);\nconst tea4GreenTeamFCC = getTea(prepareGreenTea, 27);"}]],"tests":[{"text":"<p>The <code>tea4GreenTeamFCC</code> variable should hold 27 cups of green tea for the team.</p>","testString":"assert(tea4GreenTeamFCC.length === 27);"},{"text":"<p>The <code>tea4GreenTeamFCC</code> variable should hold cups of green tea.</p>","testString":"assert(tea4GreenTeamFCC[0] === 'greenTea');"},{"text":"<p>The <code>tea4BlackTeamFCC</code> variable should hold 13 cups of black tea.</p>","testString":"assert(tea4BlackTeamFCC.length === 13);"},{"text":"<p>The <code>tea4BlackTeamFCC</code> variable should hold cups of black tea.</p>","testString":"assert(tea4BlackTeamFCC[0] === 'blackTea');"}],"description":"<section id=\"description\">\n<p>The FCC Team had a mood swing and now wants two types of tea: green tea and black tea. General Fact: Client mood swings are pretty common.</p>\n<p>With that information, we'll need to revisit the <code>getTea</code> function from last challenge to handle various tea requests. We can modify <code>getTea</code> to accept a function as a parameter to be able to change the type of tea it prepares. This makes <code>getTea</code> more flexible, and gives the programmer more control when client requests change.</p>\n<p>But first, let's cover some functional terminology:</p>\n<p><dfn>Callbacks</dfn> are the functions that are slipped or passed into another function to decide the invocation of that function. You may have seen them passed to other methods, for example in <code>filter</code>, the callback function tells JavaScript the criteria for how to filter an array.</p>\n<p>Functions that can be assigned to a variable, passed into another function, or returned from another function just like any other normal value, are called <dfn>first class</dfn> functions. In JavaScript, all functions are first class functions.</p>\n<p>The functions that take a function as an argument, or return a function as a return value, are called <dfn>higher order</dfn> functions.</p>\n<p>When functions are passed in to or returned from another function, then those functions which were passed in or returned can be called a <dfn>lambda</dfn>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Prepare 27 cups of green tea and 13 cups of black tea and store them in <code>tea4GreenTeamFCC</code> and <code>tea4BlackTeamFCC</code> variables, respectively. Note that the <code>getTea</code> function has been modified so it now takes a function as the first argument.</p>\n<p>Note: The data (the number of cups of tea) is supplied as the last argument. We'll discuss this more in later lessons.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":1,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8e367417b2b2512b5d","title":"Understand the Hazards of Using Imperative Code","challengeType":1,"forumTopicId":301241,"dashedName":"understand-the-hazards-of-using-imperative-code","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// tabs is an array of titles of each site open within the window\nconst Window = function(tabs) {\n  this.tabs = tabs; // We keep a record of the array inside the object\n};\n\n// When you join two windows into one window\nWindow.prototype.join = function(otherWindow) {\n  this.tabs = this.tabs.concat(otherWindow.tabs);\n  return this;\n};\n\n// When you open a new tab at the end\nWindow.prototype.tabOpen = function(tab) {\n  this.tabs.push('new tab'); // Let's open a new tab for now\n  return this;\n};\n\n// When you close a tab\nWindow.prototype.tabClose = function(index) {\n\n  // Only change code below this line\n\n  const tabsBeforeIndex = this.tabs.splice(0, index); // Get the tabs before the tab\n  const tabsAfterIndex = this.tabs.splice(index + 1); // Get the tabs after the tab\n\n  this.tabs = tabsBeforeIndex.concat(tabsAfterIndex); // Join them together\n\n  // Only change code above this line\n\n  return this;\n };\n\n// Let's create three browser windows\nconst workWindow = new Window(['GMail', 'Inbox', 'Work mail', 'Docs', 'freeCodeCamp']); // Your mailbox, drive, and other work sites\nconst socialWindow = new Window(['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium']); // Social sites\nconst videoWindow = new Window(['Netflix', 'YouTube', 'Vimeo', 'Vine']); // Entertainment sites\n\n// Now perform the tab opening, closing, and other operations\nconst finalTabs = socialWindow\n  .tabOpen() // Open a new tab for cat memes\n  .join(videoWindow.tabClose(2)) // Close third tab in video window, and join\n  .join(workWindow.tabClose(1).tabOpen());\nconsole.log(finalTabs.tabs);","error":null,"seed":"// tabs is an array of titles of each site open within the window\nconst Window = function(tabs) {\n  this.tabs = tabs; // We keep a record of the array inside the object\n};\n\n// When you join two windows into one window\nWindow.prototype.join = function(otherWindow) {\n  this.tabs = this.tabs.concat(otherWindow.tabs);\n  return this;\n};\n\n// When you open a new tab at the end\nWindow.prototype.tabOpen = function(tab) {\n  this.tabs.push('new tab'); // Let's open a new tab for now\n  return this;\n};\n\n// When you close a tab\nWindow.prototype.tabClose = function(index) {\n\n  // Only change code below this line\n\n  const tabsBeforeIndex = this.tabs.splice(0, index); // Get the tabs before the tab\n  const tabsAfterIndex = this.tabs.splice(index + 1); // Get the tabs after the tab\n\n  this.tabs = tabsBeforeIndex.concat(tabsAfterIndex); // Join them together\n\n  // Only change code above this line\n\n  return this;\n };\n\n// Let's create three browser windows\nconst workWindow = new Window(['GMail', 'Inbox', 'Work mail', 'Docs', 'freeCodeCamp']); // Your mailbox, drive, and other work sites\nconst socialWindow = new Window(['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium']); // Social sites\nconst videoWindow = new Window(['Netflix', 'YouTube', 'Vimeo', 'Vine']); // Entertainment sites\n\n// Now perform the tab opening, closing, and other operations\nconst finalTabs = socialWindow\n  .tabOpen() // Open a new tab for cat memes\n  .join(videoWindow.tabClose(2)) // Close third tab in video window, and join\n  .join(workWindow.tabClose(1).tabOpen());\nconsole.log(finalTabs.tabs);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const Window = function(tabs) {\n  this.tabs = tabs;\n};\n\nWindow.prototype.join = function(otherWindow) {\n  this.tabs = this.tabs.concat(otherWindow.tabs);\n  return this;\n};\n\nWindow.prototype.tabOpen = function(tab) {\n  this.tabs.push('new tab');\n  return this;\n};\n\nWindow.prototype.tabClose = function(index) {\n  const tabsBeforeIndex = this.tabs.slice(0, index);\n  const tabsAfterIndex = this.tabs.slice(index + 1);\n\n  this.tabs = tabsBeforeIndex.concat(tabsAfterIndex);\n  return this;\n };\n\nconst workWindow = new Window(['GMail', 'Inbox', 'Work mail', 'Docs', 'freeCodeCamp']);\nconst socialWindow = new Window(['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium']);\nconst videoWindow = new Window(['Netflix', 'YouTube', 'Vimeo', 'Vine']);\n\nconst finalTabs = socialWindow\n  .tabOpen()\n  .join(videoWindow.tabClose(2))\n  .join(workWindow.tabClose(1).tabOpen());","error":null,"seed":"const Window = function(tabs) {\n  this.tabs = tabs;\n};\n\nWindow.prototype.join = function(otherWindow) {\n  this.tabs = this.tabs.concat(otherWindow.tabs);\n  return this;\n};\n\nWindow.prototype.tabOpen = function(tab) {\n  this.tabs.push('new tab');\n  return this;\n};\n\nWindow.prototype.tabClose = function(index) {\n  const tabsBeforeIndex = this.tabs.slice(0, index);\n  const tabsAfterIndex = this.tabs.slice(index + 1);\n\n  this.tabs = tabsBeforeIndex.concat(tabsAfterIndex);\n  return this;\n };\n\nconst workWindow = new Window(['GMail', 'Inbox', 'Work mail', 'Docs', 'freeCodeCamp']);\nconst socialWindow = new Window(['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium']);\nconst videoWindow = new Window(['Netflix', 'YouTube', 'Vimeo', 'Vine']);\n\nconst finalTabs = socialWindow\n  .tabOpen()\n  .join(videoWindow.tabClose(2))\n  .join(workWindow.tabClose(1).tabOpen());"}]],"tests":[{"text":"<p><code>finalTabs.tabs</code> should be <code>['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium', 'new tab', 'Netflix', 'YouTube', 'Vine', 'GMail', 'Work mail', 'Docs', 'freeCodeCamp', 'new tab']</code></p>","testString":"assert.deepEqual(finalTabs.tabs, [\n  'FB',\n  'Gitter',\n  'Reddit',\n  'Twitter',\n  'Medium',\n  'new tab',\n  'Netflix',\n  'YouTube',\n  'Vine',\n  'GMail',\n  'Work mail',\n  'Docs',\n  'freeCodeCamp',\n  'new tab'\n]);"}],"description":"<section id=\"description\">\n<p>Functional programming is a good habit. It keeps your code easy to manage, and saves you from sneaky bugs. But before we get there, let's look at an imperative approach to programming to highlight where you may have issues.</p>\n<p>In English (and many other languages), the imperative tense is used to give commands. Similarly, an imperative style in programming is one that gives the computer a set of statements to perform a task.</p>\n<p>Often the statements change the state of the program, like updating global variables. A classic example is writing a <code>for</code> loop that gives exact directions to iterate over the indices of an array.</p>\n<p>In contrast, functional programming is a form of declarative programming. You tell the computer what you want done by calling a method or function.</p>\n<p>JavaScript offers many predefined methods that handle common tasks so you don't need to write out how the computer should perform them. For example, instead of using the <code>for</code> loop mentioned above, you could call the <code>map</code> method which handles the details of iterating over an array. This helps to avoid semantic errors, like the \"Off By One Errors\" that were covered in the Debugging section.</p>\n<p>Consider the scenario: you are browsing the web in your browser, and want to track the tabs you have opened. Let's try to model this using some simple object-oriented code.</p>\n<p>A Window object is made up of tabs, and you usually have more than one Window open. The titles of each open site in each Window object is held in an array. After working in the browser (opening new tabs, merging windows, and closing tabs), you want to print the tabs that are still open. Closed tabs are removed from the array and new tabs (for simplicity) get added to the end of it.</p>\n<p>The code editor shows an implementation of this functionality with functions for <code>tabOpen()</code>, <code>tabClose()</code>, and <code>join()</code>. The array <code>tabs</code> is part of the Window object that stores the name of the open pages.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Examine the code in the editor. It's using a method that has side effects in the program, causing incorrect behaviour. The final list of open tabs, stored in <code>finalTabs.tabs</code>, should be <code>['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium', 'new tab', 'Netflix', 'YouTube', 'Vine', 'GMail', 'Work mail', 'Docs', 'freeCodeCamp', 'new tab']</code> but the list produced by the code is slightly different.</p>\n<p>Change <code>Window.prototype.tabClose</code> so that it removes the correct tab.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":2,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b88367417b2b2512b45","title":"Use Higher-Order Functions map, filter, or reduce to Solve a Complex Problem","challengeType":1,"forumTopicId":301311,"dashedName":"use-higher-order-functions-map-filter-or-reduce-to-solve-a-complex-problem","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const squareList = arr => {\n  // Only change code below this line\n  return arr;\n  // Only change code above this line\n};\n\nconst squaredIntegers = squareList([-3, 4.8, 5, 3, -3.2]);\nconsole.log(squaredIntegers);","error":null,"seed":"const squareList = arr => {\n  // Only change code below this line\n  return arr;\n  // Only change code above this line\n};\n\nconst squaredIntegers = squareList([-3, 4.8, 5, 3, -3.2]);\nconsole.log(squaredIntegers);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const squareList = arr => {\n  const positiveIntegers = arr.filter(num => {\n    return num >= 0 && Number.isInteger(num);\n  });\n  const squaredIntegers = positiveIntegers.map(num => {\n    return num ** 2;\n  });\n  return squaredIntegers;\n};","error":null,"seed":"const squareList = arr => {\n  const positiveIntegers = arr.filter(num => {\n    return num >= 0 && Number.isInteger(num);\n  });\n  const squaredIntegers = positiveIntegers.map(num => {\n    return num ** 2;\n  });\n  return squaredIntegers;\n};"}]],"tests":[{"text":"<p><code>squareList</code> should be a <code>function</code>.</p>","testString":"assert.typeOf(squareList, 'function'),\n  '<code>squareList</code> should be a <code>function</code>';"},{"text":"<p><code>for</code>, <code>while</code>, and <code>forEach</code> should not be used.</p>","testString":"assert(!code.match(/for|while|forEach/g));"},{"text":"<p><code>map</code>, <code>filter</code>, or <code>reduce</code> should be used.</p>","testString":"assert(\n  __helpers\n    .removeWhiteSpace(code)\n    .match(/\\.(map|filter|reduce)\\(/g)\n);"},{"text":"<p>The function should return an <code>array</code>.</p>","testString":"assert(Array.isArray(squareList([4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2])));"},{"text":"<p><code>squareList([4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2])</code> should return <code>[16, 1764, 36]</code>.</p>","testString":"assert.deepStrictEqual(squareList([4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2]), [\n  16,\n  1764,\n  36\n]);"},{"text":"<p><code>squareList([-3.7, -5, 3, 10, 12.5, 7, -4.5, -17, 0.3])</code> should return <code>[9, 100, 49]</code>.</p>","testString":"assert.deepStrictEqual(squareList([-3.7, -5, 3, 10, 12.5, 7, -4.5, -17, 0.3]), [\n  9,\n  100,\n  49\n]);"}],"description":"<section id=\"description\">\n<p>Now that you have worked through a few challenges using higher-order functions like <code>map()</code>, <code>filter()</code>, and <code>reduce()</code>, you now get to apply them to solve a more complex challenge.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Complete the code for the <code>squareList</code> function using any combination of <code>map()</code>, <code>filter()</code>, and <code>reduce()</code>. The function should return a new array containing the squares of <em>only</em> the positive integers (decimal numbers are not integers) when an array of real numbers is passed to it. An example of an array of real numbers is <code>[-3, 4.8, 5, 3, -3.2]</code>.</p>\n<p><strong>Note:</strong> Your function should not use any kind of <code>for</code> or <code>while</code> loops or the <code>forEach()</code> function.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":15,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7dab367417b2b2512b6e","title":"Use the every Method to Check that Every Element in an Array Meets a Criteria","challengeType":1,"forumTopicId":301312,"dashedName":"use-the-every-method-to-check-that-every-element-in-an-array-meets-a-criteria","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function checkPositive(arr) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\ncheckPositive([1, 2, 3, -4, 5]);","error":null,"seed":"function checkPositive(arr) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\ncheckPositive([1, 2, 3, -4, 5]);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function checkPositive(arr) {\n  return arr.every(num => num > 0);\n}","error":null,"seed":"function checkPositive(arr) {\n  return arr.every(num => num > 0);\n}"}]],"tests":[{"text":"<p>Your code should use the <code>every</code> method.</p>","testString":"assert(code.match(/\\.every/g));"},{"text":"<p><code>checkPositive([1, 2, 3, -4, 5])</code> should return <code>false</code>.</p>","testString":"assert.isFalse(checkPositive([1, 2, 3, -4, 5]));"},{"text":"<p><code>checkPositive([1, 2, 3, 4, 5])</code> should return <code>true</code>.</p>","testString":"assert.isTrue(checkPositive([1, 2, 3, 4, 5]));"},{"text":"<p><code>checkPositive([1, -2, 3, -4, 5])</code> should return <code>false</code>.</p>","testString":"assert.isFalse(checkPositive([1, -2, 3, -4, 5]));"}],"description":"<section id=\"description\">\n<p>The <code>every</code> method works with arrays to check if <em>every</em> element passes a particular test. It returns a Boolean value - <code>true</code> if all values meet the criteria, <code>false</code> if not.</p>\n<p>For example, the following code would check if every element in the <code>numbers</code> array is less than 10:</p>\n<pre><code class=\"language-js\">const numbers = [1, 5, 8, 0, 10, 11];\n\nnumbers.every(function(currentValue) {\n  return currentValue &#x3C; 10;\n});\n</code></pre>\n<p>The <code>every</code> method would return <code>false</code> here.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the <code>every</code> method inside the <code>checkPositive</code> function to check if every element in <code>arr</code> is positive. The function should return a Boolean value.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":21,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8f367417b2b2512b63","title":"Use the filter Method to Extract Data from an Array","challengeType":1,"forumTopicId":18179,"dashedName":"use-the-filter-method-to-extract-data-from-an-array","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// The global variable\nconst watchList = [\n  {\n    \"Title\": \"Inception\",\n    \"Year\": \"2010\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"16 Jul 2010\",\n    \"Runtime\": \"148 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Christopher Nolan\",\n    \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy\",\n    \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n    \"Language\": \"English, Japanese, French\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.8\",\n    \"imdbVotes\": \"1,446,708\",\n    \"imdbID\": \"tt1375666\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Interstellar\",\n    \"Year\": \"2014\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"07 Nov 2014\",\n    \"Runtime\": \"169 min\",\n    \"Genre\": \"Adventure, Drama, Sci-Fi\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n    \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n    \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n    \"Language\": \"English\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.6\",\n    \"imdbVotes\": \"910,366\",\n    \"imdbID\": \"tt0816692\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"The Dark Knight\",\n    \"Year\": \"2008\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Jul 2008\",\n    \"Runtime\": \"152 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n    \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n    \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n    \"Language\": \"English, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"82\",\n    \"imdbRating\": \"9.0\",\n    \"imdbVotes\": \"1,652,832\",\n    \"imdbID\": \"tt0468569\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Batman Begins\",\n    \"Year\": \"2005\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"15 Jun 2005\",\n    \"Runtime\": \"140 min\",\n    \"Genre\": \"Action, Adventure\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n    \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n    \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n    \"Language\": \"English, Urdu, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n    \"Metascore\": \"70\",\n    \"imdbRating\": \"8.3\",\n    \"imdbVotes\": \"972,584\",\n    \"imdbID\": \"tt0372784\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Avatar\",\n    \"Year\": \"2009\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Dec 2009\",\n    \"Runtime\": \"162 min\",\n    \"Genre\": \"Action, Adventure, Fantasy\",\n    \"Director\": \"James Cameron\",\n    \"Writer\": \"James Cameron\",\n    \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n    \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n    \"Language\": \"English, Spanish\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n    \"Metascore\": \"83\",\n    \"imdbRating\": \"7.9\",\n    \"imdbVotes\": \"876,575\",\n    \"imdbID\": \"tt0499549\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  }\n];\n\n// Only change code below this line\n\nconst filteredList = \"\";\n\n// Only change code above this line\n\nconsole.log(filteredList);","error":null,"seed":"// The global variable\nconst watchList = [\n  {\n    \"Title\": \"Inception\",\n    \"Year\": \"2010\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"16 Jul 2010\",\n    \"Runtime\": \"148 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Christopher Nolan\",\n    \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy\",\n    \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n    \"Language\": \"English, Japanese, French\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.8\",\n    \"imdbVotes\": \"1,446,708\",\n    \"imdbID\": \"tt1375666\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Interstellar\",\n    \"Year\": \"2014\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"07 Nov 2014\",\n    \"Runtime\": \"169 min\",\n    \"Genre\": \"Adventure, Drama, Sci-Fi\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n    \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n    \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n    \"Language\": \"English\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.6\",\n    \"imdbVotes\": \"910,366\",\n    \"imdbID\": \"tt0816692\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"The Dark Knight\",\n    \"Year\": \"2008\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Jul 2008\",\n    \"Runtime\": \"152 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n    \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n    \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n    \"Language\": \"English, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"82\",\n    \"imdbRating\": \"9.0\",\n    \"imdbVotes\": \"1,652,832\",\n    \"imdbID\": \"tt0468569\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Batman Begins\",\n    \"Year\": \"2005\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"15 Jun 2005\",\n    \"Runtime\": \"140 min\",\n    \"Genre\": \"Action, Adventure\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n    \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n    \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n    \"Language\": \"English, Urdu, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n    \"Metascore\": \"70\",\n    \"imdbRating\": \"8.3\",\n    \"imdbVotes\": \"972,584\",\n    \"imdbID\": \"tt0372784\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Avatar\",\n    \"Year\": \"2009\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Dec 2009\",\n    \"Runtime\": \"162 min\",\n    \"Genre\": \"Action, Adventure, Fantasy\",\n    \"Director\": \"James Cameron\",\n    \"Writer\": \"James Cameron\",\n    \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n    \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n    \"Language\": \"English, Spanish\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n    \"Metascore\": \"83\",\n    \"imdbRating\": \"7.9\",\n    \"imdbVotes\": \"876,575\",\n    \"imdbID\": \"tt0499549\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  }\n];\n\n// Only change code below this line\n\nconst filteredList = \"\";\n\n// Only change code above this line\n\nconsole.log(filteredList);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const watchList = [\n  {\n    \"Title\": \"Inception\",\n    \"Year\": \"2010\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"16 Jul 2010\",\n    \"Runtime\": \"148 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Christopher Nolan\",\n    \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy\",\n    \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n    \"Language\": \"English, Japanese, French\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.8\",\n    \"imdbVotes\": \"1,446,708\",\n    \"imdbID\": \"tt1375666\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Interstellar\",\n    \"Year\": \"2014\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"07 Nov 2014\",\n    \"Runtime\": \"169 min\",\n    \"Genre\": \"Adventure, Drama, Sci-Fi\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n    \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n    \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n    \"Language\": \"English\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.6\",\n    \"imdbVotes\": \"910,366\",\n    \"imdbID\": \"tt0816692\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"The Dark Knight\",\n    \"Year\": \"2008\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Jul 2008\",\n    \"Runtime\": \"152 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n    \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n    \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n    \"Language\": \"English, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"82\",\n    \"imdbRating\": \"9.0\",\n    \"imdbVotes\": \"1,652,832\",\n    \"imdbID\": \"tt0468569\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Batman Begins\",\n    \"Year\": \"2005\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"15 Jun 2005\",\n    \"Runtime\": \"140 min\",\n    \"Genre\": \"Action, Adventure\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n    \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n    \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n    \"Language\": \"English, Urdu, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n    \"Metascore\": \"70\",\n    \"imdbRating\": \"8.3\",\n    \"imdbVotes\": \"972,584\",\n    \"imdbID\": \"tt0372784\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Avatar\",\n    \"Year\": \"2009\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Dec 2009\",\n    \"Runtime\": \"162 min\",\n    \"Genre\": \"Action, Adventure, Fantasy\",\n    \"Director\": \"James Cameron\",\n    \"Writer\": \"James Cameron\",\n    \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n    \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n    \"Language\": \"English, Spanish\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n    \"Metascore\": \"83\",\n    \"imdbRating\": \"7.9\",\n    \"imdbVotes\": \"876,575\",\n    \"imdbID\": \"tt0499549\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  }\n];\n\nconst filteredList = watchList.filter(e => e.imdbRating >= 8).map( ({Title: title, imdbRating: rating}) => ({title, rating}) );","error":null,"seed":"const watchList = [\n  {\n    \"Title\": \"Inception\",\n    \"Year\": \"2010\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"16 Jul 2010\",\n    \"Runtime\": \"148 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Christopher Nolan\",\n    \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy\",\n    \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n    \"Language\": \"English, Japanese, French\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.8\",\n    \"imdbVotes\": \"1,446,708\",\n    \"imdbID\": \"tt1375666\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Interstellar\",\n    \"Year\": \"2014\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"07 Nov 2014\",\n    \"Runtime\": \"169 min\",\n    \"Genre\": \"Adventure, Drama, Sci-Fi\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n    \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n    \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n    \"Language\": \"English\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.6\",\n    \"imdbVotes\": \"910,366\",\n    \"imdbID\": \"tt0816692\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"The Dark Knight\",\n    \"Year\": \"2008\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Jul 2008\",\n    \"Runtime\": \"152 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n    \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n    \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n    \"Language\": \"English, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"82\",\n    \"imdbRating\": \"9.0\",\n    \"imdbVotes\": \"1,652,832\",\n    \"imdbID\": \"tt0468569\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Batman Begins\",\n    \"Year\": \"2005\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"15 Jun 2005\",\n    \"Runtime\": \"140 min\",\n    \"Genre\": \"Action, Adventure\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n    \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n    \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n    \"Language\": \"English, Urdu, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n    \"Metascore\": \"70\",\n    \"imdbRating\": \"8.3\",\n    \"imdbVotes\": \"972,584\",\n    \"imdbID\": \"tt0372784\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Avatar\",\n    \"Year\": \"2009\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Dec 2009\",\n    \"Runtime\": \"162 min\",\n    \"Genre\": \"Action, Adventure, Fantasy\",\n    \"Director\": \"James Cameron\",\n    \"Writer\": \"James Cameron\",\n    \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n    \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n    \"Language\": \"English, Spanish\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n    \"Metascore\": \"83\",\n    \"imdbRating\": \"7.9\",\n    \"imdbVotes\": \"876,575\",\n    \"imdbID\": \"tt0499549\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  }\n];\n\nconst filteredList = watchList.filter(e => e.imdbRating >= 8).map( ({Title: title, imdbRating: rating}) => ({title, rating}) );"}]],"tests":[{"text":"<p>The <code>watchList</code> variable should not change.</p>","testString":"assert(\n  watchList[0].Title === 'Inception' && watchList[4].Director == 'James Cameron'\n);"},{"text":"<p>Your code should use the <code>filter</code> method.</p>","testString":"assert(code.match(/\\s*\\.\\s*filter/g));"},{"text":"<p>Your code should not use a <code>for</code> loop.</p>","testString":"assert(!code.match(/for\\s*?\\([\\s\\S]*?\\)/g));"},{"text":"<p><code>filteredList</code> should equal <code>[{\"title\": \"Inception\", \"rating\": \"8.8\"}, {\"title\": \"Interstellar\", \"rating\": \"8.6\"}, {\"title\": \"The Dark Knight\", \"rating\": \"9.0\"}, {\"title\": \"Batman Begins\", \"rating\": \"8.3\"}]</code>.</p>","testString":"assert.deepEqual(filteredList, [\n  { title: 'Inception', rating: '8.8' },\n  { title: 'Interstellar', rating: '8.6' },\n  { title: 'The Dark Knight', rating: '9.0' },\n  { title: 'Batman Begins', rating: '8.3' }\n]);"}],"description":"<section id=\"description\">\n<p>Another useful array function is <code>Array.prototype.filter()</code>, or simply <code>filter()</code>.</p>\n<p><code>filter</code> calls a function on each element of an array and returns a new array containing only the elements for which that function returns a truthy value - that is, a value which returns <code>true</code> if passed to the <code>Boolean()</code> constructor. In other words, it filters the array, based on the function passed to it. Like <code>map</code>, it does this without needing to modify the original array.</p>\n<p>The callback function accepts three arguments. The first argument is the current element being processed. The second is the index of that element and the third is the array upon which the <code>filter</code> method was called.</p>\n<p>See below for an example using the <code>filter</code> method on the <code>users</code> array to return a new array containing only the users under the age of 30. For simplicity, the example only uses the first argument of the callback.</p>\n<pre><code class=\"language-js\">const users = [\n  { name: 'John', age: 34 },\n  { name: 'Amy', age: 20 },\n  { name: 'camperCat', age: 10 }\n];\n\nconst usersUnder30 = users.filter(user => user.age &#x3C; 30);\nconsole.log(usersUnder30); \n</code></pre>\n<p>The console would display the value <code>[ { name: 'Amy', age: 20 }, { name: 'camperCat', age: 10 } ]</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The variable <code>watchList</code> holds an array of objects with information on several movies. Use a combination of <code>filter</code> and <code>map</code> on <code>watchList</code> to assign a new array of objects with only <code>title</code> and <code>rating</code> keys. The new array should only include objects where <code>imdbRating</code> is greater than or equal to 8.0. Note that the <code>rating</code> values are saved as strings in the object and you may need to convert them into numbers to perform mathematical operations on them.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":8,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7b8f367417b2b2512b61","title":"Use the map Method to Extract Data from an Array","challengeType":1,"forumTopicId":18214,"dashedName":"use-the-map-method-to-extract-data-from-an-array","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// The global variable\nconst watchList = [\n  {\n    \"Title\": \"Inception\",\n    \"Year\": \"2010\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"16 Jul 2010\",\n    \"Runtime\": \"148 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Christopher Nolan\",\n    \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy\",\n    \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n    \"Language\": \"English, Japanese, French\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.8\",\n    \"imdbVotes\": \"1,446,708\",\n    \"imdbID\": \"tt1375666\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Interstellar\",\n    \"Year\": \"2014\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"07 Nov 2014\",\n    \"Runtime\": \"169 min\",\n    \"Genre\": \"Adventure, Drama, Sci-Fi\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n    \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n    \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n    \"Language\": \"English\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.6\",\n    \"imdbVotes\": \"910,366\",\n    \"imdbID\": \"tt0816692\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"The Dark Knight\",\n    \"Year\": \"2008\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Jul 2008\",\n    \"Runtime\": \"152 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n    \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n    \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n    \"Language\": \"English, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"82\",\n    \"imdbRating\": \"9.0\",\n    \"imdbVotes\": \"1,652,832\",\n    \"imdbID\": \"tt0468569\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Batman Begins\",\n    \"Year\": \"2005\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"15 Jun 2005\",\n    \"Runtime\": \"140 min\",\n    \"Genre\": \"Action, Adventure\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n    \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n    \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n    \"Language\": \"English, Urdu, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n    \"Metascore\": \"70\",\n    \"imdbRating\": \"8.3\",\n    \"imdbVotes\": \"972,584\",\n    \"imdbID\": \"tt0372784\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Avatar\",\n    \"Year\": \"2009\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Dec 2009\",\n    \"Runtime\": \"162 min\",\n    \"Genre\": \"Action, Adventure, Fantasy\",\n    \"Director\": \"James Cameron\",\n    \"Writer\": \"James Cameron\",\n    \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n    \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n    \"Language\": \"English, Spanish\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n    \"Metascore\": \"83\",\n    \"imdbRating\": \"7.9\",\n    \"imdbVotes\": \"876,575\",\n    \"imdbID\": \"tt0499549\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  }\n];\n\n// Only change code below this line\n\nconst ratings = [];\nfor (let i = 0; i < watchList.length; i++) {\n  ratings.push({title: watchList[i][\"Title\"], rating: watchList[i][\"imdbRating\"]});\n}\n\n// Only change code above this line\n\nconsole.log(JSON.stringify(ratings));","error":null,"seed":"// The global variable\nconst watchList = [\n  {\n    \"Title\": \"Inception\",\n    \"Year\": \"2010\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"16 Jul 2010\",\n    \"Runtime\": \"148 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Christopher Nolan\",\n    \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy\",\n    \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n    \"Language\": \"English, Japanese, French\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.8\",\n    \"imdbVotes\": \"1,446,708\",\n    \"imdbID\": \"tt1375666\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Interstellar\",\n    \"Year\": \"2014\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"07 Nov 2014\",\n    \"Runtime\": \"169 min\",\n    \"Genre\": \"Adventure, Drama, Sci-Fi\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n    \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n    \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n    \"Language\": \"English\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.6\",\n    \"imdbVotes\": \"910,366\",\n    \"imdbID\": \"tt0816692\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"The Dark Knight\",\n    \"Year\": \"2008\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Jul 2008\",\n    \"Runtime\": \"152 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n    \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n    \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n    \"Language\": \"English, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"82\",\n    \"imdbRating\": \"9.0\",\n    \"imdbVotes\": \"1,652,832\",\n    \"imdbID\": \"tt0468569\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Batman Begins\",\n    \"Year\": \"2005\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"15 Jun 2005\",\n    \"Runtime\": \"140 min\",\n    \"Genre\": \"Action, Adventure\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n    \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n    \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n    \"Language\": \"English, Urdu, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n    \"Metascore\": \"70\",\n    \"imdbRating\": \"8.3\",\n    \"imdbVotes\": \"972,584\",\n    \"imdbID\": \"tt0372784\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Avatar\",\n    \"Year\": \"2009\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Dec 2009\",\n    \"Runtime\": \"162 min\",\n    \"Genre\": \"Action, Adventure, Fantasy\",\n    \"Director\": \"James Cameron\",\n    \"Writer\": \"James Cameron\",\n    \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n    \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n    \"Language\": \"English, Spanish\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n    \"Metascore\": \"83\",\n    \"imdbRating\": \"7.9\",\n    \"imdbVotes\": \"876,575\",\n    \"imdbID\": \"tt0499549\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  }\n];\n\n// Only change code below this line\n\nconst ratings = [];\nfor (let i = 0; i < watchList.length; i++) {\n  ratings.push({title: watchList[i][\"Title\"], rating: watchList[i][\"imdbRating\"]});\n}\n\n// Only change code above this line\n\nconsole.log(JSON.stringify(ratings));"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const watchList = [\n  {\n    \"Title\": \"Inception\",\n    \"Year\": \"2010\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"16 Jul 2010\",\n    \"Runtime\": \"148 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Christopher Nolan\",\n    \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy\",\n    \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n    \"Language\": \"English, Japanese, French\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.8\",\n    \"imdbVotes\": \"1,446,708\",\n    \"imdbID\": \"tt1375666\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Interstellar\",\n    \"Year\": \"2014\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"07 Nov 2014\",\n    \"Runtime\": \"169 min\",\n    \"Genre\": \"Adventure, Drama, Sci-Fi\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n    \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n    \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n    \"Language\": \"English\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.6\",\n    \"imdbVotes\": \"910,366\",\n    \"imdbID\": \"tt0816692\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"The Dark Knight\",\n    \"Year\": \"2008\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Jul 2008\",\n    \"Runtime\": \"152 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n    \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n    \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n    \"Language\": \"English, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"82\",\n    \"imdbRating\": \"9.0\",\n    \"imdbVotes\": \"1,652,832\",\n    \"imdbID\": \"tt0468569\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Batman Begins\",\n    \"Year\": \"2005\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"15 Jun 2005\",\n    \"Runtime\": \"140 min\",\n    \"Genre\": \"Action, Adventure\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n    \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n    \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n    \"Language\": \"English, Urdu, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n    \"Metascore\": \"70\",\n    \"imdbRating\": \"8.3\",\n    \"imdbVotes\": \"972,584\",\n    \"imdbID\": \"tt0372784\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Avatar\",\n    \"Year\": \"2009\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Dec 2009\",\n    \"Runtime\": \"162 min\",\n    \"Genre\": \"Action, Adventure, Fantasy\",\n    \"Director\": \"James Cameron\",\n    \"Writer\": \"James Cameron\",\n    \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n    \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n    \"Language\": \"English, Spanish\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n    \"Metascore\": \"83\",\n    \"imdbRating\": \"7.9\",\n    \"imdbVotes\": \"876,575\",\n    \"imdbID\": \"tt0499549\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  }\n];\n\nconst ratings = watchList.map(function(movie) {\n  return {\n    title: movie[\"Title\"],\n    rating: movie[\"imdbRating\"]\n  }\n});","error":null,"seed":"const watchList = [\n  {\n    \"Title\": \"Inception\",\n    \"Year\": \"2010\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"16 Jul 2010\",\n    \"Runtime\": \"148 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Christopher Nolan\",\n    \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy\",\n    \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n    \"Language\": \"English, Japanese, French\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.8\",\n    \"imdbVotes\": \"1,446,708\",\n    \"imdbID\": \"tt1375666\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Interstellar\",\n    \"Year\": \"2014\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"07 Nov 2014\",\n    \"Runtime\": \"169 min\",\n    \"Genre\": \"Adventure, Drama, Sci-Fi\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n    \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n    \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n    \"Language\": \"English\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.6\",\n    \"imdbVotes\": \"910,366\",\n    \"imdbID\": \"tt0816692\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"The Dark Knight\",\n    \"Year\": \"2008\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Jul 2008\",\n    \"Runtime\": \"152 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n    \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n    \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n    \"Language\": \"English, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"82\",\n    \"imdbRating\": \"9.0\",\n    \"imdbVotes\": \"1,652,832\",\n    \"imdbID\": \"tt0468569\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Batman Begins\",\n    \"Year\": \"2005\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"15 Jun 2005\",\n    \"Runtime\": \"140 min\",\n    \"Genre\": \"Action, Adventure\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n    \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n    \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n    \"Language\": \"English, Urdu, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n    \"Metascore\": \"70\",\n    \"imdbRating\": \"8.3\",\n    \"imdbVotes\": \"972,584\",\n    \"imdbID\": \"tt0372784\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Avatar\",\n    \"Year\": \"2009\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Dec 2009\",\n    \"Runtime\": \"162 min\",\n    \"Genre\": \"Action, Adventure, Fantasy\",\n    \"Director\": \"James Cameron\",\n    \"Writer\": \"James Cameron\",\n    \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n    \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n    \"Language\": \"English, Spanish\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n    \"Metascore\": \"83\",\n    \"imdbRating\": \"7.9\",\n    \"imdbVotes\": \"876,575\",\n    \"imdbID\": \"tt0499549\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  }\n];\n\nconst ratings = watchList.map(function(movie) {\n  return {\n    title: movie[\"Title\"],\n    rating: movie[\"imdbRating\"]\n  }\n});"}]],"tests":[{"text":"<p>The <code>watchList</code> variable should not change.</p>","testString":"assert(\n  watchList[0].Title === 'Inception' && watchList[4].Director == 'James Cameron'\n);"},{"text":"<p>Your code should not use a <code>for</code> loop.</p>","testString":"assert(!code.match(/for\\s*?\\([\\s\\S]*?\\)/));"},{"text":"<p>Your code should use the <code>map</code> method.</p>","testString":"assert(code.match(/\\.map/g));"},{"text":"<p><code>ratings</code> should equal <code>[{\"title\": \"Inception\", \"rating\": \"8.8\"}, {\"title\": \"Interstellar\", \"rating\": \"8.6\"}, {\"title\": \"The Dark Knight\", \"rating\": \"9.0\"},{\"title\": \"Batman Begins\", \"rating\": \"8.3\"}, {\"title\": \"Avatar\", \"rating\": \"7.9\"}]</code>.</p>","testString":"assert.deepEqual(ratings, [\n  { title: 'Inception', rating: '8.8' },\n  { title: 'Interstellar', rating: '8.6' },\n  { title: 'The Dark Knight', rating: '9.0' },\n  { title: 'Batman Begins', rating: '8.3' },\n  { title: 'Avatar', rating: '7.9' }\n]);"}],"description":"<section id=\"description\">\n<p>So far we have learned to use pure functions to avoid side effects in a program. Also, we have seen the value in having a function only depend on its input arguments.</p>\n<p>This is only the beginning. As its name suggests, functional programming is centered around a theory of functions.</p>\n<p>It would make sense to be able to pass them as arguments to other functions, and return a function from another function. Functions are considered <dfn>first class objects</dfn> in JavaScript, which means they can be used like any other object. They can be saved in variables, stored in an object, or passed as function arguments.</p>\n<p>Let's start with some simple array functions, which are methods on the array object prototype. In this exercise we are looking at <code>Array.prototype.map()</code>, or more simply <code>map</code>.</p>\n<p>The <code>map</code> method iterates over each item in an array and returns a new array containing the results of calling the callback function on each element. It does this without mutating the original array.</p>\n<p>When the callback is used, it is passed three arguments. The first argument is the current element being processed. The second is the index of that element and the third is the array upon which the <code>map</code> method was called.</p>\n<p>See below for an example using the <code>map</code> method on the <code>users</code> array to return a new array containing only the names of the users as elements. For simplicity, the example only uses the first argument of the callback.</p>\n<pre><code class=\"language-js\">const users = [\n  { name: 'John', age: 34 },\n  { name: 'Amy', age: 20 },\n  { name: 'camperCat', age: 10 }\n];\n\nconst names = users.map(user => user.name);\nconsole.log(names);\n</code></pre>\n<p>The console would display the value <code> [ 'John', 'Amy', 'camperCat' ]</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The <code>watchList</code> array holds objects with information on several movies. Use <code>map</code> on <code>watchList</code> to assign a new array of objects to the <code>ratings</code> variable. Each movie in the new array should have only a <code>title</code> key with the name of the film, and a <code>rating</code> key with the IMDB rating. The code in the editor currently uses a <code>for</code> loop to do this, so you should replace the loop functionality with your <code>map</code> expression.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":6,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7da9367417b2b2512b68","title":"Use the reduce Method to Analyze Data","challengeType":1,"forumTopicId":301313,"dashedName":"use-the-reduce-method-to-analyze-data","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// The global variable\nconst watchList = [\n  {\n    \"Title\": \"Inception\",\n    \"Year\": \"2010\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"16 Jul 2010\",\n    \"Runtime\": \"148 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Christopher Nolan\",\n    \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy\",\n    \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n    \"Language\": \"English, Japanese, French\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.8\",\n    \"imdbVotes\": \"1,446,708\",\n    \"imdbID\": \"tt1375666\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Interstellar\",\n    \"Year\": \"2014\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"07 Nov 2014\",\n    \"Runtime\": \"169 min\",\n    \"Genre\": \"Adventure, Drama, Sci-Fi\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n    \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n    \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n    \"Language\": \"English\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.6\",\n    \"imdbVotes\": \"910,366\",\n    \"imdbID\": \"tt0816692\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"The Dark Knight\",\n    \"Year\": \"2008\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Jul 2008\",\n    \"Runtime\": \"152 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n    \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n    \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n    \"Language\": \"English, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"82\",\n    \"imdbRating\": \"9.0\",\n    \"imdbVotes\": \"1,652,832\",\n    \"imdbID\": \"tt0468569\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Batman Begins\",\n    \"Year\": \"2005\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"15 Jun 2005\",\n    \"Runtime\": \"140 min\",\n    \"Genre\": \"Action, Adventure\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n    \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n    \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n    \"Language\": \"English, Urdu, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n    \"Metascore\": \"70\",\n    \"imdbRating\": \"8.3\",\n    \"imdbVotes\": \"972,584\",\n    \"imdbID\": \"tt0372784\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Avatar\",\n    \"Year\": \"2009\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Dec 2009\",\n    \"Runtime\": \"162 min\",\n    \"Genre\": \"Action, Adventure, Fantasy\",\n    \"Director\": \"James Cameron\",\n    \"Writer\": \"James Cameron\",\n    \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n    \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n    \"Language\": \"English, Spanish\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n    \"Metascore\": \"83\",\n    \"imdbRating\": \"7.9\",\n    \"imdbVotes\": \"876,575\",\n    \"imdbID\": \"tt0499549\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  }\n];\n\nfunction getRating(watchList) {\n  // Only change code below this line\n  let averageRating;\n\n\n  // Only change code above this line\n  return averageRating;\n}\n\nconsole.log(getRating(watchList));","error":null,"seed":"// The global variable\nconst watchList = [\n  {\n    \"Title\": \"Inception\",\n    \"Year\": \"2010\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"16 Jul 2010\",\n    \"Runtime\": \"148 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Christopher Nolan\",\n    \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy\",\n    \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n    \"Language\": \"English, Japanese, French\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.8\",\n    \"imdbVotes\": \"1,446,708\",\n    \"imdbID\": \"tt1375666\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Interstellar\",\n    \"Year\": \"2014\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"07 Nov 2014\",\n    \"Runtime\": \"169 min\",\n    \"Genre\": \"Adventure, Drama, Sci-Fi\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n    \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n    \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n    \"Language\": \"English\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.6\",\n    \"imdbVotes\": \"910,366\",\n    \"imdbID\": \"tt0816692\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"The Dark Knight\",\n    \"Year\": \"2008\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Jul 2008\",\n    \"Runtime\": \"152 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n    \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n    \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n    \"Language\": \"English, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"82\",\n    \"imdbRating\": \"9.0\",\n    \"imdbVotes\": \"1,652,832\",\n    \"imdbID\": \"tt0468569\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Batman Begins\",\n    \"Year\": \"2005\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"15 Jun 2005\",\n    \"Runtime\": \"140 min\",\n    \"Genre\": \"Action, Adventure\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n    \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n    \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n    \"Language\": \"English, Urdu, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n    \"Metascore\": \"70\",\n    \"imdbRating\": \"8.3\",\n    \"imdbVotes\": \"972,584\",\n    \"imdbID\": \"tt0372784\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Avatar\",\n    \"Year\": \"2009\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Dec 2009\",\n    \"Runtime\": \"162 min\",\n    \"Genre\": \"Action, Adventure, Fantasy\",\n    \"Director\": \"James Cameron\",\n    \"Writer\": \"James Cameron\",\n    \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n    \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n    \"Language\": \"English, Spanish\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n    \"Metascore\": \"83\",\n    \"imdbRating\": \"7.9\",\n    \"imdbVotes\": \"876,575\",\n    \"imdbID\": \"tt0499549\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  }\n];\n\nfunction getRating(watchList) {\n  // Only change code below this line\n  let averageRating;\n\n\n  // Only change code above this line\n  return averageRating;\n}\n\nconsole.log(getRating(watchList));"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const watchList = [\n  {\n    \"Title\": \"Inception\",\n    \"Year\": \"2010\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"16 Jul 2010\",\n    \"Runtime\": \"148 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Christopher Nolan\",\n    \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy\",\n    \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n    \"Language\": \"English, Japanese, French\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.8\",\n    \"imdbVotes\": \"1,446,708\",\n    \"imdbID\": \"tt1375666\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Interstellar\",\n    \"Year\": \"2014\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"07 Nov 2014\",\n    \"Runtime\": \"169 min\",\n    \"Genre\": \"Adventure, Drama, Sci-Fi\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n    \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n    \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n    \"Language\": \"English\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.6\",\n    \"imdbVotes\": \"910,366\",\n    \"imdbID\": \"tt0816692\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"The Dark Knight\",\n    \"Year\": \"2008\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Jul 2008\",\n    \"Runtime\": \"152 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n    \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n    \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n    \"Language\": \"English, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"82\",\n    \"imdbRating\": \"9.0\",\n    \"imdbVotes\": \"1,652,832\",\n    \"imdbID\": \"tt0468569\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Batman Begins\",\n    \"Year\": \"2005\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"15 Jun 2005\",\n    \"Runtime\": \"140 min\",\n    \"Genre\": \"Action, Adventure\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n    \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n    \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n    \"Language\": \"English, Urdu, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n    \"Metascore\": \"70\",\n    \"imdbRating\": \"8.3\",\n    \"imdbVotes\": \"972,584\",\n    \"imdbID\": \"tt0372784\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Avatar\",\n    \"Year\": \"2009\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Dec 2009\",\n    \"Runtime\": \"162 min\",\n    \"Genre\": \"Action, Adventure, Fantasy\",\n    \"Director\": \"James Cameron\",\n    \"Writer\": \"James Cameron\",\n    \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n    \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n    \"Language\": \"English, Spanish\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n    \"Metascore\": \"83\",\n    \"imdbRating\": \"7.9\",\n    \"imdbVotes\": \"876,575\",\n    \"imdbID\": \"tt0499549\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  }\n];\n\nfunction getRating(watchList) {\n  let averageRating;\n  const rating = watchList\n    .filter(obj => obj.Director === \"Christopher Nolan\")\n    .map(obj => Number(obj.imdbRating));\n  averageRating = rating.reduce((accum, curr) => accum + curr)/rating.length;\n  return averageRating;\n}","error":null,"seed":"const watchList = [\n  {\n    \"Title\": \"Inception\",\n    \"Year\": \"2010\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"16 Jul 2010\",\n    \"Runtime\": \"148 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Christopher Nolan\",\n    \"Actors\": \"Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy\",\n    \"Plot\": \"A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.\",\n    \"Language\": \"English, Japanese, French\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 4 Oscars. Another 143 wins & 198 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.8\",\n    \"imdbVotes\": \"1,446,708\",\n    \"imdbID\": \"tt1375666\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Interstellar\",\n    \"Year\": \"2014\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"07 Nov 2014\",\n    \"Runtime\": \"169 min\",\n    \"Genre\": \"Adventure, Drama, Sci-Fi\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan, Christopher Nolan\",\n    \"Actors\": \"Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow\",\n    \"Plot\": \"A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.\",\n    \"Language\": \"English\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 1 Oscar. Another 39 wins & 132 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg\",\n    \"Metascore\": \"74\",\n    \"imdbRating\": \"8.6\",\n    \"imdbVotes\": \"910,366\",\n    \"imdbID\": \"tt0816692\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"The Dark Knight\",\n    \"Year\": \"2008\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Jul 2008\",\n    \"Runtime\": \"152 min\",\n    \"Genre\": \"Action, Adventure, Crime\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)\",\n    \"Actors\": \"Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine\",\n    \"Plot\": \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.\",\n    \"Language\": \"English, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 2 Oscars. Another 146 wins & 142 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg\",\n    \"Metascore\": \"82\",\n    \"imdbRating\": \"9.0\",\n    \"imdbVotes\": \"1,652,832\",\n    \"imdbID\": \"tt0468569\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Batman Begins\",\n    \"Year\": \"2005\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"15 Jun 2005\",\n    \"Runtime\": \"140 min\",\n    \"Genre\": \"Action, Adventure\",\n    \"Director\": \"Christopher Nolan\",\n    \"Writer\": \"Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)\",\n    \"Actors\": \"Christian Bale, Michael Caine, Liam Neeson, Katie Holmes\",\n    \"Plot\": \"After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.\",\n    \"Language\": \"English, Urdu, Mandarin\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Nominated for 1 Oscar. Another 15 wins & 66 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg\",\n    \"Metascore\": \"70\",\n    \"imdbRating\": \"8.3\",\n    \"imdbVotes\": \"972,584\",\n    \"imdbID\": \"tt0372784\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  },\n  {\n    \"Title\": \"Avatar\",\n    \"Year\": \"2009\",\n    \"Rated\": \"PG-13\",\n    \"Released\": \"18 Dec 2009\",\n    \"Runtime\": \"162 min\",\n    \"Genre\": \"Action, Adventure, Fantasy\",\n    \"Director\": \"James Cameron\",\n    \"Writer\": \"James Cameron\",\n    \"Actors\": \"Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang\",\n    \"Plot\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n    \"Language\": \"English, Spanish\",\n    \"Country\": \"USA, UK\",\n    \"Awards\": \"Won 3 Oscars. Another 80 wins & 121 nominations.\",\n    \"Poster\": \"http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg\",\n    \"Metascore\": \"83\",\n    \"imdbRating\": \"7.9\",\n    \"imdbVotes\": \"876,575\",\n    \"imdbID\": \"tt0499549\",\n    \"Type\": \"movie\",\n    \"Response\": \"True\"\n  }\n];\n\nfunction getRating(watchList) {\n  let averageRating;\n  const rating = watchList\n    .filter(obj => obj.Director === \"Christopher Nolan\")\n    .map(obj => Number(obj.imdbRating));\n  averageRating = rating.reduce((accum, curr) => accum + curr)/rating.length;\n  return averageRating;\n}"}]],"tests":[{"text":"<p>The <code>watchList</code> variable should not change.</p>","testString":"assert(\n  watchList[0].Title === 'Inception' && watchList[4].Director == 'James Cameron'\n);"},{"text":"<p>Your code should use the <code>reduce</code> method.</p>","testString":"assert(code.match(/\\.reduce/g));"},{"text":"<p>The <code>getRating(watchList)</code> should equal 8.675.</p>","testString":"assert(getRating(watchList) === 8.675);"},{"text":"<p>Your code should not use a <code>for</code> loop.</p>","testString":"assert(!code.match(/for\\s*?\\([\\s\\S]*?\\)/g));"},{"text":"<p>Your code should return the correct output after modifying the <code>watchList</code> object.</p>","testString":"assert(getRating(watchList.filter((_, i) => i < 1 || i > 2)) === 8.55);"}],"description":"<section id=\"description\">\n<p><code>Array.prototype.reduce()</code>, or simply <code>reduce()</code>, is the most general of all array operations in JavaScript. You can solve almost any array processing problem using the <code>reduce</code> method.</p>\n<p>The <code>reduce</code> method allows for more general forms of array processing, and it's possible to show that both <code>filter</code> and <code>map</code> can be derived as special applications of <code>reduce</code>. The <code>reduce</code> method iterates over each item in an array and returns a single value (i.e. string, number, object, array). This is achieved via a callback function that is called on each iteration.</p>\n<p>The callback function accepts four arguments. The first argument is known as the accumulator, which gets assigned the return value of the callback function from the previous iteration, the second is the current element being processed, the third is the index of that element and the fourth is the array upon which <code>reduce</code> is called.</p>\n<p>In addition to the callback function, <code>reduce</code> has an additional parameter which takes an initial value for the accumulator. If this second parameter is not used, then the first iteration is skipped and the second iteration gets passed the first element of the array as the accumulator.</p>\n<p>See below for an example using <code>reduce</code> on the <code>users</code> array to return the sum of all the users' ages. For simplicity, the example only uses the first and second arguments.</p>\n<pre><code class=\"language-js\">const users = [\n  { name: 'John', age: 34 },\n  { name: 'Amy', age: 20 },\n  { name: 'camperCat', age: 10 }\n];\n\nconst sumOfAges = users.reduce((sum, user) => sum + user.age, 0);\nconsole.log(sumOfAges);\n</code></pre>\n<p>The console would display the value <code>64</code>.</p>\n<p>In another example, see how an object can be returned containing the names of the users as properties with their ages as values.</p>\n<pre><code class=\"language-js\">const users = [\n  { name: 'John', age: 34 },\n  { name: 'Amy', age: 20 },\n  { name: 'camperCat', age: 10 }\n];\n\nconst usersObj = users.reduce((obj, user) => {\n  obj[user.name] = user.age;\n  return obj;\n}, {});\nconsole.log(usersObj);\n</code></pre>\n<p>The console would display the value <code>{ John: 34, Amy: 20, camperCat: 10 }</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The variable <code>watchList</code> holds an array of objects with information on several movies. Use <code>reduce</code> to find the average IMDB rating of the movies directed by <code>Christopher Nolan</code>. Recall from prior challenges how to <code>filter</code> data and <code>map</code> over it to pull what you need. You may need to create other variables, and return the average rating from <code>getRating</code> function. Note that the rating values are saved as strings in the object and need to be converted into numbers before they are used in any mathematical operations.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":14,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7dab367417b2b2512b6f","title":"Use the some Method to Check that Any Elements in an Array Meet a Criteria","challengeType":1,"forumTopicId":301314,"dashedName":"use-the-some-method-to-check-that-any-elements-in-an-array-meet-a-criteria","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function checkPositive(arr) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\ncheckPositive([1, 2, 3, -4, 5]);","error":null,"seed":"function checkPositive(arr) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\ncheckPositive([1, 2, 3, -4, 5]);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function checkPositive(arr) {\n  return arr.some(elem => elem > 0);\n}","error":null,"seed":"function checkPositive(arr) {\n  return arr.some(elem => elem > 0);\n}"}]],"tests":[{"text":"<p>Your code should use the <code>some</code> method.</p>","testString":"assert(code.match(/\\.some/g));"},{"text":"<p><code>checkPositive([1, 2, 3, -4, 5])</code> should return <code>true</code>.</p>","testString":"assert(checkPositive([1, 2, 3, -4, 5]));"},{"text":"<p><code>checkPositive([1, 2, 3, 4, 5])</code> should return <code>true</code>.</p>","testString":"assert(checkPositive([1, 2, 3, 4, 5]));"},{"text":"<p><code>checkPositive([-1, -2, -3, -4, -5])</code> should return <code>false</code>.</p>","testString":"assert(!checkPositive([-1, -2, -3, -4, -5]));"}],"description":"<section id=\"description\">\n<p>The <code>some</code> method works with arrays to check if <em>any</em> element passes a particular test. It returns a Boolean value - <code>true</code> if any of the values meet the criteria, <code>false</code> if not.</p>\n<p>For example, the following code would check if any element in the <code>numbers</code> array is less than 10:</p>\n<pre><code class=\"language-js\">const numbers = [10, 50, 8, 220, 110, 11];\n\nnumbers.some(function(currentValue) {\n  return currentValue &#x3C; 10;\n});\n</code></pre>\n<p>The <code>some</code> method would return <code>true</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the <code>some</code> method inside the <code>checkPositive</code> function to check if any element in <code>arr</code> is positive. The function should return a Boolean value.</p>\n</section>","block":"functional-programming","hasEditableBoundaries":false,"order":7,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":22,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false}]},"intermediate-algorithm-scripting":{"meta":{"name":"Intermediate Algorithm Scripting","isUpcomingChange":false,"dashedName":"intermediate-algorithm-scripting","order":8,"time":"50 hours","template":"","required":[],"superBlock":"javascript-algorithms-and-data-structures","challengeOrder":[["a3566b1109230028080c9345","Sum All Numbers in a Range"],["a5de63ebea8dbee56860f4f2","Diff Two Arrays"],["a39963a4c10bc8b4d4f06d7e","Seek and Destroy"],["a8e512fbe388ac2f9198f0fa","Wherefore art thou"],["a103376db3ba46b2d50db289","Spinal Tap Case"],["aa7697ea2477d1316795783b","Pig Latin"],["a0b5010f579e69b815e7c5d6","Search and Replace"],["afd15382cdfb22c9efe8b7de","DNA Pairing"],["af7588ade1100bde429baf20","Missing letters"],["a105e963526e7de52b219be9","Sorted Union"],["a6b0bb188d873cb2c8729495","Convert HTML Entities"],["a5229172f011153519423690","Sum All Odd Fibonacci Numbers"],["a3bfc1673c0526e06d3ac698","Sum All Primes"],["ae9defd7acaf69703ab432ea","Smallest Common Multiple"],["a5deed1811a43193f9f1c841","Drop it"],["ab306dbdcc907c7ddfc30830","Steamroller"],["a8d97bd4c764e91f9d2bda01","Binary Agents"],["a10d2431ad0c6a099a4b8b52","Everything Be True"],["a97fd23d9b809dac9921074f","Arguments Optional"],["a2f1d72d9b908d0bd72bb9f6","Make a Person"],["af4afb223120f7348cdfc9fd","Map the Debris"]]},"challenges":[{"id":"a97fd23d9b809dac9921074f","title":"Arguments Optional","challengeType":1,"forumTopicId":14271,"dashedName":"arguments-optional","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function addTogether() {\n  return false;\n}\n\naddTogether(2,3);","error":null,"seed":"function addTogether() {\n  return false;\n}\n\naddTogether(2,3);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function addTogether() {\n  var a = arguments[0];\n  if (toString.call(a) !== '[object Number]') return;\n  if (arguments.length === 1) {\n    return function(b) {\n      if (toString.call(b) !== '[object Number]') return;\n      return a + b;\n    };\n  }\n  var b = arguments[1];\n  if (toString.call(b) !== '[object Number]') return;\n  return a + arguments[1];\n}","error":null,"seed":"function addTogether() {\n  var a = arguments[0];\n  if (toString.call(a) !== '[object Number]') return;\n  if (arguments.length === 1) {\n    return function(b) {\n      if (toString.call(b) !== '[object Number]') return;\n      return a + b;\n    };\n  }\n  var b = arguments[1];\n  if (toString.call(b) !== '[object Number]') return;\n  return a + arguments[1];\n}"}]],"tests":[{"text":"<p><code>addTogether(2, 3)</code> should return 5.</p>","testString":"assert.deepEqual(addTogether(2, 3), 5);"},{"text":"<p><code>addTogether(23, 30)</code> should return 53.</p>","testString":"assert.deepEqual(addTogether(23, 30), 53);"},{"text":"<p><code>addTogether(5)(7)</code> should return 12.</p>","testString":"assert.deepEqual(addTogether(5)(7), 12);"},{"text":"<p><code>addTogether(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")</code> should return <code>undefined</code>.</p>","testString":"assert.isUndefined(addTogether('https://www.youtube.com/watch?v=dQw4w9WgXcQ'));"},{"text":"<p><code>addTogether(2, \"3\")</code> should return <code>undefined</code>.</p>","testString":"assert.isUndefined(addTogether(2, '3'));"},{"text":"<p><code>addTogether(2)([3])</code> should return <code>undefined</code>.</p>","testString":"assert.isUndefined(addTogether(2)([3]));"},{"text":"<p><code>addTogether(\"2\", 3)</code> should return <code>undefined</code>.</p>","testString":"assert.isUndefined(addTogether('2', 3));"},{"text":"<p><code>addTogether(5, undefined)</code> should return <code>undefined</code>.</p>","testString":"assert.isUndefined(addTogether(5, undefined));"}],"description":"<section id=\"description\">\n<p>Create a function that sums two arguments together. If only one argument is provided, then return a function that expects one argument and returns the sum.</p>\n<p>For example, <code>addTogether(2, 3)</code> should return <code>5</code>, and <code>addTogether(2)</code> should return a function.</p>\n<p>Calling this returned function with a single argument will then return the sum:</p>\n<pre><code class=\"language-js\">var sumTwoAnd = addTogether(2);\n</code></pre>\n<p><code>sumTwoAnd(3)</code> returns <code>5</code>.</p>\n<p>If either argument isn't a valid number, return undefined.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":18,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a8d97bd4c764e91f9d2bda01","title":"Binary Agents","challengeType":1,"forumTopicId":14273,"dashedName":"binary-agents","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function binaryAgent(str) {\n  return str;\n}\n\nbinaryAgent(\"01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111\");","error":null,"seed":"function binaryAgent(str) {\n  return str;\n}\n\nbinaryAgent(\"01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function binaryAgent(str) {\n  return str.split(' ').map(function(s) { return parseInt(s, 2); }).map(function(b) { return String.fromCharCode(b);}).join('');\n}","error":null,"seed":"function binaryAgent(str) {\n  return str.split(' ').map(function(s) { return parseInt(s, 2); }).map(function(b) { return String.fromCharCode(b);}).join('');\n}"}]],"tests":[{"text":"<p><code>binaryAgent(\"01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111\")</code> should return the string <code>Aren't bonfires fun!?</code></p>","testString":"assert.deepEqual(\n  binaryAgent(\n    '01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111'\n  ),\n  \"Aren't bonfires fun!?\"\n);"},{"text":"<p><code>binaryAgent(\"01001001 00100000 01101100 01101111 01110110 01100101 00100000 01000110 01110010 01100101 01100101 01000011 01101111 01100100 01100101 01000011 01100001 01101101 01110000 00100001\")</code> should return the string <code>I love FreeCodeCamp!</code></p>","testString":"assert.deepEqual(\n  binaryAgent(\n    '01001001 00100000 01101100 01101111 01110110 01100101 00100000 01000110 01110010 01100101 01100101 01000011 01101111 01100100 01100101 01000011 01100001 01101101 01110000 00100001'\n  ),\n  'I love FreeCodeCamp!'\n);"}],"description":"<section id=\"description\">\n<p>Return an English translated sentence of the passed binary string.</p>\n<p>The binary string will be space separated.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":16,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a6b0bb188d873cb2c8729495","title":"Convert HTML Entities","challengeType":1,"forumTopicId":16007,"dashedName":"convert-html-entities","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function convertHTML(str) {\n  return str;\n}\n\nconvertHTML(\"Dolce & Gabbana\");","error":null,"seed":"function convertHTML(str) {\n  return str;\n}\n\nconvertHTML(\"Dolce & Gabbana\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"var MAP = { '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&apos;'};\n\nfunction convertHTML(str) {\n  return str.replace(/[&<>\"']/g, function(c) {\n    return MAP[c];\n  });\n}","error":null,"seed":"var MAP = { '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&apos;'};\n\nfunction convertHTML(str) {\n  return str.replace(/[&<>\"']/g, function(c) {\n    return MAP[c];\n  });\n}"}]],"tests":[{"text":"<p><code>convertHTML(\"Dolce &#x26; Gabbana\")</code> should return the string <code>Dolce &#x26;amp; Gabbana</code>.</p>","testString":"assert.match(convertHTML('Dolce & Gabbana'), /Dolce &amp; Gabbana/);"},{"text":"<p><code>convertHTML(\"Hamburgers &#x3C; Pizza &#x3C; Tacos\")</code> should return the string <code>Hamburgers &#x26;lt; Pizza &#x26;lt; Tacos</code>.</p>","testString":"assert.match(\n  convertHTML('Hamburgers < Pizza < Tacos'),\n  /Hamburgers &lt; Pizza &lt; Tacos/\n);"},{"text":"<p><code>convertHTML(\"Sixty > twelve\")</code> should return the string <code>Sixty &#x26;gt; twelve</code>.</p>","testString":"assert.match(convertHTML('Sixty > twelve'), /Sixty &gt; twelve/);"},{"text":"<p><code>convertHTML('Stuff in \"quotation marks\"')</code> should return the string <code>Stuff in &#x26;quot;quotation marks&#x26;quot;</code>.</p>","testString":"assert.match(\n  convertHTML('Stuff in \"quotation marks\"'),\n  /Stuff in &quot;quotation marks&quot;/\n);"},{"text":"<p><code>convertHTML(\"Schindler's List\")</code> should return the string <code>Schindler&#x26;apos;s List</code>.</p>","testString":"assert.match(convertHTML(\"Schindler's List\"), /Schindler&apos;s List/);"},{"text":"<p><code>convertHTML(\"&#x3C;>\")</code> should return the string <code>&#x26;lt;&#x26;gt;</code>.</p>","testString":"assert.match(convertHTML('<>'), /&lt;&gt;/);"},{"text":"<p><code>convertHTML(\"abc\")</code> should return the string <code>abc</code>.</p>","testString":"assert.strictEqual(convertHTML('abc'), 'abc');"}],"description":"<section id=\"description\">\n<p>Convert the characters <code>&#x26;</code>, <code>&#x3C;</code>, <code>></code>, <code>\"</code> (double quote), and <code>'</code> (apostrophe), in a string to their corresponding HTML entities.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":10,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a5de63ebea8dbee56860f4f2","title":"Diff Two Arrays","challengeType":1,"forumTopicId":16008,"dashedName":"diff-two-arrays","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function diffArray(arr1, arr2) {\n  const newArr = [];\n  return newArr;\n}\n\ndiffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);","error":null,"seed":"function diffArray(arr1, arr2) {\n  const newArr = [];\n  return newArr;\n}\n\ndiffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function diffArray(arr1, arr2) {\n  const newArr = [];\n  const h1 = Object.create(null);\n  arr1.forEach(function(e) {\n    h1[e] = e;\n  });\n  const h2 = Object.create(null);\n  arr2.forEach(function(e) {\n    h2[e] = e;\n  });\n\n  Object.keys(h1).forEach(function(e) {\n     if (!(e in h2)) newArr.push(h1[e]);\n  });\n  Object.keys(h2).forEach(function(e) {\n     if (!(e in h1)) newArr.push(h2[e]);\n  });\n  return newArr;\n}","error":null,"seed":"function diffArray(arr1, arr2) {\n  const newArr = [];\n  const h1 = Object.create(null);\n  arr1.forEach(function(e) {\n    h1[e] = e;\n  });\n  const h2 = Object.create(null);\n  arr2.forEach(function(e) {\n    h2[e] = e;\n  });\n\n  Object.keys(h1).forEach(function(e) {\n     if (!(e in h2)) newArr.push(h1[e]);\n  });\n  Object.keys(h2).forEach(function(e) {\n     if (!(e in h1)) newArr.push(h2[e]);\n  });\n  return newArr;\n}"}]],"tests":[{"text":"<p><code>diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5])</code> should return an array.</p>","testString":"assert(typeof diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]) === 'object');"},{"text":"<p><code>[\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return <code>[\"pink wool\"]</code>.</p>","testString":"assert.sameMembers(\n  diffArray(\n    ['diorite', 'andesite', 'grass', 'dirt', 'pink wool', 'dead shrub'],\n    ['diorite', 'andesite', 'grass', 'dirt', 'dead shrub']\n  ),\n  ['pink wool']\n);"},{"text":"<p><code>[\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return an array with one item.</p>","testString":"assert(\n  diffArray(\n    ['diorite', 'andesite', 'grass', 'dirt', 'pink wool', 'dead shrub'],\n    ['diorite', 'andesite', 'grass', 'dirt', 'dead shrub']\n  ).length === 1\n);"},{"text":"<p><code>[\"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return <code>[\"diorite\", \"pink wool\"]</code>.</p>","testString":"assert.sameMembers(\n  diffArray(\n    ['andesite', 'grass', 'dirt', 'pink wool', 'dead shrub'],\n    ['diorite', 'andesite', 'grass', 'dirt', 'dead shrub']\n  ),\n  ['diorite', 'pink wool']\n);"},{"text":"<p><code>[\"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return an array with two items.</p>","testString":"assert(\n  diffArray(\n    ['andesite', 'grass', 'dirt', 'pink wool', 'dead shrub'],\n    ['diorite', 'andesite', 'grass', 'dirt', 'dead shrub']\n  ).length === 2\n);"},{"text":"<p><code>[\"andesite\", \"grass\", \"dirt\", \"dead shrub\"], [\"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return <code>[]</code>.</p>","testString":"assert.sameMembers(\n  diffArray(\n    ['andesite', 'grass', 'dirt', 'dead shrub'],\n    ['andesite', 'grass', 'dirt', 'dead shrub']\n  ),\n  []\n);"},{"text":"<p><code>[\"andesite\", \"grass\", \"dirt\", \"dead shrub\"], [\"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return an empty array.</p>","testString":"assert(\n  diffArray(\n    ['andesite', 'grass', 'dirt', 'dead shrub'],\n    ['andesite', 'grass', 'dirt', 'dead shrub']\n  ).length === 0\n);"},{"text":"<p><code>[1, 2, 3, 5], [1, 2, 3, 4, 5]</code> should return <code>[4]</code>.</p>","testString":"assert.sameMembers(diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]), [4]);"},{"text":"<p><code>[1, 2, 3, 5], [1, 2, 3, 4, 5]</code> should return an array with one item.</p>","testString":"assert(diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]).length === 1);"},{"text":"<p><code>[1, \"calf\", 3, \"piglet\"], [1, \"calf\", 3, 4]</code> should return <code>[\"piglet\", 4]</code>.</p>","testString":"assert.sameMembers(diffArray([1, 'calf', 3, 'piglet'], [1, 'calf', 3, 4]), [\n  'piglet',\n  4\n]);"},{"text":"<p><code>[1, \"calf\", 3, \"piglet\"], [1, \"calf\", 3, 4]</code> should return an array with two items.</p>","testString":"assert(diffArray([1, 'calf', 3, 'piglet'], [1, 'calf', 3, 4]).length === 2);"},{"text":"<p><code>[], [\"snuffleupagus\", \"cookie monster\", \"elmo\"]</code> should return <code>[\"snuffleupagus\", \"cookie monster\", \"elmo\"]</code>.</p>","testString":"assert.sameMembers(diffArray([], ['snuffleupagus', 'cookie monster', 'elmo']), [\n  'snuffleupagus',\n  'cookie monster',\n  'elmo'\n]);"},{"text":"<p><code>[], [\"snuffleupagus\", \"cookie monster\", \"elmo\"]</code> should return an array with three items.</p>","testString":"assert(diffArray([], ['snuffleupagus', 'cookie monster', 'elmo']).length === 3);"},{"text":"<p><code>[1, \"calf\", 3, \"piglet\"], [7, \"filly\"]</code> should return <code>[1, \"calf\", 3, \"piglet\", 7, \"filly\"]</code>.</p>","testString":"assert.sameMembers(diffArray([1, 'calf', 3, 'piglet'], [7, 'filly']), [\n  1,\n  'calf',\n  3,\n  'piglet',\n  7,\n  'filly'\n]);"},{"text":"<p><code>[1, \"calf\", 3, \"piglet\"], [7, \"filly\"]</code> should return an array with six items.</p>","testString":"assert(diffArray([1, 'calf', 3, 'piglet'], [7, 'filly']).length === 6);"}],"description":"<section id=\"description\">\n<p>Compare two arrays and return a new array with any items only found in one of the two given arrays, but not both. In other words, return the symmetric difference of the two arrays.</p>\n<p><strong>Note:</strong> You can return the array with its elements in any order.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":1,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"afd15382cdfb22c9efe8b7de","title":"DNA Pairing","challengeType":1,"forumTopicId":16009,"dashedName":"dna-pairing","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function pairElement(str) {\n  return str;\n}\n\npairElement(\"GCG\");","error":null,"seed":"function pairElement(str) {\n  return str;\n}\n\npairElement(\"GCG\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"var lookup = Object.create(null);\nlookup.A = 'T';\nlookup.T = 'A';\nlookup.C = 'G';\nlookup.G = 'C';\n\nfunction pairElement(str) {\n return str.split('').map(function(p) {return [p, lookup[p]];});\n}","error":null,"seed":"var lookup = Object.create(null);\nlookup.A = 'T';\nlookup.T = 'A';\nlookup.C = 'G';\nlookup.G = 'C';\n\nfunction pairElement(str) {\n return str.split('').map(function(p) {return [p, lookup[p]];});\n}"}]],"tests":[{"text":"<p><code>pairElement(\"ATCGA\")</code> should return <code>[[\"A\",\"T\"],[\"T\",\"A\"],[\"C\",\"G\"],[\"G\",\"C\"],[\"A\",\"T\"]]</code>.</p>","testString":"assert.deepEqual(pairElement('ATCGA'), [\n  ['A', 'T'],\n  ['T', 'A'],\n  ['C', 'G'],\n  ['G', 'C'],\n  ['A', 'T']\n]);"},{"text":"<p><code>pairElement(\"TTGAG\")</code> should return <code>[[\"T\",\"A\"],[\"T\",\"A\"],[\"G\",\"C\"],[\"A\",\"T\"],[\"G\",\"C\"]]</code>.</p>","testString":"assert.deepEqual(pairElement('TTGAG'), [\n  ['T', 'A'],\n  ['T', 'A'],\n  ['G', 'C'],\n  ['A', 'T'],\n  ['G', 'C']\n]);"},{"text":"<p><code>pairElement(\"CTCTA\")</code> should return <code>[[\"C\",\"G\"],[\"T\",\"A\"],[\"C\",\"G\"],[\"T\",\"A\"],[\"A\",\"T\"]]</code>.</p>","testString":"assert.deepEqual(pairElement('CTCTA'), [\n  ['C', 'G'],\n  ['T', 'A'],\n  ['C', 'G'],\n  ['T', 'A'],\n  ['A', 'T']\n]);"}],"description":"<section id=\"description\">\n<p>Pairs of DNA strands consist of nucleobase pairs. Base pairs are represented by the characters <em>AT</em> and <em>CG</em>, which form building blocks of the DNA double helix.</p>\n<p>The DNA strand is missing the pairing element. Write a function to match the missing base pairs for the provided DNA strand. For each character in the provided string, find the base pair character. Return the results as a 2d array.</p>\n<p>For example, for the input <code>GCG</code>, return <code>[[\"G\", \"C\"], [\"C\",\"G\"], [\"G\", \"C\"]]</code></p>\n<p>The character and its pair are paired up in an array, and all the arrays are grouped into one encapsulating array.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":7,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a5deed1811a43193f9f1c841","title":"Drop it","challengeType":1,"forumTopicId":16010,"dashedName":"drop-it","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function dropElements(arr, func) {\n  return arr;\n}\n\ndropElements([1, 2, 3], function(n) {return n < 3; });","error":null,"seed":"function dropElements(arr, func) {\n  return arr;\n}\n\ndropElements([1, 2, 3], function(n) {return n < 3; });"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function dropElements(arr, func) {\n  while (arr.length && !func(arr[0])) {\n    arr.shift();\n  }\n  return arr;\n}","error":null,"seed":"function dropElements(arr, func) {\n  while (arr.length && !func(arr[0])) {\n    arr.shift();\n  }\n  return arr;\n}"}]],"tests":[{"text":"<p><code>dropElements([1, 2, 3, 4], function(n) {return n >= 3;})</code> should return <code>[3, 4]</code>.</p>","testString":"assert.deepEqual(\n  dropElements([1, 2, 3, 4], function (n) {\n    return n >= 3;\n  }),\n  [3, 4]\n);"},{"text":"<p><code>dropElements([0, 1, 0, 1], function(n) {return n === 1;})</code> should return <code>[1, 0, 1]</code>.</p>","testString":"assert.deepEqual(\n  dropElements([0, 1, 0, 1], function (n) {\n    return n === 1;\n  }),\n  [1, 0, 1]\n);"},{"text":"<p><code>dropElements([1, 2, 3], function(n) {return n > 0;})</code> should return <code>[1, 2, 3]</code>.</p>","testString":"assert.deepEqual(\n  dropElements([1, 2, 3], function (n) {\n    return n > 0;\n  }),\n  [1, 2, 3]\n);"},{"text":"<p><code>dropElements([1, 2, 3, 4], function(n) {return n > 5;})</code> should return <code>[]</code>.</p>","testString":"assert.deepEqual(\n  dropElements([1, 2, 3, 4], function (n) {\n    return n > 5;\n  }),\n  []\n);"},{"text":"<p><code>dropElements([1, 2, 3, 7, 4], function(n) {return n > 3;})</code> should return <code>[7, 4]</code>.</p>","testString":"assert.deepEqual(\n  dropElements([1, 2, 3, 7, 4], function (n) {\n    return n > 3;\n  }),\n  [7, 4]\n);"},{"text":"<p><code>dropElements([1, 2, 3, 9, 2], function(n) {return n > 2;})</code> should return <code>[3, 9, 2]</code>.</p>","testString":"assert.deepEqual(\n  dropElements([1, 2, 3, 9, 2], function (n) {\n    return n > 2;\n  }),\n  [3, 9, 2]\n);"}],"description":"<section id=\"description\">\n<p>Given the array <code>arr</code>, iterate through and remove each element starting from the first element (the 0 index) until the function <code>func</code> returns <code>true</code> when the iterated element is passed through it.</p>\n<p>Then return the rest of the array once the condition is satisfied, otherwise, <code>arr</code> should be returned as an empty array.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":14,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a10d2431ad0c6a099a4b8b52","title":"Everything Be True","challengeType":1,"forumTopicId":16011,"dashedName":"everything-be-true","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function truthCheck(collection, pre) {\n  return pre;\n}\n\ntruthCheck([{name: \"Quincy\", role: \"Founder\", isBot: false}, {name: \"Naomi\", role: \"\", isBot: false}, {name: \"Camperbot\", role: \"Bot\", isBot: true}], \"isBot\");","error":null,"seed":"function truthCheck(collection, pre) {\n  return pre;\n}\n\ntruthCheck([{name: \"Quincy\", role: \"Founder\", isBot: false}, {name: \"Naomi\", role: \"\", isBot: false}, {name: \"Camperbot\", role: \"Bot\", isBot: true}], \"isBot\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function truthCheck(collection, pre) {\n  return collection.every(function(e) { return e[pre]; });\n}","error":null,"seed":"function truthCheck(collection, pre) {\n  return collection.every(function(e) { return e[pre]; });\n}"}]],"tests":[{"text":"<p><code>truthCheck([{name: \"Quincy\", role: \"Founder\", isBot: false}, {name: \"Naomi\", role: \"\", isBot: false}, {name: \"Camperbot\", role: \"Bot\", isBot: true}], \"isBot\")</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { name: \"Quincy\", role: \"Founder\", isBot: false },\n    { name: \"Naomi\", role: \"\", isBot: false },\n    { name: \"Camperbot\", role: \"Bot\", isBot: true }\n  ],\n  \"isBot\"), false);"},{"text":"<p><code>truthCheck([{name: \"Quincy\", role: \"Founder\", isBot: false}, {name: \"Naomi\", role: \"\", isBot: false}, {name: \"Camperbot\", role: \"Bot\", isBot: true}], \"name\")</code> should return <code>true</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { name: \"Quincy\", role: \"Founder\", isBot: false },\n    { name: \"Naomi\", role: \"\", isBot: false },\n    { name: \"Camperbot\", role: \"Bot\", isBot: true }\n  ],\n  \"name\"), true);"},{"text":"<p><code>truthCheck([{name: \"Quincy\", role: \"Founder\", isBot: false}, {name: \"Naomi\", role: \"\", isBot: false}, {name: \"Camperbot\", role: \"Bot\", isBot: true}], \"role\")</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { name: \"Quincy\", role: \"Founder\", isBot: false },\n    { name: \"Naomi\", role: \"\", isBot: false },\n    { name: \"Camperbot\", role: \"Bot\", isBot: true }\n  ],\n  \"role\"), false);"},{"text":"<p><code>truthCheck([{name: \"Pikachu\", number: 25, caught: 3}, {name: \"Togepi\", number: 175, caught: 1}], \"number\")</code> should return <code>true</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { name: \"Pikachu\", number: 25, caught: 3 },\n    { name: \"Togepi\", number: 175, caught: 1 },\n  ],\n  \"number\"), true);"},{"text":"<p><code>truthCheck([{name: \"Pikachu\", number: 25, caught: 3}, {name: \"Togepi\", number: 175, caught: 1}, {name: \"MissingNo\", number: NaN, caught: 0}], \"caught\")</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { name: \"Pikachu\", number: 25, caught: 3 },\n    { name: \"Togepi\", number: 175, caught: 1 },\n    { name: \"MissingNo\", number: NaN, caught: 0 },\n  ],\n  \"caught\"), false);"},{"text":"<p><code>truthCheck([{name: \"Pikachu\", number: 25, caught: 3}, {name: \"Togepi\", number: 175, caught: 1}, {name: \"MissingNo\", number: NaN, caught: 0}], \"number\")</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { name: \"Pikachu\", number: 25, caught: 3 },\n    { name: \"Togepi\", number: 175, caught: 1 },\n    { name: \"MissingNo\", number: NaN, caught: 0 },\n  ],\n  \"number\"), false);"},{"text":"<p><code>truthCheck([{name: \"Quincy\", username: \"QuincyLarson\"}, {name: \"Naomi\", username: \"nhcarrigan\"}, {name: \"Camperbot\"}], \"username\")</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { name: \"Quincy\", username: \"QuincyLarson\" },\n    { name: \"Naomi\", username: \"nhcarrigan\" },\n    { name: \"Camperbot\" }\n  ],\n  \"username\"), false);"},{"text":"<p><code>truthCheck([{name: \"freeCodeCamp\", users: [{name: \"Quincy\"}, {name: \"Naomi\"}]}, {name: \"Code Radio\", users: [{name: \"Camperbot\"}]}, {name: \"\", users: []}], \"users\")</code> should return <code>true</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { name: \"freeCodeCamp\", users: [{ name: \"Quincy\" }, { name: \"Naomi\" }] },\n    { name: \"Code Radio\", users: [{ name: \"Camperbot\" }] },\n    { name: \"\", users: [] },\n  ],\n  \"users\"), true);"},{"text":"<p><code>truthCheck([{id: 1, data: {url: \"https://freecodecamp.org\", name: \"freeCodeCamp\"}}, {id: 2, data: {url: \"https://coderadio.freecodecamp.org/\", name: \"CodeRadio\"}}, {id: null, data: {}}], \"data\")</code> should return <code>true</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { id: 1, data: { url: \"https://www.freecodecamp.org\", name: \"freeCodeCamp\" } },\n    { id: 2, data: { url: \"https://coderadio.freecodecamp.org/\", name: \"CodeRadio\" } },\n    { id: null, data: {} },\n  ],\n  \"data\"), true);"},{"text":"<p><code>truthCheck([{id: 1, data: {url: \"https://freecodecamp.org\", name: \"freeCodeCamp\"}}, {id: 2, data: {url: \"https://coderadio.freecodecamp.org/\", name: \"CodeRadio\"}}, {id: null, data: {}}], \"id\")</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { id: 1, data: { url: \"https://www.freecodecamp.org\", name: \"freeCodeCamp\" } },\n    { id: 2, data: { url: \"https://coderadio.freecodecamp.org/\", name: \"CodeRadio\" } },\n    { id: null, data: {} },\n  ],\n  \"id\"), false);"}],"description":"<section id=\"description\">\n<p>Check if the predicate (second argument) is <dfn>truthy</dfn> on all elements of a collection (first argument).</p>\n<p>In other words, you are given an array collection of objects. The predicate <code>pre</code> will be an object property and you need to return <code>true</code> if its value is <code>truthy</code>. Otherwise, return <code>false</code>.</p>\n<p>In JavaScript, <code>truthy</code> values are values that translate to <code>true</code> when evaluated in a Boolean context.</p>\n<p>Remember, you can access object properties through either dot notation or <code>[]</code> notation.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":17,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a2f1d72d9b908d0bd72bb9f6","title":"Make a Person","challengeType":1,"forumTopicId":16020,"dashedName":"make-a-person","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const Person = function(firstAndLast) {\n  // Only change code below this line\n  // Complete the method below and implement the others similarly\n  this.getFullName = function() {\n    return \"\";\n  };\n  return firstAndLast;\n};\n\nconst bob = new Person('Bob Ross');\nbob.getFullName();","error":null,"seed":"const Person = function(firstAndLast) {\n  // Only change code below this line\n  // Complete the method below and implement the others similarly\n  this.getFullName = function() {\n    return \"\";\n  };\n  return firstAndLast;\n};\n\nconst bob = new Person('Bob Ross');\nbob.getFullName();"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const Person = function(firstAndLast) {\n\n  let firstName, lastName;\n\n  function updateName(str) {\n    firstName = str.split(\" \")[0];\n    lastName = str.split(\" \")[1];\n  }\n\n  updateName(firstAndLast);\n\n  this.getFirstName = function(){\n    return firstName;\n  };\n\n  this.getLastName = function(){\n    return lastName;\n  };\n\n  this.getFullName = function(){\n    return firstName + \" \" + lastName;\n  };\n\n  this.setFirstName = function(str){\n    firstName = str;\n  };\n\n\n  this.setLastName = function(str){\n    lastName = str;\n  };\n\n  this.setFullName = function(str){\n    updateName(str);\n  };\n};\n\nconst bob = new Person('Bob Ross');\nbob.getFullName();","error":null,"seed":"const Person = function(firstAndLast) {\n\n  let firstName, lastName;\n\n  function updateName(str) {\n    firstName = str.split(\" \")[0];\n    lastName = str.split(\" \")[1];\n  }\n\n  updateName(firstAndLast);\n\n  this.getFirstName = function(){\n    return firstName;\n  };\n\n  this.getLastName = function(){\n    return lastName;\n  };\n\n  this.getFullName = function(){\n    return firstName + \" \" + lastName;\n  };\n\n  this.setFirstName = function(str){\n    firstName = str;\n  };\n\n\n  this.setLastName = function(str){\n    lastName = str;\n  };\n\n  this.setFullName = function(str){\n    updateName(str);\n  };\n};\n\nconst bob = new Person('Bob Ross');\nbob.getFullName();"}]],"tests":[{"text":"<p>No properties should be added. <code>Object.keys(bob).length</code> should always return 6.</p>","testString":"assert.strictEqual(\n  Object.keys((function () {\n    let bob = new Person('Bob Ross');\n    bob.setFirstName('Haskell');\n    bob.setLastName('Curry');\n    bob.setFullName('John Smith');\n    return bob;\n  })()).length,\n  6\n );"},{"text":"<p><code>bob instanceof Person</code> should return <code>true</code>.</p>","testString":"assert.deepEqual(bob instanceof Person, true);"},{"text":"<p><code>bob.firstName</code> should return <code>undefined</code>.</p>","testString":"assert.deepEqual(bob.firstName, undefined);"},{"text":"<p><code>bob.lastName</code> should return <code>undefined</code>.</p>","testString":"assert.deepEqual(bob.lastName, undefined);"},{"text":"<p><code>bob.getFirstName()</code> should return the string <code>Bob</code>.</p>","testString":"assert.deepEqual(bob.getFirstName(), 'Bob');"},{"text":"<p><code>bob.getLastName()</code> should return the string <code>Ross</code>.</p>","testString":"assert.deepEqual(bob.getLastName(), 'Ross');"},{"text":"<p><code>bob.getFullName()</code> should return the string <code>Bob Ross</code>.</p>","testString":"assert.deepEqual(bob.getFullName(), 'Bob Ross');"},{"text":"<p><code>bob.getFullName()</code> should return the string <code>Haskell Ross</code> after <code>bob.setFirstName(\"Haskell\")</code>.</p>","testString":"assert.strictEqual(\n  (function () {\n    bob.setFirstName('Haskell');\n    return bob.getFullName();\n  })(),\n  'Haskell Ross'\n);"},{"text":"<p><code>bob.getFullName()</code> should return the string <code>Haskell Curry</code> after <code>bob.setLastName(\"Curry\")</code>.</p>","testString":"assert.strictEqual(\n  (function () {\n    var _bob = new Person('Haskell Ross');\n    _bob.setLastName('Curry');\n    return _bob.getFullName();\n  })(),\n  'Haskell Curry'\n);"},{"text":"<p><code>bob.getFullName()</code> should return the string <code>Haskell Curry</code> after <code>bob.setFullName(\"Haskell Curry\")</code>.</p>","testString":"assert.strictEqual(\n  (function () {\n    bob.setFullName('Haskell Curry');\n    return bob.getFullName();\n  })(),\n  'Haskell Curry'\n);"},{"text":"<p><code>bob.getFirstName()</code> should return the string <code>Haskell</code> after <code>bob.setFullName(\"Haskell Curry\")</code>.</p>","testString":"assert.strictEqual(\n  (function () {\n    bob.setFullName('Haskell Curry');\n    return bob.getFirstName();\n  })(),\n  'Haskell'\n);"},{"text":"<p><code>bob.getLastName()</code> should return the string <code>Curry</code> after <code>bob.setFullName(\"Haskell Curry\")</code>.</p>","testString":"assert.strictEqual(\n  (function () {\n    bob.setFullName('Haskell Curry');\n    return bob.getLastName();\n  })(),\n  'Curry'\n);"}],"description":"<section id=\"description\">\n<p>Fill in the object constructor with the following methods below:</p>\n<pre><code class=\"language-js\">getFirstName()\ngetLastName()\ngetFullName()\nsetFirstName(first)\nsetLastName(last)\nsetFullName(firstAndLast)\n</code></pre>\n<p>Run the tests to see the expected output for each method. The methods that take an argument must accept only one argument and it has to be a string. These methods must be the only available means of interacting with the object.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":19,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"af4afb223120f7348cdfc9fd","title":"Map the Debris","challengeType":1,"forumTopicId":16021,"dashedName":"map-the-debris","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function orbitalPeriod(arr) {\n  const GM = 398600.4418;\n  const earthRadius = 6367.4447;\n  return arr;\n}\n\norbitalPeriod([{name : \"sputnik\", avgAlt : 35873.5553}]);","error":null,"seed":"function orbitalPeriod(arr) {\n  const GM = 398600.4418;\n  const earthRadius = 6367.4447;\n  return arr;\n}\n\norbitalPeriod([{name : \"sputnik\", avgAlt : 35873.5553}]);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function orbitalPeriod(arr) {\n  const GM = 398600.4418;\n  const earthRadius = 6367.4447;\n  const TAU = 2 * Math.PI;\n  return arr.map(function(obj) {\n    return {\n      name: obj.name,\n      orbitalPeriod: Math.round(TAU * Math.sqrt(Math.pow(obj.avgAlt+earthRadius, 3)/GM))\n    };\n  });\n}","error":null,"seed":"function orbitalPeriod(arr) {\n  const GM = 398600.4418;\n  const earthRadius = 6367.4447;\n  const TAU = 2 * Math.PI;\n  return arr.map(function(obj) {\n    return {\n      name: obj.name,\n      orbitalPeriod: Math.round(TAU * Math.sqrt(Math.pow(obj.avgAlt+earthRadius, 3)/GM))\n    };\n  });\n}"}]],"tests":[{"text":"<p><code>orbitalPeriod([{name : \"sputnik\", avgAlt : 35873.5553}])</code> should return <code>[{name: \"sputnik\", orbitalPeriod: 86400}]</code>.</p>","testString":"assert.deepEqual(orbitalPeriod([{ name: 'sputnik', avgAlt: 35873.5553 }]), [\n  { name: 'sputnik', orbitalPeriod: 86400 }\n]);"},{"text":"<p><code>orbitalPeriod([{name: \"iss\", avgAlt: 413.6}, {name: \"hubble\", avgAlt: 556.7}, {name: \"moon\", avgAlt: 378632.553}])</code> should return <code>[{name : \"iss\", orbitalPeriod: 5557}, {name: \"hubble\", orbitalPeriod: 5734}, {name: \"moon\", orbitalPeriod: 2377399}]</code>.</p>","testString":"assert.deepEqual(\n  orbitalPeriod([\n    { name: 'iss', avgAlt: 413.6 },\n    { name: 'hubble', avgAlt: 556.7 },\n    { name: 'moon', avgAlt: 378632.553 }\n  ]),\n  [\n    { name: 'iss', orbitalPeriod: 5557 },\n    { name: 'hubble', orbitalPeriod: 5734 },\n    { name: 'moon', orbitalPeriod: 2377399 }\n  ]\n);"}],"description":"<section id=\"description\">\n<p>According to Kepler's Third Law, the orbital period $T$ of two point masses orbiting each other in a circular or elliptic orbit is:</p>\n<p>$$\nT = 2 \\pi \\sqrt{\\frac{a^{3}}{\\mu}}\n$$</p>\n<ul>\n<li>$a$ is the orbit's semi-major axis</li>\n<li>$μ = GM$ is the standard gravitational parameter</li>\n<li>$G$ is the gravitational constant,</li>\n<li>$M$ is the mass of the more massive body.</li>\n</ul>\n<p>Return a new array that transforms the elements' average altitude into their orbital periods (in seconds).</p>\n<p>The array will contain objects in the format <code>{name: 'name', avgAlt: avgAlt}</code>.</p>\n<p>The values should be rounded to the nearest whole number. The body being orbited is Earth.</p>\n<p>The radius of the earth is 6367.4447 kilometers, and the GM value of earth is 398600.4418 km<sup>3</sup>s<sup>-2</sup>.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":20,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"af7588ade1100bde429baf20","title":"Missing letters","challengeType":1,"forumTopicId":16023,"dashedName":"missing-letters","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function fearNotLetter(str) {\n  return str;\n}\n\nfearNotLetter(\"abce\");","error":null,"seed":"function fearNotLetter(str) {\n  return str;\n}\n\nfearNotLetter(\"abce\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function fearNotLetter (str) {\n  for (var i = str.charCodeAt(0); i <= str.charCodeAt(str.length - 1); i++) {\n    var letter = String.fromCharCode(i);\n    if (str.indexOf(letter) === -1) {\n      return letter;\n    }\n  }\n\n  return undefined;\n}","error":null,"seed":"function fearNotLetter (str) {\n  for (var i = str.charCodeAt(0); i <= str.charCodeAt(str.length - 1); i++) {\n    var letter = String.fromCharCode(i);\n    if (str.indexOf(letter) === -1) {\n      return letter;\n    }\n  }\n\n  return undefined;\n}"}]],"tests":[{"text":"<p><code>fearNotLetter(\"abce\")</code> should return the string <code>d</code>.</p>","testString":"assert.deepEqual(fearNotLetter('abce'), 'd');"},{"text":"<p><code>fearNotLetter(\"abcdefghjklmno\")</code> should return the string <code>i</code>.</p>","testString":"assert.deepEqual(fearNotLetter('abcdefghjklmno'), 'i');"},{"text":"<p><code>fearNotLetter(\"stvwx\")</code> should return the string <code>u</code>.</p>","testString":"assert.deepEqual(fearNotLetter('stvwx'), 'u');"},{"text":"<p><code>fearNotLetter(\"bcdf\")</code> should return the string <code>e</code>.</p>","testString":"assert.deepEqual(fearNotLetter('bcdf'), 'e');"},{"text":"<p><code>fearNotLetter(\"abcdefghijklmnopqrstuvwxyz\")</code> should return <code>undefined</code>.</p>","testString":"assert.isUndefined(fearNotLetter('abcdefghijklmnopqrstuvwxyz'));"}],"description":"<section id=\"description\">\n<p>Find the missing letter in the passed letter range and return it.</p>\n<p>If all letters are present in the range, return <code>undefined</code>.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":8,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"aa7697ea2477d1316795783b","title":"Pig Latin","challengeType":1,"forumTopicId":16039,"dashedName":"pig-latin","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function translatePigLatin(str) {\n  return str;\n}\n\ntranslatePigLatin(\"consonant\");","error":null,"seed":"function translatePigLatin(str) {\n  return str;\n}\n\ntranslatePigLatin(\"consonant\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function translatePigLatin(str) {\n  if (isVowel(str.charAt(0))) return str + \"way\";\n  var front = [];\n  str = str.split('');\n  while (str.length && !isVowel(str[0])) {\n    front.push(str.shift());\n  }\n  return [].concat(str, front).join('') + 'ay';\n}\n\nfunction isVowel(c) {\n  return ['a', 'e', 'i', 'o', 'u'].indexOf(c.toLowerCase()) !== -1;\n}","error":null,"seed":"function translatePigLatin(str) {\n  if (isVowel(str.charAt(0))) return str + \"way\";\n  var front = [];\n  str = str.split('');\n  while (str.length && !isVowel(str[0])) {\n    front.push(str.shift());\n  }\n  return [].concat(str, front).join('') + 'ay';\n}\n\nfunction isVowel(c) {\n  return ['a', 'e', 'i', 'o', 'u'].indexOf(c.toLowerCase()) !== -1;\n}"}]],"tests":[{"text":"<p><code>translatePigLatin(\"california\")</code> should return the string <code>aliforniacay</code>.</p>","testString":"assert.deepEqual(translatePigLatin('california'), 'aliforniacay');"},{"text":"<p><code>translatePigLatin(\"paragraphs\")</code> should return the string <code>aragraphspay</code>.</p>","testString":"assert.deepEqual(translatePigLatin('paragraphs'), 'aragraphspay');"},{"text":"<p><code>translatePigLatin(\"glove\")</code> should return the string <code>oveglay</code>.</p>","testString":"assert.deepEqual(translatePigLatin('glove'), 'oveglay');"},{"text":"<p><code>translatePigLatin(\"algorithm\")</code> should return the string <code>algorithmway</code>.</p>","testString":"assert.deepEqual(translatePigLatin('algorithm'), 'algorithmway');"},{"text":"<p><code>translatePigLatin(\"eight\")</code> should return the string <code>eightway</code>.</p>","testString":"assert.deepEqual(translatePigLatin('eight'), 'eightway');"},{"text":"<p>Should handle words where the first vowel comes in the middle of the word.  <code>translatePigLatin(\"schwartz\")</code> should return the string <code>artzschway</code>.</p>","testString":"assert.deepEqual(translatePigLatin('schwartz'), 'artzschway');"},{"text":"<p>Should handle words without vowels. <code>translatePigLatin(\"rhythm\")</code> should return the string <code>rhythmay</code>.</p>","testString":"assert.deepEqual(translatePigLatin('rhythm'), 'rhythmay');"}],"description":"<section id=\"description\">\n<p>Pig Latin is a way of altering English Words. The rules are as follows:</p>\n<p>- If a word begins with a consonant, take the first consonant or consonant cluster, move it to the end of the word, and add <code>ay</code> to it.</p>\n<p>- If a word begins with a vowel, just add <code>way</code> at the end.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Translate the provided string to Pig Latin. Input strings are guaranteed to be English words in all lowercase.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":5,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a0b5010f579e69b815e7c5d6","title":"Search and Replace","challengeType":1,"forumTopicId":16045,"dashedName":"search-and-replace","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function myReplace(str, before, after) {\n  return str;\n}\n\nmyReplace(\"A quick brown fox jumped over the lazy dog\", \"jumped\", \"leaped\");","error":null,"seed":"function myReplace(str, before, after) {\n  return str;\n}\n\nmyReplace(\"A quick brown fox jumped over the lazy dog\", \"jumped\", \"leaped\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function myReplace(str, before, after) {\n  if (before.charAt(0) === before.charAt(0).toUpperCase()) {\n    after = after.charAt(0).toUpperCase() + after.substring(1);\n  } else {\n    after = after.charAt(0).toLowerCase() + after.substring(1);\n  }\n  return str.replace(before, after);\n}","error":null,"seed":"function myReplace(str, before, after) {\n  if (before.charAt(0) === before.charAt(0).toUpperCase()) {\n    after = after.charAt(0).toUpperCase() + after.substring(1);\n  } else {\n    after = after.charAt(0).toLowerCase() + after.substring(1);\n  }\n  return str.replace(before, after);\n}"}]],"tests":[{"text":"<p><code>myReplace(\"Let us go to the store\", \"store\", \"mall\")</code> should return the string <code>Let us go to the mall</code>.</p>","testString":"assert.deepEqual(\n  myReplace('Let us go to the store', 'store', 'mall'),\n  'Let us go to the mall'\n);"},{"text":"<p><code>myReplace(\"He is Sleeping on the couch\", \"Sleeping\", \"sitting\")</code> should return the string <code>He is Sitting on the couch</code>.</p>","testString":"assert.deepEqual(\n  myReplace('He is Sleeping on the couch', 'Sleeping', 'sitting'),\n  'He is Sitting on the couch'\n);"},{"text":"<p><code>myReplace(\"I think we should look up there\", \"up\", \"Down\")</code> should return the string <code>I think we should look down there</code>.</p>","testString":"assert.deepEqual(\n  myReplace('I think we should look up there', 'up', 'Down'),\n  'I think we should look down there'\n);"},{"text":"<p><code>myReplace(\"This has a spellngi error\", \"spellngi\", \"spelling\")</code> should return the string <code>This has a spelling error</code>.</p>","testString":"assert.deepEqual(\n  myReplace('This has a spellngi error', 'spellngi', 'spelling'),\n  'This has a spelling error'\n);"},{"text":"<p><code>myReplace(\"His name is Tom\", \"Tom\", \"john\")</code> should return the string <code>His name is John</code>.</p>","testString":"assert.deepEqual(\n  myReplace('His name is Tom', 'Tom', 'john'),\n  'His name is John'\n);"},{"text":"<p><code>myReplace(\"Let us get back to more Coding\", \"Coding\", \"algorithms\")</code> should return the string <code>Let us get back to more Algorithms</code>.</p>","testString":"assert.deepEqual(\n  myReplace('Let us get back to more Coding', 'Coding', 'algorithms'),\n  'Let us get back to more Algorithms'\n);"}],"description":"<section id=\"description\">\n<p>Perform a search and replace on the sentence using the arguments provided and return the new sentence.</p>\n<p>First argument is the sentence to perform the search and replace on.</p>\n<p>Second argument is the word that you will be replacing (before).</p>\n<p>Third argument is what you will be replacing the second argument with (after).</p>\n<p><strong>Note:</strong> Preserve the case of the first character in the original word when you are replacing it. For example if you mean to replace the word <code>Book</code> with the word <code>dog</code>, it should be replaced as <code>Dog</code></p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":6,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a39963a4c10bc8b4d4f06d7e","title":"Seek and Destroy","challengeType":1,"forumTopicId":16046,"dashedName":"seek-and-destroy","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function destroyer(arr) {\n  return arr;\n}\n\ndestroyer([1, 2, 3, 1, 2, 3], 2, 3);","error":null,"seed":"function destroyer(arr) {\n  return arr;\n}\n\ndestroyer([1, 2, 3, 1, 2, 3], 2, 3);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function destroyer(arr) {\n  var hash = Object.create(null);\n  [].slice.call(arguments, 1).forEach(function(e) {\n    hash[e] = true;\n  });\n  return arr.filter(function(e) { return !(e in hash);});\n}\n\ndestroyer([1, 2, 3, 1, 2, 3], 2, 3);","error":null,"seed":"function destroyer(arr) {\n  var hash = Object.create(null);\n  [].slice.call(arguments, 1).forEach(function(e) {\n    hash[e] = true;\n  });\n  return arr.filter(function(e) { return !(e in hash);});\n}\n\ndestroyer([1, 2, 3, 1, 2, 3], 2, 3);"}]],"tests":[{"text":"<p><code>destroyer([1, 2, 3, 1, 2, 3], 2, 3)</code> should return <code>[1, 1]</code>.</p>","testString":"assert.deepEqual(destroyer([1, 2, 3, 1, 2, 3], 2, 3), [1, 1]);"},{"text":"<p><code>destroyer([1, 2, 3, 5, 1, 2, 3], 2, 3)</code> should return <code>[1, 5, 1]</code>.</p>","testString":"assert.deepEqual(destroyer([1, 2, 3, 5, 1, 2, 3], 2, 3), [1, 5, 1]);"},{"text":"<p><code>destroyer([3, 5, 1, 2, 2], 2, 3, 5)</code> should return <code>[1]</code>.</p>","testString":"assert.deepEqual(destroyer([3, 5, 1, 2, 2], 2, 3, 5), [1]);"},{"text":"<p><code>destroyer([2, 3, 2, 3], 2, 3)</code> should return <code>[]</code>.</p>","testString":"assert.deepEqual(destroyer([2, 3, 2, 3], 2, 3), []);"},{"text":"<p><code>destroyer([\"tree\", \"hamburger\", 53], \"tree\", 53)</code> should return <code>[\"hamburger\"]</code>.</p>","testString":"assert.deepEqual(destroyer(['tree', 'hamburger', 53], 'tree', 53), [\n  'hamburger'\n]);"},{"text":"<p><code>destroyer([\"possum\", \"trollo\", 12, \"safari\", \"hotdog\", 92, 65, \"grandma\", \"bugati\", \"trojan\", \"yacht\"], \"yacht\", \"possum\", \"trollo\", \"safari\", \"hotdog\", \"grandma\", \"bugati\", \"trojan\")</code> should return <code>[12,92,65]</code>.</p>","testString":"assert.deepEqual(\n  destroyer(\n    [\n      'possum',\n      'trollo',\n      12,\n      'safari',\n      'hotdog',\n      92,\n      65,\n      'grandma',\n      'bugati',\n      'trojan',\n      'yacht'\n    ],\n    'yacht',\n    'possum',\n    'trollo',\n    'safari',\n    'hotdog',\n    'grandma',\n    'bugati',\n    'trojan'\n  ),\n  [12, 92, 65]\n);"}],"description":"<section id=\"description\">\n<p>You will be provided with an initial array (the first argument in the <code>destroyer</code> function), followed by one or more arguments. Remove all elements from the initial array that are of the same value as these arguments.</p>\n<p><strong>Note:</strong> You have to use the <code>arguments</code> object.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":2,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"ae9defd7acaf69703ab432ea","title":"Smallest Common Multiple","challengeType":1,"forumTopicId":16075,"dashedName":"smallest-common-multiple","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function smallestCommons(arr) {\n  return arr;\n}\n\nsmallestCommons([1,5]);","error":null,"seed":"function smallestCommons(arr) {\n  return arr;\n}\n\nsmallestCommons([1,5]);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function gcd(a, b) {\n    while (b !== 0) {\n        a = [b, b = a % b][0];\n    }\n    return a;\n}\n\nfunction lcm(a, b) {\n    return (a * b) / gcd(a, b);\n}\n\nfunction smallestCommons(arr) {\n  arr.sort(function(a,b) {return a-b;});\n  var rng = [];\n  for (var i = arr[0]; i <= arr[1]; i++) {\n    rng.push(i);\n  }\n  return rng.reduce(lcm);\n}","error":null,"seed":"function gcd(a, b) {\n    while (b !== 0) {\n        a = [b, b = a % b][0];\n    }\n    return a;\n}\n\nfunction lcm(a, b) {\n    return (a * b) / gcd(a, b);\n}\n\nfunction smallestCommons(arr) {\n  arr.sort(function(a,b) {return a-b;});\n  var rng = [];\n  for (var i = arr[0]; i <= arr[1]; i++) {\n    rng.push(i);\n  }\n  return rng.reduce(lcm);\n}"}]],"tests":[{"text":"<p><code>smallestCommons([1, 5])</code> should return a number.</p>","testString":"assert.deepEqual(typeof smallestCommons([1, 5]), 'number');"},{"text":"<p><code>smallestCommons([1, 5])</code> should return 60.</p>","testString":"assert.deepEqual(smallestCommons([1, 5]), 60);"},{"text":"<p><code>smallestCommons([5, 1])</code> should return 60.</p>","testString":"assert.deepEqual(smallestCommons([5, 1]), 60);"},{"text":"<p><code>smallestCommons([2, 10])</code> should return 2520.</p>","testString":"assert.deepEqual(smallestCommons([2, 10]), 2520);"},{"text":"<p><code>smallestCommons([1, 13])</code> should return 360360.</p>","testString":"assert.deepEqual(smallestCommons([1, 13]), 360360);"},{"text":"<p><code>smallestCommons([23, 18])</code> should return 6056820.</p>","testString":"assert.deepEqual(smallestCommons([23, 18]), 6056820);"}],"description":"<section id=\"description\">\n<p>Find the smallest common multiple of the provided parameters that can be evenly divided by both, as well as by all sequential numbers in the range between these parameters.</p>\n<p>The range will be an array of two numbers that will not necessarily be in numerical order.</p>\n<p>For example, if given 1 and 3, find the smallest common multiple of both 1 and 3 that is also evenly divisible by all numbers <em>between</em> 1 and 3. The answer here would be 6.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":13,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a105e963526e7de52b219be9","title":"Sorted Union","challengeType":1,"forumTopicId":16077,"dashedName":"sorted-union","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function uniteUnique(arr) {\n  return arr;\n}\n\nuniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);","error":null,"seed":"function uniteUnique(arr) {\n  return arr;\n}\n\nuniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function uniteUnique(arr) {\n  return [].slice.call(arguments).reduce(function(a, b) {\n    return [].concat(\n      a, \n      b.filter(function(e, currentIndex) {\n        return b.indexOf(e) === currentIndex && a.indexOf(e) === -1;\n      }));\n  }, []);\n}","error":null,"seed":"function uniteUnique(arr) {\n  return [].slice.call(arguments).reduce(function(a, b) {\n    return [].concat(\n      a, \n      b.filter(function(e, currentIndex) {\n        return b.indexOf(e) === currentIndex && a.indexOf(e) === -1;\n      }));\n  }, []);\n}"}]],"tests":[{"text":"<p><code>uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1])</code> should return <code>[1, 3, 2, 5, 4]</code>.</p>","testString":"assert.deepEqual(uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]), [1, 3, 2, 5, 4]);"},{"text":"<p><code>uniteUnique([1, 2, 3], [5, 2, 1])</code> should return <code>[1, 2, 3, 5]</code>.</p>","testString":"assert.deepEqual(uniteUnique([1, 2, 3], [5, 2, 1]), [1, 2, 3, 5]);"},{"text":"<p><code>uniteUnique([1, 2, 3], [5, 2, 1, 4], [2, 1], [6, 7, 8])</code> should return <code>[1, 2, 3, 5, 4, 6, 7, 8]</code>.</p>","testString":"assert.deepEqual(uniteUnique([1, 2, 3], [5, 2, 1, 4], [2, 1], [6, 7, 8]), [\n  1,\n  2,\n  3,\n  5,\n  4,\n  6,\n  7,\n  8\n]);"},{"text":"<p><code>uniteUnique([1, 3, 2], [5, 4], [5, 6])</code> should return <code>[1, 3, 2, 5, 4, 6]</code>.</p>","testString":"assert.deepEqual(uniteUnique([1, 3, 2], [5, 4], [5, 6]), [1, 3, 2, 5, 4, 6]);"},{"text":"<p><code>uniteUnique([1, 3, 2, 3], [5, 2, 1, 4], [2, 1])</code> should return <code>[1, 3, 2, 5, 4]</code>.</p>","testString":"assert.deepEqual(uniteUnique([1, 3, 2, 3], [5, 2, 1, 4], [2, 1]), [1, 3, 2, 5, 4]);"}],"description":"<section id=\"description\">\n<p>Write a function that takes two or more arrays and returns a new array of unique values in the order of the original provided arrays.</p>\n<p>In other words, all values present from all arrays should be included in their original order, but with no duplicates in the final array.</p>\n<p>The unique numbers should be sorted by their original order, but the final array should not be sorted in numerical order.</p>\n<p>Check the assertion tests for examples.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":9,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a103376db3ba46b2d50db289","title":"Spinal Tap Case","challengeType":1,"forumTopicId":16078,"dashedName":"spinal-tap-case","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function spinalCase(str) {\n  return str;\n}\n\nspinalCase('This Is Spinal Tap');","error":null,"seed":"function spinalCase(str) {\n  return str;\n}\n\nspinalCase('This Is Spinal Tap');"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function spinalCase(str) {\n  str = str.replace(/([a-z](?=[A-Z]))/g, '$1 ');\n  return str.toLowerCase().replace(/\\ |\\_/g, '-');\n}","error":null,"seed":"function spinalCase(str) {\n  str = str.replace(/([a-z](?=[A-Z]))/g, '$1 ');\n  return str.toLowerCase().replace(/\\ |\\_/g, '-');\n}"}]],"tests":[{"text":"<p><code>spinalCase(\"This Is Spinal Tap\")</code> should return the string <code>this-is-spinal-tap</code>.</p>","testString":"assert.deepEqual(spinalCase('This Is Spinal Tap'), 'this-is-spinal-tap');"},{"text":"<p><code>spinalCase(\"thisIsSpinalTap\")</code> should return the string <code>this-is-spinal-tap</code>.</p>","testString":"assert.strictEqual(spinalCase('thisIsSpinalTap'), 'this-is-spinal-tap');"},{"text":"<p><code>spinalCase(\"The_Andy_Griffith_Show\")</code> should return the string <code>the-andy-griffith-show</code>.</p>","testString":"assert.strictEqual(\n  spinalCase('The_Andy_Griffith_Show'),\n  'the-andy-griffith-show'\n);"},{"text":"<p><code>spinalCase(\"Teletubbies say Eh-oh\")</code> should return the string <code>teletubbies-say-eh-oh</code>.</p>","testString":"assert.strictEqual(\n  spinalCase('Teletubbies say Eh-oh'),\n  'teletubbies-say-eh-oh'\n);"},{"text":"<p><code>spinalCase(\"AllThe-small Things\")</code> should return the string <code>all-the-small-things</code>.</p>","testString":"assert.strictEqual(spinalCase('AllThe-small Things'), 'all-the-small-things');"}],"description":"<section id=\"description\">\n<p>Convert a string to spinal case. Spinal case is all-lowercase-words-joined-by-dashes.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":4,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"ab306dbdcc907c7ddfc30830","title":"Steamroller","challengeType":1,"forumTopicId":16079,"dashedName":"steamroller","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function steamrollArray(arr) {\n  return arr;\n}\n\nsteamrollArray([1, [2], [3, [[4]]]]);","error":null,"seed":"function steamrollArray(arr) {\n  return arr;\n}\n\nsteamrollArray([1, [2], [3, [[4]]]]);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function steamrollArray(arr) {\n  if (!Array.isArray(arr)) {\n    return [arr];\n  }\n  var out = [];\n  arr.forEach(function(e) {\n    steamrollArray(e).forEach(function(v) {\n      out.push(v);\n    });\n  });\n  return out;\n}","error":null,"seed":"function steamrollArray(arr) {\n  if (!Array.isArray(arr)) {\n    return [arr];\n  }\n  var out = [];\n  arr.forEach(function(e) {\n    steamrollArray(e).forEach(function(v) {\n      out.push(v);\n    });\n  });\n  return out;\n}"}]],"tests":[{"text":"<p><code>steamrollArray([[[\"a\"]], [[\"b\"]]])</code> should return <code>[\"a\", \"b\"]</code>.</p>","testString":"assert.deepEqual(steamrollArray([[['a']], [['b']]]), ['a', 'b']);"},{"text":"<p><code>steamrollArray([1, [2], [3, [[4]]]])</code> should return <code>[1, 2, 3, 4]</code>.</p>","testString":"assert.deepEqual(steamrollArray([1, [2], [3, [[4]]]]), [1, 2, 3, 4]);"},{"text":"<p><code>steamrollArray([1, [], [3, [[4]]]])</code> should return <code>[1, 3, 4]</code>.</p>","testString":"assert.deepEqual(steamrollArray([1, [], [3, [[4]]]]), [1, 3, 4]);"},{"text":"<p><code>steamrollArray([1, {}, [3, [[4]]]])</code> should return <code>[1, {}, 3, 4]</code>.</p>","testString":"assert.deepEqual(steamrollArray([1, {}, [3, [[4]]]]), [1, {}, 3, 4]);"},{"text":"<p>Your solution should not use the <code>Array.prototype.flat()</code> or <code>Array.prototype.flatMap()</code> methods.</p>","testString":"assert(!code.match(/\\.\\s*flat\\s*\\(/) && !code.match(/\\.\\s*flatMap\\s*\\(/));"},{"text":"<p>Global variables should not be used.</p>","testString":"steamrollArray([1, {}, [3, [[4]]]])\nassert.deepEqual(steamrollArray([1, {}, [3, [[4]]]]), [1, {}, 3, 4])"}],"description":"<section id=\"description\">\n<p>Flatten a nested array. You must account for varying levels of nesting.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":15,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a3566b1109230028080c9345","title":"Sum All Numbers in a Range","challengeType":1,"forumTopicId":16083,"dashedName":"sum-all-numbers-in-a-range","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function sumAll(arr) {\n  return 1;\n}\n\nsumAll([1, 4]);","error":null,"seed":"function sumAll(arr) {\n  return 1;\n}\n\nsumAll([1, 4]);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function sumAll(arr) {\n  var sum = 0;\n  arr.sort(function(a,b) {return a-b;});\n  for (var i = arr[0]; i <= arr[1]; i++) {\n    sum += i;\n  }\n  return sum;\n}","error":null,"seed":"function sumAll(arr) {\n  var sum = 0;\n  arr.sort(function(a,b) {return a-b;});\n  for (var i = arr[0]; i <= arr[1]; i++) {\n    sum += i;\n  }\n  return sum;\n}"}]],"tests":[{"text":"<p><code>sumAll([1, 4])</code> should return a number.</p>","testString":"assert(typeof sumAll([1, 4]) === 'number');"},{"text":"<p><code>sumAll([1, 4])</code> should return 10.</p>","testString":"assert.deepEqual(sumAll([1, 4]), 10);"},{"text":"<p><code>sumAll([4, 1])</code> should return 10.</p>","testString":"assert.deepEqual(sumAll([4, 1]), 10);"},{"text":"<p><code>sumAll([5, 10])</code> should return 45.</p>","testString":"assert.deepEqual(sumAll([5, 10]), 45);"},{"text":"<p><code>sumAll([10, 5])</code> should return 45.</p>","testString":"assert.deepEqual(sumAll([10, 5]), 45);"}],"description":"<section id=\"description\">\n<p>We'll pass you an array of two numbers. Return the sum of those two numbers plus the sum of all the numbers between them. The lowest number will not always come first.</p>\n<p>For example, <code>sumAll([4,1])</code> should return <code>10</code> because sum of all the numbers between 1 and 4 (both inclusive) is <code>10</code>.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":0,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a5229172f011153519423690","title":"Sum All Odd Fibonacci Numbers","challengeType":1,"forumTopicId":16084,"dashedName":"sum-all-odd-fibonacci-numbers","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function sumFibs(num) {\n  return num;\n}\n\nsumFibs(4);","error":null,"seed":"function sumFibs(num) {\n  return num;\n}\n\nsumFibs(4);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function sumFibs(num) {\n  var a = 1;\n  var b = 1;\n  var s = 0;\n  while (a <= num) {\n    if (a % 2 !== 0) {\n      s += a;\n    }\n    a = [b, b=b+a][0];\n  }\n  return s;\n}","error":null,"seed":"function sumFibs(num) {\n  var a = 1;\n  var b = 1;\n  var s = 0;\n  while (a <= num) {\n    if (a % 2 !== 0) {\n      s += a;\n    }\n    a = [b, b=b+a][0];\n  }\n  return s;\n}"}]],"tests":[{"text":"<p><code>sumFibs(1)</code> should return a number.</p>","testString":"assert(typeof sumFibs(1) === 'number');"},{"text":"<p><code>sumFibs(1000)</code> should return 1785.</p>","testString":"assert(sumFibs(1000) === 1785);"},{"text":"<p><code>sumFibs(4000000)</code> should return 4613732.</p>","testString":"assert(sumFibs(4000000) === 4613732);"},{"text":"<p><code>sumFibs(4)</code> should return 5.</p>","testString":"assert(sumFibs(4) === 5);"},{"text":"<p><code>sumFibs(75024)</code> should return 60696.</p>","testString":"assert(sumFibs(75024) === 60696);"},{"text":"<p><code>sumFibs(75025)</code> should return 135721.</p>","testString":"assert(sumFibs(75025) === 135721);"}],"description":"<section id=\"description\">\n<p>Given a positive integer <code>num</code>, return the sum of all odd Fibonacci numbers that are less than or equal to <code>num</code>.</p>\n<p>The first two numbers in the Fibonacci sequence are 1 and 1. Every additional number in the sequence is the sum of the two previous numbers. The first six numbers of the Fibonacci sequence are 1, 1, 2, 3, 5 and 8.</p>\n<p>For example, <code>sumFibs(10)</code> should return <code>10</code> because all odd Fibonacci numbers less than or equal to <code>10</code> are 1, 1, 3, and 5.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":11,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a3bfc1673c0526e06d3ac698","title":"Sum All Primes","challengeType":1,"forumTopicId":16085,"dashedName":"sum-all-primes","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function sumPrimes(num) {\n  return num;\n}\n\nsumPrimes(10);","error":null,"seed":"function sumPrimes(num) {\n  return num;\n}\n\nsumPrimes(10);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"class PrimeSeive {\n  constructor(num) {\n    const seive = Array(Math.floor((num - 1) / 2)).fill(true);\n    const upper = Math.floor((num - 1) / 2);\n    const sqrtUpper = Math.floor((Math.sqrt(num) - 1) / 2);\n\n    for (let i = 0; i <= sqrtUpper; i++) {\n      if (seive[i]) {\n        // Mark value in seive array\n        const prime = 2 * i + 3;\n        // Mark all multiples of this number as false (not prime)\n        const primeSqaredIndex = 2 * i ** 2 + 6 * i + 3;\n        for (let j = primeSqaredIndex; j < upper; j += prime) {\n          seive[j] = false;\n        }\n      }\n    }\n\n    this._seive = seive;\n  }\n\n  isPrime(num) {\n    return num === 2\n      ? true\n      : num % 2 === 0\n        ? false\n        : this.isOddPrime(num);\n  }\n\n  isOddPrime(num) {\n    return this._seive[(num - 3) / 2];\n  }\n};\n\nfunction sumPrimes(num) {\n  const primeSeive = new PrimeSeive(num);\n\n  let sum = 2;\n  for (let i = 3; i <= num; i += 2) {\n    if (primeSeive.isOddPrime(i)) sum += i;\n  }\n  return sum;\n}\n\nsumPrimes(10);","error":null,"seed":"class PrimeSeive {\n  constructor(num) {\n    const seive = Array(Math.floor((num - 1) / 2)).fill(true);\n    const upper = Math.floor((num - 1) / 2);\n    const sqrtUpper = Math.floor((Math.sqrt(num) - 1) / 2);\n\n    for (let i = 0; i <= sqrtUpper; i++) {\n      if (seive[i]) {\n        // Mark value in seive array\n        const prime = 2 * i + 3;\n        // Mark all multiples of this number as false (not prime)\n        const primeSqaredIndex = 2 * i ** 2 + 6 * i + 3;\n        for (let j = primeSqaredIndex; j < upper; j += prime) {\n          seive[j] = false;\n        }\n      }\n    }\n\n    this._seive = seive;\n  }\n\n  isPrime(num) {\n    return num === 2\n      ? true\n      : num % 2 === 0\n        ? false\n        : this.isOddPrime(num);\n  }\n\n  isOddPrime(num) {\n    return this._seive[(num - 3) / 2];\n  }\n};\n\nfunction sumPrimes(num) {\n  const primeSeive = new PrimeSeive(num);\n\n  let sum = 2;\n  for (let i = 3; i <= num; i += 2) {\n    if (primeSeive.isOddPrime(i)) sum += i;\n  }\n  return sum;\n}\n\nsumPrimes(10);"}]],"tests":[{"text":"<p><code>sumPrimes(10)</code> should return a number.</p>","testString":"assert.deepEqual(typeof sumPrimes(10), 'number');"},{"text":"<p><code>sumPrimes(10)</code> should return 17.</p>","testString":"assert.deepEqual(sumPrimes(10), 17);"},{"text":"<p><code>sumPrimes(977)</code> should return 73156.</p>","testString":"assert.deepEqual(sumPrimes(977), 73156);"}],"description":"<section id=\"description\">\n<p>A <dfn>prime number</dfn> is a whole number greater than 1 with exactly two divisors: 1 and itself. For example, 2 is a prime number because it is only divisible by 1 and 2. In contrast, 4 is not prime since it is divisible by 1, 2 and 4.</p>\n<p>Rewrite <code>sumPrimes</code> so it returns the sum of all prime numbers that are less than or equal to num.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":12,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"a8e512fbe388ac2f9198f0fa","title":"Wherefore art thou","challengeType":1,"forumTopicId":16092,"dashedName":"wherefore-art-thou","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function whatIsInAName(collection, source) {\n\n}\n\nwhatIsInAName([{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }], { last: \"Capulet\" });","error":null,"seed":"function whatIsInAName(collection, source) {\n\n}\n\nwhatIsInAName([{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }], { last: \"Capulet\" });"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function whatIsInAName(collection, source) {\n  const arr = [];\n  const keys = Object.keys(source);\n  collection.forEach(function(e) {\n    if(keys.every(function(key) {return e[key] === source[key];})) {\n      arr.push(e);\n    }\n  });\n  return arr;\n}","error":null,"seed":"function whatIsInAName(collection, source) {\n  const arr = [];\n  const keys = Object.keys(source);\n  collection.forEach(function(e) {\n    if(keys.every(function(key) {return e[key] === source[key];})) {\n      arr.push(e);\n    }\n  });\n  return arr;\n}"}]],"tests":[{"text":"<p><code>whatIsInAName([{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }], { last: \"Capulet\" })</code> should return <code>[{ first: \"Tybalt\", last: \"Capulet\" }]</code>.</p>","testString":"assert.deepEqual(\n  whatIsInAName(\n    [\n      { first: 'Romeo', last: 'Montague' },\n      { first: 'Mercutio', last: null },\n      { first: 'Tybalt', last: 'Capulet' }\n    ],\n    { last: 'Capulet' }\n  ),\n  [{ first: 'Tybalt', last: 'Capulet' }]\n);"},{"text":"<p><code>whatIsInAName([{ \"apple\": 1 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2 }], { \"apple\": 1 })</code> should return <code>[{ \"apple\": 1 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2 }]</code>.</p>","testString":"assert.deepEqual(\n  whatIsInAName([{ apple: 1 }, { apple: 1 }, { apple: 1, bat: 2 }], {\n    apple: 1\n  }),\n  [{ apple: 1 }, { apple: 1 }, { apple: 1, bat: 2 }]\n);"},{"text":"<p><code>whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], { \"apple\": 1, \"bat\": 2 })</code> should return <code>[{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }]</code>.</p>","testString":"assert.deepEqual(\n  whatIsInAName(\n    [{ apple: 1, bat: 2 }, { bat: 2 }, { apple: 1, bat: 2, cookie: 2 }],\n    { apple: 1, bat: 2 }\n  ),\n  [\n    { apple: 1, bat: 2 },\n    { apple: 1, bat: 2, cookie: 2 }\n  ]\n);"},{"text":"<p><code>whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }], { \"apple\": 1, \"cookie\": 2 })</code> should return <code>[{ \"apple\": 1, \"bat\": 2, \"cookie\": 2 }]</code>.</p>","testString":"assert.deepEqual(\n  whatIsInAName(\n    [{ apple: 1, bat: 2 }, { apple: 1 }, { apple: 1, bat: 2, cookie: 2 }],\n    { apple: 1, cookie: 2 }\n  ),\n  [{ apple: 1, bat: 2, cookie: 2 }]\n);"},{"text":"<p><code>whatIsInAName([{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1 }, { \"apple\": 1, \"bat\": 2, \"cookie\": 2 }, { \"bat\":2 }], { \"apple\": 1, \"bat\": 2 })</code> should return <code>[{ \"apple\": 1, \"bat\": 2 }, { \"apple\": 1, \"bat\": 2, \"cookie\":2 }]</code>.</p>","testString":"assert.deepEqual(\n  whatIsInAName(\n    [\n      { apple: 1, bat: 2 },\n      { apple: 1 },\n      { apple: 1, bat: 2, cookie: 2 },\n      { bat: 2 }\n    ],\n    { apple: 1, bat: 2 }\n  ),\n  [\n    { apple: 1, bat: 2 },\n    { apple: 1, bat: 2, cookie: 2 }\n  ]\n);"},{"text":"<p><code>whatIsInAName([{\"a\": 1, \"b\": 2, \"c\": 3}], {\"a\": 1, \"b\": 9999, \"c\": 3})</code> should return <code>[]</code></p>","testString":"assert.deepEqual(\n  whatIsInAName([{ a: 1, b: 2, c: 3 }], { a: 1, b: 9999, c: 3 }),\n  []\n);"},{"text":"<p><code>whatIsInAName([{\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 9999}], {\"a\": 1, \"b\": 9999, \"c\": 3})</code> should return <code>[]</code></p>","testString":"assert.deepEqual(\n  whatIsInAName([{ a: 1, b: 2, c: 3, d: 9999 }], { a: 1, b: 9999, c: 3 }),\n  []\n);"}],"description":"<section id=\"description\">\n<p>Make a function that looks through an array of objects (first argument) and returns an array of all objects that have matching name and value pairs (second argument). Each name and value pair of the source object has to be present in the object from the collection if it is to be included in the returned array.</p>\n<p>For example, if the first argument is <code>[{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }]</code>, and the second argument is <code>{ last: \"Capulet\" }</code>, then you must return the third object from the array (the first argument), because it contains the name and its value, that was passed on as the second argument.</p>\n</section>","block":"intermediate-algorithm-scripting","hasEditableBoundaries":false,"order":8,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":3,"required":[],"template":"","time":"50 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false}]},"object-oriented-programming":{"meta":{"name":"Object Oriented Programming","isUpcomingChange":false,"dashedName":"object-oriented-programming","order":6,"time":"5 hours","template":"","required":[],"superBlock":"javascript-algorithms-and-data-structures","challengeOrder":[["587d7dac367417b2b2512b73","Create a Basic JavaScript Object"],["587d7dac367417b2b2512b74","Use Dot Notation to Access the Properties of an Object"],["587d7dad367417b2b2512b75","Create a Method on an Object"],["587d7dad367417b2b2512b76","Make Code More Reusable with the this Keyword"],["587d7dad367417b2b2512b77","Define a Constructor Function"],["587d7dad367417b2b2512b78","Use a Constructor to Create Objects"],["587d7dae367417b2b2512b79","Extend Constructors to Receive Arguments"],["587d7dae367417b2b2512b7a","Verify an Object's Constructor with instanceof"],["587d7dae367417b2b2512b7b","Understand Own Properties"],["587d7dae367417b2b2512b7c","Use Prototype Properties to Reduce Duplicate Code"],["587d7daf367417b2b2512b7d","Iterate Over All Properties"],["587d7daf367417b2b2512b7e","Understand the Constructor Property"],["587d7daf367417b2b2512b7f","Change the Prototype to a New Object"],["587d7daf367417b2b2512b80","Remember to Set the Constructor Property when Changing the Prototype"],["587d7db0367417b2b2512b81","Understand Where an Object’s Prototype Comes From"],["587d7db0367417b2b2512b82","Understand the Prototype Chain"],["587d7db0367417b2b2512b83","Use Inheritance So You Don't Repeat Yourself"],["587d7db0367417b2b2512b84","Inherit Behaviors from a Supertype"],["587d7db1367417b2b2512b85","Set the Child's Prototype to an Instance of the Parent"],["587d7db1367417b2b2512b86","Reset an Inherited Constructor Property"],["587d7db1367417b2b2512b87","Add Methods After Inheritance"],["587d7db1367417b2b2512b88","Override Inherited Methods"],["587d7db2367417b2b2512b89","Use a Mixin to Add Common Behavior Between Unrelated Objects"],["587d7db2367417b2b2512b8a","Use Closure to Protect Properties Within an Object from Being Modified Externally"],["587d7db2367417b2b2512b8b","Understand the Immediately Invoked Function Expression (IIFE)"],["587d7db2367417b2b2512b8c","Use an IIFE to Create a Module"]]},"challenges":[{"id":"587d7db1367417b2b2512b87","title":"Add Methods After Inheritance","challengeType":1,"forumTopicId":301315,"dashedName":"add-methods-after-inheritance","challengeFiles":[{"head":"var logOutput = \"\";\nvar originalConsole = console\nfunction capture() {\n    var nativeLog = console.log;\n    console.log = function (message) {\n        logOutput = message;\n        if(nativeLog.apply) {\n          nativeLog.apply(originalConsole, arguments);\n        } else {\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n          nativeLog(nativeMsg);\n        }\n    };\n}\n\nfunction uncapture() {\n  console.log = originalConsole.log;\n}\n\ncapture();","tail":"uncapture();\n(function() { return logOutput || \"console.log never called\"; })();","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Animal() { }\nAnimal.prototype.eat = function() { console.log(\"nom nom nom\"); };\n\nfunction Dog() { }\n\n// Only change code below this line\n\n\n\n\n// Only change code above this line\n\nlet beagle = new Dog();","error":null,"seed":"function Animal() { }\nAnimal.prototype.eat = function() { console.log(\"nom nom nom\"); };\n\nfunction Dog() { }\n\n// Only change code below this line\n\n\n\n\n// Only change code above this line\n\nlet beagle = new Dog();"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Animal() { }\nAnimal.prototype.eat = function() { console.log(\"nom nom nom\"); };\n\nfunction Dog() { }\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\nDog.prototype.bark = function () {\n  console.log('Woof!');\n};\nlet beagle = new Dog();\n\nbeagle.eat();\nbeagle.bark();","error":null,"seed":"function Animal() { }\nAnimal.prototype.eat = function() { console.log(\"nom nom nom\"); };\n\nfunction Dog() { }\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\nDog.prototype.bark = function () {\n  console.log('Woof!');\n};\nlet beagle = new Dog();\n\nbeagle.eat();\nbeagle.bark();"}]],"tests":[{"text":"<p><code>Animal</code> should not respond to the <code>bark()</code> method.</p>","testString":"assert(typeof Animal.prototype.bark == 'undefined');"},{"text":"<p><code>Dog</code> should inherit the <code>eat()</code> method from <code>Animal</code>.</p>","testString":"assert(typeof Dog.prototype.eat == 'function');"},{"text":"<p>The <code>Dog</code> prototype should have a <code>bark()</code> method.</p>","testString":"assert('bark' in Dog.prototype);"},{"text":"<p><code>beagle</code> should be an <code>instanceof</code> <code>Animal</code>.</p>","testString":"assert(beagle instanceof Animal);"},{"text":"<p>The constructor for <code>beagle</code> should be set to <code>Dog</code>.</p>","testString":"assert(beagle.constructor === Dog);"},{"text":"<p><code>beagle.eat()</code> should log the string <code>nom nom nom</code></p>","testString":"capture();\nbeagle.eat();\nuncapture();\nassert(logOutput == 'nom nom nom');"},{"text":"<p><code>beagle.bark()</code> should log the string <code>Woof!</code></p>","testString":"capture();\nbeagle.bark();\nuncapture();\nassert(logOutput == 'Woof!');"}],"description":"<section id=\"description\">\n<p>A constructor function that inherits its <code>prototype</code> object from a supertype constructor function can still have its own methods in addition to inherited methods.</p>\n<p>For example, <code>Bird</code> is a constructor that inherits its <code>prototype</code> from <code>Animal</code>:</p>\n<pre><code class=\"language-js\">function Animal() { }\nAnimal.prototype.eat = function() {\n  console.log(\"nom nom nom\");\n};\nfunction Bird() { }\nBird.prototype = Object.create(Animal.prototype);\nBird.prototype.constructor = Bird;\n</code></pre>\n<p>In addition to what is inherited from <code>Animal</code>, you want to add behavior that is unique to <code>Bird</code> objects. Here, <code>Bird</code> will get a <code>fly()</code> function. Functions are added to <code>Bird's</code> <code>prototype</code> the same way as any constructor function:</p>\n<pre><code class=\"language-js\">Bird.prototype.fly = function() {\n  console.log(\"I'm flying!\");\n};\n</code></pre>\n<p>Now instances of <code>Bird</code> will have both <code>eat()</code> and <code>fly()</code> methods:</p>\n<pre><code class=\"language-js\">let duck = new Bird();\nduck.eat();\nduck.fly();\n</code></pre>\n<p><code>duck.eat()</code> would display the string <code>nom nom nom</code> in the console, and <code>duck.fly()</code> would display the string <code>I'm flying!</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add all necessary code so the <code>Dog</code> object inherits from <code>Animal</code> and the <code>Dog</code>'s <code>prototype</code> constructor is set to <code>Dog</code>. Then add a <code>bark()</code> method to the <code>Dog</code> object so that <code>beagle</code> can both <code>eat()</code> and <code>bark()</code>. The <code>bark()</code> method should print <code>Woof!</code> to the console.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":20,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7daf367417b2b2512b7f","title":"Change the Prototype to a New Object","challengeType":1,"forumTopicId":301316,"dashedName":"change-the-prototype-to-a-new-object","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Dog(name) {\n  this.name = name;\n}\n\nDog.prototype = {\n  // Only change code below this line\n\n};","error":null,"seed":"function Dog(name) {\n  this.name = name;\n}\n\nDog.prototype = {\n  // Only change code below this line\n\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Dog(name) {\n  this.name = name;\n}\nDog.prototype = {\nnumLegs: 4,\n  eat () {\n    console.log('nom nom nom');\n  },\n  describe () {\n    console.log('My name is ' + this.name);\n  }\n};","error":null,"seed":"function Dog(name) {\n  this.name = name;\n}\nDog.prototype = {\nnumLegs: 4,\n  eat () {\n    console.log('nom nom nom');\n  },\n  describe () {\n    console.log('My name is ' + this.name);\n  }\n};"}]],"tests":[{"text":"<p><code>Dog.prototype</code> should be set to a new object.</p>","testString":"assert(/Dog\\.prototype\\s*?=\\s*?{/.test(code));"},{"text":"<p><code>Dog.prototype</code> should have the property <code>numLegs</code>.</p>","testString":"assert(Dog.prototype.numLegs !== undefined);"},{"text":"<p><code>Dog.prototype</code> should have the method <code>eat()</code>.</p>","testString":"assert(typeof Dog.prototype.eat === 'function');"},{"text":"<p><code>Dog.prototype</code> should have the method <code>describe()</code>.</p>","testString":"assert(typeof Dog.prototype.describe === 'function');"}],"description":"<section id=\"description\">\n<p>Up until now you have been adding properties to the <code>prototype</code> individually:</p>\n<pre><code class=\"language-js\">Bird.prototype.numLegs = 2;\n</code></pre>\n<p>This becomes tedious after more than a few properties.</p>\n<pre><code class=\"language-js\">Bird.prototype.eat = function() {\n  console.log(\"nom nom nom\");\n}\n\nBird.prototype.describe = function() {\n  console.log(\"My name is \" + this.name);\n}\n</code></pre>\n<p>A more efficient way is to set the <code>prototype</code> to a new object that already contains the properties. This way, the properties are added all at once:</p>\n<pre><code class=\"language-js\">Bird.prototype = {\n  numLegs: 2, \n  eat: function() {\n    console.log(\"nom nom nom\");\n  },\n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the property <code>numLegs</code> and the two methods <code>eat()</code> and <code>describe()</code> to the <code>prototype</code> of <code>Dog</code> by setting the <code>prototype</code> to a new object.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":12,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7dac367417b2b2512b73","title":"Create a Basic JavaScript Object","challengeType":1,"forumTopicId":301317,"dashedName":"create-a-basic-javascript-object","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let dog = {\n\n};","error":null,"seed":"let dog = {\n\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let dog = {\n  name: '',\n  numLegs: 4\n};","error":null,"seed":"let dog = {\n  name: '',\n  numLegs: 4\n};"}]],"tests":[{"text":"<p><code>dog</code> should be an object.</p>","testString":"assert(typeof dog === 'object');"},{"text":"<p><code>dog</code> should have a <code>name</code> property set to a string.</p>","testString":"assert(typeof dog.name === 'string');"},{"text":"<p><code>dog</code> should have a <code>numLegs</code> property set to a number.</p>","testString":"assert(typeof dog.numLegs === 'number');"}],"description":"<section id=\"description\">\n<p>Think about things people see every day, like cars, shops, and birds. These are all <dfn>objects</dfn>: tangible things people can observe and interact with.</p>\n<p>What are some qualities of these objects? A car has wheels. Shops sell items. Birds have wings.</p>\n<p>These qualities, or <dfn>properties</dfn>, define what makes up an object. Note that similar objects share the same properties, but may have different values for those properties. For example, all cars have wheels, but not all cars have the same number of wheels.</p>\n<p>Objects in JavaScript are used to model real-world objects, giving them properties and behavior just like their real-world counterparts. Here's an example using these concepts to create a <code>duck</code> object:</p>\n<pre><code class=\"language-js\">let duck = {\n  name: \"Aflac\",\n  numLegs: 2\n};\n</code></pre>\n<p>This <code>duck</code> object has two property/value pairs: a <code>name</code> of <code>Aflac</code> and a <code>numLegs</code> of 2.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create a <code>dog</code> object with <code>name</code> and <code>numLegs</code> properties, and set them to a string and a number, respectively.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":0,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7dad367417b2b2512b75","title":"Create a Method on an Object","challengeType":1,"forumTopicId":301318,"dashedName":"create-a-method-on-an-object","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n\n};\n\ndog.sayLegs();","error":null,"seed":"let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n\n};\n\ndog.sayLegs();"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  sayLegs () {\n    return 'This dog has ' + this.numLegs + ' legs.';\n  }\n};\n\ndog.sayLegs();","error":null,"seed":"let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  sayLegs () {\n    return 'This dog has ' + this.numLegs + ' legs.';\n  }\n};\n\ndog.sayLegs();"}]],"tests":[{"text":"<p><code>dog.sayLegs()</code> should be a function.</p>","testString":"assert(typeof dog.sayLegs === 'function');"},{"text":"<p><code>dog.sayLegs()</code> should return the given string - note that punctuation and spacing matter.</p>","testString":"assert(dog.sayLegs() === 'This dog has 4 legs.');"}],"description":"<section id=\"description\">\n<p>Objects can have a special type of property, called a <dfn>method</dfn>.</p>\n<p>Methods are properties that are functions. This adds different behavior to an object. Here is the <code>duck</code> example with a method:</p>\n<pre><code class=\"language-js\">let duck = {\n  name: \"Aflac\",\n  numLegs: 2,\n  sayName: function() {return \"The name of this duck is \" + duck.name + \".\";}\n};\nduck.sayName();\n</code></pre>\n<p>The example adds the <code>sayName</code> method, which is a function that returns a sentence giving the name of the <code>duck</code>. Notice that the method accessed the <code>name</code> property in the return statement using <code>duck.name</code>. The next challenge will cover another way to do this.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Using the <code>dog</code> object, give it a method called <code>sayLegs</code>. The method should return the sentence <code>This dog has 4 legs.</code></p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":2,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7dad367417b2b2512b77","title":"Define a Constructor Function","challengeType":1,"forumTopicId":16804,"dashedName":"define-a-constructor-function","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"","error":null,"seed":""}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Dog (name, color, numLegs) {\n  this.name = 'name';\n  this.color = 'color';\n  this.numLegs = 4;\n}","error":null,"seed":"function Dog (name, color, numLegs) {\n  this.name = 'name';\n  this.color = 'color';\n  this.numLegs = 4;\n}"}]],"tests":[{"text":"<p><code>Dog</code> should have a <code>name</code> property set to a string.</p>","testString":"assert(typeof new Dog().name === 'string');"},{"text":"<p><code>Dog</code> should have a <code>color</code> property set to a string.</p>","testString":"assert(typeof new Dog().color === 'string');"},{"text":"<p><code>Dog</code> should have a <code>numLegs</code> property set to a number.</p>","testString":"assert(typeof new Dog().numLegs === 'number');"}],"description":"<section id=\"description\">\n<p><dfn>Constructors</dfn> are functions that create new objects. They define properties and behaviors that will belong to the new object. Think of them as a blueprint for the creation of new objects.</p>\n<p>Here is an example of a constructor:</p>\n<pre><code class=\"language-js\">function Bird() {\n  this.name = \"Albert\";\n  this.color = \"blue\";\n  this.numLegs = 2;\n}\n</code></pre>\n<p>This constructor defines a <code>Bird</code> object with properties <code>name</code>, <code>color</code>, and <code>numLegs</code> set to Albert, blue, and 2, respectively. Constructors follow a few conventions:</p>\n<ul><li>Constructors are defined with a capitalized name to distinguish them from other functions that are not <code>constructors</code>.</li><li>Constructors use the keyword <code>this</code> to set properties of the object they will create. Inside the constructor, <code>this</code> refers to the new object it will create.</li><li>Constructors define properties and behaviors instead of returning a value as other functions might.</li></ul>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create a constructor, <code>Dog</code>, with properties <code>name</code>, <code>color</code>, and <code>numLegs</code> that are set to a string, a string, and a number, respectively.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":4,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7dae367417b2b2512b79","title":"Extend Constructors to Receive Arguments","challengeType":1,"forumTopicId":18235,"dashedName":"extend-constructors-to-receive-arguments","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Dog() {\n\n}","error":null,"seed":"function Dog() {\n\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Dog (name, color) {\n  this.numLegs = 4;\n  this.name = name;\n  this.color = color;\n}\n\nconst terrier = new Dog();","error":null,"seed":"function Dog (name, color) {\n  this.numLegs = 4;\n  this.name = name;\n  this.color = color;\n}\n\nconst terrier = new Dog();"}]],"tests":[{"text":"<p><code>Dog</code> should receive an argument for <code>name</code>.</p>","testString":"assert(new Dog('Clifford').name === 'Clifford');"},{"text":"<p><code>Dog</code> should receive an argument for <code>color</code>.</p>","testString":"assert(new Dog('Clifford', 'yellow').color === 'yellow');"},{"text":"<p><code>Dog</code> should have property <code>numLegs</code> set to 4.</p>","testString":"assert(new Dog('Clifford').numLegs === 4);"},{"text":"<p><code>terrier</code> should be created using the <code>Dog</code> constructor.</p>","testString":"assert(terrier instanceof Dog);"}],"description":"<section id=\"description\">\n<p>The <code>Bird</code> and <code>Dog</code> constructors from the last challenge worked well. However, notice that all <code>Birds</code> that are created with the <code>Bird</code> constructor are automatically named Albert, are blue in color, and have two legs. What if you want birds with different values for name and color? It's possible to change the properties of each bird manually but that would be a lot of work:</p>\n<pre><code class=\"language-js\">let swan = new Bird();\nswan.name = \"Carlos\";\nswan.color = \"white\";\n</code></pre>\n<p>Suppose you were writing a program to keep track of hundreds or even thousands of different birds in an aviary. It would take a lot of time to create all the birds, then change the properties to different values for every one. To more easily create different <code>Bird</code> objects, you can design your Bird constructor to accept parameters:</p>\n<pre><code class=\"language-js\">function Bird(name, color) {\n  this.name = name;\n  this.color = color;\n  this.numLegs = 2;\n}\n</code></pre>\n<p>Then pass in the values as arguments to define each unique bird into the <code>Bird</code> constructor: <code>let cardinal = new Bird(\"Bruce\", \"red\");</code> This gives a new instance of <code>Bird</code> with <code>name</code> and <code>color</code> properties set to <code>Bruce</code> and <code>red</code>, respectively. The <code>numLegs</code> property is still set to 2. The <code>cardinal</code> has these properties:</p>\n<pre><code class=\"language-js\">cardinal.name\ncardinal.color\ncardinal.numLegs\n</code></pre>\n<p>The constructor is more flexible. It's now possible to define the properties for each <code>Bird</code> at the time it is created, which is one way that JavaScript constructors are so useful. They group objects together based on shared characteristics and behavior and define a blueprint that automates their creation.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create another <code>Dog</code> constructor. This time, set it up to take the parameters <code>name</code> and <code>color</code>, and have the property <code>numLegs</code> fixed at 4. Then create a new <code>Dog</code> saved in a variable <code>terrier</code>. Pass it two strings as arguments for the <code>name</code> and <code>color</code> properties.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":6,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7db0367417b2b2512b84","title":"Inherit Behaviors from a Supertype","challengeType":1,"forumTopicId":301319,"dashedName":"inherit-behaviors-from-a-supertype","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\n// Only change code below this line\n\nlet duck; // Change this line\nlet beagle; // Change this line","error":null,"seed":"function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\n// Only change code below this line\n\nlet duck; // Change this line\nlet beagle; // Change this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\nlet duck = Object.create(Animal.prototype);\nlet beagle = Object.create(Animal.prototype);\n\nduck.eat();\nbeagle.eat();","error":null,"seed":"function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\nlet duck = Object.create(Animal.prototype);\nlet beagle = Object.create(Animal.prototype);\n\nduck.eat();\nbeagle.eat();"}]],"tests":[{"text":"<p>The <code>duck</code> variable should be defined.</p>","testString":"assert(typeof duck !== 'undefined');"},{"text":"<p>The <code>beagle</code> variable should be defined.</p>","testString":"assert(typeof beagle !== 'undefined');"},{"text":"<p>The <code>duck</code> variable should be initialised with <code>Object.create</code>.</p>","testString":"assert(\n  /(let|const|var)\\s{1,}duck\\s*=\\s*Object\\.create\\s*\\(\\s*Animal\\.prototype\\s*\\)\\s*/.test(\n    code\n  )\n);"},{"text":"<p>The <code>beagle</code> variable should be initialised with <code>Object.create</code>.</p>","testString":"assert(\n  /(let|const|var)\\s{1,}beagle\\s*=\\s*Object\\.create\\s*\\(\\s*Animal\\.prototype\\s*\\)\\s*/.test(\n    code\n  )\n);"},{"text":"<p><code>duck</code> should have a <code>prototype</code> of <code>Animal</code>.</p>","testString":"assert(duck instanceof Animal);"},{"text":"<p><code>beagle</code> should have a <code>prototype</code> of <code>Animal</code>.</p>","testString":"assert(beagle instanceof Animal);"}],"description":"<section id=\"description\">\n<p>In the previous challenge, you created a <code>supertype</code> called <code>Animal</code> that defined behaviors shared by all animals:</p>\n<pre><code class=\"language-js\">function Animal() { }\nAnimal.prototype.eat = function() {\n  console.log(\"nom nom nom\");\n};\n</code></pre>\n<p>This and the next challenge will cover how to reuse the methods of <code>Animal</code> inside <code>Bird</code> and <code>Dog</code> without defining them again. It uses a technique called inheritance. This challenge covers the first step: make an instance of the <code>supertype</code> (or parent). You already know one way to create an instance of <code>Animal</code> using the <code>new</code> operator:</p>\n<pre><code class=\"language-js\">let animal = new Animal();\n</code></pre>\n<p>There are some disadvantages when using this syntax for inheritance, which are too complex for the scope of this challenge. Instead, here's an alternative approach without those disadvantages:</p>\n<pre><code class=\"language-js\">let animal = Object.create(Animal.prototype);\n</code></pre>\n<p><code>Object.create(obj)</code> creates a new object, and sets <code>obj</code> as the new object's <code>prototype</code>. Recall that the <code>prototype</code> is like the \"recipe\" for creating an object. By setting the <code>prototype</code> of <code>animal</code> to be the <code>prototype</code> of <code>Animal</code>, you are effectively giving the <code>animal</code> instance the same \"recipe\" as any other instance of <code>Animal</code>.</p>\n<pre><code class=\"language-js\">animal.eat();\nanimal instanceof Animal;\n</code></pre>\n<p>The <code>instanceof</code> method here would return <code>true</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use <code>Object.create</code> to make two instances of <code>Animal</code> named <code>duck</code> and <code>beagle</code>.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":17,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7daf367417b2b2512b7d","title":"Iterate Over All Properties","challengeType":1,"forumTopicId":301320,"dashedName":"iterate-over-all-properties","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Dog(name) {\n  this.name = name;\n}\n\nDog.prototype.numLegs = 4;\n\nlet beagle = new Dog(\"Snoopy\");\n\nlet ownProps = [];\nlet prototypeProps = [];\n\n// Only change code below this line","error":null,"seed":"function Dog(name) {\n  this.name = name;\n}\n\nDog.prototype.numLegs = 4;\n\nlet beagle = new Dog(\"Snoopy\");\n\nlet ownProps = [];\nlet prototypeProps = [];\n\n// Only change code below this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Dog(name) {\n  this.name = name;\n}\n\nDog.prototype.numLegs = 4;\n\nlet beagle = new Dog(\"Snoopy\");\n\nlet ownProps = [];\nlet prototypeProps = [];\nfor (let prop in beagle) {\n  if (beagle.hasOwnProperty(prop)) {\n    ownProps.push(prop);\n  } else {\n    prototypeProps.push(prop);\n  }\n}","error":null,"seed":"function Dog(name) {\n  this.name = name;\n}\n\nDog.prototype.numLegs = 4;\n\nlet beagle = new Dog(\"Snoopy\");\n\nlet ownProps = [];\nlet prototypeProps = [];\nfor (let prop in beagle) {\n  if (beagle.hasOwnProperty(prop)) {\n    ownProps.push(prop);\n  } else {\n    prototypeProps.push(prop);\n  }\n}"}]],"tests":[{"text":"<p>The <code>ownProps</code> array should only contain <code>name</code>.</p>","testString":"assert.deepEqual(ownProps, ['name']);"},{"text":"<p>The <code>prototypeProps</code> array should only contain <code>numLegs</code>.</p>","testString":"assert.deepEqual(prototypeProps, ['numLegs']);"},{"text":"<p>You should solve this challenge without using the built in method <code>Object.keys()</code>.</p>","testString":"assert(!/\\Object.keys/.test(code));"}],"description":"<section id=\"description\">\n<p>You have now seen two kinds of properties: <dfn>own properties</dfn> and <code>prototype</code> properties. Own properties are defined directly on the object instance itself. And prototype properties are defined on the <code>prototype</code>.</p>\n<pre><code class=\"language-js\">function Bird(name) {\n  this.name = name;  //own property\n}\n\nBird.prototype.numLegs = 2; // prototype property\n\nlet duck = new Bird(\"Donald\");\n</code></pre>\n<p>Here is how you add <code>duck</code>'s own properties to the array <code>ownProps</code> and <code>prototype</code> properties to the array <code>prototypeProps</code>:</p>\n<pre><code class=\"language-js\">let ownProps = [];\nlet prototypeProps = [];\n\nfor (let property in duck) {\n  if(duck.hasOwnProperty(property)) {\n    ownProps.push(property);\n  } else {\n    prototypeProps.push(property);\n  }\n}\n\nconsole.log(ownProps);\nconsole.log(prototypeProps);\n</code></pre>\n<p><code>console.log(ownProps)</code> would display <code>[\"name\"]</code> in the console, and <code>console.log(prototypeProps)</code> would display <code>[\"numLegs\"]</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add all of the own properties of <code>beagle</code> to the array <code>ownProps</code>. Add all of the <code>prototype</code> properties of <code>Dog</code> to the array <code>prototypeProps</code>.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":10,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7dad367417b2b2512b76","title":"Make Code More Reusable with the this Keyword","challengeType":1,"forumTopicId":301321,"dashedName":"make-code-more-reusable-with-the-this-keyword","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  sayLegs: function() {return \"This dog has \" + dog.numLegs + \" legs.\";}\n};\n\ndog.sayLegs();","error":null,"seed":"let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  sayLegs: function() {return \"This dog has \" + dog.numLegs + \" legs.\";}\n};\n\ndog.sayLegs();"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  sayLegs () {\n    return 'This dog has ' + this.numLegs + ' legs.';\n  }\n};\n\ndog.sayLegs();","error":null,"seed":"let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  sayLegs () {\n    return 'This dog has ' + this.numLegs + ' legs.';\n  }\n};\n\ndog.sayLegs();"}]],"tests":[{"text":"<p><code>dog.sayLegs()</code> should return the given string.</p>","testString":"assert(dog.sayLegs() === 'This dog has 4 legs.');"},{"text":"<p>Your code should use the <code>this</code> keyword to access the <code>numLegs</code> property of <code>dog</code>.</p>","testString":"assert(code.match(/this\\.numLegs/g));"}],"description":"<section id=\"description\">\n<p>The last challenge introduced a method to the <code>duck</code> object. It used <code>duck.name</code> dot notation to access the value for the <code>name</code> property within the return statement:</p>\n<pre><code class=\"language-js\">sayName: function() {return \"The name of this duck is \" + duck.name + \".\";}\n</code></pre>\n<p>While this is a valid way to access the object's property, there is a pitfall here. If the variable name changes, any code referencing the original name would need to be updated as well. In a short object definition, it isn't a problem, but if an object has many references to its properties there is a greater chance for error.</p>\n<p>A way to avoid these issues is with the <code>this</code> keyword:</p>\n<pre><code class=\"language-js\">let duck = {\n  name: \"Aflac\",\n  numLegs: 2,\n  sayName: function() {return \"The name of this duck is \" + this.name + \".\";}\n};\n</code></pre>\n<p><code>this</code> is a deep topic, and the above example is only one way to use it. In the current context, <code>this</code> refers to the object that the method is associated with: <code>duck</code>. If the object's name is changed to <code>mallard</code>, it is not necessary to find all the references to <code>duck</code> in the code. It makes the code reusable and easier to read.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Modify the <code>dog.sayLegs</code> method to remove any references to <code>dog</code>. Use the <code>duck</code> example for guidance.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":3,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7db1367417b2b2512b88","title":"Override Inherited Methods","challengeType":1,"forumTopicId":301322,"dashedName":"override-inherited-methods","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Bird() { }\n\nBird.prototype.fly = function() { return \"I am flying!\"; };\n\nfunction Penguin() { }\nPenguin.prototype = Object.create(Bird.prototype);\nPenguin.prototype.constructor = Penguin;\n\n// Only change code below this line\n\n\n\n// Only change code above this line\n\nlet penguin = new Penguin();\nconsole.log(penguin.fly());","error":null,"seed":"function Bird() { }\n\nBird.prototype.fly = function() { return \"I am flying!\"; };\n\nfunction Penguin() { }\nPenguin.prototype = Object.create(Bird.prototype);\nPenguin.prototype.constructor = Penguin;\n\n// Only change code below this line\n\n\n\n// Only change code above this line\n\nlet penguin = new Penguin();\nconsole.log(penguin.fly());"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Bird() { }\n\nBird.prototype.fly = function() { return \"I am flying!\"; };\n\nfunction Penguin() { }\nPenguin.prototype = Object.create(Bird.prototype);\nPenguin.prototype.constructor = Penguin;\nPenguin.prototype.fly = () => 'Alas, this is a flightless bird.';\nlet penguin = new Penguin();\nconsole.log(penguin.fly());","error":null,"seed":"function Bird() { }\n\nBird.prototype.fly = function() { return \"I am flying!\"; };\n\nfunction Penguin() { }\nPenguin.prototype = Object.create(Bird.prototype);\nPenguin.prototype.constructor = Penguin;\nPenguin.prototype.fly = () => 'Alas, this is a flightless bird.';\nlet penguin = new Penguin();\nconsole.log(penguin.fly());"}]],"tests":[{"text":"<p><code>penguin.fly()</code> should return the string <code>Alas, this is a flightless bird.</code></p>","testString":"assert(penguin.fly() === 'Alas, this is a flightless bird.');"},{"text":"<p>The <code>bird.fly()</code> method should return the string <code>I am flying!</code></p>","testString":"assert(new Bird().fly() === 'I am flying!');"}],"description":"<section id=\"description\">\n<p>In previous lessons, you learned that an object can inherit its behavior (methods) from another object by referencing its <code>prototype</code> object:</p>\n<pre><code class=\"language-js\">ChildObject.prototype = Object.create(ParentObject.prototype);\n</code></pre>\n<p>Then the <code>ChildObject</code> received its own methods by chaining them onto its <code>prototype</code>:</p>\n<pre><code class=\"language-js\">ChildObject.prototype.methodName = function() {...};\n</code></pre>\n<p>It's possible to override an inherited method. It's done the same way - by adding a method to <code>ChildObject.prototype</code> using the same method name as the one to override. Here's an example of <code>Bird</code> overriding the <code>eat()</code> method inherited from <code>Animal</code>:</p>\n<pre><code class=\"language-js\">function Animal() { }\nAnimal.prototype.eat = function() {\n  return \"nom nom nom\";\n};\nfunction Bird() { }\n\nBird.prototype = Object.create(Animal.prototype);\n\nBird.prototype.eat = function() {\n  return \"peck peck peck\";\n};\n</code></pre>\n<p>If you have an instance <code>let duck = new Bird();</code> and you call <code>duck.eat()</code>, this is how JavaScript looks for the method on the <code>prototype</code> chain of <code>duck</code>:</p>\n<ol>\n<li><code>duck</code> => Is <code>eat()</code> defined here? No.</li>\n<li><code>Bird</code> => Is <code>eat()</code> defined here? => Yes. Execute it and stop searching.</li>\n<li><code>Animal</code> => <code>eat()</code> is also defined, but JavaScript stopped searching before reaching this level.</li>\n<li>Object => JavaScript stopped searching before reaching this level.</li>\n</ol>\n</section>","instructions":"<section id=\"instructions\">\n<p>Override the <code>fly()</code> method for <code>Penguin</code> so that it returns the string <code>Alas, this is a flightless bird.</code></p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":21,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7daf367417b2b2512b80","title":"Remember to Set the Constructor Property when Changing the Prototype","challengeType":1,"forumTopicId":301323,"dashedName":"remember-to-set-the-constructor-property-when-changing-the-prototype","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Dog(name) {\n  this.name = name;\n}\n\n// Only change code below this line\nDog.prototype = {\n\n  numLegs: 4,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  },\n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};","error":null,"seed":"function Dog(name) {\n  this.name = name;\n}\n\n// Only change code below this line\nDog.prototype = {\n\n  numLegs: 4,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  },\n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Dog(name) {\n  this.name = name;\n}\nDog.prototype = {\n  constructor: Dog,\n  numLegs: 4,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  },\n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};","error":null,"seed":"function Dog(name) {\n  this.name = name;\n}\nDog.prototype = {\n  constructor: Dog,\n  numLegs: 4,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  },\n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};"}]],"tests":[{"text":"<p><code>Dog.prototype</code> should set the <code>constructor</code> property.</p>","testString":"assert(Dog.prototype.constructor === Dog);"}],"description":"<section id=\"description\">\n<p>There is one crucial side effect of manually setting the prototype to a new object. It erases the <code>constructor</code> property! This property can be used to check which constructor function created the instance, but since the property has been overwritten, it now gives false results:</p>\n<pre><code class=\"language-js\">duck.constructor === Bird;\nduck.constructor === Object;\nduck instanceof Bird;\n</code></pre>\n<p>In order, these expressions would evaluate to <code>false</code>, <code>true</code>, and <code>true</code>.</p>\n<p>To fix this, whenever a prototype is manually set to a new object, remember to define the <code>constructor</code> property:</p>\n<pre><code class=\"language-js\">Bird.prototype = {\n  constructor: Bird,\n  numLegs: 2,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  },\n  describe: function() {\n    console.log(\"My name is \" + this.name); \n  }\n};\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Define the <code>constructor</code> property on the <code>Dog</code> <code>prototype</code>.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":13,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7db1367417b2b2512b86","title":"Reset an Inherited Constructor Property","challengeType":1,"forumTopicId":301324,"dashedName":"reset-an-inherited-constructor-property","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Animal() { }\nfunction Bird() { }\nfunction Dog() { }\n\nBird.prototype = Object.create(Animal.prototype);\nDog.prototype = Object.create(Animal.prototype);\n\n// Only change code below this line\n\n\n\nlet duck = new Bird();\nlet beagle = new Dog();","error":null,"seed":"function Animal() { }\nfunction Bird() { }\nfunction Dog() { }\n\nBird.prototype = Object.create(Animal.prototype);\nDog.prototype = Object.create(Animal.prototype);\n\n// Only change code below this line\n\n\n\nlet duck = new Bird();\nlet beagle = new Dog();"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Animal() { }\nfunction Bird() { }\nfunction Dog() { }\nBird.prototype = Object.create(Animal.prototype);\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\nBird.prototype.constructor = Bird;\nlet duck = new Bird();\nlet beagle = new Dog();","error":null,"seed":"function Animal() { }\nfunction Bird() { }\nfunction Dog() { }\nBird.prototype = Object.create(Animal.prototype);\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\nBird.prototype.constructor = Bird;\nlet duck = new Bird();\nlet beagle = new Dog();"}]],"tests":[{"text":"<p><code>Bird.prototype</code> should be an instance of <code>Animal</code>.</p>","testString":"assert(Animal.prototype.isPrototypeOf(Bird.prototype));"},{"text":"<p><code>duck.constructor</code> should return <code>Bird</code>.</p>","testString":"assert(duck.constructor === Bird);"},{"text":"<p><code>Dog.prototype</code> should be an instance of <code>Animal</code>.</p>","testString":"assert(Animal.prototype.isPrototypeOf(Dog.prototype));"},{"text":"<p><code>beagle.constructor</code> should return <code>Dog</code>.</p>","testString":"assert(beagle.constructor === Dog);"}],"description":"<section id=\"description\">\n<p>When an object inherits its <code>prototype</code> from another object, it also inherits the supertype's constructor property.</p>\n<p>Here's an example:</p>\n<pre><code class=\"language-js\">function Bird() { }\nBird.prototype = Object.create(Animal.prototype);\nlet duck = new Bird();\nduck.constructor\n</code></pre>\n<p>But <code>duck</code> and all instances of <code>Bird</code> should show that they were constructed by <code>Bird</code> and not <code>Animal</code>. To do so, you can manually set the constructor property of <code>Bird</code> to the <code>Bird</code> object:</p>\n<pre><code class=\"language-js\">Bird.prototype.constructor = Bird;\nduck.constructor\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Fix the code so <code>duck.constructor</code> and <code>beagle.constructor</code> return their respective constructors.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":19,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7db1367417b2b2512b85","title":"Set the Child's Prototype to an Instance of the Parent","challengeType":1,"forumTopicId":301325,"dashedName":"set-the-childs-prototype-to-an-instance-of-the-parent","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\nfunction Dog() { }\n\n// Only change code below this line\n\n\nlet beagle = new Dog();","error":null,"seed":"function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\nfunction Dog() { }\n\n// Only change code below this line\n\n\nlet beagle = new Dog();"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\nfunction Dog() { }\nDog.prototype = Object.create(Animal.prototype);\n\nlet beagle = new Dog();\nbeagle.eat();","error":null,"seed":"function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\nfunction Dog() { }\nDog.prototype = Object.create(Animal.prototype);\n\nlet beagle = new Dog();\nbeagle.eat();"}]],"tests":[{"text":"<p><code>Dog.prototype</code> should be an instance of <code>Animal</code>.</p>","testString":"assert(Animal.prototype.isPrototypeOf(Dog.prototype));"}],"description":"<section id=\"description\">\n<p>In the previous challenge you saw the first step for inheriting behavior from the supertype (or parent) <code>Animal</code>: making a new instance of <code>Animal</code>.</p>\n<p>This challenge covers the next step: set the <code>prototype</code> of the subtype (or child)—in this case, <code>Bird</code>—to be an instance of <code>Animal</code>.</p>\n<pre><code class=\"language-js\">Bird.prototype = Object.create(Animal.prototype);\n</code></pre>\n<p>Remember that the <code>prototype</code> is like the \"recipe\" for creating an object. In a way, the recipe for <code>Bird</code> now includes all the key \"ingredients\" from <code>Animal</code>.</p>\n<pre><code class=\"language-js\">let duck = new Bird(\"Donald\");\nduck.eat();\n</code></pre>\n<p><code>duck</code> inherits all of <code>Animal</code>'s properties, including the <code>eat</code> method.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Modify the code so that instances of <code>Dog</code> inherit from <code>Animal</code>.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":18,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7dae367417b2b2512b7b","title":"Understand Own Properties","challengeType":1,"forumTopicId":301326,"dashedName":"understand-own-properties","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Bird(name) {\n  this.name = name;\n  this.numLegs = 2;\n}\n\nlet canary = new Bird(\"Tweety\");\nlet ownProps = [];\n// Only change code below this line","error":null,"seed":"function Bird(name) {\n  this.name = name;\n  this.numLegs = 2;\n}\n\nlet canary = new Bird(\"Tweety\");\nlet ownProps = [];\n// Only change code below this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Bird(name) {\n  this.name = name;\n  this.numLegs = 2;\n}\n\nlet canary = new Bird(\"Tweety\");\nfunction getOwnProps (obj) {\n  const props = [];\n\n  for (let prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      props.push(prop);\n    }\n  }\n\n  return props;\n}\n\nconst ownProps = getOwnProps(canary);","error":null,"seed":"function Bird(name) {\n  this.name = name;\n  this.numLegs = 2;\n}\n\nlet canary = new Bird(\"Tweety\");\nfunction getOwnProps (obj) {\n  const props = [];\n\n  for (let prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      props.push(prop);\n    }\n  }\n\n  return props;\n}\n\nconst ownProps = getOwnProps(canary);"}]],"tests":[{"text":"<p><code>ownProps</code> should include the values <code>numLegs</code> and <code>name</code>.</p>","testString":"assert(ownProps.indexOf('name') !== -1 && ownProps.indexOf('numLegs') !== -1);"},{"text":"<p>You should solve this challenge without using the built in method <code>Object.keys()</code>.</p>","testString":"assert(!/Object(\\.keys|\\[(['\"`])keys\\2\\])/.test(code));"},{"text":"<p>You should solve this challenge without hardcoding the <code>ownProps</code> array.</p>","testString":"assert(\n  !/\\[\\s*(?:'|\")(?:name|numLegs)|(?:push|concat)\\(\\s*(?:'|\")(?:name|numLegs)/.test(\n    code\n  )\n);"}],"description":"<section id=\"description\">\n<p>In the following example, the <code>Bird</code> constructor defines two properties: <code>name</code> and <code>numLegs</code>:</p>\n<pre><code class=\"language-js\">function Bird(name) {\n  this.name = name;\n  this.numLegs = 2;\n}\n\nlet duck = new Bird(\"Donald\");\nlet canary = new Bird(\"Tweety\");\n</code></pre>\n<p><code>name</code> and <code>numLegs</code> are called <dfn>own properties</dfn>, because they are defined directly on the instance object. That means that <code>duck</code> and <code>canary</code> each has its own separate copy of these properties. In fact every instance of <code>Bird</code> will have its own copy of these properties. The following code adds all of the own properties of <code>duck</code> to the array <code>ownProps</code>:</p>\n<pre><code class=\"language-js\">let ownProps = [];\n\nfor (let property in duck) {\n  if(duck.hasOwnProperty(property)) {\n    ownProps.push(property);\n  }\n}\n\nconsole.log(ownProps);\n</code></pre>\n<p>The console would display the value <code>[\"name\", \"numLegs\"]</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add the own properties of <code>canary</code> to the array <code>ownProps</code>.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":8,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7daf367417b2b2512b7e","title":"Understand the Constructor Property","challengeType":1,"forumTopicId":301327,"dashedName":"understand-the-constructor-property","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Dog(name) {\n  this.name = name;\n}\n\n// Only change code below this line\nfunction joinDogFraternity(candidate) {\n\n}","error":null,"seed":"function Dog(name) {\n  this.name = name;\n}\n\n// Only change code below this line\nfunction joinDogFraternity(candidate) {\n\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Dog(name) {\n  this.name = name;\n}\nfunction joinDogFraternity(candidate) {\n  return candidate.constructor === Dog;\n}","error":null,"seed":"function Dog(name) {\n  this.name = name;\n}\nfunction joinDogFraternity(candidate) {\n  return candidate.constructor === Dog;\n}"}]],"tests":[{"text":"<p><code>joinDogFraternity</code> should be defined as a function.</p>","testString":"assert(typeof joinDogFraternity === 'function');"},{"text":"<p><code>joinDogFraternity</code> should return <code>true</code> if <code>candidate</code> is an instance of <code>Dog</code>.</p>","testString":"assert(joinDogFraternity(new Dog('')) === true);"},{"text":"<p><code>joinDogFraternity</code> should use the <code>constructor</code> property.</p>","testString":"assert(/\\.constructor/.test(code) && !/instanceof/.test(code));"}],"description":"<section id=\"description\">\n<p>There is a special <code>constructor</code> property located on the object instances <code>duck</code> and <code>beagle</code> that were created in the previous challenges:</p>\n<pre><code class=\"language-js\">let duck = new Bird();\nlet beagle = new Dog();\n\nconsole.log(duck.constructor === Bird); \nconsole.log(beagle.constructor === Dog);\n</code></pre>\n<p>Both of these <code>console.log</code> calls would display <code>true</code> in the console.</p>\n<p>Note that the <code>constructor</code> property is a reference to the constructor function that created the instance. The advantage of the <code>constructor</code> property is that it's possible to check for this property to find out what kind of object it is. Here's an example of how this could be used:</p>\n<pre><code class=\"language-js\">function joinBirdFraternity(candidate) {\n  if (candidate.constructor === Bird) {\n    return true;\n  } else {\n    return false;\n  }\n}\n</code></pre>\n<p><strong>Note:</strong> Since the <code>constructor</code> property can be overwritten (which will be covered in the next two challenges) it’s generally better to use the <code>instanceof</code> method to check the type of an object.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Write a <code>joinDogFraternity</code> function that takes a <code>candidate</code> parameter and, using the <code>constructor</code> property, return <code>true</code> if the candidate is a <code>Dog</code>, otherwise return <code>false</code>.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":11,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7db2367417b2b2512b8b","title":"Understand the Immediately Invoked Function Expression (IIFE)","challengeType":1,"forumTopicId":301328,"dashedName":"understand-the-immediately-invoked-function-expression-iife","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function makeNest() {\n  console.log(\"A cozy nest is ready\");\n}\n\nmakeNest();","error":null,"seed":"function makeNest() {\n  console.log(\"A cozy nest is ready\");\n}\n\nmakeNest();"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"(function () {\n  console.log(\"A cozy nest is ready\");\n})();","error":null,"seed":"(function () {\n  console.log(\"A cozy nest is ready\");\n})();"}],[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"(function () {\n  console.log(\"A cozy nest is ready\");\n}());","error":null,"seed":"(function () {\n  console.log(\"A cozy nest is ready\");\n}());"}],[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"(() => {\n  console.log(\"A cozy nest is ready\");\n})();","error":null,"seed":"(() => {\n  console.log(\"A cozy nest is ready\");\n})();"}],[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"(() =>\n  console.log(\"A cozy nest is ready\")\n)();","error":null,"seed":"(() =>\n  console.log(\"A cozy nest is ready\")\n)();"}]],"tests":[{"text":"<p>The function should be anonymous.</p>","testString":"assert(/\\((function|\\(\\))(=>|\\(\\)){?/.test(code.replace(/\\s/g, '')));"},{"text":"<p>Your function should have parentheses at the end of the expression to call it immediately.</p>","testString":"assert(/\\(.*(\\)\\(|\\}\\(\\))\\)/.test(code.replace(/[\\s;]/g, '')));"}],"description":"<section id=\"description\">\n<p>A common pattern in JavaScript is to execute a function as soon as it is declared:</p>\n<pre><code class=\"language-js\">(function () {\n  console.log(\"Chirp, chirp!\");\n})();\n</code></pre>\n<p>This is an anonymous function expression that executes right away, and outputs <code>Chirp, chirp!</code> immediately.</p>\n<p>Note that the function has no name and is not stored in a variable. The two parentheses () at the end of the function expression cause it to be immediately executed or invoked. This pattern is known as an <dfn>immediately invoked function expression</dfn> or <dfn>IIFE</dfn>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Rewrite the function <code>makeNest</code> and remove its call so instead it's an anonymous immediately invoked function expression (IIFE).</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":24,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7db0367417b2b2512b82","title":"Understand the Prototype Chain","challengeType":1,"forumTopicId":301329,"dashedName":"understand-the-prototype-chain","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Dog(name) {\n  this.name = name;\n}\n\nlet beagle = new Dog(\"Snoopy\");\n\nDog.prototype.isPrototypeOf(beagle);  // yields true\n\n// Fix the code below so that it evaluates to true\n???.isPrototypeOf(Dog.prototype);","error":null,"seed":"function Dog(name) {\n  this.name = name;\n}\n\nlet beagle = new Dog(\"Snoopy\");\n\nDog.prototype.isPrototypeOf(beagle);  // yields true\n\n// Fix the code below so that it evaluates to true\n???.isPrototypeOf(Dog.prototype);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Dog(name) {\n  this.name = name;\n}\nlet beagle = new Dog(\"Snoopy\");\nDog.prototype.isPrototypeOf(beagle);\nObject.prototype.isPrototypeOf(Dog.prototype);","error":null,"seed":"function Dog(name) {\n  this.name = name;\n}\nlet beagle = new Dog(\"Snoopy\");\nDog.prototype.isPrototypeOf(beagle);\nObject.prototype.isPrototypeOf(Dog.prototype);"}]],"tests":[{"text":"<p>Your code should show that <code>Object.prototype</code> is the prototype of <code>Dog.prototype</code></p>","testString":"assert(/Object\\.prototype\\.isPrototypeOf/.test(code));"}],"description":"<section id=\"description\">\n<p>All objects in JavaScript (with a few exceptions) have a <code>prototype</code>. Also, an object’s <code>prototype</code> itself is an object.</p>\n<pre><code class=\"language-js\">function Bird(name) {\n  this.name = name;\n}\n\ntypeof Bird.prototype;\n</code></pre>\n<p>Because a <code>prototype</code> is an object, a <code>prototype</code> can have its own <code>prototype</code>! In this case, the <code>prototype</code> of <code>Bird.prototype</code> is <code>Object.prototype</code>:</p>\n<pre><code class=\"language-js\">Object.prototype.isPrototypeOf(Bird.prototype);\n</code></pre>\n<p>How is this useful? You may recall the <code>hasOwnProperty</code> method from a previous challenge:</p>\n<pre><code class=\"language-js\">let duck = new Bird(\"Donald\");\nduck.hasOwnProperty(\"name\");\n</code></pre>\n<p>The <code>hasOwnProperty</code> method is defined in <code>Object.prototype</code>, which can be accessed by <code>Bird.prototype</code>, which can then be accessed by <code>duck</code>. This is an example of the <code>prototype</code> chain. In this <code>prototype</code> chain, <code>Bird</code> is the <code>supertype</code> for <code>duck</code>, while <code>duck</code> is the <code>subtype</code>. <code>Object</code> is a <code>supertype</code> for both <code>Bird</code> and <code>duck</code>. <code>Object</code> is a <code>supertype</code> for all objects in JavaScript. Therefore, any object can use the <code>hasOwnProperty</code> method.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Modify the code to show the correct prototype chain.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":15,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7db0367417b2b2512b81","title":"Understand Where an Object’s Prototype Comes From","challengeType":1,"forumTopicId":301330,"dashedName":"understand-where-an-objects-prototype-comes-from","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Dog(name) {\n  this.name = name;\n}\n\nlet beagle = new Dog(\"Snoopy\");\n\n// Only change code below this line","error":null,"seed":"function Dog(name) {\n  this.name = name;\n}\n\nlet beagle = new Dog(\"Snoopy\");\n\n// Only change code below this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Dog(name) {\n  this.name = name;\n}\nlet beagle = new Dog(\"Snoopy\");\nDog.prototype.isPrototypeOf(beagle);","error":null,"seed":"function Dog(name) {\n  this.name = name;\n}\nlet beagle = new Dog(\"Snoopy\");\nDog.prototype.isPrototypeOf(beagle);"}]],"tests":[{"text":"<p>You should show that <code>Dog.prototype</code> is the <code>prototype</code> of <code>beagle</code></p>","testString":"assert(/Dog\\.prototype\\.isPrototypeOf\\(beagle\\)/.test(code));"}],"description":"<section id=\"description\">\n<p>Just like people inherit genes from their parents, an object inherits its <code>prototype</code> directly from the constructor function that created it. For example, here the <code>Bird</code> constructor creates the <code>duck</code> object:</p>\n<pre><code class=\"language-js\">function Bird(name) {\n  this.name = name;\n}\n\nlet duck = new Bird(\"Donald\");\n</code></pre>\n<p><code>duck</code> inherits its <code>prototype</code> from the <code>Bird</code> constructor function. You can show this relationship with the <code>isPrototypeOf</code> method:</p>\n<pre><code class=\"language-js\">Bird.prototype.isPrototypeOf(duck);\n</code></pre>\n<p>This would return <code>true</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use <code>isPrototypeOf</code> to check the <code>prototype</code> of <code>beagle</code>.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":14,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7dad367417b2b2512b78","title":"Use a Constructor to Create Objects","challengeType":1,"forumTopicId":18233,"dashedName":"use-a-constructor-to-create-objects","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Dog() {\n  this.name = \"Rupert\";\n  this.color = \"brown\";\n  this.numLegs = 4;\n}\n// Only change code below this line","error":null,"seed":"function Dog() {\n  this.name = \"Rupert\";\n  this.color = \"brown\";\n  this.numLegs = 4;\n}\n// Only change code below this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Dog() {\n  this.name = \"Rupert\";\n  this.color = \"brown\";\n  this.numLegs = 4;\n}\nconst hound = new Dog();","error":null,"seed":"function Dog() {\n  this.name = \"Rupert\";\n  this.color = \"brown\";\n  this.numLegs = 4;\n}\nconst hound = new Dog();"}]],"tests":[{"text":"<p><code>hound</code> should be created using the <code>Dog</code> constructor.</p>","testString":"assert(hound instanceof Dog);"},{"text":"<p>Your code should use the <code>new</code> operator to create an instance of <code>Dog</code>.</p>","testString":"assert(code.match(/new/g));"}],"description":"<section id=\"description\">\n<p>Here's the <code>Bird</code> constructor from the previous challenge:</p>\n<pre><code class=\"language-js\">function Bird() {\n  this.name = \"Albert\";\n  this.color  = \"blue\";\n  this.numLegs = 2;\n}\n\nlet blueBird = new Bird();\n</code></pre>\n<p><strong>NOTE:</strong> <code>this</code> inside the constructor always refers to the object being created.</p>\n<p>Notice that the <code>new</code> operator is used when calling a constructor. This tells JavaScript to create a new instance of <code>Bird</code> called <code>blueBird</code>. Without the <code>new</code> operator, <code>this</code> inside the constructor would not point to the newly created object, giving unexpected results. Now <code>blueBird</code> has all the properties defined inside the <code>Bird</code> constructor:</p>\n<pre><code class=\"language-js\">blueBird.name;\nblueBird.color;\nblueBird.numLegs;\n</code></pre>\n<p>Just like any other object, its properties can be accessed and modified:</p>\n<pre><code class=\"language-js\">blueBird.name = 'Elvira';\nblueBird.name;\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the <code>Dog</code> constructor from the last lesson to create a new instance of <code>Dog</code>, assigning it to a variable <code>hound</code>.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":5,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7db2367417b2b2512b89","title":"Use a Mixin to Add Common Behavior Between Unrelated Objects","challengeType":1,"forumTopicId":301331,"dashedName":"use-a-mixin-to-add-common-behavior-between-unrelated-objects","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let bird = {\n  name: \"Donald\",\n  numLegs: 2\n};\n\nlet boat = {\n  name: \"Warrior\",\n  type: \"race-boat\"\n};\n\n// Only change code below this line","error":null,"seed":"let bird = {\n  name: \"Donald\",\n  numLegs: 2\n};\n\nlet boat = {\n  name: \"Warrior\",\n  type: \"race-boat\"\n};\n\n// Only change code below this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let bird = {\n  name: \"Donald\",\n  numLegs: 2\n};\n\nlet boat = {\n  name: \"Warrior\",\n  type: \"race-boat\"\n};\nfunction glideMixin (obj) {\n  obj.glide = () => 'Gliding!';\n}\n\nglideMixin(bird);\nglideMixin(boat);","error":null,"seed":"let bird = {\n  name: \"Donald\",\n  numLegs: 2\n};\n\nlet boat = {\n  name: \"Warrior\",\n  type: \"race-boat\"\n};\nfunction glideMixin (obj) {\n  obj.glide = () => 'Gliding!';\n}\n\nglideMixin(bird);\nglideMixin(boat);"}]],"tests":[{"text":"<p>Your code should declare a <code>glideMixin</code> variable that is a function.</p>","testString":"assert(typeof glideMixin === 'function');"},{"text":"<p>Your code should use the <code>glideMixin</code> on the <code>bird</code> object to give it the <code>glide</code> method.</p>","testString":"assert(typeof bird.glide === 'function');"},{"text":"<p>Your code should use the <code>glideMixin</code> on the <code>boat</code> object to give it the <code>glide</code> method.</p>","testString":"assert(typeof boat.glide === 'function');"}],"description":"<section id=\"description\">\n<p>As you have seen, behavior is shared through inheritance. However, there are cases when inheritance is not the best solution. Inheritance does not work well for unrelated objects like <code>Bird</code> and <code>Airplane</code>. They can both fly, but a <code>Bird</code> is not a type of <code>Airplane</code> and vice versa.</p>\n<p>For unrelated objects, it's better to use <dfn>mixins</dfn>. A mixin allows other objects to use a collection of functions.</p>\n<pre><code class=\"language-js\">let flyMixin = function(obj) {\n  obj.fly = function() {\n    console.log(\"Flying, wooosh!\");\n  }\n};\n</code></pre>\n<p>The <code>flyMixin</code> takes any object and gives it the <code>fly</code> method.</p>\n<pre><code class=\"language-js\">let bird = {\n  name: \"Donald\",\n  numLegs: 2\n};\n\nlet plane = {\n  model: \"777\",\n  numPassengers: 524\n};\n\nflyMixin(bird);\nflyMixin(plane);\n</code></pre>\n<p>Here <code>bird</code> and <code>plane</code> are passed into <code>flyMixin</code>, which then assigns the <code>fly</code> function to each object. Now <code>bird</code> and <code>plane</code> can both fly:</p>\n<pre><code class=\"language-js\">bird.fly();\nplane.fly();\n</code></pre>\n<p>The console would display the string <code>Flying, wooosh!</code> twice, once for each <code>.fly()</code> call.</p>\n<p>Note how the mixin allows for the same <code>fly</code> method to be reused by unrelated objects <code>bird</code> and <code>plane</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create a mixin named <code>glideMixin</code> that defines a method named <code>glide</code>. Then use the <code>glideMixin</code> to give both <code>bird</code> and <code>boat</code> the ability to glide.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":22,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7db2367417b2b2512b8c","title":"Use an IIFE to Create a Module","challengeType":1,"forumTopicId":301332,"dashedName":"use-an-iife-to-create-a-module","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let isCuteMixin = function(obj) {\n  obj.isCute = function() {\n    return true;\n  };\n};\nlet singMixin = function(obj) {\n  obj.sing = function() {\n    console.log(\"Singing to an awesome tune\");\n  };\n};","error":null,"seed":"let isCuteMixin = function(obj) {\n  obj.isCute = function() {\n    return true;\n  };\n};\nlet singMixin = function(obj) {\n  obj.sing = function() {\n    console.log(\"Singing to an awesome tune\");\n  };\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const funModule = (function () {\n  return {\n    isCuteMixin: obj => {\n      obj.isCute = () => true;\n    },\n    singMixin: obj => {\n      obj.sing = () => console.log(\"Singing to an awesome tune\");\n    }\n  };\n})();","error":null,"seed":"const funModule = (function () {\n  return {\n    isCuteMixin: obj => {\n      obj.isCute = () => true;\n    },\n    singMixin: obj => {\n      obj.sing = () => console.log(\"Singing to an awesome tune\");\n    }\n  };\n})();"}]],"tests":[{"text":"<p><code>funModule</code> should be defined and return an object.</p>","testString":"assert(typeof funModule === 'object');"},{"text":"<p><code>funModule.isCuteMixin</code> should access a function.</p>","testString":"assert(typeof funModule.isCuteMixin === 'function');"},{"text":"<p><code>funModule.singMixin</code> should access a function.</p>","testString":"assert(typeof funModule.singMixin === 'function');"}],"description":"<section id=\"description\">\n<p>An immediately invoked function expression (IIFE) is often used to group related functionality into a single object or <dfn>module</dfn>. For example, an earlier challenge defined two mixins:</p>\n<pre><code class=\"language-js\">function glideMixin(obj) {\n  obj.glide = function() {\n    console.log(\"Gliding on the water\");\n  };\n}\nfunction flyMixin(obj) {\n  obj.fly = function() {\n    console.log(\"Flying, wooosh!\");\n  };\n}\n</code></pre>\n<p>We can group these mixins into a module as follows:</p>\n<pre><code class=\"language-js\">let motionModule = (function () {\n  return {\n    glideMixin: function(obj) {\n      obj.glide = function() {\n        console.log(\"Gliding on the water\");\n      };\n    },\n    flyMixin: function(obj) {\n      obj.fly = function() {\n        console.log(\"Flying, wooosh!\");\n      };\n    }\n  }\n})();\n</code></pre>\n<p>Note that you have an immediately invoked function expression (IIFE) that returns an object <code>motionModule</code>. This returned object contains all of the mixin behaviors as properties of the object. The advantage of the module pattern is that all of the motion behaviors can be packaged into a single object that can then be used by other parts of your code. Here is an example using it:</p>\n<pre><code class=\"language-js\">motionModule.glideMixin(duck);\nduck.glide();\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create a module named <code>funModule</code> to wrap the two mixins <code>isCuteMixin</code> and <code>singMixin</code>. <code>funModule</code> should return an object.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":25,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7db2367417b2b2512b8a","title":"Use Closure to Protect Properties Within an Object from Being Modified Externally","challengeType":1,"forumTopicId":18234,"dashedName":"use-closure-to-protect-properties-within-an-object-from-being-modified-externally","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Bird() {\n  this.weight = 15;\n\n\n}","error":null,"seed":"function Bird() {\n  this.weight = 15;\n\n\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Bird() {\n  let weight = 15;\n\n  this.getWeight = () => weight;\n}","error":null,"seed":"function Bird() {\n  let weight = 15;\n\n  this.getWeight = () => weight;\n}"}]],"tests":[{"text":"<p>The <code>weight</code> property should be a private variable and should be assigned the value of <code>15</code>.</p>","testString":"assert(code.match(/(var|let|const)\\s+weight\\s*\\=\\s*15\\;?/g));"},{"text":"<p>Your code should create a method in <code>Bird</code> called <code>getWeight</code> that returns the value of the private variable <code>weight</code>.</p>","testString":"assert(new Bird().getWeight() === 15);"},{"text":"<p>Your <code>getWeight</code> function should return the private variable <code>weight</code>.</p>","testString":"assert(code.match(/((return\\s+)|(\\(\\s*\\)\\s*\\=\\>\\s*))weight\\;?/g));"}],"description":"<section id=\"description\">\n<p>In the previous challenge, <code>bird</code> had a public property <code>name</code>. It is considered public because it can be accessed and changed outside of <code>bird</code>'s definition.</p>\n<pre><code class=\"language-js\">bird.name = \"Duffy\";\n</code></pre>\n<p>Therefore, any part of your code can easily change the name of <code>bird</code> to any value. Think about things like passwords and bank accounts being easily changeable by any part of your codebase. That could cause a lot of issues.</p>\n<p>The simplest way to make this public property private is by creating a variable within the constructor function. This changes the scope of that variable to be within the constructor function versus available globally. This way, the variable can only be accessed and changed by methods also within the constructor function.</p>\n<pre><code class=\"language-js\">function Bird() {\n  let hatchedEgg = 10;\n\n  this.getHatchedEggCount = function() { \n    return hatchedEgg;\n  };\n}\nlet ducky = new Bird();\nducky.getHatchedEggCount();\n</code></pre>\n<p>Here <code>getHatchedEggCount</code> is a privileged method, because it has access to the private variable <code>hatchedEgg</code>. This is possible because <code>hatchedEgg</code> is declared in the same context as <code>getHatchedEggCount</code>. In JavaScript, a function always has access to the context in which it was created. This is called <code>closure</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Change how <code>weight</code> is declared in the <code>Bird</code> function so it is a private variable. Then, create a method <code>getWeight</code> that returns the value of <code>weight</code> 15.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":23,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7dac367417b2b2512b74","title":"Use Dot Notation to Access the Properties of an Object","challengeType":1,"forumTopicId":301333,"dashedName":"use-dot-notation-to-access-the-properties-of-an-object","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let dog = {\n  name: \"Spot\",\n  numLegs: 4\n};\n// Only change code below this line","error":null,"seed":"let dog = {\n  name: \"Spot\",\n  numLegs: 4\n};\n// Only change code below this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"let dog = {\n  name: \"Spot\",\n  numLegs: 4\n};\nconsole.log(dog.name);\nconsole.log(dog.numLegs);","error":null,"seed":"let dog = {\n  name: \"Spot\",\n  numLegs: 4\n};\nconsole.log(dog.name);\nconsole.log(dog.numLegs);"}]],"tests":[{"text":"<p>Your code should use <code>console.log</code> to print the value for the <code>name</code> property of the <code>dog</code> object.</p>","testString":"assert(/console.log\\(.*dog\\.name.*\\)/g.test(code));"},{"text":"<p>Your code should use <code>console.log</code> to print the value for the <code>numLegs</code> property of the <code>dog</code> object.</p>","testString":"assert(/console.log\\(.*dog\\.numLegs.*\\)/g.test(code));"}],"description":"<section id=\"description\">\n<p>The last challenge created an object with various properties. Now you'll see how to access the values of those properties. Here's an example:</p>\n<pre><code class=\"language-js\">let duck = {\n  name: \"Aflac\",\n  numLegs: 2\n};\nconsole.log(duck.name);\n</code></pre>\n<p>Dot notation is used on the object name, <code>duck</code>, followed by the name of the property, <code>name</code>, to access the value of <code>Aflac</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Print both properties of the <code>dog</code> object to your console.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":1,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7db0367417b2b2512b83","title":"Use Inheritance So You Don't Repeat Yourself","challengeType":1,"forumTopicId":301334,"dashedName":"use-inheritance-so-you-dont-repeat-yourself","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Cat(name) {\n  this.name = name;\n}\n\nCat.prototype = {\n  constructor: Cat,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\nfunction Bear(name) {\n  this.name = name;\n}\n\nBear.prototype = {\n  constructor: Bear,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\nfunction Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n\n};","error":null,"seed":"function Cat(name) {\n  this.name = name;\n}\n\nCat.prototype = {\n  constructor: Cat,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\nfunction Bear(name) {\n  this.name = name;\n}\n\nBear.prototype = {\n  constructor: Bear,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\nfunction Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Cat(name) {\n  this.name = name;\n}\n\nCat.prototype = {\n  constructor: Cat\n};\n\nfunction Bear(name) {\n  this.name = name;\n}\n\nBear.prototype = {\n  constructor: Bear\n};\n\nfunction Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};","error":null,"seed":"function Cat(name) {\n  this.name = name;\n}\n\nCat.prototype = {\n  constructor: Cat\n};\n\nfunction Bear(name) {\n  this.name = name;\n}\n\nBear.prototype = {\n  constructor: Bear\n};\n\nfunction Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};"}]],"tests":[{"text":"<p><code>Animal.prototype</code> should have the <code>eat</code> property.</p>","testString":"assert(Animal.prototype.hasOwnProperty('eat'));"},{"text":"<p><code>Bear.prototype</code> should not have the <code>eat</code> property.</p>","testString":"assert(!Bear.prototype.hasOwnProperty('eat'));"},{"text":"<p><code>Cat.prototype</code> should not have the <code>eat</code> property.</p>","testString":"assert(!Cat.prototype.hasOwnProperty('eat'));"}],"description":"<section id=\"description\">\n<p>There's a principle in programming called <dfn>Don't Repeat Yourself (DRY)</dfn>. The reason repeated code is a problem is because any change requires fixing code in multiple places. This usually means more work for programmers and more room for errors.</p>\n<p>Notice in the example below that the <code>describe</code> method is shared by <code>Bird</code> and <code>Dog</code>:</p>\n<pre><code class=\"language-js\">Bird.prototype = {\n  constructor: Bird,\n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};\n\nDog.prototype = {\n  constructor: Dog,\n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};\n</code></pre>\n<p>The <code>describe</code> method is repeated in two places. The code can be edited to follow the DRY principle by creating a <code>supertype</code> (or parent) called <code>Animal</code>:</p>\n<pre><code class=\"language-js\">function Animal() { };\n\nAnimal.prototype = {\n  constructor: Animal, \n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};\n</code></pre>\n<p>Since <code>Animal</code> includes the <code>describe</code> method, you can remove it from <code>Bird</code> and <code>Dog</code>:</p>\n<pre><code class=\"language-js\">Bird.prototype = {\n  constructor: Bird\n};\n\nDog.prototype = {\n  constructor: Dog\n};\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>The <code>eat</code> method is repeated in both <code>Cat</code> and <code>Bear</code>. Edit the code in the spirit of DRY by moving the <code>eat</code> method to the <code>Animal</code> <code>supertype</code>.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":16,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7dae367417b2b2512b7c","title":"Use Prototype Properties to Reduce Duplicate Code","challengeType":1,"forumTopicId":301336,"dashedName":"use-prototype-properties-to-reduce-duplicate-code","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Dog(name) {\n  this.name = name;\n}\n\n\n\n// Only change code above this line\nlet beagle = new Dog(\"Snoopy\");","error":null,"seed":"function Dog(name) {\n  this.name = name;\n}\n\n\n\n// Only change code above this line\nlet beagle = new Dog(\"Snoopy\");"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function Dog (name) {\n  this.name = name;\n}\nDog.prototype.numLegs = 4;\nlet beagle = new Dog(\"Snoopy\");","error":null,"seed":"function Dog (name) {\n  this.name = name;\n}\nDog.prototype.numLegs = 4;\nlet beagle = new Dog(\"Snoopy\");"}]],"tests":[{"text":"<p><code>beagle</code> should have a <code>numLegs</code> property.</p>","testString":"assert(beagle.numLegs !== undefined);"},{"text":"<p><code>beagle.numLegs</code> should be a number.</p>","testString":"assert(typeof beagle.numLegs === 'number');"},{"text":"<p><code>numLegs</code> should be a <code>prototype</code> property not an own property.</p>","testString":"assert(beagle.hasOwnProperty('numLegs') === false);"}],"description":"<section id=\"description\">\n<p>Since <code>numLegs</code> will probably have the same value for all instances of <code>Bird</code>, you essentially have a duplicated variable <code>numLegs</code> inside each <code>Bird</code> instance.</p>\n<p>This may not be an issue when there are only two instances, but imagine if there are millions of instances. That would be a lot of duplicated variables.</p>\n<p>A better way is to use the <code>prototype</code> of <code>Bird</code>. Properties in the <code>prototype</code> are shared among ALL instances of <code>Bird</code>. Here's how to add <code>numLegs</code> to the <code>Bird prototype</code>:</p>\n<pre><code class=\"language-js\">Bird.prototype.numLegs = 2;\n</code></pre>\n<p>Now all instances of <code>Bird</code> have the <code>numLegs</code> property.</p>\n<pre><code class=\"language-js\">console.log(duck.numLegs);\nconsole.log(canary.numLegs);\n</code></pre>\n<p>Since all instances automatically have the properties on the <code>prototype</code>, think of a <code>prototype</code> as a \"recipe\" for creating objects. Note that the <code>prototype</code> for <code>duck</code> and <code>canary</code> is part of the <code>Bird</code> constructor as <code>Bird.prototype</code>. Nearly every object in JavaScript has a <code>prototype</code> property which is part of the constructor function that created it.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add a <code>numLegs</code> property to the <code>prototype</code> of <code>Dog</code></p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":9,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7dae367417b2b2512b7a","title":"Verify an Object's Constructor with instanceof","challengeType":1,"forumTopicId":301337,"dashedName":"verify-an-objects-constructor-with-instanceof","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function House(numBedrooms) {\n  this.numBedrooms = numBedrooms;\n}\n\n// Only change code below this line","error":null,"seed":"function House(numBedrooms) {\n  this.numBedrooms = numBedrooms;\n}\n\n// Only change code below this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"function House(numBedrooms) {\n  this.numBedrooms = numBedrooms;\n}\nconst myHouse = new House(4);\nconsole.log(myHouse instanceof House);","error":null,"seed":"function House(numBedrooms) {\n  this.numBedrooms = numBedrooms;\n}\nconst myHouse = new House(4);\nconsole.log(myHouse instanceof House);"}]],"tests":[{"text":"<p><code>myHouse</code> should have a <code>numBedrooms</code> attribute set to a number.</p>","testString":"assert(typeof myHouse.numBedrooms === 'number');"},{"text":"<p>You should verify that <code>myHouse</code> is an instance of <code>House</code> using the <code>instanceof</code> operator.</p>","testString":"assert(/myHouse\\s*instanceof\\s*House/.test(code));"}],"description":"<section id=\"description\">\n<p>Anytime a constructor function creates a new object, that object is said to be an <dfn>instance</dfn> of its constructor. JavaScript gives a convenient way to verify this with the <code>instanceof</code> operator. <code>instanceof</code> allows you to compare an object to a constructor, returning <code>true</code> or <code>false</code> based on whether or not that object was created with the constructor. Here's an example:</p>\n<pre><code class=\"language-js\">let Bird = function(name, color) {\n  this.name = name;\n  this.color = color;\n  this.numLegs = 2;\n}\n\nlet crow = new Bird(\"Alexis\", \"black\");\n\ncrow instanceof Bird;\n</code></pre>\n<p>This <code>instanceof</code> method would return <code>true</code>.</p>\n<p>If an object is created without using a constructor, <code>instanceof</code> will verify that it is not an instance of that constructor:</p>\n<pre><code class=\"language-js\">let canary = {\n  name: \"Mildred\",\n  color: \"Yellow\",\n  numLegs: 2\n};\n\ncanary instanceof Bird;\n</code></pre>\n<p>This <code>instanceof</code> method would return <code>false</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Create a new instance of the <code>House</code> constructor, calling it <code>myHouse</code> and passing a number of bedrooms. Then, use <code>instanceof</code> to verify that it is an instance of <code>House</code>.</p>\n</section>","block":"object-oriented-programming","hasEditableBoundaries":false,"order":6,"superOrder":1,"certification":"javascript-algorithms-and-data-structures","superBlock":"javascript-algorithms-and-data-structures","challengeOrder":7,"required":[],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false}]}}},"front-end-development-libraries":{"blocks":{"bootstrap":{"meta":{"name":"Bootstrap","isUpcomingChange":false,"dashedName":"bootstrap","order":0,"time":"5 hours","template":"","required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"superBlock":"front-end-development-libraries","challengeOrder":[["bad87fee1348bd9acde08712","Use Responsive Design with Bootstrap Fluid Containers"],["bad87fee1348bd9acde08812","Make Images Mobile Responsive"],["bad87fee1348bd8acde08812","Center Text with Bootstrap"],["bad87fee1348cd8acdf08812","Create a Bootstrap Button"],["bad87fee1348cd8acef08812","Create a Block Element Bootstrap Button"],["bad87fee1348cd8acef08811","Taste the Bootstrap Button Color Rainbow"],["bad87fee1348cd8acef08813","Call out Optional Actions with btn-info"],["bad87fee1348ce8acef08814","Warn Your Users of a Dangerous Action with btn-danger"],["bad88fee1348ce8acef08815","Use the Bootstrap Grid to Put Elements Side By Side"],["bad87fee1347bd9aedf08845","Ditch Custom CSS for Bootstrap"],["bad87fee1348bd9aedf08845","Use a span to Target Inline Elements"],["bad87fee1348bd9aede08845","Create a Custom Heading"],["bad87fee1348bd9aedd08845","Add Font Awesome Icons to our Buttons"],["bad87fee1348bd9aedc08845","Add Font Awesome Icons to all of our Buttons"],["bad87fee1348bd9aedb08845","Responsively Style Radio Buttons"],["bad87fee1348bd9aeda08845","Responsively Style Checkboxes"],["bad87fee1348bd9aed908845","Style Text Inputs as Form Controls"],["bad87fee1348bd9aec908845","Line up Form Elements Responsively with Bootstrap"],["bad87fee1348bd9aec908846","Create a Bootstrap Headline"],["bad87fee1348bd9aec908746","House our page within a Bootstrap container-fluid div"],["bad87fee1348bd9bec908846","Create a Bootstrap Row"],["bad87fee1348bd9aec908847","Split Your Bootstrap Row"],["bad87fee1348bd9aec908848","Create Bootstrap Wells"],["bad87fee1348bd9aec908849","Add Elements within Your Bootstrap Wells"],["bad87fee1348bd9aec908850","Apply the Default Bootstrap Button Style"],["bad87fee1348bd9aec908852","Create a Class to Target with jQuery Selectors"],["bad87fee1348bd9aec908853","Add id Attributes to Bootstrap Elements"],["bad87fee1348bd9aec908854","Label Bootstrap Wells"],["bad87fee1348bd9aec908855","Give Each Element a Unique id"],["bad87fee1348bd9aec908856","Label Bootstrap Buttons"],["bad87fee1348bd9aec908857","Use Comments to Clarify Code"]]},"challenges":[{"id":"bad87fee1348bd9aec908849","title":"Add Elements within Your Bootstrap Wells","challengeType":0,"forumTopicId":16636,"dashedName":"add-elements-within-your-bootstrap-wells","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n\n\n\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n\n\n\n      </div>\n    </div>\n  </div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n\n\n\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n\n\n\n      </div>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button></button>\n        <button></button>\n        <button></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button></button>\n        <button></button>\n        <button></button>\n      </div>\n    </div>\n  </div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button></button>\n        <button></button>\n        <button></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button></button>\n        <button></button>\n        <button></button>\n      </div>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>Three <code>button</code> elements should be nested within each of your <code>div</code> elements with class <code>well</code>.</p>","testString":"assert(\n  $('div.well:eq(0)').children('button').length === 3 &&\n    $('div.well:eq(1)').children('button').length === 3\n);"},{"text":"<p>You should have a total of 6 <code>button</code> elements.</p>","testString":"assert($('button') && $('button').length > 5);"},{"text":"<p>All of your <code>button</code> elements should have closing tags.</p>","testString":"assert(\n  code.match(/<\\/button>/g) &&\n    code.match(/<button/g) &&\n    code.match(/<\\/button>/g).length === code.match(/<button/g).length\n);"}],"description":"<section id=\"description\">\n<p>Now we're several <code>div</code> elements deep on each column of our row. This is as deep as we'll need to go. Now we can add our <code>button</code> elements.</p>\n<p>Nest three <code>button</code> elements within each of your <code>div</code> elements having the class name <code>well</code>.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":23,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedc08845","title":"Add Font Awesome Icons to all of our Buttons","challengeType":0,"forumTopicId":16637,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"},{"link":"https://use.fontawesome.com/releases/v5.8.1/css/all.css","raw":true}],"dashedName":"add-font-awesome-icons-to-all-of-our-buttons","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fas fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fas fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fas fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fas fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fas fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fas fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fas fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fas fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}]],"tests":[{"text":"<p>You should add a <code>&#x3C;i class=\"fas fa-info-circle\">&#x3C;/i></code> within your <code>info</code> button element.</p>","testString":"assert(\n  $('.btn-info > i').is('.fas.fa-info-circle') ||\n    $('.btn-info > span').is('.fas.fa-info-circle')\n);"},{"text":"<p>You should add a <code>&#x3C;i class=\"fas fa-trash\">&#x3C;/i></code> within your <code>delete</code> button element.</p>","testString":"assert(\n  $('.btn-danger > i').is('.fas.fa-trash') ||\n    $('.btn-danger > span').is('.fas.fa-trash')\n);"},{"text":"<p>Each of your <code>i</code> elements should have a closing tag and <code>&#x3C;i class=\"fas fa-thumbs-up\">&#x3C;/i></code> is in your <code>like</code> button element.</p>","testString":"assert(\n  code.match(/<\\/i>|<\\/span/g) &&\n    code.match(/<\\/i|<\\/span>/g).length > 2 &&\n    ($('.btn-primary > i').is('.fas.fa-thumbs-up') ||\n      $('.btn-primary > span').is('.fas.fa-thumbs-up'))\n);"}],"description":"<section id=\"description\">\n<p>Font Awesome is a convenient library of icons. These icons can be web fonts or vector graphics. These icons are treated just like fonts. You can specify their size using pixels, and they will assume the font size of their parent HTML elements.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use Font Awesome to add an <code>info-circle</code> icon to your info button and a <code>trash</code> icon to your delete button.</p>\n<p><strong>Note:</strong> The <code>span</code> element is an acceptable alternative to the <code>i</code> element for the directions below.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":13,"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedd08845","title":"Add Font Awesome Icons to our Buttons","challengeType":0,"forumTopicId":16638,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"},{"link":"https://use.fontawesome.com/releases/v5.8.1/css/all.css","raw":true}],"dashedName":"add-font-awesome-icons-to-our-buttons","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fas fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fas fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}]],"tests":[{"text":"<p>You should add an <code>i</code> element with the classes <code>fas</code> and <code>fa-thumbs-up</code>.</p>","testString":"assert($('i').is('.fas.fa-thumbs-up') || $('span').is('.fas.fa-thumbs-up'));"},{"text":"<p>Your <code>fa-thumbs-up</code> icon should be located within the Like button.</p>","testString":"assert(\n  ($('i.fa-thumbs-up').parent().text().match(/Like/gi) &&\n    $('.btn-primary > i').is('.fas.fa-thumbs-up')) ||\n    ($('span.fa-thumbs-up').parent().text().match(/Like/gi) &&\n      $('.btn-primary > span').is('.fas.fa-thumbs-up'))\n);"},{"text":"<p>Your <code>i</code> element should be nested within your <code>button</code> element.</p>","testString":"assert(\n  $('button').children('i').length > 0 ||\n    $('button').children('span').length > 0\n);"},{"text":"<p>Your icon element should have a closing tag.</p>","testString":"assert(code.match(/<\\/i>|<\\/span>/g));"}],"description":"<section id=\"description\">\n<p>Font Awesome is a convenient library of icons. These icons can be webfonts or vector graphics. These icons are treated just like fonts. You can specify their size using pixels, and they will assume the font size of their parent HTML elements.</p>\n<p>You can include Font Awesome in any app by adding the following code to the top of your HTML:</p>\n<pre><code class=\"language-html\">&#x3C;link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\" integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\" crossorigin=\"anonymous\">\n</code></pre>\n<p>In this case, we've already added it for you to this page behind the scenes.</p>\n<p>The <code>i</code> element was originally used to make other elements italic, but is now commonly used for icons. You can add the Font Awesome classes to the <code>i</code> element to turn it into an icon, for example:</p>\n<pre><code class=\"language-html\">&#x3C;i class=\"fas fa-info-circle\">&#x3C;/i>\n</code></pre>\n<p>Note that the <code>span</code> element is also acceptable for use with icons.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use Font Awesome to add a <code>thumbs-up</code> icon to your like button by giving it an <code>i</code> element with the classes <code>fas</code> and <code>fa-thumbs-up</code>. Make sure to keep the text <code>Like</code> next to the icon.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":12,"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aec908853","title":"Add id Attributes to Bootstrap Elements","challengeType":0,"forumTopicId":16639,"dashedName":"add-id-attributes-to-bootstrap-elements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n  </div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n  </div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>Your left <code>well</code> should have the id of <code>left-well</code>.</p>","testString":"assert(\n  $('.col-xs-6').children('#left-well') &&\n    $('.col-xs-6').children('#left-well').length > 0\n);"},{"text":"<p>Your right <code>well</code> should have the id of <code>right-well</code>.</p>","testString":"assert(\n  $('.col-xs-6').children('#right-well') &&\n    $('.col-xs-6').children('#right-well').length > 0\n);"}],"description":"<section id=\"description\">\n<p>Recall that in addition to class attributes, you can give each of your elements an <code>id</code> attribute.</p>\n<p>Each id must be unique to a specific element and used only once per page.</p>\n<p>Let's give a unique id to each of our <code>div</code> elements of class <code>well</code>.</p>\n<p>Remember that you can give an element an id like this:</p>\n<pre><code class=\"language-html\">&#x3C;div class=\"well\" id=\"center-well\">\n</code></pre>\n<p>Give the well on the left the id of <code>left-well</code>. Give the well on the right the id of <code>right-well</code>.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":26,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aec908850","title":"Apply the Default Bootstrap Button Style","challengeType":0,"forumTopicId":16657,"dashedName":"apply-the-default-bootstrap-button-style","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button></button>\n        <button></button>\n        <button></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button></button>\n        <button></button>\n        <button></button>\n      </div>\n    </div>\n  </div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button></button>\n        <button></button>\n        <button></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button></button>\n        <button></button>\n        <button></button>\n      </div>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n      </div>\n    </div>\n  </div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n      </div>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>You should apply the <code>btn</code> class to each of your <code>button</code> elements.</p>","testString":"assert($('.btn').length > 5);"},{"text":"<p>You should apply the <code>btn-default</code> class to each of your <code>button</code> elements.</p>","testString":"assert($('.btn-default').length > 5);"}],"description":"<section id=\"description\">\n<p>Bootstrap has another button class called <code>btn-default</code>.</p>\n<p>Apply both the <code>btn</code> and <code>btn-default</code> classes to each of your <code>button</code> elements.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":24,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348cd8acef08813","title":"Call out Optional Actions with btn-info","challengeType":0,"forumTopicId":16770,"dashedName":"call-out-optional-actions-with-btn-info","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-primary\">Like</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-primary\">Like</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-primary\">Like</button>\n  <button class=\"btn btn-block btn-info\">Info</button>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-primary\">Like</button>\n  <button class=\"btn btn-block btn-info\">Info</button>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}]],"tests":[{"text":"<p>You should create a new <code>button</code> element with the text <code>Info</code>.</p>","testString":"assert(new RegExp('info', 'gi').test($('button').text()));"},{"text":"<p>Both of your Bootstrap buttons should have the <code>btn</code> and <code>btn-block</code> classes.</p>","testString":"assert($('button.btn-block.btn').length > 1);"},{"text":"<p>Your new button should have the class <code>btn-info</code>.</p>","testString":"assert($('button').hasClass('btn-info'));"},{"text":"<p>All of your <code>button</code> elements should have closing tags.</p>","testString":"assert(\n  code.match(/<\\/button>/g) &&\n    code.match(/<button/g) &&\n    code.match(/<\\/button>/g).length === code.match(/<button/g).length\n);"}],"description":"<section id=\"description\">\n<p>Bootstrap comes with several pre-defined colors for buttons. The <code>btn-info</code> class is used to call attention to optional actions that the user can take.</p>\n<p>Create a new block-level Bootstrap button below your <code>Like</code> button with the text <code>Info</code>, and add Bootstrap's <code>btn-info</code> class to it.</p>\n<p>Note that these buttons still need the <code>btn</code> and <code>btn-block</code> classes.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":6,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd8acde08812","title":"Center Text with Bootstrap","challengeType":0,"forumTopicId":16771,"dashedName":"center-text-with-bootstrap","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}]],"tests":[{"text":"<p>Your <code>h2</code> element should be centered by applying the class <code>text-center</code></p>","testString":"assert($('h2').hasClass('text-center'));"},{"text":"<p>Your <code>h2</code> element should still have the class <code>red-text</code></p>","testString":"assert($('h2').hasClass('red-text'));"}],"description":"<section id=\"description\">\n<p>Now that we're using Bootstrap, we can center our heading element to make it look better. All we need to do is add the class <code>text-center</code> to our <code>h2</code> element.</p>\n<p>Remember that you can add several classes to the same element by separating each of them with a space, like this:</p>\n<pre><code class=\"language-html\">&#x3C;h2 class=\"red-text text-center\">your text&#x3C;/h2>\n</code></pre>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":2,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348cd8acef08812","title":"Create a Block Element Bootstrap Button","challengeType":0,"forumTopicId":16810,"dashedName":"create-a-block-element-bootstrap-button","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-default\">Like</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-default\">Like</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-default\">Like</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-default\">Like</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}]],"tests":[{"text":"<p>Your button should still have the <code>btn</code> and <code>btn-default</code> classes.</p>","testString":"assert($('button').hasClass('btn') && $('button').hasClass('btn-default'));"},{"text":"<p>Your button should have the class <code>btn-block</code>.</p>","testString":"assert($('button').hasClass('btn-block'));"},{"text":"<p>All of your <code>button</code> elements should have closing tags.</p>","testString":"assert(\n  code.match(/<\\/button>/g) &&\n    code.match(/<button/g) &&\n    code.match(/<\\/button>/g).length === code.match(/<button/g).length\n);"}],"description":"<section id=\"description\">\n<p>Normally, your <code>button</code> elements with the <code>btn</code> and <code>btn-default</code> classes are only as wide as the text that they contain. For example:</p>\n<pre><code class=\"language-html\">&#x3C;button class=\"btn btn-default\">Submit&#x3C;/button>\n</code></pre>\n<p>This button would only be as wide as the word <code>Submit</code>.</p>\n<p><button class='btn btn-default'>Submit</button></p>\n<p>By making them block elements with the additional class of <code>btn-block</code>, your button will stretch to fill your page's entire horizontal space and any elements following it will flow onto a \"new line\" below the block.</p>\n<pre><code class=\"language-html\">&#x3C;button class=\"btn btn-default btn-block\">Submit&#x3C;/button>\n</code></pre>\n<p>This button would take up 100% of the available width.</p>\n<p><button class='btn btn-default btn-block'>Submit</button></p>\n<p>Note that these buttons still need the <code>btn</code> class.</p>\n<p>Add Bootstrap's <code>btn-block</code> class to your Bootstrap button.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":4,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348cd8acdf08812","title":"Create a Bootstrap Button","challengeType":0,"forumTopicId":16811,"dashedName":"create-a-bootstrap-button","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<html>\n<head>\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n</head>\n<body>\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n\n   <!-- ADD Bootstrap Styled Button -->\n  <button class=\"btn btn-default\">Like</button> \n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>\n</html>","error":null,"seed":"<html>\n<head>\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n</head>\n<body>\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n\n   <!-- ADD Bootstrap Styled Button -->\n  <button class=\"btn btn-default\">Like</button> \n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>\n</html>"}]],"tests":[{"text":"<p>You should create a new <code>button</code> element with the text <code>Like</code>.</p>","testString":"assert(\n  new RegExp('like', 'gi').test($('button').text()) &&\n    $('img.img-responsive + button.btn').length > 0\n);"},{"text":"<p>Your new button should have two classes: <code>btn</code> and <code>btn-default</code>.</p>","testString":"assert($('button').hasClass('btn') && $('button').hasClass('btn-default'));"},{"text":"<p>All of your <code>button</code> elements should have closing tags.</p>","testString":"assert(\n  code.match(/<\\/button>/g) &&\n    code.match(/<button/g) &&\n    code.match(/<\\/button>/g).length === code.match(/<button/g).length\n);"}],"description":"<section id=\"description\">\n<p>Bootstrap has its own styles for <code>button</code> elements, which look much better than the plain HTML ones.</p>\n<p>Create a new <code>button</code> element below your large kitten photo. Give it the <code>btn</code> and <code>btn-default</code> classes, as well as the text of <code>Like</code>.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":3,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aec908846","title":"Create a Bootstrap Headline","challengeType":0,"forumTopicId":16812,"dashedName":"create-a-bootstrap-headline","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"","error":null,"seed":""}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h3 class=\"text-primary text-center\">jQuery Playground</h3>","error":null,"seed":"<h3 class=\"text-primary text-center\">jQuery Playground</h3>"}]],"tests":[{"text":"<p>You should add an <code>h3</code> element to your page.</p>","testString":"assert($('h3') && $('h3').length > 0);"},{"text":"<p>Your <code>h3</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/h3>/g) &&\n    code.match(/<h3/g) &&\n    code.match(/<\\/h3>/g).length === code.match(/<h3/g).length\n);"},{"text":"<p>Your <code>h3</code> element should be colored by applying the class <code>text-primary</code></p>","testString":"assert($('h3').hasClass('text-primary'));"},{"text":"<p>Your <code>h3</code> element should be centered by applying the class <code>text-center</code></p>","testString":"assert($('h3').hasClass('text-center'));"},{"text":"<p>Your <code>h3</code> element should have the text <code>jQuery Playground</code>.</p>","testString":"assert.isTrue(/jquery(\\s)+playground/gi.test($('h3').text()));"}],"description":"<section id=\"description\">\n<p>Now let's build something from scratch to practice our HTML, CSS and Bootstrap skills.</p>\n<p>We'll build a jQuery playground, which we'll soon put to use in our jQuery challenges.</p>\n<p>To start with, create an <code>h3</code> element, with the text <code>jQuery Playground</code>.</p>\n<p>Color your <code>h3</code> element with the <code>text-primary</code> Bootstrap class, and center it with the <code>text-center</code> Bootstrap class.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":18,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9bec908846","title":"Create a Bootstrap Row","challengeType":0,"forumTopicId":16813,"dashedName":"create-a-bootstrap-row","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\"></div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\"></div>\n</div>"}]],"tests":[{"text":"<p>You should add a <code>div</code> element below your <code>h3</code> element.</p>","testString":"assert(\n  $('div').length > 1 &&\n    $('div.row h3.text-primary').length == 0 &&\n    $('div.row + h3.text-primary').length == 0 &&\n    $('h3.text-primary + div.row').length > 0\n);"},{"text":"<p>Your <code>div</code> element should have the class <code>row</code></p>","testString":"assert($('div').hasClass('row'));"},{"text":"<p>Your <code>row div</code> should be nested inside the <code>container-fluid div</code></p>","testString":"assert($('div.container-fluid div.row').length > 0);"},{"text":"<p>Your <code>div</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/div>/g) &&\n    code.match(/<div/g) &&\n    code.match(/<\\/div>/g).length === code.match(/<div/g).length\n);"}],"description":"<section id=\"description\">\n<p>Now we'll create a Bootstrap row for our inline elements.</p>\n<p>Create a <code>div</code> element below the <code>h3</code> tag, with a class of <code>row</code>.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":20,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aec908852","title":"Create a Class to Target with jQuery Selectors","challengeType":0,"forumTopicId":16815,"dashedName":"create-a-class-to-target-with-jquery-selectors","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n      </div>\n    </div>\n  </div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n        <button class=\"btn btn-default\"></button>\n      </div>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"target btn btn-default\"></button>\n        <button class=\"target btn btn-default\"></button>\n        <button class=\"target btn btn-default\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"target btn btn-default\"></button>\n        <button class=\"target btn btn-default\"></button>\n        <button class=\"target btn btn-default\"></button>\n      </div>\n    </div>\n  </div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"target btn btn-default\"></button>\n        <button class=\"target btn btn-default\"></button>\n        <button class=\"target btn btn-default\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\">\n        <button class=\"target btn btn-default\"></button>\n        <button class=\"target btn btn-default\"></button>\n        <button class=\"target btn btn-default\"></button>\n      </div>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>You should apply the <code>target</code> class to each of your <code>button</code> elements.</p>","testString":"assert($('.target').length > 5);"}],"description":"<section id=\"description\">\n<p>Not every class needs to have corresponding CSS. Sometimes we create classes just for the purpose of selecting these elements more easily using jQuery.</p>\n<p>Give each of your <code>button</code> elements the class <code>target</code>.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":25,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aede08845","title":"Create a Custom Heading","challengeType":0,"forumTopicId":16816,"dashedName":"create-a-custom-heading","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n\n  <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n\n  <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary  text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n        <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary  text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n        <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}]],"tests":[{"text":"<p>Your <code>h2</code> element and topmost <code>img</code> element should both be nested together within a <code>div</code> element with the class <code>row</code>.</p>","testString":"assert($('div.row:has(h2)').length > 0 && $('div.row:has(img)').length > 0);"},{"text":"<p>Your topmost <code>img</code> element should be nested within a <code>div</code> with the class <code>col-xs-4</code>.</p>","testString":"assert(\n  $('div.col-xs-4:has(img)').length > 0 &&\n    $('div.col-xs-4:has(div)').length === 0\n);"},{"text":"<p>Your <code>h2</code> element should be nested within a <code>div</code> with the class <code>col-xs-8</code>.</p>","testString":"assert(\n  $('div.col-xs-8:has(h2)').length > 0 &&\n    $('div.col-xs-8:has(div)').length === 0\n);"},{"text":"<p>All of your <code>div</code> elements should have closing tags.</p>","testString":"assert(\n  code.match(/<\\/div>/g) &&\n    code.match(/<div/g) &&\n    code.match(/<\\/div>/g).length === code.match(/<div/g).length\n);"}],"description":"<section id=\"description\">\n<p>We will make a simple heading for our Cat Photo App by putting the title and relaxing cat image in the same row.</p>\n<p>Remember, Bootstrap uses a responsive grid system, which makes it easy to put elements into rows and specify each element's relative width. Most of Bootstrap's classes can be applied to a <code>div</code> element.</p>\n<p>Nest your first image and your <code>h2</code> element within a single <code>&#x3C;div class=\"row\"></code> element. Nest your <code>h2</code> element within a <code>&#x3C;div class=\"col-xs-8\"></code> and your image in a <code>&#x3C;div class=\"col-xs-4\"></code> so that they are on the same line.</p>\n<p>Notice how the image is now just the right size to fit along the text?</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":11,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aec908848","title":"Create Bootstrap Wells","challengeType":0,"forumTopicId":16825,"dashedName":"create-bootstrap-wells","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n\n    </div>\n    <div class=\"col-xs-6\">\n\n    </div>\n  </div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n\n    </div>\n    <div class=\"col-xs-6\">\n\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\"></div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\"></div>\n    </div>\n  </div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <div class=\"well\"></div>\n    </div>\n    <div class=\"col-xs-6\">\n      <div class=\"well\"></div>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>You should add a <code>div</code> element with the class <code>well</code> inside each of your <code>div</code> elements with the class <code>col-xs-6</code></p>","testString":"assert($('div.col-xs-6').not(':has(>div.well)').length < 1);"},{"text":"<p>Both of your <code>div</code> elements with the class <code>col-xs-6</code> should be nested within your <code>div</code> element with the class <code>row</code>.</p>","testString":"assert($('div.row > div.col-xs-6').length > 1);"},{"text":"<p>All your <code>div</code> elements should have closing tags.</p>","testString":"assert(\n  code.match(/<\\/div>/g) &&\n    code.match(/<div/g) &&\n    code.match(/<\\/div>/g).length === code.match(/<div/g).length\n);"}],"description":"<section id=\"description\">\n<p>Bootstrap has a class called <code>well</code> that can create a visual sense of depth for your columns.</p>\n<p>Nest one <code>div</code> element with the class <code>well</code> within each of your <code>col-xs-6</code> <code>div</code> elements.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":22,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1347bd9aedf08845","title":"Ditch Custom CSS for Bootstrap","challengeType":0,"forumTopicId":17565,"dashedName":"ditch-custom-css-for-bootstrap","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n\n  <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n\n  <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}]],"tests":[{"text":"<p>Your <code>h2</code> element should no longer have the class <code>red-text</code>.</p>","testString":"assert(!$('h2').hasClass('red-text'));"},{"text":"<p>Your <code>h2</code> element should now have the class <code>text-primary</code>.</p>","testString":"assert($('h2').hasClass('text-primary'));"},{"text":"<p>Your paragraph elements should no longer use the font <code>Monospace</code>.</p>","testString":"assert(\n  !$('p')\n    .css('font-family')\n    .match(/monospace/i)\n);"},{"text":"<p>The <code>smaller-image</code> class should be removed from your top image.</p>","testString":"assert(!$('img').hasClass('smaller-image'));"},{"text":"<p>You should add the <code>img-responsive</code> class to your top image.</p>","testString":"assert($('.img-responsive').length > 1);"}],"description":"<section id=\"description\">\n<p>We can clean up our code and make our Cat Photo App look more conventional by using Bootstrap's built-in styles instead of the custom styles we created earlier.</p>\n<p>Don't worry - there will be plenty of time to customize our CSS later.</p>\n<p>Delete the <code>.red-text</code>, <code>p</code>, and <code>.smaller-image</code> CSS declarations from your <code>style</code> element so that the only declarations left in your <code>style</code> element are <code>h2</code> and <code>thick-green-border</code>.</p>\n<p>Then delete the <code>p</code> element that contains a dead link. Then remove the <code>red-text</code> class from your <code>h2</code> element and replace it with the <code>text-primary</code> Bootstrap class.</p>\n<p>Finally, remove the <code>smaller-image</code> class from your first <code>img</code> element and replace it with the <code>img-responsive</code> class.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":9,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aec908855","title":"Give Each Element a Unique id","challengeType":0,"forumTopicId":18191,"dashedName":"give-each-element-a-unique-id","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n  </div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\"></button>\n        <button class=\"btn btn-default target\" id=\"target2\"></button>\n        <button class=\"btn btn-default target\" id=\"target3\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\"></button>\n        <button class=\"btn btn-default target\" id=\"target5\"></button>\n        <button class=\"btn btn-default target\" id=\"target6\"></button>\n      </div>\n    </div>\n  </div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\"></button>\n        <button class=\"btn btn-default target\" id=\"target2\"></button>\n        <button class=\"btn btn-default target\" id=\"target3\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\"></button>\n        <button class=\"btn btn-default target\" id=\"target5\"></button>\n        <button class=\"btn btn-default target\" id=\"target6\"></button>\n      </div>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>One <code>button</code> element should have the id <code>target1</code>.</p>","testString":"assert(\n  $('#left-well').children('#target1') &&\n    $('#left-well').children('#target1').length > 0\n);"},{"text":"<p>One <code>button</code> element should have the id <code>target2</code>.</p>","testString":"assert(\n  $('#left-well').children('#target2') &&\n    $('#left-well').children('#target2').length > 0\n);"},{"text":"<p>One <code>button</code> element should have the id <code>target3</code>.</p>","testString":"assert(\n  $('#left-well').children('#target3') &&\n    $('#left-well').children('#target3').length > 0\n);"},{"text":"<p>One <code>button</code> element should have the id <code>target4</code>.</p>","testString":"assert(\n  $('#right-well').children('#target4') &&\n    $('#right-well').children('#target4').length > 0\n);"},{"text":"<p>One <code>button</code> element should have the id <code>target5</code>.</p>","testString":"assert(\n  $('#right-well').children('#target5') &&\n    $('#right-well').children('#target5').length > 0\n);"},{"text":"<p>One <code>button</code> element should have the id <code>target6</code>.</p>","testString":"assert(\n  $('#right-well').children('#target6') &&\n    $('#right-well').children('#target6').length > 0\n);"}],"description":"<section id=\"description\">\n<p>We will also want to be able to use jQuery to target each button by its unique id.</p>\n<p>Give each of your buttons a unique id, starting with <code>target1</code> and ending with <code>target6</code>.</p>\n<p>Make sure that <code>target1</code> to <code>target3</code> are in <code>#left-well</code>, and <code>target4</code> to <code>target6</code> are in <code>#right-well</code>.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":28,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aec908746","title":"House our page within a Bootstrap container-fluid div","challengeType":0,"forumTopicId":18198,"dashedName":"house-our-page-within-a-bootstrap-container-fluid-div","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<h3 class=\"text-primary text-center\">jQuery Playground</h3>","error":null,"seed":"<h3 class=\"text-primary text-center\">jQuery Playground</h3>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n    <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n    <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n</div>"}]],"tests":[{"text":"<p>Your <code>div</code> element should have the class <code>container-fluid</code>.</p>","testString":"assert($('div').hasClass('container-fluid'));"},{"text":"<p>Each of your <code>div</code> elements should have closing tags.</p>","testString":"assert(\n  code.match(/<\\/div>/g) &&\n    code.match(/<div/g) &&\n    code.match(/<\\/div>/g).length === code.match(/<div/g).length\n);"},{"text":"<p>Your <code>h3</code> element should be nested inside a <code>div</code> element.</p>","testString":"assert($('div').children('h3').length > 0);"}],"description":"<section id=\"description\">\n<p>Now let's make sure all the content on your page is mobile-responsive.</p>\n<p>Let's nest your <code>h3</code> element within a <code>div</code> element with the class <code>container-fluid</code>.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":19,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aec908856","title":"Label Bootstrap Buttons","challengeType":0,"forumTopicId":18222,"dashedName":"label-bootstrap-buttons","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\"></button>\n        <button class=\"btn btn-default target\" id=\"target2\"></button>\n        <button class=\"btn btn-default target\" id=\"target3\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\"></button>\n        <button class=\"btn btn-default target\" id=\"target5\"></button>\n        <button class=\"btn btn-default target\" id=\"target6\"></button>\n      </div>\n    </div>\n  </div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\"></button>\n        <button class=\"btn btn-default target\" id=\"target2\"></button>\n        <button class=\"btn btn-default target\" id=\"target3\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\"></button>\n        <button class=\"btn btn-default target\" id=\"target5\"></button>\n        <button class=\"btn btn-default target\" id=\"target6\"></button>\n      </div>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>Your <code>button</code> element with the id <code>target1</code> should have the text <code>#target1</code>.</p>","testString":"assert(new RegExp('#target1', 'gi').test($('#target1').text()));"},{"text":"<p>Your <code>button</code> element with the id <code>target2</code> should have the text <code>#target2</code>.</p>","testString":"assert(new RegExp('#target2', 'gi').test($('#target2').text()));"},{"text":"<p>Your <code>button</code> element with the id <code>target3</code> should have the text <code>#target3</code>.</p>","testString":"assert(new RegExp('#target3', 'gi').test($('#target3').text()));"},{"text":"<p>Your <code>button</code> element with the id <code>target4</code> should have the text <code>#target4</code>.</p>","testString":"assert(new RegExp('#target4', 'gi').test($('#target4').text()));"},{"text":"<p>Your <code>button</code> element with the id <code>target5</code> should have the text <code>#target5</code>.</p>","testString":"assert(new RegExp('#target5', 'gi').test($('#target5').text()));"},{"text":"<p>Your <code>button</code> element with the id <code>target6</code> should have the text <code>#target6</code>.</p>","testString":"assert(new RegExp('#target6', 'gi').test($('#target6').text()));"}],"description":"<section id=\"description\">\n<p>Just like we labeled our wells, we want to label our buttons.</p>\n<p>Give each of your <code>button</code> elements text that corresponds to its id selector.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":29,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aec908854","title":"Label Bootstrap Wells","challengeType":0,"forumTopicId":18223,"dashedName":"label-bootstrap-wells","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n  </div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n  </div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n        <button class=\"btn btn-default target\"></button>\n      </div>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>You should add an <code>h4</code> element to each of your <code>&#x3C;div class=\"col-xs-6\"></code> elements.</p>","testString":"assert(\n  $('.col-xs-6').children('h4') && $('.col-xs-6').children('h4').length > 1\n);"},{"text":"<p>One <code>h4</code> element should have the text <code>#left-well</code>.</p>","testString":"assert(new RegExp('#left-well', 'gi').test($('h4').text()));"},{"text":"<p>One <code>h4</code> element should have the text <code>#right-well</code>.</p>","testString":"assert(new RegExp('#right-well', 'gi').test($('h4').text()));"},{"text":"<p>All of your <code>h4</code> elements should have closing tags.</p>","testString":"assert(\n  code.match(/<\\/h4>/g) &&\n    code.match(/<h4/g) &&\n    code.match(/<\\/h4>/g).length === code.match(/<h4/g).length\n);"}],"description":"<section id=\"description\">\n<p>For the sake of clarity, let's label both of our wells with their ids.</p>\n<p>Above your left-well, inside its <code>col-xs-6</code> <code>div</code> element, add a <code>h4</code> element with the text <code>#left-well</code>.</p>\n<p>Above your right-well, inside its <code>col-xs-6</code> <code>div</code> element, add a <code>h4</code> element with the text <code>#right-well</code>.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":27,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aec908845","title":"Line up Form Elements Responsively with Bootstrap","challengeType":0,"forumTopicId":18225,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"},{"link":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.css","raw":true}],"dashedName":"line-up-form-elements-responsively-with-bootstrap","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n      </div>\n    </div>\n    <input type=\"text\" class=\"form-control\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fa fa-paper-plane\"></i> Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n      </div>\n    </div>\n    <input type=\"text\" class=\"form-control\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fa fa-paper-plane\"></i> Submit</button>\n  </form>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-7\">\n        <input type=\"text\" class=\"form-control\" placeholder=\"cat photo URL\" required>\n      </div>\n      <div class=\"col-xs-5\">\n        <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fa fa-paper-plane\"></i> Submit</button>\n      </div>\n    </div>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-7\">\n        <input type=\"text\" class=\"form-control\" placeholder=\"cat photo URL\" required>\n      </div>\n      <div class=\"col-xs-5\">\n        <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fa fa-paper-plane\"></i> Submit</button>\n      </div>\n    </div>\n  </form>\n</div>"}]],"tests":[{"text":"<p>Your form submission button and text input should be nested in a div with class <code>row</code>.</p>","testString":"assert(\n  $('div.row:has(input[type=\"text\"])').length > 0 &&\n    $('div.row:has(button[type=\"submit\"])').length > 0\n);"},{"text":"<p>Your form text input should be nested in a div with the class <code>col-xs-7</code>.</p>","testString":"assert($('div.col-xs-7:has(input[type=\"text\"])').length > 0);"},{"text":"<p>Your form submission button should be nested in a div with the class <code>col-xs-5</code>.</p>","testString":"assert($('div.col-xs-5:has(button[type=\"submit\"])').length > 0);"},{"text":"<p>All of your <code>div</code> elements should have closing tags.</p>","testString":"assert(\n  code.match(/<\\/div>/g) &&\n    code.match(/<div/g) &&\n    code.match(/<\\/div>/g).length === code.match(/<div/g).length\n);"}],"description":"<section id=\"description\">\n<p>Now let's get your form <code>input</code> and your submission <code>button</code> on the same line. We'll do this the same way we have previously: by using a <code>div</code> element with the class <code>row</code>, and other <code>div</code> elements within it using the <code>col-xs-*</code> class.</p>\n<p>Nest both your form's text <code>input</code> and submit <code>button</code> within a <code>div</code> with the class <code>row</code>. Nest your form's text <code>input</code> within a div with the class of <code>col-xs-7</code>. Nest your form's submit <code>button</code> in a <code>div</code> with the class <code>col-xs-5</code>.</p>\n<p>This is the last challenge we'll do for our Cat Photo App for now. We hope you've enjoyed learning Font Awesome, Bootstrap, and responsive design!</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":17,"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9acde08812","title":"Make Images Mobile Responsive","challengeType":0,"forumTopicId":18232,"dashedName":"make-images-mobile-responsive","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\">\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\">\n\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}]],"tests":[{"text":"<p>You should have a total of two images.</p>","testString":"assert($('img').length === 2);"},{"text":"<p>Your new image should be below your old one and have the class <code>img-responsive</code>.</p>","testString":"assert($('img:eq(1)').hasClass('img-responsive'));"},{"text":"<p>Your new image should not have the class <code>smaller-image</code>.</p>","testString":"assert(!$('img:eq(1)').hasClass('smaller-image'));"},{"text":"<p>Your new image should have a <code>src</code> of <code>https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg</code>.</p>","testString":"assert($('img:eq(1)').attr('src') === 'https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg');"},{"text":"<p>Your new <code>img</code> element should have a closing angle bracket.</p>","testString":"assert(\n  code.match(/<img/g) &&\n    code.match(/<img[^<]*>/g).length === 2 &&\n    code.match(/<img/g).length === 2\n);"}],"description":"<section id=\"description\">\n<p>First, add a new image below the existing one. Set its <code>src</code> attribute to <code>https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg</code>.</p>\n<p>It would be great if this image could be exactly the width of our phone's screen.</p>\n<p>Fortunately, with Bootstrap, all we need to do is add the <code>img-responsive</code> class to your image. Do this, and the image should perfectly fit the width of your page.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":1,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aeda08845","title":"Responsively Style Checkboxes","challengeType":0,"forumTopicId":18269,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"},{"link":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.css","raw":true}],"dashedName":"responsively-style-checkboxes","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Loving</label>   \n      </div>\n      <div class=\"col-xs-4\">\n         <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n      </div>\n      <div class=\"col-xs-4\">\n         <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n      </div>\n    </div>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Loving</label>   \n      </div>\n      <div class=\"col-xs-4\">\n         <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n      </div>\n      <div class=\"col-xs-4\">\n         <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n      </div>\n    </div>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}]],"tests":[{"text":"<p>All of your checkboxes should be nested inside one <code>div</code> with the class <code>row</code>.</p>","testString":"assert($('div.row:has(input[type=\"checkbox\"])').length > 0);"},{"text":"<p>Each of your checkboxes should be nested inside its own <code>div</code> with the class <code>col-xs-4</code>.</p>","testString":"assert($('div.col-xs-4:has(input[type=\"checkbox\"])').length > 2);"},{"text":"<p>All of your <code>div</code> elements should have closing tags.</p>","testString":"assert(\n  code.match(/<\\/div>/g) &&\n    code.match(/<div/g) &&\n    code.match(/<\\/div>/g).length === code.match(/<div/g).length\n);"}],"description":"<section id=\"description\">\n<p>Since Bootstrap's <code>col-xs-*</code> classes are applicable to all <code>form</code> elements, you can use them on your checkboxes too! This way, the checkboxes will be evenly spread out across the page, regardless of how wide the screen resolution is.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Nest all three of your checkboxes in a <code>&#x3C;div class=\"row\"></code> element. Then nest each of them in a <code>&#x3C;div class=\"col-xs-4\"></code> element.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":15,"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedb08845","title":"Responsively Style Radio Buttons","challengeType":0,"forumTopicId":18270,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"},{"link":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.css","raw":true}],"dashedName":"responsively-style-radio-buttons","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n  <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n  <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}]],"tests":[{"text":"<p>All of your radio buttons should be nested inside one <code>div</code> with the class <code>row</code>.</p>","testString":"assert($('div.row:has(input[type=\"radio\"])').length > 0);"},{"text":"<p>Each of your radio buttons should be nested inside its own <code>div</code> with the class <code>col-xs-6</code>.</p>","testString":"assert($('div.col-xs-6:has(input[type=\"radio\"])').length > 1);"},{"text":"<p>All of your <code>div</code> elements should have closing tags.</p>","testString":"assert(\n  code.match(/<\\/div>/g) &&\n    code.match(/<div/g) &&\n    code.match(/<\\/div>/g).length === code.match(/<div/g).length\n);"}],"description":"<section id=\"description\">\n<p>You can use Bootstrap's <code>col-xs-*</code> classes on <code>form</code> elements, too! This way, our radio buttons will be evenly spread out across the page, regardless of how wide the screen resolution is.</p>\n<p>Nest both your radio buttons within a <code>&#x3C;div class=\"row\"></code> element. Then nest each of them within a <code>&#x3C;div class=\"col-xs-6\"></code> element.</p>\n<p><strong>Note:</strong> As a reminder, radio buttons are <code>input</code> elements of type <code>radio</code>.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":14,"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aec908847","title":"Split Your Bootstrap Row","challengeType":0,"forumTopicId":18306,"dashedName":"split-your-bootstrap-row","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n\n\n  </div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n\n\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\"></div>\n    <div class=\"col-xs-6\"></div>\n  </div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\"></div>\n    <div class=\"col-xs-6\"></div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>Two <code>div class=\"col-xs-6\"</code> elements should be nested within your <code>div class=\"row\"</code> element.</p>","testString":"assert($('div.row > div.col-xs-6').length > 1);"},{"text":"<p>All your <code>div</code> elements should have closing tags.</p>","testString":"assert(\n  code.match(/<\\/div>/g) &&\n    code.match(/<div/g) &&\n    code.match(/<\\/div>/g).length === code.match(/<div/g).length\n);"}],"description":"<section id=\"description\">\n<p>Now that we have a Bootstrap Row, let's split it into two columns to house our elements.</p>\n<p>Create two <code>div</code> elements within your row, both with the class <code>col-xs-6</code>.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":21,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aed908845","title":"Style Text Inputs as Form Controls","challengeType":0,"forumTopicId":18312,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"},{"link":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.2.0/css/font-awesome.css","raw":true}],"dashedName":"style-text-inputs-as-form-controls","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n      </div>\n    </div>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n      </div>\n    </div>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n      </div>\n    </div>\n    <input type=\"text\" class=\"form-control\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fa fa-paper-plane\"></i>Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-xs-8\">\n      <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n    </div>\n    <div class=\"col-xs-4\">\n      <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n    </div>\n  </div>\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\"><i class=\"fa fa-thumbs-up\"></i> Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\"><i class=\"fa fa-info-circle\"></i> Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\"><i class=\"fa fa-trash\"></i> Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love:</span></p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <div class=\"row\">\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n      </div>\n      <div class=\"col-xs-6\">\n        <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n      </div>\n      <div class=\"col-xs-4\">\n        <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n      </div>\n    </div>\n    <input type=\"text\" class=\"form-control\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fa fa-paper-plane\"></i>Submit</button>\n  </form>\n</div>"}]],"tests":[{"text":"<p>The submit button in your form should have the classes <code>btn btn-primary</code>.</p>","testString":"assert($('button[type=\"submit\"]').hasClass('btn btn-primary'));"},{"text":"<p>You should add a <code>&#x3C;i class=\"fa fa-paper-plane\">&#x3C;/i></code> within your submit <code>button</code> element.</p>","testString":"assert($('button[type=\"submit\"]:has(i.fa.fa-paper-plane)').length > 0);"},{"text":"<p>The text <code>input</code> in your form should have the class <code>form-control</code>.</p>","testString":"assert($('input[type=\"text\"]').hasClass('form-control'));"},{"text":"<p>Each of your <code>i</code> elements should have a closing tag.</p>","testString":"assert(code.match(/<\\/i>/g) && code.match(/<\\/i/g).length > 3);"}],"description":"<section id=\"description\">\n<p>You can add the <code>fa-paper-plane</code> Font Awesome icon by adding <code>&#x3C;i class=\"fa fa-paper-plane\">&#x3C;/i></code> within your submit <code>button</code> element.</p>\n<p>Give your form's text input field a class of <code>form-control</code>. Give your form's submit button the classes <code>btn btn-primary</code>. Also give this button the Font Awesome icon of <code>fa-paper-plane</code>.</p>\n<p>All textual <code>&#x3C;input></code>, <code>&#x3C;textarea></code>, and <code>&#x3C;select></code> elements with the class <code>.form-control</code> have a width of 100%.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":16,"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348cd8acef08811","title":"Taste the Bootstrap Button Color Rainbow","challengeType":0,"forumTopicId":18323,"dashedName":"taste-the-bootstrap-button-color-rainbow","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-default btn-block\">Like</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-default btn-block\">Like</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-primary btn-block\">Like</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-primary btn-block\">Like</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}]],"tests":[{"text":"<p>Your button should have the class <code>btn-primary</code>.</p>","testString":"assert($('button').hasClass('btn-primary'));"},{"text":"<p>Your button should still have the <code>btn</code> and <code>btn-block</code> classes.</p>","testString":"assert($('button').hasClass('btn-block') && $('button').hasClass('btn'));"},{"text":"<p>All your <code>button</code> elements should have closing tags.</p>","testString":"assert(\n  code.match(/<\\/button>/g) &&\n    code.match(/<button/g) &&\n    code.match(/<\\/button>/g).length === code.match(/<button/g).length\n);"}],"description":"<section id=\"description\">\n<p>The <code>btn-primary</code> class is the main color you'll use in your app. It is useful for highlighting actions you want your user to take.</p>\n<p>Replace Bootstrap's <code>btn-default</code> class with <code>btn-primary</code> in your button.</p>\n<p>Note that this button will still need the <code>btn</code> and <code>btn-block</code> classes.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":5,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aedf08845","title":"Use a span to Target Inline Elements","challengeType":0,"forumTopicId":18370,"dashedName":"use-a-span-to-target-inline-elements","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n\n  <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n\n  <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n\n  <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love</span>:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"text-primary text-center\">CatPhotoApp</h2>\n\n  <a href=\"#\"><img class=\"img-responsive thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  <p>Things cats <span class=\"text-danger\">love</span>:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}]],"tests":[{"text":"<p>Your <code>span</code> element should be inside your <code>p</code> element.</p>","testString":"assert($('p span') && $('p span').length > 0);"},{"text":"<p>Your <code>span</code> element should have just the text <code>love</code>.</p>","testString":"assert(\n  $('p span') &&\n    $('p span').text().match(/love/i) &&\n    !$('p span')\n      .text()\n      .match(/Things cats/i)\n);"},{"text":"<p>Your <code>span</code> element should have class <code>text-danger</code>.</p>","testString":"assert($('span').hasClass('text-danger'));"},{"text":"<p>Your <code>span</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/span>/g) &&\n    code.match(/<span/g) &&\n    code.match(/<\\/span>/g).length === code.match(/<span/g).length\n);"}],"description":"<section id=\"description\">\n<p>You can use spans to create inline elements. Remember when we used the <code>btn-block</code> class to make the button fill the entire row?</p>\n<p><button class='btn' style='background-color: rgb(0, 100, 0);  color: rgb(255, 255, 255);'>normal button</button></p>\n<p><button class='btn btn-block' style='background-color: rgb(0, 100, 0);  color: rgb(255, 255, 255);'>btn-block button</button></p>\n<p>That illustrates the difference between an \"inline\" element and a \"block\" element.</p>\n<p>By using the inline <code>span</code> element, you can put several elements on the same line, and even style different parts of the same line differently.</p>\n<p>Using a <code>span</code> element, nest the word <code>love</code> inside the <code>p</code> element that currently has the text <code>Things cats love</code>. Then give the <code>span</code> the class <code>text-danger</code> to make the text red.</p>\n<p>Here's how you would do this for the <code>p</code> element that has the text <code>Top 3 things cats hate</code>:</p>\n<pre><code class=\"language-html\">&#x3C;p>Top 3 things cats &#x3C;span class=\"text-danger\">hate:&#x3C;/span>&#x3C;/p>\n</code></pre>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":10,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9aec908857","title":"Use Comments to Clarify Code","challengeType":0,"forumTopicId":18347,"dashedName":"use-comments-to-clarify-code","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>","error":null,"seed":"<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<!-- Code below this line should not be changed -->\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>","error":null,"seed":"<!-- Code below this line should not be changed -->\n<div class=\"container-fluid\">\n  <h3 class=\"text-primary text-center\">jQuery Playground</h3>\n  <div class=\"row\">\n    <div class=\"col-xs-6\">\n      <h4>#left-well</h4>\n      <div class=\"well\" id=\"left-well\">\n        <button class=\"btn btn-default target\" id=\"target1\">#target1</button>\n        <button class=\"btn btn-default target\" id=\"target2\">#target2</button>\n        <button class=\"btn btn-default target\" id=\"target3\">#target3</button>\n      </div>\n    </div>\n    <div class=\"col-xs-6\">\n      <h4>#right-well</h4>\n      <div class=\"well\" id=\"right-well\">\n        <button class=\"btn btn-default target\" id=\"target4\">#target4</button>\n        <button class=\"btn btn-default target\" id=\"target5\">#target5</button>\n        <button class=\"btn btn-default target\" id=\"target6\">#target6</button>\n      </div>\n    </div>\n  </div>\n</div>"}]],"tests":[{"text":"<p>You should start a comment with <code>&#x3C;!--</code> at the top of your HTML.</p>","testString":"assert(code.match(/^\\s*<!--/));"},{"text":"<p>Your comment should have the text <code>Code below this line should not be changed</code>.</p>","testString":"assert(code.match(/<!--(?!(>|->|.*-->.*this line))\\s*.*this line.*\\s*-->/gi));"},{"text":"<p>You should close your comment with <code>--></code>.</p>","testString":"assert(code.match(/-->.*\\n+.+/g));"},{"text":"<p>You should have the same number of comment openers and closers.</p>","testString":"assert(code.match(/<!--/g).length === code.match(/-->/g).length);"}],"description":"<section id=\"description\">\n<p>When we start using jQuery, we will modify HTML elements without needing to actually change them in HTML.</p>\n<p>Let's make sure that everyone knows they shouldn't actually modify any of this code directly.</p>\n<p>Remember that you can start a comment with <code>&#x3C;!--</code> and end a comment with <code>--></code></p>\n<p>Add a comment at the top of your HTML that says <code>Code below this line should not be changed</code></p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":30,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348bd9acde08712","title":"Use Responsive Design with Bootstrap Fluid Containers","challengeType":0,"forumTopicId":18362,"dashedName":"use-responsive-design-with-bootstrap-fluid-containers","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n\n<p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n<a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n<p>Things cats love:</p>\n<ul>\n  <li>cat nip</li>\n  <li>laser pointers</li>\n  <li>lasagna</li>\n</ul>\n<p>Top 3 things cats hate:</p>\n<ol>\n  <li>flea treatment</li>\n  <li>thunder</li>\n  <li>other cats</li>\n</ol>\n<form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n  <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n  <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n  <input type=\"text\" placeholder=\"cat photo URL\" required>\n  <button type=\"submit\">Submit</button>\n</form>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<h2 class=\"red-text\">CatPhotoApp</h2>\n\n<p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n<a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n<p>Things cats love:</p>\n<ul>\n  <li>cat nip</li>\n  <li>laser pointers</li>\n  <li>lasagna</li>\n</ul>\n<p>Top 3 things cats hate:</p>\n<ol>\n  <li>flea treatment</li>\n  <li>thunder</li>\n  <li>other cats</li>\n</ol>\n<form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n  <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n  <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n  <input type=\"text\" placeholder=\"cat photo URL\" required>\n  <button type=\"submit\">Submit</button>\n</form>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n<div class=\"container-fluid\">\n  <h2 class=\"red-text\">CatPhotoApp</h2>\n\n<p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n<a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n<p>Things cats love:</p>\n<ul>\n  <li>cat nip</li>\n  <li>laser pointers</li>\n  <li>lasagna</li>\n</ul>\n<p>Top 3 things cats hate:</p>\n<ol>\n  <li>flea treatment</li>\n  <li>thunder</li>\n  <li>other cats</li>\n</ol>\n<form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n  <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n  <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n  <input type=\"text\" placeholder=\"cat photo URL\" required>\n  <button type=\"submit\">Submit</button>\n</form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n<div class=\"container-fluid\">\n  <h2 class=\"red-text\">CatPhotoApp</h2>\n\n<p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n<a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n<p>Things cats love:</p>\n<ul>\n  <li>cat nip</li>\n  <li>laser pointers</li>\n  <li>lasagna</li>\n</ul>\n<p>Top 3 things cats hate:</p>\n<ol>\n  <li>flea treatment</li>\n  <li>thunder</li>\n  <li>other cats</li>\n</ol>\n<form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n  <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n  <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n  <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n  <input type=\"text\" placeholder=\"cat photo URL\" required>\n  <button type=\"submit\">Submit</button>\n</form>\n</div>"}]],"tests":[{"text":"<p>Your <code>div</code> element should have the class <code>container-fluid</code>.</p>","testString":"assert($('div').hasClass('container-fluid'));"},{"text":"<p>Your <code>div</code> element should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/div>/g) &&\n    code.match(/<div/g) &&\n    code.match(/<\\/div>/g).length === code.match(/<div/g).length\n);"},{"text":"<p>All HTML elements after the closing <code>style</code> tag should be nested in <code>.container-fluid</code>.</p>","testString":"assert($('.container-fluid').children().length >= 8 && !$('.container-fluid').has(\"style\").length && !$('.container-fluid').has(\"link\").length);"}],"description":"<section id=\"description\">\n<p>In the HTML5 and CSS section of freeCodeCamp we built a Cat Photo App. Now let's go back to it. This time, we'll style it using the popular Bootstrap responsive CSS framework.</p>\n<p>Bootstrap will figure out how wide your screen is and respond by resizing your HTML elements - hence the name <dfn>responsive design</dfn>.</p>\n<p>With responsive design, there is no need to design a mobile version of your website. It will look good on devices with screens of any width.</p>\n<p>You can add Bootstrap to any app by adding the following code to the top of your HTML:</p>\n<pre><code class=\"language-html\">&#x3C;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"/>\n</code></pre>\n<p>In this case, we've already added it for you to this page behind the scenes. Note that using either <code>></code> or <code>/></code> to close the <code>link</code> tag is acceptable.</p>\n<p>To get started, we should nest all of our HTML (except the <code>link</code> tag and the <code>style</code> element) in a <code>div</code> element with the class <code>container-fluid</code>.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":0,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad88fee1348ce8acef08815","title":"Use the Bootstrap Grid to Put Elements Side By Side","challengeType":0,"forumTopicId":18371,"dashedName":"use-the-bootstrap-grid-to-put-elements-side-by-side","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-primary\">Like</button>\n  <button class=\"btn btn-block btn-info\">Info</button>\n  <button class=\"btn btn-block btn-danger\">Delete</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-primary\">Like</button>\n  <button class=\"btn btn-block btn-info\">Info</button>\n  <button class=\"btn btn-block btn-danger\">Delete</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <div class=\"row\">\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-primary\">Like</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-info\">Info</button>\n    </div>\n    <div class=\"col-xs-4\">\n      <button class=\"btn btn-block btn-danger\">Delete</button>\n    </div>\n  </div>\n  \n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}]],"tests":[{"text":"<p>Your buttons should all be nested within the same <code>div</code> element with the class <code>row</code>.</p>","testString":"assert($('div.row:has(button)').length > 0);"},{"text":"<p>Each of your Bootstrap buttons should be nested within its own <code>div</code> element with the class <code>col-xs-4</code>.</p>","testString":"assert($('div.col-xs-4:has(button)').length > 2);"},{"text":"<p>Each of your <code>button</code> elements should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/button>/g) &&\n    code.match(/<button/g) &&\n    code.match(/<\\/button>/g).length === code.match(/<button/g).length\n);"},{"text":"<p>Each of your <code>div</code> elements should have a closing tag.</p>","testString":"assert(\n  code.match(/<\\/div>/g) &&\n    code.match(/<div/g) &&\n    code.match(/<\\/div>/g).length === code.match(/<div/g).length\n);"}],"description":"<section id=\"description\">\n<p>Bootstrap uses a responsive 12-column grid system, which makes it easy to put elements into rows and specify each element's relative width. Most of Bootstrap's classes can be applied to a <code>div</code> element.</p>\n<p>Bootstrap has different column width attributes that it uses depending on how wide the user's screen is. For example, phones have narrow screens, and laptops have wider screens.</p>\n<p>Take for example Bootstrap's <code>col-md-*</code> class. Here, <code>md</code> means medium, and <code>*</code> is a number specifying how many columns wide the element should be. In this case, the column width of an element on a medium-sized screen, such as a laptop, is being specified.</p>\n<p>In the Cat Photo App that we're building, we'll use <code>col-xs-*</code>, where <code>xs</code> means extra small (like an extra-small mobile phone screen), and <code>*</code> is the number of columns specifying how many columns wide the element should be.</p>\n<p>Put the <code>Like</code>, <code>Info</code> and <code>Delete</code> buttons side-by-side by nesting all three of them within one <code>&#x3C;div class=\"row\"></code> element, then each of them within a <code>&#x3C;div class=\"col-xs-4\"></code> element.</p>\n<p>The <code>row</code> class is applied to a <code>div</code>, and the buttons themselves can be nested within it.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":8,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false},{"id":"bad87fee1348ce8acef08814","title":"Warn Your Users of a Dangerous Action with btn-danger","challengeType":0,"forumTopicId":18375,"dashedName":"warn-your-users-of-a-dangerous-action-with-btn-danger","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-primary\">Like</button>\n  <button class=\"btn btn-block btn-info\">Info</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-primary\">Like</button>\n  <button class=\"btn btn-block btn-info\">Info</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.html"],"name":"index","ext":"html","path":"index.html","fileKey":"indexhtml","contents":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-primary\">Like</button>\n  <button class=\"btn btn-block btn-info\">Info</button>\n  <button class=\"btn btn-block btn-danger\">Delete</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>","error":null,"seed":"<link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n  .red-text {\n    color: red;\n  }\n\n  h2 {\n    font-family: Lobster, Monospace;\n  }\n\n  p {\n    font-size: 16px;\n    font-family: Monospace;\n  }\n\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n\n<div class=\"container-fluid\">\n  <h2 class=\"red-text text-center\">CatPhotoApp</h2>\n\n  <p>Click here for <a href=\"#\">cat photos</a>.</p>\n\n  <a href=\"#\"><img class=\"smaller-image thick-green-border\" src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg\" alt=\"A cute orange cat lying on its back.\"></a>\n\n  <img src=\"https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg\" class=\"img-responsive\" alt=\"Three kittens running towards the camera.\">\n  <button class=\"btn btn-block btn-primary\">Like</button>\n  <button class=\"btn btn-block btn-info\">Info</button>\n  <button class=\"btn btn-block btn-danger\">Delete</button>\n  <p>Things cats love:</p>\n  <ul>\n    <li>cat nip</li>\n    <li>laser pointers</li>\n    <li>lasagna</li>\n  </ul>\n  <p>Top 3 things cats hate:</p>\n  <ol>\n    <li>flea treatment</li>\n    <li>thunder</li>\n    <li>other cats</li>\n  </ol>\n  <form action=\"https://freecatphotoapp.com/submit-cat-photo\">\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Indoor</label>\n    <label><input type=\"radio\" name=\"indoor-outdoor\"> Outdoor</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Loving</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Lazy</label>\n    <label><input type=\"checkbox\" name=\"personality\"> Crazy</label>\n    <input type=\"text\" placeholder=\"cat photo URL\" required>\n    <button type=\"submit\">Submit</button>\n  </form>\n</div>"}]],"tests":[{"text":"<p>You should create a new <code>button</code> element with the text <code>Delete</code>.</p>","testString":"assert(new RegExp('Delete', 'gi').test($('button').text()));"},{"text":"<p>All of your Bootstrap buttons should have the <code>btn</code> and <code>btn-block</code> classes.</p>","testString":"assert($('button.btn-block.btn').length > 2);"},{"text":"<p>Your new button should have the class <code>btn-danger</code>.</p>","testString":"assert($('button').hasClass('btn-danger'));"},{"text":"<p>All of your <code>button</code> elements should have closing tags.</p>","testString":"assert(\n  code.match(/<\\/button>/g) &&\n    code.match(/<button/g) &&\n    code.match(/<\\/button>/g).length === code.match(/<button/g).length\n);"}],"description":"<section id=\"description\">\n<p>Bootstrap comes with several pre-defined colors for buttons. The <code>btn-danger</code> class is the button color you'll use to notify users that the button performs a destructive action, such as deleting a cat photo.</p>\n<p>Create a button with the text <code>Delete</code> and give it the class <code>btn-danger</code>.</p>\n<p>Note that these buttons still need the <code>btn</code> and <code>btn-block</code> classes.</p>\n</section>","block":"bootstrap","hasEditableBoundaries":false,"order":0,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":7,"required":[{"link":"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css"}],"template":"","time":"5 hours","helpCategory":"HTML-CSS","translationPending":false,"usesMultifileEditor":false}]},"react":{"meta":{"name":"React","isUpcomingChange":false,"dashedName":"react","order":3,"time":"5 hours","template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"superBlock":"front-end-development-libraries","challengeOrder":[["587d7dbc367417b2b2512bb1","Create a Simple JSX Element"],["5a24bbe0dba28a8d3cbd4c5d","Create a Complex JSX Element"],["5a24bbe0dba28a8d3cbd4c5e","Add Comments in JSX"],["5a24bbe0dba28a8d3cbd4c5f","Render HTML Elements to the DOM"],["5a24c314108439a4d4036160","Define an HTML Class in JSX"],["5a24c314108439a4d4036161","Learn About Self-Closing JSX Tags"],["5a24c314108439a4d4036162","Create a Stateless Functional Component"],["5a24c314108439a4d4036163","Create a React Component"],["5a24c314108439a4d4036164","Create a Component with Composition"],["5a24c314108439a4d4036165","Use React to Render Nested Components"],["5a24c314108439a4d4036166","Compose React Components"],["5a24c314108439a4d4036167","Render a Class Component to the DOM"],["5a24c314108439a4d4036168","Write a React Component from Scratch"],["5a24c314108439a4d4036169","Pass Props to a Stateless Functional Component"],["5a24c314108439a4d403616a","Pass an Array as Props"],["5a24c314108439a4d403616b","Use Default Props"],["5a24c314108439a4d403616c","Override Default Props"],["5a24c314108439a4d403616d","Use PropTypes to Define the Props You Expect"],["5a24c314108439a4d403616e","Access Props Using this.props"],["5a24c314108439a4d403616f","Review Using Props with Stateless Functional Components"],["5a24c314108439a4d4036170","Create a Stateful Component"],["5a24c314108439a4d4036171","Render State in the User Interface"],["5a24c314108439a4d4036172","Render State in the User Interface Another Way"],["5a24c314108439a4d4036173","Set State with this.setState"],["5a24c314108439a4d4036174","Bind 'this' to a Class Method"],["5a24c314108439a4d4036176","Use State to Toggle an Element"],["5a24c314108439a4d4036177","Write a Simple Counter"],["5a24c314108439a4d4036178","Create a Controlled Input"],["5a24c314108439a4d4036179","Create a Controlled Form"],["5a24c314108439a4d403617a","Pass State as Props to Child Components"],["5a24c314108439a4d403617b","Pass a Callback as Props"],["5a24c314108439a4d403617c","Use the Lifecycle Method componentWillMount"],["5a24c314108439a4d403617d","Use the Lifecycle Method componentDidMount"],["5a24c314108439a4d403617e","Add Event Listeners"],["5a24c314108439a4d4036180","Optimize Re-Renders with shouldComponentUpdate"],["5a24c314108439a4d4036181","Introducing Inline Styles"],["5a24c314108439a4d4036182","Add Inline Styles in React"],["5a24c314108439a4d4036183","Use Advanced JavaScript in React Render Method"],["5a24c314108439a4d4036184","Render with an If-Else Condition"],["5a24c314108439a4d4036185","Use && for a More Concise Conditional"],["5a24c314108439a4d4036187","Use a Ternary Expression for Conditional Rendering"],["5a24c314108439a4d4036188","Render Conditionally from Props"],["5a24c314108439a4d4036189","Change Inline CSS Conditionally Based on Component State"],["5a24c314108439a4d403618a","Use Array.map() to Dynamically Render Elements"],["5a24c314108439a4d403618b","Give Sibling Elements a Unique Key Attribute"],["5a24c314108439a4d403618c","Use Array.filter() to Dynamically Filter an Array"],["5a24c314108439a4d403618d","Render React on the Server with renderToString"]]},"challenges":[{"id":"5a24c314108439a4d403616e","title":"Access Props Using this.props","challengeType":6,"forumTopicId":301375,"dashedName":"access-props-using-this-props","challengeFiles":[{"head":"","tail":"ReactDOM.render(<App />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n  }\n  render() {\n    return (\n        <div>\n            { /* Change code below this line */ }\n            <Welcome />\n            { /* Change code above this line */ }\n        </div>\n    );\n  }\n};\n\nclass Welcome extends React.Component {\n  constructor(props) {\n    super(props);\n\n  }\n  render() {\n    return (\n        <div>\n          { /* Change code below this line */ }\n          <p>Hello, <strong></strong>!</p>\n          { /* Change code above this line */ }\n        </div>\n    );\n  }\n};","error":null,"seed":"class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n  }\n  render() {\n    return (\n        <div>\n            { /* Change code below this line */ }\n            <Welcome />\n            { /* Change code above this line */ }\n        </div>\n    );\n  }\n};\n\nclass Welcome extends React.Component {\n  constructor(props) {\n    super(props);\n\n  }\n  render() {\n    return (\n        <div>\n          { /* Change code below this line */ }\n          <p>Hello, <strong></strong>!</p>\n          { /* Change code above this line */ }\n        </div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class Welcome extends React.Component {\n  constructor(props) {\n    super(props);\n\n  }\n  render() {\n    return (\n        <div>\n          { /* Change code below this line */ }\n          <p>Hello, <strong>{this.props.name}</strong>!</p>\n          { /* Change code above this line */ }\n        </div>\n    );\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n  }\n  render() {\n    return (\n        <div>\n            { /* Change code below this line */ }\n            <Welcome name=\"Quincy\"/>\n            { /* Change code above this line */ }\n        </div>\n    );\n  }\n};","error":null,"seed":"class Welcome extends React.Component {\n  constructor(props) {\n    super(props);\n\n  }\n  render() {\n    return (\n        <div>\n          { /* Change code below this line */ }\n          <p>Hello, <strong>{this.props.name}</strong>!</p>\n          { /* Change code above this line */ }\n        </div>\n    );\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n  }\n  render() {\n    return (\n        <div>\n            { /* Change code below this line */ }\n            <Welcome name=\"Quincy\"/>\n            { /* Change code above this line */ }\n        </div>\n    );\n  }\n};"}]],"tests":[{"text":"<p>The <code>App</code> component should return a single <code>div</code> element.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(App));\n    return mockedComponent.children().type() === 'div';\n  })()\n);"},{"text":"<p>The child of <code>App</code> should be the <code>Welcome</code> component.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(App));\n    return (\n      mockedComponent.children().childAt(0).name() === 'Welcome'\n    );\n  })()\n);"},{"text":"<p>The <code>Welcome</code> component should have a prop called <code>name</code>.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(App));\n    return mockedComponent.find('Welcome').props().name;\n  })()\n);"},{"text":"<p>The <code>Welcome</code> component should display the string you pass as the <code>name</code> prop within <code>strong</code> tags.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(App));\n    return (\n      mockedComponent.find('strong').text() ===\n      mockedComponent.find('Welcome').props().name\n    );\n  })()\n);"}],"description":"<section id=\"description\">\n<p>The last several challenges covered the basic ways to pass props to child components. But what if the child component that you're passing a prop to is an ES6 class component, rather than a stateless functional component? The ES6 class component uses a slightly different convention to access props.</p>\n<p>Anytime you refer to a class component within itself, you use the <code>this</code> keyword. To access props within a class component, you preface the code that you use to access it with <code>this</code>. For example, if an ES6 class component has a prop called <code>data</code>, you write <code>{this.props.data}</code> in JSX.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Render an instance of the <code>Welcome</code> component in the parent component <code>App</code>. Here, give <code>Welcome</code> a prop of <code>name</code> and assign it a value of a string. Within the child, <code>Welcome</code>, access the <code>name</code> prop within the <code>strong</code> tags.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":18,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24bbe0dba28a8d3cbd4c5e","title":"Add Comments in JSX","challengeType":6,"forumTopicId":301376,"dashedName":"add-comments-in-jsx","challengeFiles":[{"head":"","tail":"ReactDOM.render(JSX, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const JSX = (\n  <div>\n    <h1>This is a block of JSX</h1>\n    <p>Here's a subtitle</p>\n  </div>\n);","error":null,"seed":"const JSX = (\n  <div>\n    <h1>This is a block of JSX</h1>\n    <p>Here's a subtitle</p>\n  </div>\n);"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const JSX = (\n<div>\n  <h1>This is a block of JSX</h1>\n  { /* this is a JSX comment */ }\n  <p>Here's a subtitle</p>\n</div>);","error":null,"seed":"const JSX = (\n<div>\n  <h1>This is a block of JSX</h1>\n  { /* this is a JSX comment */ }\n  <p>Here's a subtitle</p>\n</div>);"}]],"tests":[{"text":"<p>The constant <code>JSX</code> should return a <code>div</code> element.</p>","testString":"assert(JSX.type === 'div');"},{"text":"<p>The <code>div</code> should contain an <code>h1</code> tag as the first element.</p>","testString":"assert(JSX.props.children[0].type === 'h1');"},{"text":"<p>The <code>div</code> should contain a <code>p</code> tag as the second element.</p>","testString":"assert(JSX.props.children[1].type === 'p');"},{"text":"<p>The existing <code>h1</code> and <code>p</code> elements should not be modified.</p>","testString":"assert(\n  JSX.props.children[0].props.children === 'This is a block of JSX' &&\n    JSX.props.children[1].props.children === \"Here's a subtitle\"\n);"},{"text":"<p>The <code>JSX</code> should use valid comment syntax.</p>","testString":"assert(/<div>[\\s\\S]*{\\s*\\/\\*[\\s\\S]*\\*\\/\\s*}[\\s\\S]*<\\/div>/.test(code));"}],"description":"<section id=\"description\">\n<p>JSX is a syntax that gets compiled into valid JavaScript. Sometimes, for readability, you might need to add comments to your code. Like most programming languages, JSX has its own way to do this.</p>\n<p>To put comments inside JSX, you use the syntax <code>{/* */}</code> to wrap around the comment text.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The code editor has a JSX element similar to what you created in the last challenge. Add a comment somewhere within the provided <code>div</code> element, without modifying the existing <code>h1</code> or <code>p</code> elements.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":2,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403617e","title":"Add Event Listeners","challengeType":6,"forumTopicId":301377,"dashedName":"add-event-listeners","challengeFiles":[{"head":"","tail":"ReactDOM.render(<MyComponent />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: ''\n    };\n    this.handleEnter = this.handleEnter.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n  // Change code below this line\n  componentDidMount() {\n\n  }\n  componentWillUnmount() {\n\n  }\n  // Change code above this line\n  handleEnter() {\n    this.setState((state) => ({\n      message: state.message + 'You pressed the enter key! '\n    }));\n  }\n  handleKeyPress(event) {\n    if (event.keyCode === 13) {\n      this.handleEnter();\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.state.message}</h1>\n      </div>\n    );\n  }\n};","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: ''\n    };\n    this.handleEnter = this.handleEnter.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n  // Change code below this line\n  componentDidMount() {\n\n  }\n  componentWillUnmount() {\n\n  }\n  // Change code above this line\n  handleEnter() {\n    this.setState((state) => ({\n      message: state.message + 'You pressed the enter key! '\n    }));\n  }\n  handleKeyPress(event) {\n    if (event.keyCode === 13) {\n      this.handleEnter();\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.state.message}</h1>\n      </div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: ''\n    };\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleEnter = this.handleEnter.bind(this);  }\n  componentDidMount() {\n    // Change code below this line\n    document.addEventListener('keydown', this.handleKeyPress);\n    // Change code above this line\n  }\n  componentWillUnmount() {\n    // Change code below this line\n    document.removeEventListener('keydown', this.handleKeyPress);\n    // Change code above this line\n  }\n  handleEnter() {\n    this.setState((state) => ({\n      message: state.message + 'You pressed the enter key! '\n    }));\n  }\n  handleKeyPress(event) {\n    if (event.keyCode === 13) {\n      this.handleEnter();\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.state.message}</h1>\n      </div>\n    );\n  }\n};","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: ''\n    };\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleEnter = this.handleEnter.bind(this);  }\n  componentDidMount() {\n    // Change code below this line\n    document.addEventListener('keydown', this.handleKeyPress);\n    // Change code above this line\n  }\n  componentWillUnmount() {\n    // Change code below this line\n    document.removeEventListener('keydown', this.handleKeyPress);\n    // Change code above this line\n  }\n  handleEnter() {\n    this.setState((state) => ({\n      message: state.message + 'You pressed the enter key! '\n    }));\n  }\n  handleKeyPress(event) {\n    if (event.keyCode === 13) {\n      this.handleEnter();\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.state.message}</h1>\n      </div>\n    );\n  }\n};"}]],"tests":[{"text":"<p><code>MyComponent</code> should render a <code>div</code> element which wraps an <code>h1</code> tag.</p>","testString":"assert(\n  (() => {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return mockedComponent.find('div').children().find('h1').length === 1;\n  })()\n);"},{"text":"<p>A <code>keydown</code> listener should be attached to the document in <code>componentDidMount</code>.</p>","testString":"assert(\n  (() => {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    const didMountString = mockedComponent\n      .instance()\n      .componentDidMount.toString();\n    return new RegExp(\n      'document.addEventListener(.|\\n|\\r)+keydown(.|\\n|\\r)+this.handleKeyPress'\n    ).test(didMountString);\n  })()\n);"},{"text":"<p>The <code>keydown</code> listener should be removed from the document in <code>componentWillUnmount</code>.</p>","testString":"assert(\n  (() => {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    const willUnmountString = mockedComponent\n      .instance()\n      .componentWillUnmount.toString();\n    return new RegExp(\n      'document.removeEventListener(.|\\n|\\r)+keydown(.|\\n|\\r)+this.handleKeyPress'\n    ).test(willUnmountString);\n  })()\n);"},{"text":"<p>Once the component has mounted, pressing <code>enter</code> should update its state and the rendered <code>h1</code> tag.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const beforeState = mockedComponent.state('message');\n  const beforeText = mockedComponent.find('h1').text();\n  const pressEnterKey = () => {\n    mockedComponent.instance().handleKeyPress({ keyCode: 13 });\n    return waitForIt(() => {\n      mockedComponent.update();\n      return {\n        state: mockedComponent.state('message'),\n        text: mockedComponent.find('h1').text()\n      };\n    });\n  };\n  const afterKeyPress = await pressEnterKey();\n  assert(\n    beforeState !== afterKeyPress.state && beforeText !== afterKeyPress.text\n  );\n};"}],"description":"<section id=\"description\">\n<p>The <code>componentDidMount()</code> method is also the best place to attach any event listeners you need to add for specific functionality. React provides a synthetic event system which wraps the native event system present in browsers. This means that the synthetic event system behaves exactly the same regardless of the user's browser - even if the native events may behave differently between different browsers.</p>\n<p>You've already been using some of these synthetic event handlers such as <code>onClick()</code>. React's synthetic event system is great to use for most interactions you'll manage on DOM elements. However, if you want to attach an event handler to the document or window objects, you have to do this directly.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Attach an event listener in the <code>componentDidMount()</code> method for <code>keydown</code> events and have these events trigger the callback <code>handleKeyPress()</code>. You can use <code>document.addEventListener()</code> which takes the event (in quotes) as the first argument and the callback as the second argument.</p>\n<p>Then, in <code>componentWillUnmount()</code>, remove this same event listener. You can pass the same arguments to <code>document.removeEventListener()</code>. It's good practice to use this lifecycle method to do any clean up on React components before they are unmounted and destroyed. Removing event listeners is an example of one such clean up action.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":33,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036182","title":"Add Inline Styles in React","challengeType":6,"forumTopicId":301378,"dashedName":"add-inline-styles-in-react","challengeFiles":[{"head":"","tail":"ReactDOM.render(<Colorful />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"// Change code above this line\nclass Colorful extends React.Component {\n  render() {\n    // Change code below this line\n    return (\n      <div style={{color: \"yellow\", fontSize: 24}}>Style Me!</div>\n    );\n    // Change code above this line\n  }\n};","error":null,"seed":"// Change code above this line\nclass Colorful extends React.Component {\n  render() {\n    // Change code below this line\n    return (\n      <div style={{color: \"yellow\", fontSize: 24}}>Style Me!</div>\n    );\n    // Change code above this line\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const styles = {\n  color: \"purple\",\n  fontSize: 40,\n  border: \"2px solid purple\"\n};\n// Change code above this line\nclass Colorful extends React.Component {\n  render() {\n    // Change code below this line\n    return (\n      <div style={styles}>Style Me!</div>\n    );\n    // Change code above this line\n  }\n};","error":null,"seed":"const styles = {\n  color: \"purple\",\n  fontSize: 40,\n  border: \"2px solid purple\"\n};\n// Change code above this line\nclass Colorful extends React.Component {\n  render() {\n    // Change code below this line\n    return (\n      <div style={styles}>Style Me!</div>\n    );\n    // Change code above this line\n  }\n};"}]],"tests":[{"text":"<p>The <code>styles</code> variable should be an <code>object</code> with three properties.</p>","testString":"assert(Object.keys(styles).length === 3);"},{"text":"<p>The <code>styles</code> variable should have a <code>color</code> property set to a value of <code>purple</code>.</p>","testString":"assert(styles.color === 'purple');"},{"text":"<p>The <code>styles</code> variable should have a <code>fontSize</code> property set to a value of <code>40</code>.</p>","testString":"assert(styles.fontSize == 40);"},{"text":"<p>The <code>styles</code> variable should have a <code>border</code> property set to a value of <code>2px solid purple</code>.</p>","testString":"assert(styles.border === '2px solid purple');"},{"text":"<p>The component should render a <code>div</code> element.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.shallow(React.createElement(Colorful));\n    return mockedComponent.type() === 'div';\n  })()\n);"},{"text":"<p>The <code>div</code> element should have its styles defined by the <code>styles</code> object.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.shallow(React.createElement(Colorful));\n    return (\n      mockedComponent.props().style.color === 'purple' &&\n      mockedComponent.props().style.fontSize == 40 &&\n      mockedComponent.props().style.border === '2px solid purple'\n    );\n  })()\n);"}],"description":"<section id=\"description\">\n<p>You may have noticed in the last challenge that there were several other syntax differences from HTML inline styles in addition to the <code>style</code> attribute set to a JavaScript object. First, the names of certain CSS style properties use camel case. For example, the last challenge set the size of the font with <code>fontSize</code> instead of <code>font-size</code>. Hyphenated words like <code>font-size</code> are invalid syntax for JavaScript object properties, so React uses camel case. As a rule, any hyphenated style properties are written using camel case in JSX.</p>\n<p>All property value length units (like <code>height</code>, <code>width</code>, and <code>fontSize</code>) are assumed to be in <code>px</code> unless otherwise specified. If you want to use <code>em</code>, for example, you wrap the value and the units in quotes, like <code>{fontSize: \"4em\"}</code>. Other than the length values that default to <code>px</code>, all other property values should be wrapped in quotes.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>If you have a large set of styles, you can assign a style <code>object</code> to a constant to keep your code organized. Declare your styles constant as a global variable at the top of the file. Initialize <code>styles</code> constant and assign an <code>object</code> with three style properties and their values to it. Give the <code>div</code> a color of <code>purple</code>, a font-size of <code>40</code>, and a border of <code>2px solid purple</code>. Then set the <code>style</code> attribute equal to the <code>styles</code> constant.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":36,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036174","title":"Bind 'this' to a Class Method","challengeType":6,"forumTopicId":301379,"dashedName":"bind-this-to-a-class-method","challengeFiles":[{"head":"","tail":"ReactDOM.render(<MyComponent />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"Hello\"\n    };\n    // Change code below this line\n\n    // Change code above this line\n  }\n  handleClick() {\n    this.setState({\n      text: \"You clicked!\"\n    });\n  }\n  render() {\n    return (\n      <div>\n        { /* Change code below this line */ }\n        <button>Click Me</button>\n        { /* Change code above this line */ }\n        <h1>{this.state.text}</h1>\n      </div>\n    );\n  }\n};","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"Hello\"\n    };\n    // Change code below this line\n\n    // Change code above this line\n  }\n  handleClick() {\n    this.setState({\n      text: \"You clicked!\"\n    });\n  }\n  render() {\n    return (\n      <div>\n        { /* Change code below this line */ }\n        <button>Click Me</button>\n        { /* Change code above this line */ }\n        <h1>{this.state.text}</h1>\n      </div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"Hello\"\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState({\n      text: \"You clicked!\"\n    });\n  }\n  render() {\n    return (\n      <div>\n        <button onClick = {this.handleClick}>Click Me</button>\n        <h1>{this.state.text}</h1>\n      </div>\n    );\n  }\n};","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"Hello\"\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState({\n      text: \"You clicked!\"\n    });\n  }\n  render() {\n    return (\n      <div>\n        <button onClick = {this.handleClick}>Click Me</button>\n        <h1>{this.state.text}</h1>\n      </div>\n    );\n  }\n};"}]],"tests":[{"text":"<p><code>MyComponent</code> should return a <code>div</code> element which wraps two elements, a button and an <code>h1</code> element, in that order.</p>","testString":"assert(\n  Enzyme.mount(React.createElement(MyComponent)).find('div').length === 1 &&\n    Enzyme.mount(React.createElement(MyComponent))\n      .find('div')\n      .childAt(0)\n      .type() === 'button' &&\n    Enzyme.mount(React.createElement(MyComponent))\n      .find('div')\n      .childAt(1)\n      .type() === 'h1'\n);"},{"text":"<p>The state of <code>MyComponent</code> should initialize with the key value pair <code>{ text: \"Hello\" }</code>.</p>","testString":"assert(\n  Enzyme.mount(React.createElement(MyComponent)).state('text') === 'Hello'\n);"},{"text":"<p>Clicking the <code>button</code> element should run the <code>handleClick</code> method and set the state <code>text</code> to <code>You clicked!</code>.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const first = () => {\n    mockedComponent.setState({ text: 'Hello' });\n    return waitForIt(() => mockedComponent.state('text'));\n  };\n  const second = () => {\n    mockedComponent.find('button').simulate('click');\n    return waitForIt(() => mockedComponent.state('text'));\n  };\n  const firstValue = await first();\n  const secondValue = await second();\n  assert(firstValue === 'Hello' && secondValue === 'You clicked!');\n};"}],"description":"<section id=\"description\">\n<p>In addition to setting and updating <code>state</code>, you can also define methods for your component class. A class method typically needs to use the <code>this</code> keyword so it can access properties on the class (such as <code>state</code> and <code>props</code>) inside the scope of the method. There are a few ways to allow your class methods to access <code>this</code>.</p>\n<p>One common way is to explicitly bind <code>this</code> in the constructor so <code>this</code> becomes bound to the class methods when the component is initialized. You may have noticed the last challenge used <code>this.handleClick = this.handleClick.bind(this)</code> for its <code>handleClick</code> method in the constructor. Then, when you call a function like <code>this.setState()</code> within your class method, <code>this</code> refers to the class and will not be <code>undefined</code>.</p>\n<p><strong>Note:</strong> The <code>this</code> keyword is one of the most confusing aspects of JavaScript but it plays an important role in React. Although its behavior here is totally normal, these lessons aren't the place for an in-depth review of <code>this</code> so please refer to other lessons if the above is confusing!</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The code editor has a component with a <code>state</code> that keeps track of the text. It also has a method which allows you to set the text to <code>You clicked!</code>. However, the method doesn't work because it's using the <code>this</code> keyword that is undefined. Fix it by explicitly binding <code>this</code> to the <code>handleClick()</code> method in the component's constructor.</p>\n<p>Next, add a click handler to the <code>button</code> element in the render method. It should trigger the <code>handleClick()</code> method when the button receives a click event. Remember that the method you pass to the <code>onClick</code> handler needs curly braces because it should be interpreted directly as JavaScript.</p>\n<p>Once you complete the above steps you should be able to click the button and see <code>You clicked!</code>.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":24,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036189","title":"Change Inline CSS Conditionally Based on Component State","challengeType":6,"forumTopicId":301380,"dashedName":"change-inline-css-conditionally-based-on-component-state","challengeFiles":[{"head":"","tail":"ReactDOM.render(<GateKeeper />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class GateKeeper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({ input: event.target.value })\n  }\n  render() {\n    let inputStyle = {\n      border: '1px solid black'\n    };\n    // Change code below this line\n\n    // Change code above this line\n    return (\n      <div>\n        <h3>Don't Type Too Much:</h3>\n        <input\n          type=\"text\"\n          style={inputStyle}\n          value={this.state.input}\n          onChange={this.handleChange} />\n      </div>\n    );\n  }\n};","error":null,"seed":"class GateKeeper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({ input: event.target.value })\n  }\n  render() {\n    let inputStyle = {\n      border: '1px solid black'\n    };\n    // Change code below this line\n\n    // Change code above this line\n    return (\n      <div>\n        <h3>Don't Type Too Much:</h3>\n        <input\n          type=\"text\"\n          style={inputStyle}\n          value={this.state.input}\n          onChange={this.handleChange} />\n      </div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class GateKeeper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({ input: event.target.value })\n  }\n  render() {\n    let inputStyle = {\n      border: '1px solid black'\n    };\n    if (this.state.input.length > 15) {\n      inputStyle.border = '3px solid red';\n    };\n    return (\n      <div>\n        <h3>Don't Type Too Much:</h3>\n        <input\n          type=\"text\"\n          style={inputStyle}\n          value={this.state.input}\n          onChange={this.handleChange} />\n      </div>\n    );\n  }\n};","error":null,"seed":"class GateKeeper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({ input: event.target.value })\n  }\n  render() {\n    let inputStyle = {\n      border: '1px solid black'\n    };\n    if (this.state.input.length > 15) {\n      inputStyle.border = '3px solid red';\n    };\n    return (\n      <div>\n        <h3>Don't Type Too Much:</h3>\n        <input\n          type=\"text\"\n          style={inputStyle}\n          value={this.state.input}\n          onChange={this.handleChange} />\n      </div>\n    );\n  }\n};"}]],"tests":[{"text":"<p>The <code>GateKeeper</code> component should render a <code>div</code> element.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(GateKeeper));\n    return mockedComponent.find('div').length === 1;\n  })()\n);"},{"text":"<p>The <code>GateKeeper</code> component should be initialized with a state key <code>input</code> set to an empty string.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(GateKeeper));\n    return mockedComponent.state().input === '';\n  })()\n);"},{"text":"<p>The <code>GateKeeper</code> component should render an <code>h3</code> tag and an <code>input</code> tag.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(GateKeeper));\n    return (\n      mockedComponent.find('h3').length === 1 &&\n      mockedComponent.find('input').length === 1\n    );\n  })()\n);"},{"text":"<p>The <code>input</code> tag should initially have a style of <code>1px solid black</code> for the <code>border</code> property.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(GateKeeper));\n    return (\n      mockedComponent.find('input').props().style.border === '1px solid black'\n    );\n  })()\n);"},{"text":"<p>The <code>input</code> tag should be styled with a border of <code>3px solid red</code> if the input value in state is longer than 15 characters.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 100));\n  const mockedComponent = Enzyme.mount(React.createElement(GateKeeper));\n  const simulateChange = (el, value) =>\n    el.simulate('change', { target: { value } });\n  let initialStyle = mockedComponent.find('input').props().style.border;\n  const state_1 = () => {\n    mockedComponent.setState({ input: 'this is 15 char' });\n    return waitForIt(() => mockedComponent.find('input').props().style.border);\n  };\n  const state_2 = () => {\n    mockedComponent.setState({\n      input: 'A very long string longer than 15 characters.'\n    });\n    return waitForIt(() => mockedComponent.find('input').props().style.border);\n  };\n  const style_1 = await state_1();\n  const style_2 = await state_2();\n  assert(\n    initialStyle === '1px solid black' &&\n      style_1 === '1px solid black' &&\n      style_2 === '3px solid red'\n  );\n};"}],"description":"<section id=\"description\">\n<p>At this point, you've seen several applications of conditional rendering and the use of inline styles. Here's one more example that combines both of these topics. You can also render CSS conditionally based on the state of a React component. To do this, you check for a condition, and if that condition is met, you modify the styles object that's assigned to the JSX elements in the render method.</p>\n<p>This paradigm is important to understand because it is a dramatic shift from the more traditional approach of applying styles by modifying DOM elements directly (which is very common with jQuery, for example). In that approach, you must keep track of when elements change and also handle the actual manipulation directly. It can become difficult to keep track of changes, potentially making your UI unpredictable. When you set a style object based on a condition, you describe how the UI should look as a function of the application's state. There is a clear flow of information that only moves in one direction. This is the preferred method when writing applications with React.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The code editor has a simple controlled input component with a styled border. You want to style this border red if the user types more than 15 characters of text in the input box. Add a condition to check for this and, if the condition is valid, set the input border style to <code>3px solid red</code>. You can try it out by entering text in the input.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":42,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036166","title":"Compose React Components","challengeType":6,"forumTopicId":301381,"dashedName":"compose-react-components","challengeFiles":[{"head":"class NonCitrus extends React.Component {\n  render() {\n    return (\n      <div>\n        <h4>Non-Citrus:</h4>\n        <ul>\n          <li>Apples</li>\n          <li>Blueberries</li>\n          <li>Strawberries</li>\n          <li>Bananas</li>\n        </ul>\n      </div>\n    );\n  }\n};\nclass Citrus extends React.Component {\n  render() {\n    return (\n      <div>\n        <h4>Citrus:</h4>\n        <ul>\n          <li>Lemon</li>\n          <li>Lime</li>\n          <li>Orange</li>\n          <li>Grapefruit</li>\n        </ul>\n      </div>\n    );\n  }\n};\nclass Vegetables extends React.Component {\n  render() {\n    return (\n      <div>\n        <h2>Vegetables:</h2>\n        <ul>\n          <li>Brussel Sprouts</li>\n          <li>Broccoli</li>\n          <li>Squash</li>\n        </ul>\n      </div>\n    );\n     }\n};","tail":"ReactDOM.render(<TypesOfFood />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class Fruits extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h2>Fruits:</h2>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n     super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n        <Vegetables />\n      </div>\n    );\n  }\n};","error":null,"seed":"class Fruits extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h2>Fruits:</h2>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n     super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n        <Vegetables />\n      </div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class Fruits extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h2>Fruits:</h2>\n        { /* Change code below this line */ }\n        <NonCitrus />\n        <Citrus />\n        { /* Change code above this line */ }\n      </div>\n    )\n  }\n}\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n     super(props);\n  }\n    render() {\n      return (\n        <div>\n        <h1>Types of Food:</h1>\n          { /* Change code below this line */ }\n          <Fruits />\n          { /* Change code above this line */ }\n          <Vegetables />\n        </div>\n      );\n    }\n};","error":null,"seed":"class Fruits extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h2>Fruits:</h2>\n        { /* Change code below this line */ }\n        <NonCitrus />\n        <Citrus />\n        { /* Change code above this line */ }\n      </div>\n    )\n  }\n}\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n     super(props);\n  }\n    render() {\n      return (\n        <div>\n        <h1>Types of Food:</h1>\n          { /* Change code below this line */ }\n          <Fruits />\n          { /* Change code above this line */ }\n          <Vegetables />\n        </div>\n      );\n    }\n};"}]],"tests":[{"text":"<p>The <code>TypesOfFood</code> component should return a single <code>div</code> element.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood));\n    return mockedComponent.children().type() === 'div';\n  })()\n);"},{"text":"<p>The <code>TypesOfFood</code> component should return the <code>Fruits</code> component.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood));\n    return mockedComponent.children().childAt(1).name() === 'Fruits';\n  })()\n);"},{"text":"<p>The <code>Fruits</code> component should return the <code>NonCitrus</code> component and the <code>Citrus</code> component.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood));\n    return (\n      mockedComponent.find('Fruits').children().find('NonCitrus').length ===\n        1 &&\n      mockedComponent.find('Fruits').children().find('Citrus').length === 1\n    );\n  })()\n);"},{"text":"<p>The <code>TypesOfFood</code> component should return the <code>Vegetables</code> component below the <code>Fruits</code> component.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood));\n    return mockedComponent.children().childAt(2).name() === 'Vegetables';\n  })()\n);"}],"description":"<section id=\"description\">\n<p>As the challenges continue to use more complex compositions with React components and JSX, there is one important point to note. Rendering ES6 style class components within other components is no different than rendering the simple components you used in the last few challenges. You can render JSX elements, stateless functional components, and ES6 class components within other components.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>In the code editor, the <code>TypesOfFood</code> component is already rendering a component called <code>Vegetables</code>. Also, there is the <code>Fruits</code> component from the last challenge.</p>\n<p>Nest two components inside of <code>Fruits</code> — first <code>NonCitrus</code>, and then <code>Citrus</code>. Both of these components are provided for you behind the scenes. Next, nest the <code>Fruits</code> class component into the <code>TypesOfFood</code> component, below the <code>h1</code> heading element and above <code>Vegetables</code>. The result should be a series of nested components, which uses two different component types.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":10,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24bbe0dba28a8d3cbd4c5d","title":"Create a Complex JSX Element","challengeType":6,"forumTopicId":301382,"dashedName":"create-a-complex-jsx-element","challengeFiles":[{"head":"","tail":"ReactDOM.render(JSX, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"","error":null,"seed":""}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const JSX = (\n<div>\n  <h1>Hello JSX!</h1>\n  <p>Some info</p>\n  <ul>\n    <li>An item</li>\n    <li>Another item</li>\n    <li>A third item</li>\n  </ul>\n</div>);","error":null,"seed":"const JSX = (\n<div>\n  <h1>Hello JSX!</h1>\n  <p>Some info</p>\n  <ul>\n    <li>An item</li>\n    <li>Another item</li>\n    <li>A third item</li>\n  </ul>\n</div>);"}]],"tests":[{"text":"<p>The constant <code>JSX</code> should return a <code>div</code> element.</p>","testString":"assert(JSX.type === 'div');"},{"text":"<p>The <code>div</code> should contain an <code>h1</code> tag as the first element.</p>","testString":"assert(JSX.props.children[0].type === 'h1');"},{"text":"<p>The <code>div</code> should contain a <code>p</code> tag as the second element.</p>","testString":"assert(JSX.props.children[1].type === 'p');"},{"text":"<p>The <code>div</code> should contain a <code>ul</code> tag as the third element.</p>","testString":"assert(JSX.props.children[2].type === 'ul');"},{"text":"<p>The <code>ul</code> should contain three <code>li</code> elements.</p>","testString":"assert(\n  JSX.props.children\n    .filter((ele) => ele.type === 'ul')[0]\n    .props.children.filter((ele) => ele.type === 'li').length === 3\n);"}],"description":"<section id=\"description\">\n<p>The last challenge was a simple example of JSX, but JSX can represent more complex HTML as well.</p>\n<p>One important thing to know about nested JSX is that it must return a single element.</p>\n<p>This one parent element would wrap all of the other levels of nested elements.</p>\n<p>For instance, several JSX elements written as siblings with no parent wrapper element will not transpile.</p>\n<p>Here's an example:</p>\n<p><strong>Valid JSX:</strong></p>\n<pre><code class=\"language-jsx\">&#x3C;div>\n  &#x3C;p>Paragraph One&#x3C;/p>\n  &#x3C;p>Paragraph Two&#x3C;/p>\n  &#x3C;p>Paragraph Three&#x3C;/p>\n&#x3C;/div>\n</code></pre>\n<p><strong>Invalid JSX:</strong></p>\n<pre><code class=\"language-jsx\">&#x3C;p>Paragraph One&#x3C;/p>\n&#x3C;p>Paragraph Two&#x3C;/p>\n&#x3C;p>Paragraph Three&#x3C;/p>\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>Define a new constant <code>JSX</code> that renders a <code>div</code> which contains the following elements in order:</p>\n<p>An <code>h1</code>, a <code>p</code>, and an unordered list that contains three <code>li</code> items. You can include any text you want within each element.</p>\n<p><strong>Note:</strong> When rendering multiple elements like this, you can wrap them all in parentheses, but it's not strictly required. Also notice this challenge uses a <code>div</code> tag to wrap all the child elements within a single parent element. If you remove the <code>div</code>, the JSX will no longer transpile. Keep this in mind, since it will also apply when you return JSX elements in React components.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":1,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036164","title":"Create a Component with Composition","challengeType":6,"forumTopicId":301383,"dashedName":"create-a-component-with-composition","challengeFiles":[{"head":"","tail":"ReactDOM.render(<ParentComponent />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const ChildComponent = () => {\n  return (\n    <div>\n      <p>I am the child</p>\n    </div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>I am the parent</h1>\n        { /* Change code below this line */ }\n\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};","error":null,"seed":"const ChildComponent = () => {\n  return (\n    <div>\n      <p>I am the child</p>\n    </div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>I am the parent</h1>\n        { /* Change code below this line */ }\n\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const ChildComponent = () => {\n  return (\n    <div>\n      <p>I am the child</p>\n    </div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>I am the parent</h1>\n        { /* Change code below this line */ }\n        <ChildComponent />\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};","error":null,"seed":"const ChildComponent = () => {\n  return (\n    <div>\n      <p>I am the child</p>\n    </div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>I am the parent</h1>\n        { /* Change code below this line */ }\n        <ChildComponent />\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"}]],"tests":[{"text":"<p>The React component should return a single <code>div</code> element.</p>","testString":"assert(\n  (function () {\n    var shallowRender = Enzyme.shallow(React.createElement(ParentComponent));\n    return shallowRender.type() === 'div';\n  })()\n);"},{"text":"<p>The component should return two nested elements.</p>","testString":"assert(\n  (function () {\n    var shallowRender = Enzyme.shallow(React.createElement(ParentComponent));\n    return shallowRender.children().length === 2;\n  })()\n);"},{"text":"<p>The component should return the <code>ChildComponent</code> as its second child.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ParentComponent));\n    return (\n      mockedComponent.find('ParentComponent').find('ChildComponent').length ===\n      1\n    );\n  })()\n);"}],"description":"<section id=\"description\">\n<p>Now we will look at how we can compose multiple React components together. Imagine you are building an app and have created three components: a <code>Navbar</code>, <code>Dashboard</code>, and <code>Footer</code>.</p>\n<p>To compose these components together, you could create an <code>App</code> <em>parent</em> component which renders each of these three components as <em>children</em>. To render a component as a child in a React component, you include the component name written as a custom HTML tag in the JSX. For example, in the <code>render</code> method you could write:</p>\n<pre><code class=\"language-jsx\">return (\n &#x3C;App>\n  &#x3C;Navbar />\n  &#x3C;Dashboard />\n  &#x3C;Footer />\n &#x3C;/App>\n)\n</code></pre>\n<p>When React encounters a custom HTML tag that references another component (a component name wrapped in <code>&#x3C; /></code> like in this example), it renders the markup for that component in the location of the tag. This should illustrate the parent/child relationship between the <code>App</code> component and the <code>Navbar</code>, <code>Dashboard</code>, and <code>Footer</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>In the code editor, there is a simple functional component called <code>ChildComponent</code> and a class component called <code>ParentComponent</code>. Compose the two together by rendering the <code>ChildComponent</code> within the <code>ParentComponent</code>. Make sure to close the <code>ChildComponent</code> tag with a forward slash.</p>\n<p><strong>Note:</strong> <code>ChildComponent</code> is defined with an ES6 arrow function because this is a very common practice when using React. However, know that this is just a function. If you aren't familiar with the arrow function syntax, please refer to the JavaScript section.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":8,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036179","title":"Create a Controlled Form","challengeType":6,"forumTopicId":301384,"dashedName":"create-a-controlled-form","challengeFiles":[{"head":"","tail":"ReactDOM.render(<MyForm />, document.getElementById('root'));","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      submit: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  handleSubmit(event) {\n    // Change code below this line\n\n    // Change code above this line\n  }\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          {/* Change code below this line */}\n\n          {/* Change code above this line */}\n          <button type='submit'>Submit!</button>\n        </form>\n        {/* Change code below this line */}\n\n        {/* Change code above this line */}\n      </div>\n    );\n  }\n}","error":null,"seed":"class MyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      submit: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  handleSubmit(event) {\n    // Change code below this line\n\n    // Change code above this line\n  }\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          {/* Change code below this line */}\n\n          {/* Change code above this line */}\n          <button type='submit'>Submit!</button>\n        </form>\n        {/* Change code below this line */}\n\n        {/* Change code above this line */}\n      </div>\n    );\n  }\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      submit: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    this.setState(state => ({\n      submit: state.input\n    }));\n  }\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input value={this.state.input} onChange={this.handleChange} />\n          <button type='submit'>Submit!</button>\n        </form>\n        <h1>{this.state.submit}</h1>\n      </div>\n    );\n  }\n}","error":null,"seed":"class MyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      submit: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    this.setState(state => ({\n      submit: state.input\n    }));\n  }\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input value={this.state.input} onChange={this.handleChange} />\n          <button type='submit'>Submit!</button>\n        </form>\n        <h1>{this.state.submit}</h1>\n      </div>\n    );\n  }\n}"}]],"tests":[{"text":"<p><code>MyForm</code> should return a <code>div</code> element which contains a <code>form</code> and an <code>h1</code> tag. The form should include an <code>input</code> and a <code>button</code>.</p>","testString":"assert(\n  (() => {\n    const mockedComponent = Enzyme.mount(React.createElement(MyForm));\n    return (\n      mockedComponent.find('div').children().find('form').length === 1 &&\n      mockedComponent.find('div').children().find('h1').length === 1 &&\n      mockedComponent.find('form').children().find('input').length === 1 &&\n      mockedComponent.find('form').children().find('button').length === 1\n    );\n  })()\n);"},{"text":"<p>The state of <code>MyForm</code> should initialize with <code>input</code> and <code>submit</code> properties, both set to empty strings.</p>","testString":"assert(\n  Enzyme.mount(React.createElement(MyForm)).state('input') === '' &&\n    Enzyme.mount(React.createElement(MyForm)).state('submit') === ''\n);"},{"text":"<p>Typing in the <code>input</code> element should update the <code>input</code> property of the component's state.</p>","testString":"(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(MyForm));\n  const _1 = () => {\n    mockedComponent.setState({ input: '' });\n    return mockedComponent.state('input');\n  };\n  const _2 = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: 'TestInput' } });\n    return {\n      state: mockedComponent.state('input'),\n      inputVal: mockedComponent.find('input').props().value\n    };\n  };\n  const before = _1();\n  const after = _2();\n  assert(\n    before === '' &&\n      after.state === 'TestInput' &&\n      after.inputVal === 'TestInput'\n  );\n})();"},{"text":"<p>Submitting the form should run <code>handleSubmit</code> which should set the <code>submit</code> property in state equal to the current input.</p>","testString":"(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(MyForm));\n  const _1 = () => {\n    mockedComponent.setState({ input: '' });\n    mockedComponent.setState({ submit: '' });\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: 'SubmitInput' } });\n    return mockedComponent.state('submit');\n  };\n  const _2 = () => {\n    mockedComponent.find('form').simulate('submit');\n    return mockedComponent.state('submit');\n  };\n  const before = _1();\n  const after = _2();\n  assert(before === '' && after === 'SubmitInput');\n})();"},{"text":"<p><code>handleSubmit</code> should call <code>event.preventDefault</code></p>","testString":"assert(\n  __helpers.isCalledWithNoArgs(\n    'event.preventDefault',\n    MyForm.prototype.handleSubmit.toString()\n  )\n);"},{"text":"<p>The <code>h1</code> heading element should render the value of the <code>submit</code> field from the component's state.</p>","testString":"(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(MyForm));\n  const _1 = () => {\n    mockedComponent.setState({ input: '' });\n    mockedComponent.setState({ submit: '' });\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: 'TestInput' } });\n    return mockedComponent.find('h1').text();\n  };\n  const _2 = () => {\n    mockedComponent.find('form').simulate('submit');\n    return mockedComponent.find('h1').text();\n  };\n  const before = _1();\n  const after = _2();\n  assert(before === '' && after === 'TestInput');\n})();"}],"description":"<section id=\"description\">\n<p>The last challenge showed that React can control the internal state for certain elements like <code>input</code> and <code>textarea</code>, which makes them controlled components. This applies to other form elements as well, including the regular HTML <code>form</code> element.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The <code>MyForm</code> component is set up with an empty <code>form</code> with a submit handler. The submit handler will be called when the form is submitted.</p>\n<p>We've added a button which submits the form. You can see it has the <code>type</code> set to <code>submit</code> indicating it is the button controlling the form. Add the <code>input</code> element in the <code>form</code> and set its <code>value</code> and <code>onChange()</code> attributes like the last challenge. You should then complete the <code>handleSubmit</code> method so that it sets the component state property <code>submit</code> to the current input value in the local <code>state</code>.</p>\n<p><strong>Note:</strong> You also must call <code>event.preventDefault()</code> in the submit handler, to prevent the default form submit behavior which will refresh the web page. For camper convenience, the default behavior has been disabled here to prevent refreshes from resetting challenge code.</p>\n<p>Finally, create an <code>h1</code> tag after the <code>form</code> which renders the <code>submit</code> value from the component's <code>state</code>. You can then type in the form and click the button (or press enter), and you should see your input rendered to the page.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":28,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036178","title":"Create a Controlled Input","challengeType":6,"forumTopicId":301385,"dashedName":"create-a-controlled-input","challengeFiles":[{"head":"","tail":"ReactDOM.render(<ControlledInput />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class ControlledInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    // Change code below this line\n\n    // Change code above this line\n  }\n  // Change code below this line\n\n  // Change code above this line\n  render() {\n    return (\n      <div>\n        { /* Change code below this line */}\n\n        { /* Change code above this line */}\n        <h4>Controlled Input:</h4>\n        <p>{this.state.input}</p>\n      </div>\n    );\n  }\n};","error":null,"seed":"class ControlledInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    // Change code below this line\n\n    // Change code above this line\n  }\n  // Change code below this line\n\n  // Change code above this line\n  render() {\n    return (\n      <div>\n        { /* Change code below this line */}\n\n        { /* Change code above this line */}\n        <h4>Controlled Input:</h4>\n        <p>{this.state.input}</p>\n      </div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class ControlledInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  render() {\n    return (\n      <div>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange} />\n        <h4>Controlled Input:</h4>\n\n        <p>{this.state.input}</p>\n      </div>\n    );\n  }\n};","error":null,"seed":"class ControlledInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  render() {\n    return (\n      <div>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange} />\n        <h4>Controlled Input:</h4>\n\n        <p>{this.state.input}</p>\n      </div>\n    );\n  }\n};"}]],"tests":[{"text":"<p><code>ControlledInput</code> should return a <code>div</code> element which contains an <code>input</code> and a <code>p</code> tag.</p>","testString":"assert(\n  Enzyme.mount(React.createElement(ControlledInput))\n    .find('div')\n    .children()\n    .find('input').length === 1 &&\n    Enzyme.mount(React.createElement(ControlledInput))\n      .find('div')\n      .children()\n      .find('p').length === 1\n);"},{"text":"<p>The state of <code>ControlledInput</code> should initialize with an <code>input</code> property set to an empty string.</p>","testString":"assert.strictEqual(\n  Enzyme.mount(React.createElement(ControlledInput)).state('input'),\n  ''\n);"},{"text":"<p>Typing in the input element should update the state and the value of the input, and the <code>p</code> element should render this state as you type.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(ControlledInput));\n  const _1 = () => {\n    mockedComponent.setState({ input: '' });\n    return waitForIt(() => mockedComponent.state('input'));\n  };\n  const _2 = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: 'TestInput' } });\n    return waitForIt(() => ({\n      state: mockedComponent.state('input'),\n      text: mockedComponent.find('p').text(),\n      inputVal: mockedComponent.find('input').props().value\n    }));\n  };\n  const before = await _1();\n  const after = await _2();\n  assert(\n    before === '' &&\n      after.state === 'TestInput' &&\n      after.text === 'TestInput' &&\n      after.inputVal === 'TestInput'\n  );\n};"}],"description":"<section id=\"description\">\n<p>Your application may have more complex interactions between <code>state</code> and the rendered UI. For example, form control elements for text input, such as <code>input</code> and <code>textarea</code>, maintain their own state in the DOM as the user types. With React, you can move this mutable state into a React component's <code>state</code>. The user's input becomes part of the application <code>state</code>, so React controls the value of that input field. Typically, if you have React components with input fields the user can type into, it will be a controlled input form.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The code editor has the skeleton of a component called <code>ControlledInput</code> to create a controlled <code>input</code> element. The component's <code>state</code> is already initialized with an <code>input</code> property that holds an empty string. This value represents the text a user types into the <code>input</code> field.</p>\n<p>First, create a method called <code>handleChange()</code> that has a parameter called <code>event</code>. When the method is called, it receives an <code>event</code> object that contains a string of text from the <code>input</code> element. You can access this string with <code>event.target.value</code> inside the method. Update the <code>input</code> property of the component's <code>state</code> with this new string.</p>\n<p>In the <code>render</code> method, create the <code>input</code> element above the <code>h4</code> tag. Add a <code>value</code> attribute which is equal to the <code>input</code> property of the component's <code>state</code>. Then add an <code>onChange()</code> event handler set to the <code>handleChange()</code> method.</p>\n<p>When you type in the input box, that text is processed by the <code>handleChange()</code> method, set as the <code>input</code> property in the local <code>state</code>, and rendered as the value in the <code>input</code> box on the page. The component <code>state</code> is the single source of truth regarding the input data.</p>\n<p>Last but not least, don't forget to add the necessary bindings in the constructor.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":27,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036163","title":"Create a React Component","challengeType":6,"forumTopicId":301386,"dashedName":"create-a-react-component","challengeFiles":[{"head":"","tail":"ReactDOM.render(<MyComponent />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // Change code below this line\n\n\n\n    // Change code above this line\n  }\n};","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // Change code below this line\n\n\n\n    // Change code above this line\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // Change code below this line\n    return (\n      <div>\n        <h1>Hello React!</h1>\n      </div>\n    );\n    // Change code above this line\n  }\n};","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // Change code below this line\n    return (\n      <div>\n        <h1>Hello React!</h1>\n      </div>\n    );\n    // Change code above this line\n  }\n};"}]],"tests":[{"text":"<p>The React component should return a <code>div</code> element.</p>","testString":"assert(Enzyme.shallow(React.createElement(MyComponent)).type() === 'div');"},{"text":"<p>The returned <code>div</code> should render an <code>h1</code> heading element within it.</p>","testString":"assert(\n  /<div><h1>.*<\\/h1><\\/div>/.test(\n    Enzyme.shallow(React.createElement(MyComponent)).html()\n  )\n);"},{"text":"<p>The <code>h1</code> heading element should contain the string <code>Hello React!</code>.</p>","testString":"assert(\n  Enzyme.shallow(React.createElement(MyComponent)).html() ===\n    '<div><h1>Hello React!</h1></div>'\n);"}],"description":"<section id=\"description\">\n<p>The other way to define a React component is with the ES6 <code>class</code> syntax. In the following example, <code>Kitten</code> extends <code>React.Component</code>:</p>\n<pre><code class=\"language-jsx\">class Kitten extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      &#x3C;h1>Hi&#x3C;/h1>\n    );\n  }\n}\n</code></pre>\n<p>This creates an ES6 class <code>Kitten</code> which extends the <code>React.Component</code> class. So the <code>Kitten</code> class now has access to many useful React features, such as local state and lifecycle hooks. Don't worry if you aren't familiar with these terms yet, they will be covered in greater detail in later challenges. Also notice the <code>Kitten</code> class has a <code>constructor</code> defined within it that calls <code>super()</code>. It uses <code>super()</code> to call the constructor of the parent class, in this case <code>React.Component</code>. The constructor is a special method used during the initialization of objects that are created with the <code>class</code> keyword. It is best practice to call a component's <code>constructor</code> with <code>super</code>, and pass <code>props</code> to both. This makes sure the component is initialized properly. For now, know that it is standard for this code to be included. Soon you will see other uses for the constructor as well as <code>props</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p><code>MyComponent</code> is defined in the code editor using class syntax. Finish writing the <code>render</code> method so it returns a <code>div</code> element that contains an <code>h1</code> with the text <code>Hello React!</code>.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":7,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"587d7dbc367417b2b2512bb1","title":"Create a Simple JSX Element","challengeType":6,"forumTopicId":301390,"dashedName":"create-a-simple-jsx-element","challengeFiles":[{"head":"","tail":"ReactDOM.render(JSX, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const JSX = <div></div>;","error":null,"seed":"const JSX = <div></div>;"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const JSX = <h1>Hello JSX!</h1>;","error":null,"seed":"const JSX = <h1>Hello JSX!</h1>;"}]],"tests":[{"text":"<p>The constant <code>JSX</code> should return an <code>h1</code> element.</p>","testString":"assert(JSX.type === 'h1');"},{"text":"<p>The <code>h1</code> tag should include the text <code>Hello JSX!</code></p>","testString":"assert(Enzyme.shallow(JSX).contains('Hello JSX!'));"}],"description":"<section id=\"description\">\n<p>React is an Open Source view library created and maintained by Facebook. It's a great tool to render the User Interface (UI) of modern web applications.</p>\n<p>React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript. This has several benefits. It lets you use the full programmatic power of JavaScript within HTML, and helps to keep your code readable. For the most part, JSX is similar to the HTML that you have already learned, however there are a few key differences that will be covered throughout these challenges.</p>\n<p>For instance, because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX. To do this, you simply include the code you want to be treated as JavaScript within curly braces: <code>{ 'this is treated as JavaScript code' }</code>. Keep this in mind, since it's used in several future challenges.</p>\n<p>However, because JSX is not valid JavaScript, JSX code must be compiled into JavaScript. The transpiler Babel is a popular tool for this process. For your convenience, it's already added behind the scenes for these challenges. If you happen to write syntactically invalid JSX, you will see the first test in these challenges fail.</p>\n<p>It's worth noting that under the hood the challenges are calling <code>ReactDOM.render(JSX, document.getElementById('root'))</code>. This function call is what places your JSX into React's own lightweight representation of the DOM. React then uses snapshots of its own DOM to optimize updating only specific parts of the actual DOM.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The current code uses JSX to assign a <code>div</code> element to the constant <code>JSX</code>. Replace the <code>div</code> with an <code>h1</code> element and add the text <code>Hello JSX!</code> inside it.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":0,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036170","title":"Create a Stateful Component","challengeType":6,"forumTopicId":301391,"dashedName":"create-a-stateful-component","challengeFiles":[{"head":"","tail":"ReactDOM.render(<StatefulComponent />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class StatefulComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    // Only change code below this line\n\n    // Only change code above this line\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.state.firstName}</h1>\n      </div>\n    );\n  }\n};","error":null,"seed":"class StatefulComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    // Only change code below this line\n\n    // Only change code above this line\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.state.firstName}</h1>\n      </div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class StatefulComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstName: 'freeCodeCamp!'\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.state.firstName}</h1>\n      </div>\n    );\n  }\n};","error":null,"seed":"class StatefulComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstName: 'freeCodeCamp!'\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.state.firstName}</h1>\n      </div>\n    );\n  }\n};"}]],"tests":[{"text":"<p><code>StatefulComponent</code> should exist and render.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(\n      React.createElement(StatefulComponent)\n    );\n    return mockedComponent.find('StatefulComponent').length === 1;\n  })()\n);"},{"text":"<p><code>StatefulComponent</code> should render a <code>div</code> and an <code>h1</code> element.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(\n      React.createElement(StatefulComponent)\n    );\n    return (\n      mockedComponent.find('div').length === 1 &&\n      mockedComponent.find('h1').length === 1\n    );\n  })()\n);"},{"text":"<p>The state of <code>StatefulComponent</code> should be initialized with a property <code>firstName</code> set to a string.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(\n      React.createElement(StatefulComponent)\n    );\n    const initialState = mockedComponent.state();\n    return (\n      typeof initialState === 'object' && typeof initialState.firstName === 'string'\n    );\n  })()\n);"},{"text":"<p>The property <code>firstName</code> in the state of <code>StatefulComponent</code> should render in the <code>h1</code> element.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(\n      React.createElement(StatefulComponent)\n    );\n    const initialState = mockedComponent.state();\n    return mockedComponent.find('h1').text() === initialState.firstName;\n  })()\n);"}],"description":"<section id=\"description\">\n<p>One of the most important topics in React is <code>state</code>. State consists of any data your application needs to know about, that can change over time. You want your apps to respond to state changes and present an updated UI when necessary. React offers a nice solution for the state management of modern web applications.</p>\n<p>You create state in a React component by declaring a <code>state</code> property on the component class in its <code>constructor</code>. This initializes the component with <code>state</code> when it is created. The <code>state</code> property must be set to a JavaScript <code>object</code>. Declaring it looks like this:</p>\n<pre><code class=\"language-jsx\">this.state = {\n\n}\n</code></pre>\n<p>You have access to the <code>state</code> object throughout the life of your component. You can update it, render it in your UI, and pass it as props to child components. The <code>state</code> object can be as complex or as simple as you need it to be. Note that you must create a class component by extending <code>React.Component</code> in order to create <code>state</code> like this.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>There is a component in the code editor that is trying to render a <code>firstName</code> property from its <code>state</code>. However, there is no <code>state</code> defined. Initialize the component with <code>state</code> in the <code>constructor</code> and assign your name to a property of <code>firstName</code>.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":20,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036162","title":"Create a Stateless Functional Component","challengeType":6,"forumTopicId":301392,"dashedName":"create-a-stateless-functional-component","challengeFiles":[{"head":"","tail":"ReactDOM.render(<MyComponent />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const MyComponent = function() {\n  // Change code below this line\n\n\n\n  // Change code above this line\n}","error":null,"seed":"const MyComponent = function() {\n  // Change code below this line\n\n\n\n  // Change code above this line\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const MyComponent = function() {\n  // Change code below this line\n  return (\n    <div>\n      Demo Solution\n    </div>\n  );\n  // Change code above this line\n}","error":null,"seed":"const MyComponent = function() {\n  // Change code below this line\n  return (\n    <div>\n      Demo Solution\n    </div>\n  );\n  // Change code above this line\n}"}]],"tests":[{"text":"<p><code>MyComponent</code> should return JSX.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return mockedComponent.length === 1;\n  })()\n);"},{"text":"<p><code>MyComponent</code> should return a <code>div</code> element.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return mockedComponent.children().type() === 'div';\n  })()\n);"},{"text":"<p>The <code>div</code> element should contain a string of text.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return mockedComponent.find('div').text() !== '';\n  })()\n);"}],"description":"<section id=\"description\">\n<p>Components are the core of React. Everything in React is a component and here you will learn how to create one.</p>\n<p>There are two ways to create a React component. The first way is to use a JavaScript function. Defining a component in this way creates a <em>stateless functional component</em>. The concept of state in an application will be covered in later challenges. For now, think of a stateless component as one that can receive data and render it, but does not manage or track changes to that data. (We'll cover the second way to create a React component in the next challenge.)</p>\n<p>To create a component with a function, you simply write a JavaScript function that returns either JSX or <code>null</code>. One important thing to note is that React requires your function name to begin with a capital letter. Here's an example of a stateless functional component that assigns an HTML class in JSX:</p>\n<pre><code class=\"language-jsx\">const DemoComponent = function() {\n  return (\n    &#x3C;div className='customClass' />\n  );\n};\n</code></pre>\n<p>After being transpiled, the <code>&#x3C;div></code> will have a CSS class of <code>customClass</code>.</p>\n<p>Because a JSX component represents HTML, you could put several components together to create a more complex HTML page. This is one of the key advantages of the component architecture React provides. It allows you to compose your UI from many separate, isolated components. This makes it easier to build and maintain complex user interfaces.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The code editor has a function called <code>MyComponent</code>. Complete this function so it returns a single <code>div</code> element which contains some string of text.</p>\n<p><strong>Note:</strong> The text is considered a child of the <code>div</code> element, so you will not be able to use a self-closing tag.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":6,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036160","title":"Define an HTML Class in JSX","challengeType":6,"forumTopicId":301393,"dashedName":"define-an-html-class-in-jsx","challengeFiles":[{"head":"","tail":"ReactDOM.render(JSX, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const JSX = (\n  <div>\n    <h1>Add a class to this div</h1>\n  </div>\n);","error":null,"seed":"const JSX = (\n  <div>\n    <h1>Add a class to this div</h1>\n  </div>\n);"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const JSX = (\n<div className = 'myDiv'>\n  <h1>Add a class to this div</h1>\n</div>);","error":null,"seed":"const JSX = (\n<div className = 'myDiv'>\n  <h1>Add a class to this div</h1>\n</div>);"}]],"tests":[{"text":"<p>The constant <code>JSX</code> should return a <code>div</code> element.</p>","testString":"assert.strictEqual(JSX.type, 'div');"},{"text":"<p>The <code>div</code> should have a class of <code>myDiv</code>.</p>","testString":"assert.strictEqual(JSX.props.className, 'myDiv');"}],"description":"<section id=\"description\">\n<p>Now that you're getting comfortable writing JSX, you may be wondering how it differs from HTML.</p>\n<p>So far, it may seem that HTML and JSX are exactly the same.</p>\n<p>One key difference in JSX is that you can no longer use the word <code>class</code> to define HTML classes. This is because <code>class</code> is a reserved word in JavaScript. Instead, JSX uses <code>className</code>.</p>\n<p>In fact, the naming convention for all HTML attributes and event references in JSX become camelCase. For example, a click event in JSX is <code>onClick</code>, instead of <code>onclick</code>. Likewise, <code>onchange</code> becomes <code>onChange</code>. While this is a subtle difference, it is an important one to keep in mind moving forward.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Apply a class of <code>myDiv</code> to the <code>div</code> provided in the JSX code.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":4,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403618b","title":"Give Sibling Elements a Unique Key Attribute","challengeType":6,"forumTopicId":301394,"dashedName":"give-sibling-elements-a-unique-key-attribute","challengeFiles":[{"head":"","tail":"ReactDOM.render(<Frameworks />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const frontEndFrameworks = [\n  'React',\n  'Angular',\n  'Ember',\n  'Knockout',\n  'Backbone',\n  'Vue'\n];\n\nfunction Frameworks() {\n  const renderFrameworks = null; // Change this line\n  return (\n    <div>\n      <h1>Popular Front End JavaScript Frameworks</h1>\n      <ul>\n        {renderFrameworks}\n      </ul>\n    </div>\n  );\n};","error":null,"seed":"const frontEndFrameworks = [\n  'React',\n  'Angular',\n  'Ember',\n  'Knockout',\n  'Backbone',\n  'Vue'\n];\n\nfunction Frameworks() {\n  const renderFrameworks = null; // Change this line\n  return (\n    <div>\n      <h1>Popular Front End JavaScript Frameworks</h1>\n      <ul>\n        {renderFrameworks}\n      </ul>\n    </div>\n  );\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const frontEndFrameworks = [\n  'React',\n  'Angular',\n  'Ember',\n  'Knockout',\n  'Backbone',\n  'Vue'\n];\n\nfunction Frameworks() {\n  const renderFrameworks = frontEndFrameworks.map((fw, i) => <li key={i}>{fw}</li>);\n  return (\n    <div>\n      <h1>Popular Front End JavaScript Frameworks</h1>\n      <ul>\n        {renderFrameworks}\n      </ul>\n    </div>\n  );\n};","error":null,"seed":"const frontEndFrameworks = [\n  'React',\n  'Angular',\n  'Ember',\n  'Knockout',\n  'Backbone',\n  'Vue'\n];\n\nfunction Frameworks() {\n  const renderFrameworks = frontEndFrameworks.map((fw, i) => <li key={i}>{fw}</li>);\n  return (\n    <div>\n      <h1>Popular Front End JavaScript Frameworks</h1>\n      <ul>\n        {renderFrameworks}\n      </ul>\n    </div>\n  );\n};"}]],"tests":[{"text":"<p>The <code>Frameworks</code> component should exist and render to the page.</p>","testString":"assert(\n  Enzyme.mount(React.createElement(Frameworks)).find('Frameworks').length === 1\n);"},{"text":"<p><code>Frameworks</code> should render an <code>h1</code> element.</p>","testString":"assert(Enzyme.mount(React.createElement(Frameworks)).find('h1').length === 1);"},{"text":"<p><code>Frameworks</code> should render a <code>ul</code> element.</p>","testString":"assert(Enzyme.mount(React.createElement(Frameworks)).find('ul').length === 1);"},{"text":"<p>The <code>ul</code> tag should render 6 child <code>li</code> elements.</p>","testString":"assert(\n  Enzyme.mount(React.createElement(Frameworks)).find('ul').children().length ===\n    6 &&\n    Enzyme.mount(React.createElement(Frameworks))\n      .find('ul')\n      .childAt(0)\n      .name() === 'li' &&\n    Enzyme.mount(React.createElement(Frameworks)).find('li').length === 6\n);"},{"text":"<p>Each list item element should have a unique <code>key</code> attribute.</p>","testString":"assert(\n  (() => {\n    const ul = Enzyme.mount(React.createElement(Frameworks)).find('ul');\n    const keys = new Set([\n      ul.childAt(0).key(),\n      ul.childAt(1).key(),\n      ul.childAt(2).key(),\n      ul.childAt(3).key(),\n      ul.childAt(4).key(),\n      ul.childAt(5).key()\n    ]);\n    return keys.size === 6;\n  })()\n);"},{"text":"<p>Each list item element should contain text from <code>frontEndFrameworks</code>.</p>","testString":"assert(\n  (() => {\n    const li = Enzyme.mount(React.createElement(Frameworks))\n      .find('ul')\n      .children();\n    return [...Array(5)].every((_, i) =>\n      frontEndFrameworks.includes(li.at(i).text())\n    );\n  })()\n);"}],"description":"<section id=\"description\">\n<p>The last challenge showed how the <code>map</code> method is used to dynamically render a number of elements based on user input. However, there was an important piece missing from that example. When you create an array of elements, each one needs a <code>key</code> attribute set to a unique value. React uses these keys to keep track of which items are added, changed, or removed. This helps make the re-rendering process more efficient when the list is modified in any way.</p>\n<p><strong>Note:</strong> Keys only need to be unique between sibling elements, they don't need to be globally unique in your application.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The code editor has an array with some front end frameworks and a stateless functional component named <code>Frameworks()</code>. <code>Frameworks()</code> needs to map the array to an unordered list, much like in the last challenge. Finish writing the <code>map</code> callback to return an <code>li</code> element for each framework in the <code>frontEndFrameworks</code> array. This time, make sure to give each <code>li</code> a <code>key</code> attribute, set to a unique value. The <code>li</code> elements should also contain text from <code>frontEndFrameworks</code>.</p>\n<p>Normally, you want to make the key something that uniquely identifies the element being rendered. As a last resort the array index may be used, but typically you should try to use a unique identification.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":44,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036181","title":"Introducing Inline Styles","challengeType":6,"forumTopicId":301395,"dashedName":"introducing-inline-styles","challengeFiles":[{"head":"","tail":"ReactDOM.render(<Colorful />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class Colorful extends React.Component {\n  render() {\n    return (\n      <div>Big Red</div>\n    );\n  }\n};","error":null,"seed":"class Colorful extends React.Component {\n  render() {\n    return (\n      <div>Big Red</div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class Colorful extends React.Component {\n  render() {\n    return (\n      <div style={{color: \"red\", fontSize: 72}}>Big Red</div>\n    );\n  }\n};","error":null,"seed":"class Colorful extends React.Component {\n  render() {\n    return (\n      <div style={{color: \"red\", fontSize: 72}}>Big Red</div>\n    );\n  }\n};"}]],"tests":[{"text":"<p>The component should render a <code>div</code> element.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(Colorful));\n    return mockedComponent.children().type() === 'div';\n  })()\n);"},{"text":"<p>The <code>div</code> element should have a color of <code>red</code>.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(Colorful));\n    return mockedComponent.children().props().style.color === 'red';\n  })()\n);"},{"text":"<p>The <code>div</code> element should have a font size of <code>72px</code>.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(Colorful));\n    return (\n      mockedComponent.children().props().style.fontSize === 72 ||\n      mockedComponent.children().props().style.fontSize === '72' ||\n      mockedComponent.children().props().style.fontSize === '72px'\n    );\n  })()\n);"}],"description":"<section id=\"description\">\n<p>There are other complex concepts that add powerful capabilities to your React code. But you may be wondering about the more simple problem of how to style those JSX elements you create in React. You likely know that it won't be exactly the same as working with HTML because of <a href=\"/learn/front-end-development-libraries/react/define-an-html-class-in-jsx\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">the way you apply classes to JSX elements</a>.</p>\n<p>If you import styles from a stylesheet, it isn't much different at all. You apply a class to your JSX element using the <code>className</code> attribute, and apply styles to the class in your stylesheet. Another option is to apply inline styles, which are very common in ReactJS development.</p>\n<p>You apply inline styles to JSX elements similar to how you do it in HTML, but with a few JSX differences. Here's an example of an inline style in HTML:</p>\n<pre><code class=\"language-jsx\">&#x3C;div style=\"color: yellow; font-size: 16px\">Mellow Yellow&#x3C;/div>\n</code></pre>\n<p>JSX elements use the <code>style</code> attribute, but because of the way JSX is transpiled, you can't set the value to a <code>string</code>. Instead, you set it equal to a JavaScript <code>object</code>. Here's an example:</p>\n<pre><code class=\"language-jsx\">&#x3C;div style={{color: \"yellow\", fontSize: 16}}>Mellow Yellow&#x3C;/div>\n</code></pre>\n<p>Notice how we camelCase the <code>fontSize</code> property? This is because React will not accept kebab-case keys in the style object. React will apply the correct property name for us in the HTML.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Add a <code>style</code> attribute to the <code>div</code> in the code editor to give the text a color of red and font size of <code>72px</code>.</p>\n<p>Note that you can optionally set the font size to be a number, omitting the units <code>px</code>, or write it as <code>72px</code>.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":35,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036161","title":"Learn About Self-Closing JSX Tags","challengeType":6,"forumTopicId":301396,"dashedName":"learn-about-self-closing-jsx-tags","challengeFiles":[{"head":"","tail":"ReactDOM.render(JSX, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const JSX = (\n  <div>\n    <h2>Welcome to React!</h2> <br >\n    <p>Be sure to close all tags!</p>\n    <hr >\n  </div>\n);","error":null,"seed":"const JSX = (\n  <div>\n    <h2>Welcome to React!</h2> <br >\n    <p>Be sure to close all tags!</p>\n    <hr >\n  </div>\n);"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const JSX = (\n<div>\n  <h2>Welcome to React!</h2> <br />\n  <p>Be sure to close all tags!</p>\n  <hr />\n</div>\n);","error":null,"seed":"const JSX = (\n<div>\n  <h2>Welcome to React!</h2> <br />\n  <p>Be sure to close all tags!</p>\n  <hr />\n</div>\n);"}]],"tests":[{"text":"<p>The constant <code>JSX</code> should return a <code>div</code> element.</p>","testString":"assert.strictEqual(JSX.type, 'div');"},{"text":"<p>The <code>div</code> should contain a <code>br</code> tag.</p>","testString":"assert(Enzyme.shallow(JSX).find('br').length === 1);"},{"text":"<p>The <code>div</code> should contain an <code>hr</code> tag.</p>","testString":"assert(Enzyme.shallow(JSX).find('hr').length === 1);"}],"description":"<section id=\"description\">\n<p>So far, you’ve seen how JSX differs from HTML in a key way with the use of <code>className</code> vs. <code>class</code> for defining HTML classes.</p>\n<p>Another important way in which JSX differs from HTML is in the idea of the self-closing tag.</p>\n<p>In HTML, almost all tags have both an opening and closing tag: <code>&#x3C;div>&#x3C;/div></code>; the closing tag always has a forward slash before the tag name that you are closing. However, there are special instances in HTML called “self-closing tags”, or tags that don’t require both an opening and closing tag before another tag can start.</p>\n<p>For example the line-break tag can be written as <code>&#x3C;br></code> or as <code>&#x3C;br /></code>, but should never be written as <code>&#x3C;br>&#x3C;/br></code>, since it doesn't contain any content.</p>\n<p>In JSX, the rules are a little different. Any JSX element can be written with a self-closing tag, and every element must be closed. The line-break tag, for example, must always be written as <code>&#x3C;br /></code> in order to be valid JSX that can be transpiled. A <code>&#x3C;div></code>, on the other hand, can be written as <code>&#x3C;div /></code> or <code>&#x3C;div>&#x3C;/div></code>. The difference is that in the first syntax version there is no way to include anything in the <code>&#x3C;div /></code>. You will see in later challenges that this syntax is useful when rendering React components.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Fix the errors in the code editor so that it is valid JSX and successfully transpiles. Make sure you don't change any of the content - you only need to close tags where they are needed.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":5,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036180","title":"Optimize Re-Renders with shouldComponentUpdate","challengeType":6,"forumTopicId":301398,"dashedName":"optimize-re-renders-with-shouldcomponentupdate","challengeFiles":[{"head":"","tail":"ReactDOM.render(<Controller />, document.getElementById('root'));","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class OnlyEvens extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('Should I update?');\n    // Change code below this line\n    return true;\n    // Change code above this line\n  }\n  componentDidUpdate() {\n    console.log('Component re-rendered.');\n  }\n  render() {\n    return <h1>{this.props.value}</h1>;\n  }\n}\n\nclass Controller extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0\n    };\n    this.addValue = this.addValue.bind(this);\n  }\n  addValue() {\n    this.setState(state => ({\n      value: state.value + 1\n    }));\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.addValue}>Add</button>\n        <OnlyEvens value={this.state.value} />\n      </div>\n    );\n  }\n}","error":null,"seed":"class OnlyEvens extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('Should I update?');\n    // Change code below this line\n    return true;\n    // Change code above this line\n  }\n  componentDidUpdate() {\n    console.log('Component re-rendered.');\n  }\n  render() {\n    return <h1>{this.props.value}</h1>;\n  }\n}\n\nclass Controller extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0\n    };\n    this.addValue = this.addValue.bind(this);\n  }\n  addValue() {\n    this.setState(state => ({\n      value: state.value + 1\n    }));\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.addValue}>Add</button>\n        <OnlyEvens value={this.state.value} />\n      </div>\n    );\n  }\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class OnlyEvens extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('Should I update?');\n    // Change code below this line\n    return nextProps.value % 2 === 0;\n    // Change code above this line\n  }\n  componentDidUpdate() {\n    console.log('Component re-rendered.');\n  }\n  render() {\n    return <h1>{this.props.value}</h1>;\n  }\n}\n\nclass Controller extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0\n    };\n    this.addValue = this.addValue.bind(this);\n  }\n  addValue() {\n    this.setState(state => ({\n      value: state.value + 1\n    }));\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.addValue}>Add</button>\n        <OnlyEvens value={this.state.value} />\n      </div>\n    );\n  }\n}","error":null,"seed":"class OnlyEvens extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('Should I update?');\n    // Change code below this line\n    return nextProps.value % 2 === 0;\n    // Change code above this line\n  }\n  componentDidUpdate() {\n    console.log('Component re-rendered.');\n  }\n  render() {\n    return <h1>{this.props.value}</h1>;\n  }\n}\n\nclass Controller extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0\n    };\n    this.addValue = this.addValue.bind(this);\n  }\n  addValue() {\n    this.setState(state => ({\n      value: state.value + 1\n    }));\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.addValue}>Add</button>\n        <OnlyEvens value={this.state.value} />\n      </div>\n    );\n  }\n}"}]],"tests":[{"text":"<p>The <code>Controller</code> component should render the <code>OnlyEvens</code> component as a child.</p>","testString":"assert(\n  (() => {\n    const mockedComponent = Enzyme.mount(React.createElement(Controller));\n    return (\n      mockedComponent.find('Controller').length === 1 &&\n      mockedComponent.find('OnlyEvens').length === 1\n    );\n  })()\n);"},{"text":"<p>The <code>shouldComponentUpdate</code> method should be defined on the <code>OnlyEvens</code> component.</p>","testString":"assert(\n  (() => {\n    const child = React.createElement(OnlyEvens)\n      .type.prototype.shouldComponentUpdate.toString()\n      .replace(/s/g, '');\n    return child !== 'undefined';\n  })()\n);"},{"text":"<p>The <code>OnlyEvens</code> component should return an <code>h1</code> tag which renders the value of <code>this.props.value</code>.</p>","testString":"(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(Controller));\n  const first = () => {\n    mockedComponent.setState({ value: 1000 });\n    return mockedComponent.find('h1').html();\n  };\n  const second = () => {\n    mockedComponent.setState({ value: 10 });\n    return mockedComponent.find('h1').html();\n  };\n  const firstValue = first();\n  const secondValue = second();\n  assert(firstValue === '<h1>1000</h1>' && secondValue === '<h1>10</h1>');\n})();"},{"text":"<p><code>OnlyEvens</code> should re-render only when <code>nextProps.value</code> is even.</p>","testString":"(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(Controller));\n  const first = () => {\n    mockedComponent.setState({ value: 8 });\n    return mockedComponent.find('h1').text();\n  };\n  const second = () => {\n    mockedComponent.setState({ value: 7 });\n    return mockedComponent.find('h1').text();\n  };\n  const third = () => {\n    mockedComponent.setState({ value: 42 });\n    return mockedComponent.find('h1').text();\n  };\n  const firstValue = first();\n  const secondValue = second();\n  const thirdValue = third();\n  assert(firstValue === '8' && secondValue === '8' && thirdValue === '42');\n})();"}],"description":"<section id=\"description\">\n<p>So far, if any component receives new <code>state</code> or new <code>props</code>, it re-renders itself and all its children. This is usually okay. But React provides a lifecycle method you can call when child components receive new <code>state</code> or <code>props</code>, and declare specifically if the components should update or not. The method is <code>shouldComponentUpdate()</code>, and it takes <code>nextProps</code> and <code>nextState</code> as parameters.</p>\n<p>This method is a useful way to optimize performance. For example, the default behavior is that your component re-renders when it receives new <code>props</code>, even if the <code>props</code> haven't changed. You can use <code>shouldComponentUpdate()</code> to prevent this by comparing the <code>props</code>. The method must return a <code>boolean</code> value that tells React whether or not to update the component. You can compare the current props (<code>this.props</code>) to the next props (<code>nextProps</code>) to determine if you need to update or not, and return <code>true</code> or <code>false</code> accordingly.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The <code>shouldComponentUpdate()</code> method is added in a component called <code>OnlyEvens</code>. Currently, this method returns <code>true</code> so <code>OnlyEvens</code> re-renders every time it receives new <code>props</code>. Modify the method so <code>OnlyEvens</code> updates only if the <code>value</code> of its new props is even. Click the <code>Add</code> button and watch the order of events in your browser's console as the lifecycle hooks are triggered.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":34,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403616c","title":"Override Default Props","challengeType":6,"forumTopicId":301399,"dashedName":"override-default-props","challengeFiles":[{"head":"","tail":"ReactDOM.render(<ShoppingCart />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n}\n\nItems.defaultProps = {\n  quantity: 0\n}\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    { /* Change code below this line */ }\n    return <Items />\n    { /* Change code above this line */ }\n  }\n};","error":null,"seed":"const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n}\n\nItems.defaultProps = {\n  quantity: 0\n}\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    { /* Change code below this line */ }\n    return <Items />\n    { /* Change code above this line */ }\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n}\n\nItems.defaultProps = {\n  quantity: 0\n}\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    { /* Change code below this line */ }\n    return <Items quantity = {10} />\n    { /* Change code above this line */ }\n  }\n};","error":null,"seed":"const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n}\n\nItems.defaultProps = {\n  quantity: 0\n}\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    { /* Change code below this line */ }\n    return <Items quantity = {10} />\n    { /* Change code above this line */ }\n  }\n};"}]],"tests":[{"text":"<p>The component <code>ShoppingCart</code> should render.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n    return mockedComponent.find('ShoppingCart').length === 1;\n  })()\n);"},{"text":"<p>The component <code>Items</code> should render.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n    return mockedComponent.find('Items').length === 1;\n  })()\n);"},{"text":"<p>The <code>Items</code> component should have a prop of <code>{ quantity: 10 }</code> passed from the <code>ShoppingCart</code> component.</p>","testString":"(getUserInput) =>\n  assert(\n    (function () {\n      const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n      return (\n        mockedComponent.find('Items').props().quantity == 10 &&\n        getUserInput('index')\n          .replace(/ /g, '')\n          .includes('<Itemsquantity={10}/>')\n      );\n    })()\n  );"}],"description":"<section id=\"description\">\n<p>The ability to set default props is a useful feature in React. The way to override the default props is to explicitly set the prop values for a component.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The <code>ShoppingCart</code> component now renders a child component <code>Items</code>. This <code>Items</code> component has a default prop <code>quantity</code> set to the integer <code>0</code>. Override the default prop by passing in a value of <code>10</code> for <code>quantity</code>.</p>\n<p><strong>Note:</strong> Remember that the syntax to add a prop to a component looks similar to how you add HTML attributes. However, since the value for <code>quantity</code> is an integer, it won't go in quotes but it should be wrapped in curly braces. For example, <code>{100}</code>. This syntax tells JSX to interpret the value within the braces directly as JavaScript.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":16,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403617b","title":"Pass a Callback as Props","challengeType":6,"forumTopicId":301400,"dashedName":"pass-a-callback-as-props","challengeFiles":[{"head":"","tail":"ReactDOM.render(<MyApp />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      inputValue: event.target.value\n    });\n  }\n  render() {\n    return (\n       <div>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n       </div>\n    );\n  }\n};\n\nclass GetInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>Get Input:</h3>\n        <input\n          value={this.props.input}\n          onChange={this.props.handleChange}/>\n      </div>\n    );\n  }\n};\n\nclass RenderInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>Input Render:</h3>\n        <p>{this.props.input}</p>\n      </div>\n    );\n  }\n};","error":null,"seed":"class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      inputValue: event.target.value\n    });\n  }\n  render() {\n    return (\n       <div>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n       </div>\n    );\n  }\n};\n\nclass GetInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>Get Input:</h3>\n        <input\n          value={this.props.input}\n          onChange={this.props.handleChange}/>\n      </div>\n    );\n  }\n};\n\nclass RenderInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>Input Render:</h3>\n        <p>{this.props.input}</p>\n      </div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: ''\n    }\n  this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      inputValue: event.target.value\n    });\n  }\n  render() {\n    return (\n       <div>\n         <GetInput\n           input={this.state.inputValue}\n           handleChange={this.handleChange}/>\n         <RenderInput\n           input={this.state.inputValue}/>\n       </div>\n    );\n  }\n};\n\nclass GetInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>Get Input:</h3>\n        <input\n          value={this.props.input}\n          onChange={this.props.handleChange}/>\n      </div>\n    );\n  }\n};\n\nclass RenderInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>Input Render:</h3>\n        <p>{this.props.input}</p>\n      </div>\n    );\n  }\n};","error":null,"seed":"class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: ''\n    }\n  this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      inputValue: event.target.value\n    });\n  }\n  render() {\n    return (\n       <div>\n         <GetInput\n           input={this.state.inputValue}\n           handleChange={this.handleChange}/>\n         <RenderInput\n           input={this.state.inputValue}/>\n       </div>\n    );\n  }\n};\n\nclass GetInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>Get Input:</h3>\n        <input\n          value={this.props.input}\n          onChange={this.props.handleChange}/>\n      </div>\n    );\n  }\n};\n\nclass RenderInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>Input Render:</h3>\n        <p>{this.props.input}</p>\n      </div>\n    );\n  }\n};"}]],"tests":[{"text":"<p>The <code>MyApp</code> component should render.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyApp));\n    return mockedComponent.find('MyApp').length === 1;\n  })()\n);"},{"text":"<p>The <code>GetInput</code> component should render.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyApp));\n    return mockedComponent.find('GetInput').length === 1;\n  })()\n);"},{"text":"<p>The <code>RenderInput</code> component should render.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyApp));\n    return mockedComponent.find('RenderInput').length === 1;\n  })()\n);"},{"text":"<p>The <code>GetInput</code> component should receive the <code>MyApp</code> state property <code>inputValue</code> as props and contain an <code>input</code> element which modifies <code>MyApp</code> state.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyApp));\n  const state_1 = () => {\n    mockedComponent.setState({ inputValue: '' });\n    return waitForIt(() => mockedComponent.state());\n  };\n  const state_2 = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: 'TestInput' } });\n    return waitForIt(() => mockedComponent.state());\n  };\n  const updated_1 = await state_1();\n  const updated_2 = await state_2();\n  assert(updated_1.inputValue === '' && updated_2.inputValue === 'TestInput');\n};"},{"text":"<p>The <code>RenderInput</code> component should receive the <code>MyApp</code> state property <code>inputValue</code> as props.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyApp));\n  const state_1 = () => {\n    mockedComponent.setState({ inputValue: 'TestName' });\n    return waitForIt(() => mockedComponent);\n  };\n  const updated_1 = await state_1();\n  assert(updated_1.find('p').text().includes('TestName'));\n};"}],"description":"<section id=\"description\">\n<p>You can pass <code>state</code> as props to child components, but you're not limited to passing data. You can also pass handler functions or any method that's defined on a React component to a child component. This is how you allow child components to interact with their parent components. You pass methods to a child just like a regular prop. It's assigned a name and you have access to that method name under <code>this.props</code> in the child component.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>There are three components outlined in the code editor. The <code>MyApp</code> component is the parent that will render the <code>GetInput</code> and <code>RenderInput</code> child components. Add the <code>GetInput</code> component to the render method in <code>MyApp</code>, then pass it a prop called <code>input</code> assigned to <code>inputValue</code> from <code>MyApp</code>'s <code>state</code>. Also create a prop called <code>handleChange</code> and pass the input handler <code>handleChange</code> to it.</p>\n<p>Next, add <code>RenderInput</code> to the render method in <code>MyApp</code>, then create a prop called <code>input</code> and pass the <code>inputValue</code> from <code>state</code> to it. Once you are finished you will be able to type in the <code>input</code> field in the <code>GetInput</code> component, which then calls the handler method in its parent via props. This updates the input in the <code>state</code> of the parent, which is passed as props to both children. Observe how the data flows between the components and how the single source of truth remains the <code>state</code> of the parent component. Admittedly, this example is a bit contrived, but should serve to illustrate how data and callbacks can be passed between React components.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":30,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403616a","title":"Pass an Array as Props","challengeType":6,"forumTopicId":301401,"dashedName":"pass-an-array-as-props","challengeFiles":[{"head":"","tail":"ReactDOM.render(<ToDo />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const List = (props) => {\n  { /* Change code below this line */ }\n  return <p>{}</p>\n  { /* Change code above this line */ }\n};\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>To Do Lists</h1>\n        <h2>Today</h2>\n        { /* Change code below this line */ }\n        <List/>\n        <h2>Tomorrow</h2>\n        <List/>\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};","error":null,"seed":"const List = (props) => {\n  { /* Change code below this line */ }\n  return <p>{}</p>\n  { /* Change code above this line */ }\n};\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>To Do Lists</h1>\n        <h2>Today</h2>\n        { /* Change code below this line */ }\n        <List/>\n        <h2>Tomorrow</h2>\n        <List/>\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const List= (props) => {\n  return <p>{props.tasks.join(', ')}</p>\n};\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>To Do Lists</h1>\n        <h2>Today</h2>\n        <List tasks={['study', 'exercise']} />\n        <h2>Tomorrow</h2>\n        <List tasks={['call Sam', 'grocery shopping', 'order tickets']} />\n      </div>\n    );\n  }\n};","error":null,"seed":"const List= (props) => {\n  return <p>{props.tasks.join(', ')}</p>\n};\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>To Do Lists</h1>\n        <h2>Today</h2>\n        <List tasks={['study', 'exercise']} />\n        <h2>Tomorrow</h2>\n        <List tasks={['call Sam', 'grocery shopping', 'order tickets']} />\n      </div>\n    );\n  }\n};"}]],"tests":[{"text":"<p>The <code>ToDo</code> component should return a single outer <code>div</code>.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return mockedComponent.children().first().type() === 'div';\n  })()\n);"},{"text":"<p>The third child of the <code>ToDo</code> component should be an instance of the <code>List</code> component.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return mockedComponent.children().first().childAt(2).name() === 'List';\n  })()\n);"},{"text":"<p>The fifth child of the <code>ToDo</code> component should be an instance of the <code>List</code> component.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return mockedComponent.children().first().childAt(4).name() === 'List';\n  })()\n);"},{"text":"<p>Both instances of the <code>List</code> component should have a property called <code>tasks</code> and <code>tasks</code> should be of type array.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return (\n      Array.isArray(mockedComponent.find('List').get(0).props.tasks) &&\n      Array.isArray(mockedComponent.find('List').get(1).props.tasks)\n    );\n  })()\n);"},{"text":"<p>The first <code>List</code> component representing the tasks for today should have 2 or more items.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return mockedComponent.find('List').get(0).props.tasks.length >= 2;\n  })()\n);"},{"text":"<p>The second <code>List</code> component representing the tasks for tomorrow should have 3 or more items.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return mockedComponent.find('List').get(1).props.tasks.length >= 3;\n  })()\n);"},{"text":"<p>The <code>List</code> component should render the value from the <code>tasks</code> prop in the <code>p</code> tag.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return (\n      mockedComponent\n        .find('p')\n        .get(0)\n        .props.children.replace(/\\s*,\\s*/g, ',') ===\n        mockedComponent\n          .find('List')\n          .get(0)\n          .props.tasks.join(',')\n          .replace(/\\s*,\\s*/g, ',') &&\n      mockedComponent\n        .find('p')\n        .get(1)\n        .props.children.replace(/\\s*,\\s*/g, ',') ===\n        mockedComponent\n          .find('List')\n          .get(1)\n          .props.tasks.join(',')\n          .replace(/\\s*,\\s*/g, ',')\n    );\n  })()\n);"}],"description":"<section id=\"description\">\n<p>The last challenge demonstrated how to pass information from a parent component to a child component as <code>props</code> or properties. This challenge looks at how arrays can be passed as <code>props</code>. To pass an array to a JSX element, it must be treated as JavaScript and wrapped in curly braces.</p>\n<pre><code class=\"language-jsx\">&#x3C;ParentComponent>\n  &#x3C;ChildComponent colors={[\"green\", \"blue\", \"red\"]} />\n&#x3C;/ParentComponent>\n</code></pre>\n<p>The child component then has access to the array property <code>colors</code>. Array methods such as <code>join()</code> can be used when accessing the property. <code>const ChildComponent = (props) => &#x3C;p>{props.colors.join(', ')}&#x3C;/p></code> This will join all <code>colors</code> array items into a comma separated string and produce: <code>&#x3C;p>green, blue, red&#x3C;/p></code> Later, we will learn about other common methods to render arrays of data in React.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>There are <code>List</code> and <code>ToDo</code> components in the code editor. When rendering each <code>List</code> from the <code>ToDo</code> component, pass in a <code>tasks</code> property assigned to an array of to-do tasks, for example <code>[\"walk dog\", \"workout\"]</code>. Then access this <code>tasks</code> array in the <code>List</code> component, showing its value within the <code>p</code> element. Use <code>join(\", \")</code> to display the <code>props.tasks</code>array in the <code>p</code> element as a comma separated list. Today's list should have at least 2 tasks and tomorrow's should have at least 3 tasks.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":14,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036169","title":"Pass Props to a Stateless Functional Component","challengeType":6,"forumTopicId":301402,"dashedName":"pass-props-to-a-stateless-functional-component","challengeFiles":[{"head":"","tail":"ReactDOM.render(<Calendar />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const CurrentDate = (props) => {\n  return (\n    <div>\n      { /* Change code below this line */ }\n      <p>The current date is: </p>\n      { /* Change code above this line */ }\n    </div>\n  );\n};\n\nclass Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>What date is it?</h3>\n        { /* Change code below this line */ }\n        <CurrentDate />\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};","error":null,"seed":"const CurrentDate = (props) => {\n  return (\n    <div>\n      { /* Change code below this line */ }\n      <p>The current date is: </p>\n      { /* Change code above this line */ }\n    </div>\n  );\n};\n\nclass Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>What date is it?</h3>\n        { /* Change code below this line */ }\n        <CurrentDate />\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const CurrentDate = (props) => {\n  return (\n    <div>\n      { /* Change code below this line */ }\n      <p>The current date is: {props.date}</p>\n      { /* Change code above this line */ }\n    </div>\n  );\n};\n\nclass Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>What date is it?</h3>\n        { /* Change code below this line */ }\n        <CurrentDate date={Date()} />\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};","error":null,"seed":"const CurrentDate = (props) => {\n  return (\n    <div>\n      { /* Change code below this line */ }\n      <p>The current date is: {props.date}</p>\n      { /* Change code above this line */ }\n    </div>\n  );\n};\n\nclass Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>What date is it?</h3>\n        { /* Change code below this line */ }\n        <CurrentDate date={Date()} />\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"}]],"tests":[{"text":"<p>The <code>Calendar</code> component should return a single <code>div</code> element.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(Calendar));\n    return mockedComponent.children().type() === 'div';\n  })()\n);"},{"text":"<p>The second child of the <code>Calendar</code> component should be the <code>CurrentDate</code> component.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(Calendar));\n    return mockedComponent.children().childAt(1).name() === 'CurrentDate';\n  })()\n);"},{"text":"<p>The <code>CurrentDate</code> component should have a prop called <code>date</code>.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(Calendar));\n    return mockedComponent.children().childAt(1).props().date;\n  })()\n);"},{"text":"<p>The <code>date</code> prop of the <code>CurrentDate</code> should contain a string of text.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(Calendar));\n    const prop = mockedComponent.children().childAt(1).props().date;\n    return typeof prop === 'string' && prop.length > 0;\n  })()\n);"},{"text":"<p>The <code>date</code> prop should be generated by calling <code>Date()</code></p>","testString":"assert(/<CurrentDatedate={Date\\(\\)}\\/>/.test(__helpers.removeWhiteSpace(code)));"},{"text":"<p>The <code>CurrentDate</code> component should render the value from the <code>date</code> prop in the <code>p</code> tag.</p>","testString":"let date = 'dummy date';\nassert(\n  (function () {\n    const mockedComponent = Enzyme.mount(\n      React.createElement(CurrentDate, { date })\n    );\n    return mockedComponent.find('p').html().includes(date);\n  })()\n);"}],"description":"<section id=\"description\">\n<p>The previous challenges covered a lot about creating and composing JSX elements, functional components, and ES6 style class components in React. With this foundation, it's time to look at another feature very common in React: <strong>props</strong>. In React, you can pass props, or properties, to child components. Say you have an <code>App</code> component which renders a child component called <code>Welcome</code> which is a stateless functional component. You can pass <code>Welcome</code> a <code>user</code> property by writing:</p>\n<pre><code class=\"language-jsx\">&#x3C;App>\n  &#x3C;Welcome user='Mark' />\n&#x3C;/App>\n</code></pre>\n<p>You use <strong>custom HTML attributes</strong> created by you and supported by React to be passed to the component. In this case, the created property <code>user</code> is passed to the component <code>Welcome</code>. Since <code>Welcome</code> is a stateless functional component, it has access to this value like so:</p>\n<pre><code class=\"language-jsx\">const Welcome = (props) => &#x3C;h1>Hello, {props.user}!&#x3C;/h1>\n</code></pre>\n<p>It is standard to call this value <code>props</code> and when dealing with stateless functional components, you basically consider it as an argument to a function which returns JSX. You can access the value of the argument in the function body. With class components, you will see this is a little different.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>There are <code>Calendar</code> and <code>CurrentDate</code> components in the code editor. When rendering <code>CurrentDate</code> from the <code>Calendar</code> component, pass in a property of <code>date</code> assigned to the current date from JavaScript's <code>Date</code> object. Then access this <code>prop</code> in the <code>CurrentDate</code> component, showing its value within the <code>p</code> tags. Note that for <code>prop</code> values to be evaluated as JavaScript, they must be enclosed in curly brackets, for instance <code>date={Date()}</code>.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":13,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403617a","title":"Pass State as Props to Child Components","challengeType":6,"forumTopicId":301403,"dashedName":"pass-state-as-props-to-child-components","challengeFiles":[{"head":"","tail":"ReactDOM.render(<MyApp />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'CamperBot'\n    }\n  }\n  render() {\n    return (\n       <div>\n         {/* Change code below this line */}\n         <Navbar />\n         {/* Change code above this line */}\n       </div>\n    );\n  }\n};\n\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n    <div>\n      {/* Change code below this line */}\n      <h1>Hello, my name is: </h1>\n      {/* Change code above this line */}\n    </div>\n    );\n  }\n};","error":null,"seed":"class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'CamperBot'\n    }\n  }\n  render() {\n    return (\n       <div>\n         {/* Change code below this line */}\n         <Navbar />\n         {/* Change code above this line */}\n       </div>\n    );\n  }\n};\n\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n    <div>\n      {/* Change code below this line */}\n      <h1>Hello, my name is: </h1>\n      {/* Change code above this line */}\n    </div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'CamperBot'\n    }\n  }\n  render() {\n    return (\n       <div>\n         <Navbar name={this.state.name}/>\n       </div>\n    );\n  }\n};\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n    <div>\n      <h1>Hello, my name is: {this.props.name}</h1>\n    </div>\n    );\n  }\n};","error":null,"seed":"class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'CamperBot'\n    }\n  }\n  render() {\n    return (\n       <div>\n         <Navbar name={this.state.name}/>\n       </div>\n    );\n  }\n};\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n    <div>\n      <h1>Hello, my name is: {this.props.name}</h1>\n    </div>\n    );\n  }\n};"}]],"tests":[{"text":"<p>The <code>MyApp</code> component should render with a <code>Navbar</code> component inside.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyApp));\n    return (\n      mockedComponent.find('MyApp').length === 1 &&\n      mockedComponent.find('Navbar').length === 1\n    );\n  })()\n);"},{"text":"<p>The <code>Navbar</code> component should receive the <code>MyApp</code> state property <code>name</code> as props.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyApp));\n  const setState = () => {\n    mockedComponent.setState({ name: 'TestName' });\n    return waitForIt(() => mockedComponent.find('Navbar').props());\n  };\n  const navProps = await setState();\n  assert(navProps.name === 'TestName');\n};"},{"text":"<p>The <code>h1</code> element in <code>Navbar</code> should render the <code>name</code> prop.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyApp));\n  const navH1Before = mockedComponent.find('Navbar').find('h1').text();\n  const setState = () => {\n    mockedComponent.setState({ name: 'TestName' });\n    return waitForIt(() => mockedComponent.find('Navbar').find('h1').text());\n  };\n  const navH1After = await setState();\n  assert(new RegExp('TestName').test(navH1After) && navH1After !== navH1Before);\n};"}],"description":"<section id=\"description\">\n<p>You saw a lot of examples that passed props to child JSX elements and child React components in previous challenges. You may be wondering where those props come from. A common pattern is to have a stateful component containing the <code>state</code> important to your app, that then renders child components. You want these components to have access to some pieces of that <code>state</code>, which are passed in as props.</p>\n<p>For example, maybe you have an <code>App</code> component that renders a <code>Navbar</code>, among other components. In your <code>App</code>, you have <code>state</code> that contains a lot of user information, but the <code>Navbar</code> only needs access to the user's username so it can display it. You pass that piece of <code>state</code> to the <code>Navbar</code> component as a prop.</p>\n<p>This pattern illustrates some important paradigms in React. The first is <em>unidirectional data flow</em>. State flows in one direction down the tree of your application's components, from the stateful parent component to child components. The child components only receive the state data they need. The second is that complex stateful apps can be broken down into just a few, or maybe a single, stateful component. The rest of your components simply receive state from the parent as props, and render a UI from that state. It begins to create a separation where state management is handled in one part of code and UI rendering in another. This principle of separating state logic from UI logic is one of React's key principles. When it's used correctly, it makes the design of complex, stateful applications much easier to manage.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The <code>MyApp</code> component is stateful and renders a <code>Navbar</code> component as a child. Pass the <code>name</code> property in its <code>state</code> down to the child component, then show the <code>name</code> in the <code>h1</code> tag that's part of the <code>Navbar</code> render method. <code>name</code> should appear after the text <code>Hello, my name is:</code>.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":29,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036167","title":"Render a Class Component to the DOM","challengeType":6,"forumTopicId":301404,"dashedName":"render-a-class-component-to-the-dom","challengeFiles":[{"head":"const Fruits = () => {\n  return (\n    <div>\n      <h2>Fruits:</h2>\n      <h4>Non-Citrus:</h4>\n        <ul>\n          <li>Apples</li>\n          <li>Blueberries</li>\n          <li>Strawberries</li>\n          <li>Bananas</li>\n        </ul>\n      <h4>Citrus:</h4>\n        <ul>\n          <li>Lemon</li>\n          <li>Lime</li>\n          <li>Orange</li>\n          <li>Grapefruit</li>\n        </ul>\n    </div>\n  );\n};\nconst Vegetables = () => {\n  return (\n    <div>\n      <h2>Vegetables:</h2>\n      <ul>\n        <li>Brussel Sprouts</li>\n        <li>Broccoli</li>\n        <li>Squash</li>\n      </ul>\n    </div>\n  );\n};","tail":"","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        {/* Change code below this line */}\n\n        {/* Change code above this line */}\n      </div>\n    );\n  }\n};\n\n// Change code below this line","error":null,"seed":"class TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        {/* Change code below this line */}\n\n        {/* Change code above this line */}\n      </div>\n    );\n  }\n};\n\n// Change code below this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        {/* Change code below this line */}\n          <Fruits />\n           <Vegetables />\n         {/* Change code above this line */}\n      </div>\n    );\n  }\n};\n\n// Change code below this line\nReactDOM.render(<TypesOfFood />, document.getElementById('challenge-node'));","error":null,"seed":"class TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        {/* Change code below this line */}\n          <Fruits />\n           <Vegetables />\n         {/* Change code above this line */}\n      </div>\n    );\n  }\n};\n\n// Change code below this line\nReactDOM.render(<TypesOfFood />, document.getElementById('challenge-node'));"}]],"tests":[{"text":"<p>The <code>TypesOfFood</code> component should return a single <code>div</code> element.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood));\n    return mockedComponent.children().type() === 'div';\n  })()\n);"},{"text":"<p>The <code>TypesOfFood</code> component should render the <code>Fruits</code> component after the <code>h1</code> element.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood));\n    return mockedComponent.children().childAt(1).name() === 'Fruits';\n  })()\n);"},{"text":"<p>The <code>TypesOfFood</code> component should render the <code>Vegetables</code> component after <code>Fruits</code>.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood));\n    return mockedComponent.children().childAt(2).name() === 'Vegetables';\n  })()\n);"},{"text":"<p>The <code>TypesOfFood</code> component should render to the DOM within the <code>div</code> with the id <code>challenge-node</code>.</p>","testString":"assert(\n  (function () {\n    const html = document.getElementById('challenge-node').childNodes[0]\n      .innerHTML;\n    return (\n      html.includes(\n        '<div><h2>Fruits:</h2><h4>Non-Citrus:</h4><ul><li>Apples</li><li>Blueberries</li><li>Strawberries</li><li>Bananas</li></ul><h4>Citrus:</h4><ul><li>Lemon</li><li>Lime</li><li>Orange</li><li>Grapefruit</li></ul></div>'\n      ) &&\n      html.includes(\n        '<div><h2>Vegetables:</h2><ul><li>Brussel Sprouts</li><li>Broccoli</li><li>Squash</li></ul></div>'\n      )\n    );\n  })()\n);"}],"description":"<section id=\"description\">\n<p>You may remember using the ReactDOM API in an earlier challenge to render JSX elements to the DOM. The process for rendering React components will look very similar. The past few challenges focused on components and composition, so the rendering was done for you behind the scenes. However, none of the React code you write will render to the DOM without making a call to the ReactDOM API.</p>\n<p>Here's a refresher on the syntax: <code>ReactDOM.render(componentToRender, targetNode)</code>. The first argument is the React component that you want to render. The second argument is the DOM node that you want to render that component within.</p>\n<p>React components are passed into <code>ReactDOM.render()</code> a little differently than JSX elements. For JSX elements, you pass in the name of the element that you want to render. However, for React components, you need to use the same syntax as if you were rendering a nested component, for example <code>ReactDOM.render(&#x3C;ComponentToRender />, targetNode)</code>. You use this syntax for both ES6 class components and functional components.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Both the <code>Fruits</code> and <code>Vegetables</code> components are defined for you behind the scenes. Render both components as children of the <code>TypesOfFood</code> component, then render <code>TypesOfFood</code> to the DOM. There is a <code>div</code> with <code>id='challenge-node'</code> available for you to use.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":11,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036188","title":"Render Conditionally from Props","challengeType":6,"forumTopicId":301405,"dashedName":"render-conditionally-from-props","challengeFiles":[{"head":"","tail":"ReactDOM.render(<GameOfChance />, document.getElementById('root'));","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class Results extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    {/* Change code below this line */}\n    return <h1></h1>;\n    {/* Change code above this line */}\n  }\n}\n\nclass GameOfChance extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 1\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState(prevState => {\n      // Complete the return statement:\n      return {\n        counter: prevState\n      }\n    });\n  }\n  render() {\n    const expression = null; // Change this line\n    return (\n      <div>\n        <button onClick={this.handleClick}>Play Again</button>\n        {/* Change code below this line */}\n\n        {/* Change code above this line */}\n        <p>{'Turn: ' + this.state.counter}</p>\n      </div>\n    );\n  }\n}","error":null,"seed":"class Results extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    {/* Change code below this line */}\n    return <h1></h1>;\n    {/* Change code above this line */}\n  }\n}\n\nclass GameOfChance extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 1\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState(prevState => {\n      // Complete the return statement:\n      return {\n        counter: prevState\n      }\n    });\n  }\n  render() {\n    const expression = null; // Change this line\n    return (\n      <div>\n        <button onClick={this.handleClick}>Play Again</button>\n        {/* Change code below this line */}\n\n        {/* Change code above this line */}\n        <p>{'Turn: ' + this.state.counter}</p>\n      </div>\n    );\n  }\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"// We want this to be deterministic for testing purposes.\nconst randomSequence = [true, false, false, true, true, false, false, true, true, false];\nlet index = 0;\nconst fiftyFifty = () => randomSequence[index++ % randomSequence.length];\n\nclass Results extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <h1>{this.props.fiftyFifty ? 'You Win!' : 'You Lose!'}</h1>;\n  }\n}\n\nclass GameOfChance extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 1\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState(prevState => {\n      return {\n        counter: prevState.counter + 1\n      }\n    });\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Play Again</button>\n        <Results fiftyFifty={fiftyFifty()} />\n        <p>{'Turn: ' + this.state.counter}</p>\n      </div>\n    );\n  }\n}","error":null,"seed":"// We want this to be deterministic for testing purposes.\nconst randomSequence = [true, false, false, true, true, false, false, true, true, false];\nlet index = 0;\nconst fiftyFifty = () => randomSequence[index++ % randomSequence.length];\n\nclass Results extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <h1>{this.props.fiftyFifty ? 'You Win!' : 'You Lose!'}</h1>;\n  }\n}\n\nclass GameOfChance extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 1\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState(prevState => {\n      return {\n        counter: prevState.counter + 1\n      }\n    });\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Play Again</button>\n        <Results fiftyFifty={fiftyFifty()} />\n        <p>{'Turn: ' + this.state.counter}</p>\n      </div>\n    );\n  }\n}"}]],"tests":[{"text":"<p>The <code>GameOfChance</code> component should exist and render to the page.</p>","testString":"assert.strictEqual(\n  Enzyme.mount(React.createElement(GameOfChance)).find('GameOfChance').length,\n  1\n);"},{"text":"<p><code>GameOfChance</code> should return a single <code>button</code> element.</p>","testString":"assert.strictEqual(\n  Enzyme.mount(React.createElement(GameOfChance)).find('button').length,\n  1\n);"},{"text":"<p><code>GameOfChance</code> should return a single instance of the <code>Results</code> component, which has a prop called <code>fiftyFifty</code>.</p>","testString":"assert(\n  Enzyme.mount(React.createElement(GameOfChance)).find('Results').length ===\n    1 &&\n    Enzyme.mount(React.createElement(GameOfChance))\n      .find('Results')\n      .props()\n      .hasOwnProperty('fiftyFifty') === true\n);"},{"text":"<p><code>GameOfChance</code> state should be initialized with a property of <code>counter</code> set to a value of <code>1</code>.</p>","testString":"assert.strictEqual(\n  Enzyme.mount(React.createElement(GameOfChance)).state().counter,\n  1\n);"},{"text":"<p>When the <code>GameOfChance</code> component is first rendered to the DOM, a <code>p</code> element should be returned with the inner text of <code>Turn: 1</code>.</p>","testString":"assert.strictEqual(\n  Enzyme.mount(React.createElement(GameOfChance)).find('p').text(),\n  'Turn: 1'\n);"},{"text":"<p>Each time the button is clicked, the counter state should be incremented by a value of 1, and a single <code>p</code> element should be rendered to the DOM that contains the text <code>Turn: N</code>, where <code>N</code> is the value of the counter state.</p>","testString":"(() => {\n  const comp = Enzyme.mount(React.createElement(GameOfChance));\n  const simulate = () => {\n    comp.find('button').simulate('click');\n  };\n  const result = () => ({\n    count: comp.state('counter'),\n    text: comp.find('p').text()\n  });\n  const _1 = () => {\n    simulate();\n    return result();\n  };\n  const _2 = () => {\n    simulate();\n    return result();\n  };\n  const _3 = () => {\n    simulate();\n    return result();\n  };\n  const _4 = () => {\n    simulate();\n    return result();\n  };\n  const _5 = () => {\n    simulate();\n    return result();\n  };\n  const _1_val = _1();\n  const _2_val = _2();\n  const _3_val = _3();\n  const _4_val = _4();\n  const _5_val = _5();\n  assert(\n    _1_val.count === 2 &&\n      _1_val.text === 'Turn: 2' &&\n      _2_val.count === 3 &&\n      _2_val.text === 'Turn: 3' &&\n      _3_val.count === 4 &&\n      _3_val.text === 'Turn: 4' &&\n      _4_val.count === 5 &&\n      _4_val.text === 'Turn: 5' &&\n      _5_val.count === 6 &&\n      _5_val.text === 'Turn: 6'\n  );\n})();"},{"text":"<p>When the <code>GameOfChance</code> component is first mounted to the DOM and each time the button is clicked thereafter, a single <code>h1</code> element should be returned that randomly renders either <code>You Win!</code> or <code>You Lose!</code>. Note: this can fail randomly. If that happens, please try again.</p>","testString":"(() => {\n  const comp = Enzyme.mount(React.createElement(GameOfChance));\n  const simulate = () => {\n    comp.find('button').simulate('click');\n  };\n  const result = () => ({\n    h1: comp.find('h1').length,\n    text: comp.find('h1').text()\n  });\n  const _1 = result();\n  const _2 = () => {\n    simulate();\n    return result();\n  };\n  const _3 = () => {\n    simulate();\n    return result();\n  };\n  const _4 = () => {\n    simulate();\n    return result();\n  };\n  const _5 = () => {\n    simulate();\n    return result();\n  };\n  const _6 = () => {\n    simulate();\n    return result();\n  };\n  const _7 = () => {\n    simulate();\n    return result();\n  };\n  const _8 = () => {\n    simulate();\n    return result();\n  };\n  const _9 = () => {\n    simulate();\n    return result();\n  };\n  const _10 = () => {\n    simulate();\n    return result();\n  };\n  const _2_val = _2();\n  const _3_val = _3();\n  const _4_val = _4();\n  const _5_val = _5();\n  const _6_val = _6();\n  const _7_val = _7();\n  const _8_val = _8();\n  const _9_val = _9();\n  const _10_val = _10();\n  const __text = new Set([\n    _1.text,\n    _2_val.text,\n    _3_val.text,\n    _4_val.text,\n    _5_val.text,\n    _6_val.text,\n    _7_val.text,\n    _8_val.text,\n    _9_val.text,\n    _10_val.text\n  ]);\n  const __h1 = new Set([\n    _1.h1,\n    _2_val.h1,\n    _3_val.h1,\n    _4_val.h1,\n    _5_val.h1,\n    _6_val.h1,\n    _7_val.h1,\n    _8_val.h1,\n    _9_val.h1,\n    _10_val.h1\n  ]);\n  assert(__text.size === 2 && __h1.size === 1);\n})();"}],"description":"<section id=\"description\">\n<p>So far, you've seen how to use <code>if/else</code>, <code>&#x26;&#x26;</code>, and the ternary operator (<code>condition ? expressionIfTrue : expressionIfFalse</code>) to make conditional decisions about what to render and when. However, there's one important topic left to discuss that lets you combine any or all of these concepts with another powerful React feature: props. Using props to conditionally render code is very common with React developers — that is, they use the value of a given prop to automatically make decisions about what to render.</p>\n<p>In this challenge, you'll set up a child component to make rendering decisions based on props. You'll also use the ternary operator, but you can see how several of the other concepts that were covered in the last few challenges might be just as useful in this context.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The code editor has two components that are partially defined for you: a parent called <code>GameOfChance</code>, and a child called <code>Results</code>. They are used to create a simple game where the user presses a button to see if they win or lose.</p>\n<p>First, you'll need a simple expression that randomly returns a different value every time it is run. You can use <code>Math.random()</code>. This method returns a value between <code>0</code> (inclusive) and <code>1</code> (exclusive) each time it is called. So for 50/50 odds, use <code>Math.random() >= .5</code> in your expression. Statistically speaking, this expression will return <code>true</code> 50% of the time, and <code>false</code> the other 50%. In the render method, replace <code>null</code> with the above expression to complete the variable declaration.</p>\n<p>Now you have an expression that you can use to make a randomized decision in the code. Next you need to implement this. Render the <code>Results</code> component as a child of <code>GameOfChance</code>, and pass in <code>expression</code> as a prop called <code>fiftyFifty</code>. In the <code>Results</code> component, write a ternary expression to render the <code>h1</code> element with the text <code>You Win!</code> or <code>You Lose!</code> based on the <code>fiftyFifty</code> prop that's being passed in from <code>GameOfChance</code>. Finally, make sure the <code>handleClick()</code> method is correctly counting each turn so the user knows how many times they've played. This also serves to let the user know the component has actually updated in case they win or lose twice in a row.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":41,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24bbe0dba28a8d3cbd4c5f","title":"Render HTML Elements to the DOM","challengeType":6,"forumTopicId":301406,"dashedName":"render-html-elements-to-the-dom","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const JSX = (\n  <div>\n    <h1>Hello World</h1>\n    <p>Lets render this to the DOM</p>\n  </div>\n);\n// Change code below this line","error":null,"seed":"const JSX = (\n  <div>\n    <h1>Hello World</h1>\n    <p>Lets render this to the DOM</p>\n  </div>\n);\n// Change code below this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const JSX = (\n<div>\n  <h1>Hello World</h1>\n  <p>Lets render this to the DOM</p>\n</div>\n);\n// Change code below this line\nReactDOM.render(JSX, document.getElementById('challenge-node'));","error":null,"seed":"const JSX = (\n<div>\n  <h1>Hello World</h1>\n  <p>Lets render this to the DOM</p>\n</div>\n);\n// Change code below this line\nReactDOM.render(JSX, document.getElementById('challenge-node'));"}]],"tests":[{"text":"<p>The constant <code>JSX</code> should return a <code>div</code> element.</p>","testString":"assert(JSX.type === 'div');"},{"text":"<p>The <code>div</code> should contain an <code>h1</code> tag as the first element.</p>","testString":"assert(JSX.props.children[0].type === 'h1');"},{"text":"<p>The <code>div</code> should contain a <code>p</code> tag as the second element.</p>","testString":"assert(JSX.props.children[1].type === 'p');"},{"text":"<p>The provided JSX element should render to the DOM node with id <code>challenge-node</code>.</p>","testString":"assert(\n  document.getElementById('challenge-node').childNodes[0].innerHTML ===\n    '<h1>Hello World</h1><p>Lets render this to the DOM</p>'\n);"}],"description":"<section id=\"description\">\n<p>So far, you've learned that JSX is a convenient tool to write readable HTML within JavaScript. With React, we can render this JSX directly to the HTML DOM using React's rendering API known as ReactDOM.</p>\n<p>ReactDOM offers a simple method to render React elements to the DOM which looks like this: <code>ReactDOM.render(componentToRender, targetNode)</code>, where the first argument is the React element or component that you want to render, and the second argument is the DOM node that you want to render the component to.</p>\n<p>As you would expect, <code>ReactDOM.render()</code> must be called after the JSX element declarations, just like how you must declare variables before using them.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The code editor has a simple JSX component. Use the <code>ReactDOM.render()</code> method to render this component to the page. You can pass defined JSX elements directly in as the first argument and use <code>document.getElementById()</code> to select the DOM node to render them to. There is a <code>div</code> with <code>id='challenge-node'</code> available for you to use. Make sure you don't change the <code>JSX</code> constant.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":3,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403618d","title":"Render React on the Server with renderToString","challengeType":6,"forumTopicId":301407,"dashedName":"render-react-on-the-server-with-rendertostring","challengeFiles":[{"head":"var ReactDOMServer = { renderToString(x) { return null; } };","tail":"ReactDOM.render(<App />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <div/>\n  }\n};\n\n// Change code below this line","error":null,"seed":"class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <div/>\n  }\n};\n\n// Change code below this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <div/>\n  }\n};\n\n// Change code below this line\nReactDOMServer.renderToString(<App/>);","error":null,"seed":"class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <div/>\n  }\n};\n\n// Change code below this line\nReactDOMServer.renderToString(<App/>);"}]],"tests":[{"text":"<p>The <code>App</code> component should render to a string using <code>ReactDOMServer.renderToString</code>.</p>","testString":"(getUserInput) =>\n  assert(\n    getUserInput('index')\n      .replace(/ /g, '')\n      .includes('ReactDOMServer.renderToString(<App/>)') &&\n      Enzyme.mount(React.createElement(App)).children().name() === 'div'\n  );"}],"description":"<section id=\"description\">\n<p>So far, you have been rendering React components on the client. Normally, this is what you will always do. However, there are some use cases where it makes sense to render a React component on the server. Since React is a JavaScript view library and you can run JavaScript on the server with Node, this is possible. In fact, React provides a <code>renderToString()</code> method you can use for this purpose.</p>\n<p>There are two key reasons why rendering on the server may be used in a real world app. First, without doing this, your React apps would consist of a relatively empty HTML file and a large bundle of JavaScript when it's initially loaded to the browser. This may not be ideal for search engines that are trying to index the content of your pages so people can find you. If you render the initial HTML markup on the server and send this to the client, the initial page load contains all of the page's markup which can be crawled by search engines. Second, this creates a faster initial page load experience because the rendered HTML is smaller than the JavaScript code of the entire app. React will still be able to recognize your app and manage it after the initial load.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The <code>renderToString()</code> method is provided on <code>ReactDOMServer</code>, which is available here as a global object. The method takes one argument which is a React element. Use this to render <code>App</code> to a string.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":46,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036172","title":"Render State in the User Interface Another Way","challengeType":6,"forumTopicId":301408,"dashedName":"render-state-in-the-user-interface-another-way","challengeFiles":[{"head":"","tail":"ReactDOM.render(<MyComponent />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n    // Change code below this line\n\n    // Change code above this line\n    return (\n      <div>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n    // Change code below this line\n\n    // Change code above this line\n    return (\n      <div>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n    // Change code below this line\n    const name = this.state.name;\n    // Change code above this line\n    return (\n      <div>\n        { /* Change code below this line */ }\n        <h1>{name}</h1>\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n    // Change code below this line\n    const name = this.state.name;\n    // Change code above this line\n    return (\n      <div>\n        { /* Change code below this line */ }\n        <h1>{name}</h1>\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"}]],"tests":[{"text":"<p><code>MyComponent</code> should have a key <code>name</code> with value <code>freeCodeCamp</code> stored in its state.</p>","testString":"assert(\n  Enzyme.mount(React.createElement(MyComponent)).state('name') ===\n    'freeCodeCamp'\n);"},{"text":"<p><code>MyComponent</code> should render an <code>h1</code> heading element enclosed in a single <code>div</code>.</p>","testString":"assert(\n  /<div><h1>.*<\\/h1><\\/div>/.test(\n    Enzyme.mount(React.createElement(MyComponent)).html()\n  )\n);"},{"text":"<p>The rendered <code>h1</code> tag should include a reference to <code>{name}</code>.</p>","testString":"(getUserInput) =>\n  assert(/<h1>\\n*\\s*\\{\\s*name\\s*\\}\\s*\\n*<\\/h1>/.test(getUserInput('index')));"},{"text":"<p>The rendered <code>h1</code> heading element should contain text rendered from the component's state.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const first = () => {\n    mockedComponent.setState({ name: 'TestName' });\n    return waitForIt(() => mockedComponent.html());\n  };\n  const firstValue = await first();\n  assert(firstValue === '<div><h1>TestName</h1></div>');\n};"}],"description":"<section id=\"description\">\n<p>There is another way to access <code>state</code> in a component. In the <code>render()</code> method, before the <code>return</code> statement, you can write JavaScript directly. For example, you could declare functions, access data from <code>state</code> or <code>props</code>, perform computations on this data, and so on. Then, you can assign any data to variables, which you have access to in the <code>return</code> statement.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>In the <code>MyComponent</code> render method, define a <code>const</code> called <code>name</code> and set it equal to the name value in the component's <code>state</code>. Because you can write JavaScript directly in this part of the code, you don't have to enclose this reference in curly braces.</p>\n<p>Next, in the return statement, render this value in an <code>h1</code> tag using the variable <code>name</code>. Remember, you need to use the JSX syntax (curly braces for JavaScript) in the return statement.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":22,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036171","title":"Render State in the User Interface","challengeType":6,"forumTopicId":301409,"dashedName":"render-state-in-the-user-interface","challengeFiles":[{"head":"","tail":"ReactDOM.render(<MyComponent />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n    return (\n      <div>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n    return (\n      <div>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n    return (\n      <div>\n        { /* Change code below this line */ }\n        <h1>{this.state.name}</h1>\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n    return (\n      <div>\n        { /* Change code below this line */ }\n        <h1>{this.state.name}</h1>\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"}]],"tests":[{"text":"<p><code>MyComponent</code> should have a key <code>name</code> with value <code>freeCodeCamp</code> stored in its state.</p>","testString":"assert(\n  Enzyme.mount(React.createElement(MyComponent)).state('name') ===\n    'freeCodeCamp'\n);"},{"text":"<p><code>MyComponent</code> should render an <code>h1</code> heading element enclosed in a single <code>div</code>.</p>","testString":"assert(\n  /<div><h1>.*<\\/h1><\\/div>/.test(\n    Enzyme.mount(React.createElement(MyComponent)).html()\n  )\n);"},{"text":"<p>The rendered <code>h1</code> heading element should only contain text rendered from the component's state.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const first = () => {\n    mockedComponent.setState({ name: 'TestName' });\n    return waitForIt(() => mockedComponent.html());\n  };\n  const firstValue = await first();\n  const getValue = firstValue.replace(/\\s/g, '');\n  assert(getValue === '<div><h1>TestName</h1></div>');\n};"}],"description":"<section id=\"description\">\n<p>Once you define a component's initial state, you can display any part of it in the UI that is rendered. If a component is stateful, it will always have access to the data in <code>state</code> in its <code>render()</code> method. You can access the data with <code>this.state</code>.</p>\n<p>If you want to access a state value within the <code>return</code> of the render method, you have to enclose the value in curly braces.</p>\n<p><code>state</code> is one of the most powerful features of components in React. It allows you to track important data in your app and render a UI in response to changes in this data. If your data changes, your UI will change. React uses what is called a virtual DOM, to keep track of changes behind the scenes. When state data updates, it triggers a re-render of the components using that data - including child components that received the data as a prop. React updates the actual DOM, but only where necessary. This means you don't have to worry about changing the DOM. You simply declare what the UI should look like.</p>\n<p>Note that if you make a component stateful, no other components are aware of its <code>state</code>. Its <code>state</code> is completely encapsulated, or local to that component, unless you pass state data to a child component as <code>props</code>. This notion of encapsulated <code>state</code> is very important because it allows you to write certain logic, then have that logic contained and isolated in one place in your code.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>In the code editor, <code>MyComponent</code> is already stateful. Define an <code>h1</code> tag in the component's render method which renders the value of <code>name</code> from the component's state.</p>\n<p><strong>Note:</strong> The <code>h1</code> should only render the value from <code>state</code> and nothing else. In JSX, any code you write with curly braces <code>{ }</code> will be treated as JavaScript. So to access the value from <code>state</code> just enclose the reference in curly braces.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":21,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036184","title":"Render with an If-Else Condition","challengeType":6,"forumTopicId":301410,"dashedName":"render-with-an-if-else-condition","challengeFiles":[{"head":"","tail":"ReactDOM.render(<MyComponent />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n    this.toggleDisplay = this.toggleDisplay.bind(this);\n  }\n  toggleDisplay() {\n    this.setState((state) => ({\n      display: !state.display\n    }));\n  }\n  render() {\n    // Change code below this line\n\n    return (\n       <div>\n         <button onClick={this.toggleDisplay}>Toggle Display</button>\n         <h1>Displayed!</h1>\n       </div>\n    );\n  }\n};","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n    this.toggleDisplay = this.toggleDisplay.bind(this);\n  }\n  toggleDisplay() {\n    this.setState((state) => ({\n      display: !state.display\n    }));\n  }\n  render() {\n    // Change code below this line\n\n    return (\n       <div>\n         <button onClick={this.toggleDisplay}>Toggle Display</button>\n         <h1>Displayed!</h1>\n       </div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n this.toggleDisplay = this.toggleDisplay.bind(this);\n }\n  toggleDisplay() {\n    this.setState((state) => ({\n      display: !state.display\n    }));\n  }\n  render() {\n    // Change code below this line\n    if (this.state.display) {\n      return (\n         <div>\n           <button onClick={this.toggleDisplay}>Toggle Display</button>\n           <h1>Displayed!</h1>\n         </div>\n      );\n    } else {\n      return (\n        <div>\n           <button onClick={this.toggleDisplay}>Toggle Display</button>\n         </div>\n      );\n    }\n  }\n};","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n this.toggleDisplay = this.toggleDisplay.bind(this);\n }\n  toggleDisplay() {\n    this.setState((state) => ({\n      display: !state.display\n    }));\n  }\n  render() {\n    // Change code below this line\n    if (this.state.display) {\n      return (\n         <div>\n           <button onClick={this.toggleDisplay}>Toggle Display</button>\n           <h1>Displayed!</h1>\n         </div>\n      );\n    } else {\n      return (\n        <div>\n           <button onClick={this.toggleDisplay}>Toggle Display</button>\n         </div>\n      );\n    }\n  }\n};"}]],"tests":[{"text":"<p><code>MyComponent</code> should exist and render.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return mockedComponent.find('MyComponent').length === 1;\n  })()\n);"},{"text":"<p>When <code>display</code> is set to <code>true</code>, a <code>div</code>, <code>button</code>, and <code>h1</code> should render.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const state_1 = () => {\n    mockedComponent.setState({ display: true });\n    return waitForIt(() => mockedComponent);\n  };\n  const updated = await state_1();\n  assert(\n    mockedComponent.find('div').length === 1 &&\n      mockedComponent.find('div').children().length === 2 &&\n      mockedComponent.find('button').length === 1 &&\n      mockedComponent.find('h1').length === 1\n  );\n};"},{"text":"<p>When <code>display</code> is set to <code>false</code>, only a <code>div</code> and <code>button</code> should render.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const state_1 = () => {\n    mockedComponent.setState({ display: false });\n    return waitForIt(() => mockedComponent);\n  };\n  const updated = await state_1();\n  assert(\n    mockedComponent.find('div').length === 1 &&\n      mockedComponent.find('div').children().length === 1 &&\n      mockedComponent.find('button').length === 1 &&\n      mockedComponent.find('h1').length === 0\n  );\n};"},{"text":"<p>The render method should use an <code>if/else</code> statement to check the condition of <code>this.state.display</code>.</p>","testString":"(getUserInput) =>\n  assert(\n    getUserInput('index').includes('if') &&\n      getUserInput('index').includes('else')\n  );"}],"description":"<section id=\"description\">\n<p>Another application of using JavaScript to control your rendered view is to tie the elements that are rendered to a condition. When the condition is true, one view renders. When it's false, it's a different view. You can do this with a standard <code>if/else</code> statement in the <code>render()</code> method of a React component.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>MyComponent contains a <code>boolean</code> in its state which tracks whether you want to display some element in the UI or not. The <code>button</code> toggles the state of this value. Currently, it renders the same UI every time. Rewrite the <code>render()</code> method with an <code>if/else</code> statement so that if <code>display</code> is <code>true</code>, you return the current markup. Otherwise, return the markup without the <code>h1</code> element.</p>\n<p><strong>Note:</strong> You must write an <code>if/else</code> to pass the tests. Use of the ternary operator will not pass here.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":38,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403616f","title":"Review Using Props with Stateless Functional Components","challengeType":6,"forumTopicId":301411,"dashedName":"review-using-props-with-stateless-functional-components","challengeFiles":[{"head":"var PropTypes = {\n   string: { isRequired: true }\n};","tail":"ReactDOM.render(<CampSite />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class CampSite extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <Camper/>\n      </div>\n    );\n  }\n};\n// Change code below this line","error":null,"seed":"class CampSite extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <Camper/>\n      </div>\n    );\n  }\n};\n// Change code below this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class CampSite extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <Camper/>\n      </div>\n    );\n  }\n};\n// Change code below this line\n\nconst Camper = (props) => {\n   return (\n     <div>\n       <p>{props.name}</p>\n     </div>\n   );\n};\n\nCamper.propTypes = {\n  name: PropTypes.string.isRequired\n};\n\nCamper.defaultProps = {\n  name: 'CamperBot'\n};","error":null,"seed":"class CampSite extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <Camper/>\n      </div>\n    );\n  }\n};\n// Change code below this line\n\nconst Camper = (props) => {\n   return (\n     <div>\n       <p>{props.name}</p>\n     </div>\n   );\n};\n\nCamper.propTypes = {\n  name: PropTypes.string.isRequired\n};\n\nCamper.defaultProps = {\n  name: 'CamperBot'\n};"}]],"tests":[{"text":"<p>The <code>CampSite</code> component should render.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(CampSite));\n    return mockedComponent.find('CampSite').length === 1;\n  })()\n);"},{"text":"<p>The <code>Camper</code> component should render.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(CampSite));\n    return mockedComponent.find('Camper').length === 1;\n  })()\n);"},{"text":"<p>The <code>Camper</code> component should include default props which assign the string <code>CamperBot</code> to the key <code>name</code>.</p>","testString":"assert(\n  /Camper.defaultProps={name:(['\"`])CamperBot\\1,?}/.test(\n    __helpers.removeWhiteSpace(code)\n  )\n);"},{"text":"<p>The <code>Camper</code> component should include prop types which require the <code>name</code> prop to be of type <code>string</code>.</p>","testString":"assert(\n  /Camper.propTypes={name:PropTypes.string.isRequired,?}/.test(\n    __helpers.removeWhiteSpace(code)\n  )\n);"},{"text":"<p>The <code>Camper</code> component should contain a <code>p</code> element with only the text from the <code>name</code> prop.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(CampSite));\n    return (\n      mockedComponent.find('p').text() ===\n      mockedComponent.find('Camper').props().name\n    );\n  })()\n);"}],"description":"<section id=\"description\">\n<p>Except for the last challenge, you've been passing props to stateless functional components. These components act like pure functions. They accept props as input and return the same view every time they are passed the same props. You may be wondering what state is, and the next challenge will cover it in more detail. Before that, here's a review of the terminology for components.</p>\n<p>A <em>stateless functional component</em> is any function you write which accepts props and returns JSX. A <em>stateless component</em>, on the other hand, is a class that extends <code>React.Component</code>, but does not use internal state (covered in the next challenge). Finally, a <em>stateful component</em> is a class component that does maintain its own internal state. You may see stateful components referred to simply as components or React components.</p>\n<p>A common pattern is to try to minimize statefulness and to create stateless functional components wherever possible. This helps contain your state management to a specific area of your application. In turn, this improves development and maintenance of your app by making it easier to follow how changes to state affect its behavior.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The code editor has a <code>CampSite</code> component that renders a <code>Camper</code> component as a child. Define the <code>Camper</code> component and assign it default props of <code>{ name: 'CamperBot' }</code>. Inside the <code>Camper</code> component, render any code that you want, but make sure to have one <code>p</code> element that includes only the <code>name</code> value that is passed in as a <code>prop</code>. Finally, define <code>propTypes</code> on the <code>Camper</code> component to require <code>name</code> to be provided as a prop and verify that it is of type <code>string</code>.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":19,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036173","title":"Set State with this.setState","challengeType":6,"forumTopicId":301412,"dashedName":"set-state-with-this-setstate","challengeFiles":[{"head":"","tail":"ReactDOM.render(<MyComponent />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'Initial State'\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    // Change code below this line\n\n    // Change code above this line\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Click Me</button>\n        <h1>{this.state.name}</h1>\n      </div>\n    );\n  }\n};","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'Initial State'\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    // Change code below this line\n\n    // Change code above this line\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Click Me</button>\n        <h1>{this.state.name}</h1>\n      </div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'Initial State'\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n     // Change code below this line\n    this.setState({\n      name: 'React Rocks!'\n    });\n    // Change code above this line\n  }\n  render() {\n    return (\n      <div>\n        <button onClick = {this.handleClick}>Click Me</button>\n        <h1>{this.state.name}</h1>\n      </div>\n    );\n  }\n};","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'Initial State'\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n     // Change code below this line\n    this.setState({\n      name: 'React Rocks!'\n    });\n    // Change code above this line\n  }\n  render() {\n    return (\n      <div>\n        <button onClick = {this.handleClick}>Click Me</button>\n        <h1>{this.state.name}</h1>\n      </div>\n    );\n  }\n};"}]],"tests":[{"text":"<p>The state of <code>MyComponent</code> should initialize with the key value pair <code>{ name: Initial State }</code>.</p>","testString":"assert(\n  Enzyme.mount(React.createElement(MyComponent)).state('name') ===\n    'Initial State'\n);"},{"text":"<p><code>MyComponent</code> should render an <code>h1</code> heading element.</p>","testString":"assert(Enzyme.mount(React.createElement(MyComponent)).find('h1').length === 1);"},{"text":"<p>The rendered <code>h1</code> heading element should contain text rendered from the component's state.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const first = () => {\n    mockedComponent.setState({ name: 'TestName' });\n    return waitForIt(() => mockedComponent.html());\n  };\n  const firstValue = await first();\n  assert(/<h1>TestName<\\/h1>/.test(firstValue));\n};"},{"text":"<p>Calling the <code>handleClick</code> method on <code>MyComponent</code> should set the name property in state to equal <code>React Rocks!</code>.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const first = () => {\n    mockedComponent.setState({ name: 'Before' });\n    return waitForIt(() => mockedComponent.state('name'));\n  };\n  const second = () => {\n    mockedComponent.instance().handleClick();\n    return waitForIt(() => mockedComponent.state('name'));\n  };\n  const firstValue = await first();\n  const secondValue = await second();\n  assert(firstValue === 'Before' && secondValue === 'React Rocks!');\n};"}],"description":"<section id=\"description\">\n<p>The previous challenges covered component <code>state</code> and how to initialize state in the <code>constructor</code>. There is also a way to change the component's <code>state</code>. React provides a method for updating component <code>state</code> called <code>setState</code>. You call the <code>setState</code> method within your component class like so: <code>this.setState()</code>, passing in an object with key-value pairs. The keys are your state properties and the values are the updated state data. For instance, if we were storing a <code>username</code> in state and wanted to update it, it would look like this:</p>\n<pre><code class=\"language-jsx\">this.setState({\n  username: 'Lewis'\n});\n</code></pre>\n<p>React expects you to never modify <code>state</code> directly, instead always use <code>this.setState()</code> when state changes occur. Also, you should note that React may batch multiple state updates in order to improve performance. What this means is that state updates through the <code>setState</code> method can be asynchronous. There is an alternative syntax for the <code>setState</code> method which provides a way around this problem. This is rarely needed but it's good to keep it in mind! Please consult our <a href=\"https://www.freecodecamp.org/news/what-is-state-in-react-explained-with-examples/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">React article</a> for further details.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>There is a <code>button</code> element in the code editor which has an <code>onClick()</code> handler. This handler is triggered when the <code>button</code> receives a click event in the browser, and runs the <code>handleClick</code> method defined on <code>MyComponent</code>. Within the <code>handleClick</code> method, update the component <code>state</code> using <code>this.setState()</code>. Set the <code>name</code> property in <code>state</code> to equal the string <code>React Rocks!</code>.</p>\n<p>Click the button and watch the rendered state update. Don't worry if you don't fully understand how the click handler code works at this point. It's covered in upcoming challenges.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":23,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036185","title":"Use && for a More Concise Conditional","challengeType":6,"forumTopicId":301413,"dashedName":"use--for-a-more-concise-conditional","challengeFiles":[{"head":"","tail":"ReactDOM.render(<MyComponent />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n    this.toggleDisplay = this.toggleDisplay.bind(this);\n  }\n  toggleDisplay() {\n    this.setState(state => ({\n      display: !state.display\n    }));\n  }\n  render() {\n    // Change code below this line\n    return (\n       <div>\n         <button onClick={this.toggleDisplay}>Toggle Display</button>\n         <h1>Displayed!</h1>\n       </div>\n    );\n  }\n};","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n    this.toggleDisplay = this.toggleDisplay.bind(this);\n  }\n  toggleDisplay() {\n    this.setState(state => ({\n      display: !state.display\n    }));\n  }\n  render() {\n    // Change code below this line\n    return (\n       <div>\n         <button onClick={this.toggleDisplay}>Toggle Display</button>\n         <h1>Displayed!</h1>\n       </div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n this.toggleDisplay = this.toggleDisplay.bind(this);\n  }\n  toggleDisplay() {\n    this.setState(state => ({\n      display: !state.display\n    }));\n  }\n  render() {\n    // Change code below this line\n    return (\n       <div>\n         <button onClick={this.toggleDisplay}>Toggle Display</button>\n         {this.state.display && <h1>Displayed!</h1>}\n       </div>\n    );\n  }\n};","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n this.toggleDisplay = this.toggleDisplay.bind(this);\n  }\n  toggleDisplay() {\n    this.setState(state => ({\n      display: !state.display\n    }));\n  }\n  render() {\n    // Change code below this line\n    return (\n       <div>\n         <button onClick={this.toggleDisplay}>Toggle Display</button>\n         {this.state.display && <h1>Displayed!</h1>}\n       </div>\n    );\n  }\n};"}]],"tests":[{"text":"<p><code>MyComponent</code> should exist and render.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return mockedComponent.find('MyComponent').length;\n  })()\n);"},{"text":"<p>When <code>display</code> is set to <code>true</code>, a <code>div</code>, <code>button</code>, and <code>h1</code> should render.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const state_1 = () => {\n    mockedComponent.setState({ display: true });\n    return waitForIt(() => mockedComponent);\n  };\n  const updated = await state_1();\n  assert(\n    updated.find('div').length === 1 &&\n      updated.find('div').children().length === 2 &&\n      updated.find('button').length === 1 &&\n      updated.find('h1').length === 1\n  );\n};"},{"text":"<p>When <code>display</code> is set to <code>false</code>, only a <code>div</code> and <code>button</code> should render.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const state_1 = () => {\n    mockedComponent.setState({ display: false });\n    return waitForIt(() => mockedComponent);\n  };\n  const updated = await state_1();\n  assert(\n    updated.find('div').length === 1 &&\n      updated.find('div').children().length === 1 &&\n      updated.find('button').length === 1 &&\n      updated.find('h1').length === 0\n  );\n};"},{"text":"<p>The render method should use the <code>&#x26;&#x26;</code> logical operator to check the condition of <code>this.state.display</code>.</p>","testString":"(getUserInput) => assert(getUserInput('index').includes('&&'));"}],"description":"<section id=\"description\">\n<p>The <code>if/else</code> statements worked in the last challenge, but there's a more concise way to achieve the same result. Imagine that you are tracking several conditions in a component and you want different elements to render depending on each of these conditions. If you write a lot of <code>else if</code> statements to return slightly different UIs, you may repeat code which leaves room for error. Instead, you can use the <code>&#x26;&#x26;</code> logical operator to perform conditional logic in a more concise way. This is possible because you want to check if a condition is <code>true</code>, and if it is, return some markup. Here's an example:</p>\n<pre><code class=\"language-jsx\">{condition &#x26;&#x26; &#x3C;p>markup&#x3C;/p>}\n</code></pre>\n<p>If the <code>condition</code> is <code>true</code>, the markup will be returned. If the condition is <code>false</code>, the operation will immediately return <code>false</code> after evaluating the <code>condition</code> and return nothing. You can include these statements directly in your JSX and string multiple conditions together by writing <code>&#x26;&#x26;</code> after each one. This allows you to handle more complex conditional logic in your <code>render()</code> method without repeating a lot of code.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Solve the previous example again, so the <code>h1</code> only renders if <code>display</code> is <code>true</code>, but use the <code>&#x26;&#x26;</code> logical operator instead of an <code>if/else</code> statement.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":39,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036187","title":"Use a Ternary Expression for Conditional Rendering","challengeType":6,"forumTopicId":301414,"dashedName":"use-a-ternary-expression-for-conditional-rendering","challengeFiles":[{"head":"","tail":"ReactDOM.render(<CheckUserAge />, document.getElementById('root'));","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const inputStyle = {\n  width: 235,\n  margin: 5\n};\n\nclass CheckUserAge extends React.Component {\n  constructor(props) {\n    super(props);\n    // Change code below this line\n\n    // Change code above this line\n    this.submit = this.submit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      input: e.target.value,\n      userAge: ''\n    });\n  }\n  submit() {\n    this.setState(state => ({\n      userAge: state.input\n    }));\n  }\n  render() {\n    const buttonOne = <button onClick={this.submit}>Submit</button>;\n    const buttonTwo = <button>You May Enter</button>;\n    const buttonThree = <button>You Shall Not Pass</button>;\n    return (\n      <div>\n        <h3>Enter Your Age to Continue</h3>\n        <input\n          style={inputStyle}\n          type='number'\n          value={this.state.input}\n          onChange={this.handleChange}\n        />\n        <br />\n        {/* Change code below this line */}\n\n        {/* Change code above this line */}\n      </div>\n    );\n  }\n}","error":null,"seed":"const inputStyle = {\n  width: 235,\n  margin: 5\n};\n\nclass CheckUserAge extends React.Component {\n  constructor(props) {\n    super(props);\n    // Change code below this line\n\n    // Change code above this line\n    this.submit = this.submit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      input: e.target.value,\n      userAge: ''\n    });\n  }\n  submit() {\n    this.setState(state => ({\n      userAge: state.input\n    }));\n  }\n  render() {\n    const buttonOne = <button onClick={this.submit}>Submit</button>;\n    const buttonTwo = <button>You May Enter</button>;\n    const buttonThree = <button>You Shall Not Pass</button>;\n    return (\n      <div>\n        <h3>Enter Your Age to Continue</h3>\n        <input\n          style={inputStyle}\n          type='number'\n          value={this.state.input}\n          onChange={this.handleChange}\n        />\n        <br />\n        {/* Change code below this line */}\n\n        {/* Change code above this line */}\n      </div>\n    );\n  }\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const inputStyle = {\n  width: 235,\n  margin: 5\n};\n\nclass CheckUserAge extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAge: '',\n      input: ''\n    };\n    this.submit = this.submit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      input: e.target.value,\n      userAge: ''\n    });\n  }\n  submit() {\n    this.setState(state => ({\n      userAge: state.input\n    }));\n  }\n  render() {\n    const buttonOne = <button onClick={this.submit}>Submit</button>;\n    const buttonTwo = <button>You May Enter</button>;\n    const buttonThree = <button>You Shall Not Pass</button>;\n    return (\n      <div>\n        <h3>Enter Your Age to Continue</h3>\n        <input\n          style={inputStyle}\n          type='number'\n          value={this.state.input}\n          onChange={this.handleChange}\n        />\n        <br />\n        {this.state.userAge === ''\n          ? buttonOne\n          : this.state.userAge >= 18\n          ? buttonTwo\n          : buttonThree}\n      </div>\n    );\n  }\n}","error":null,"seed":"const inputStyle = {\n  width: 235,\n  margin: 5\n};\n\nclass CheckUserAge extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAge: '',\n      input: ''\n    };\n    this.submit = this.submit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      input: e.target.value,\n      userAge: ''\n    });\n  }\n  submit() {\n    this.setState(state => ({\n      userAge: state.input\n    }));\n  }\n  render() {\n    const buttonOne = <button onClick={this.submit}>Submit</button>;\n    const buttonTwo = <button>You May Enter</button>;\n    const buttonThree = <button>You Shall Not Pass</button>;\n    return (\n      <div>\n        <h3>Enter Your Age to Continue</h3>\n        <input\n          style={inputStyle}\n          type='number'\n          value={this.state.input}\n          onChange={this.handleChange}\n        />\n        <br />\n        {this.state.userAge === ''\n          ? buttonOne\n          : this.state.userAge >= 18\n          ? buttonTwo\n          : buttonThree}\n      </div>\n    );\n  }\n}"}]],"tests":[{"text":"<p>The <code>CheckUserAge</code> component should render with a single <code>input</code> element and a single <code>button</code> element.</p>","testString":"assert(\n  Enzyme.mount(React.createElement(CheckUserAge)).find('div').find('input')\n    .length === 1 &&\n    Enzyme.mount(React.createElement(CheckUserAge)).find('div').find('button')\n      .length === 1\n);"},{"text":"<p>The <code>CheckUserAge</code> component's state should be initialized with a property of <code>userAge</code> and a property of <code>input</code>, both set to a value of an empty string.</p>","testString":"assert(\n  Enzyme.mount(React.createElement(CheckUserAge)).state().input === '' &&\n    Enzyme.mount(React.createElement(CheckUserAge)).state().userAge === ''\n);"},{"text":"<p>When the <code>CheckUserAge</code> component is first rendered to the DOM, the <code>button</code>'s inner text should be Submit.</p>","testString":"assert(\n  Enzyme.mount(React.createElement(CheckUserAge)).find('button').text() ===\n    'Submit'\n);"},{"text":"<p>When a number of less than 18 is entered into the <code>input</code> element and the <code>button</code> is clicked, the <code>button</code>'s inner text should read <code>You Shall Not Pass</code>.</p>","testString":"(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(CheckUserAge));\n  const initialButton = mockedComponent.find('button').text();\n  const enter3AndClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '3' } });\n    mockedComponent.find('button').simulate('click');\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const enter17AndClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '17' } });\n    mockedComponent.find('button').simulate('click');\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const userAge3 = enter3AndClickButton();\n  const userAge17 = enter17AndClickButton();\n  assert(\n    initialButton === 'Submit' &&\n      userAge3 === 'You Shall Not Pass' &&\n      userAge17 === 'You Shall Not Pass'\n  );\n})();"},{"text":"<p>When a number greater than or equal to 18 is entered into the <code>input</code> element and the <code>button</code> is clicked, the <code>button</code>'s inner text should read <code>You May Enter</code>.</p>","testString":"(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(CheckUserAge));\n  const initialButton = mockedComponent.find('button').text();\n  const enter18AndClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '18' } });\n    mockedComponent.find('button').simulate('click');\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const enter35AndClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '35' } });\n    mockedComponent.find('button').simulate('click');\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const userAge18 = enter18AndClickButton();\n  const userAge35 = enter35AndClickButton();\n  assert(\n    initialButton === 'Submit' &&\n      userAge18 === 'You May Enter' &&\n      userAge35 === 'You May Enter'\n  );\n})();"},{"text":"<p>Once a number has been submitted, and the value of the <code>input</code> is once again changed, the <code>button</code> should return to reading <code>Submit</code>.</p>","testString":"(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(CheckUserAge));\n  const enter18AndClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '18' } });\n    mockedComponent.find('button').simulate('click');\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const changeInputDontClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '5' } });\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const enter10AndClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '10' } });\n    mockedComponent.find('button').simulate('click');\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const userAge18 = enter18AndClickButton();\n  const changeInput1 = changeInputDontClickButton();\n  const userAge10 = enter10AndClickButton();\n  const changeInput2 = changeInputDontClickButton();\n  assert(\n    userAge18 === 'You May Enter' &&\n      changeInput1 === 'Submit' &&\n      userAge10 === 'You Shall Not Pass' &&\n      changeInput2 === 'Submit'\n  );\n})();"},{"text":"<p>Your code should not contain any <code>if/else</code> statements.</p>","testString":"assert(\n  new RegExp(/(\\s|;)if(\\s|\\()/).test(\n    code\n  ) === false\n);"}],"description":"<section id=\"description\">\n<p>Before moving on to dynamic rendering techniques, there's one last way to use built-in JavaScript conditionals to render what you want: the <dfn>ternary operator</dfn>. The ternary operator is often utilized as a shortcut for <code>if/else</code> statements in JavaScript. They're not quite as robust as traditional <code>if/else</code> statements, but they are very popular among React developers. One reason for this is because of how JSX is compiled, <code>if/else</code> statements can't be inserted directly into JSX code. You might have noticed this a couple challenges ago — when an <code>if/else</code> statement was required, it was always <em>outside</em> the <code>return</code> statement. Ternary expressions can be an excellent alternative if you want to implement conditional logic within your JSX. Recall that a ternary operator has three parts, but you can combine several ternary expressions together. Here's the basic syntax:</p>\n<pre><code class=\"language-jsx\">condition ? expressionIfTrue : expressionIfFalse;\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>The code editor has three constants defined within the <code>CheckUserAge</code> component's <code>render()</code> method. They are called <code>buttonOne</code>, <code>buttonTwo</code>, and <code>buttonThree</code>. Each of these is assigned a simple JSX expression representing a button element. First, initialize the state of <code>CheckUserAge</code> with <code>input</code> and <code>userAge</code> both set to values of an empty string.</p>\n<p>Once the component is rendering information to the page, users should have a way to interact with it. Within the component's <code>return</code> statement, set up a ternary expression that implements the following logic: when the page first loads, render the submit button, <code>buttonOne</code>, to the page. Then, when a user enters their age and clicks the button, render a different button based on the age. If a user enters a number less than <code>18</code>, render <code>buttonThree</code>. If a user enters a number greater than or equal to <code>18</code>, render <code>buttonTwo</code>.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":40,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036183","title":"Use Advanced JavaScript in React Render Method","challengeType":6,"forumTopicId":301415,"dashedName":"use-advanced-javascript-in-react-render-method","challengeFiles":[{"head":"","tail":"var possibleAnswers = [\n  'It is certain',\n  'It is decidedly so',\n  'Without a doubt',\n  'Yes, definitely',\n  'You may rely on it',\n  'As I see it, yes',\n  'Outlook good',\n  'Yes',\n  'Signs point to yes',\n  'Reply hazy try again',\n  'Ask again later',\n  'Better not tell you now',\n  'Cannot predict now',\n  'Concentrate and ask again',\n  \"Don't count on it\",\n  'My reply is no',\n  'My sources say no',\n  'Outlook not so good',\n  'Very doubtful',\n  'Most likely'\n];\nReactDOM.render(<MagicEightBall />, document.getElementById('root'));","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const inputStyle = {\n  width: 235,\n  margin: 5\n};\n\nclass MagicEightBall extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: '',\n      randomIndex: ''\n    };\n    this.ask = this.ask.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  ask() {\n    if (this.state.userInput) {\n      this.setState({\n        randomIndex: Math.floor(Math.random() * 20),\n        userInput: ''\n      });\n    }\n  }\n  handleChange(event) {\n    this.setState({\n      userInput: event.target.value\n    });\n  }\n  render() {\n    const possibleAnswers = [\n      'It is certain',\n      'It is decidedly so',\n      'Without a doubt',\n      'Yes, definitely',\n      'You may rely on it',\n      'As I see it, yes',\n      'Outlook good',\n      'Yes',\n      'Signs point to yes',\n      'Reply hazy try again',\n      'Ask again later',\n      'Better not tell you now',\n      'Cannot predict now',\n      'Concentrate and ask again',\n      \"Don't count on it\",\n      'My reply is no',\n      'My sources say no',\n      'Most likely',\n      'Outlook not so good',\n      'Very doubtful'\n    ];\n    const answer = 'change me!'; // Change this line\n    return (\n      <div>\n        <input\n          type='text'\n          value={this.state.userInput}\n          onChange={this.handleChange}\n          style={inputStyle}\n        />\n        <br />\n        <button onClick={this.ask}>Ask the Magic Eight Ball!</button>\n        <br />\n        <h3>Answer:</h3>\n        <p>\n          {/* Change code below this line */}\n\n          {/* Change code above this line */}\n        </p>\n      </div>\n    );\n  }\n}","error":null,"seed":"const inputStyle = {\n  width: 235,\n  margin: 5\n};\n\nclass MagicEightBall extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: '',\n      randomIndex: ''\n    };\n    this.ask = this.ask.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  ask() {\n    if (this.state.userInput) {\n      this.setState({\n        randomIndex: Math.floor(Math.random() * 20),\n        userInput: ''\n      });\n    }\n  }\n  handleChange(event) {\n    this.setState({\n      userInput: event.target.value\n    });\n  }\n  render() {\n    const possibleAnswers = [\n      'It is certain',\n      'It is decidedly so',\n      'Without a doubt',\n      'Yes, definitely',\n      'You may rely on it',\n      'As I see it, yes',\n      'Outlook good',\n      'Yes',\n      'Signs point to yes',\n      'Reply hazy try again',\n      'Ask again later',\n      'Better not tell you now',\n      'Cannot predict now',\n      'Concentrate and ask again',\n      \"Don't count on it\",\n      'My reply is no',\n      'My sources say no',\n      'Most likely',\n      'Outlook not so good',\n      'Very doubtful'\n    ];\n    const answer = 'change me!'; // Change this line\n    return (\n      <div>\n        <input\n          type='text'\n          value={this.state.userInput}\n          onChange={this.handleChange}\n          style={inputStyle}\n        />\n        <br />\n        <button onClick={this.ask}>Ask the Magic Eight Ball!</button>\n        <br />\n        <h3>Answer:</h3>\n        <p>\n          {/* Change code below this line */}\n\n          {/* Change code above this line */}\n        </p>\n      </div>\n    );\n  }\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const inputStyle = {\n  width: 235,\n  margin: 5\n};\n\nclass MagicEightBall extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: '',\n      randomIndex: ''\n    };\n    this.ask = this.ask.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  ask() {\n    if (this.state.userInput) {\n      this.setState({\n        randomIndex: Math.floor(Math.random() * 20),\n        userInput: ''\n      });\n    }\n  }\n  handleChange(event) {\n    this.setState({\n      userInput: event.target.value\n    });\n  }\n  render() {\n    const possibleAnswers = [\n      'It is certain',\n      'It is decidedly so',\n      'Without a doubt',\n      'Yes, definitely',\n      'You may rely on it',\n      'As I see it, yes',\n      'Outlook good',\n      'Yes',\n      'Signs point to yes',\n      'Reply hazy try again',\n      'Ask again later',\n      'Better not tell you now',\n      'Cannot predict now',\n      'Concentrate and ask again',\n      \"Don't count on it\",\n      'My reply is no',\n      'My sources say no',\n      'Outlook not so good',\n      'Very doubtful',\n      'Most likely'\n    ];\n    const answer = possibleAnswers[this.state.randomIndex];\n    return (\n      <div>\n        <input\n          type='text'\n          value={this.state.userInput}\n          onChange={this.handleChange}\n          style={inputStyle}\n        />\n        <br />\n        <button onClick={this.ask}>Ask the Magic Eight Ball!</button>\n        <br />\n        <h3>Answer:</h3>\n        <p>{answer}</p>\n      </div>\n    );\n  }\n}","error":null,"seed":"const inputStyle = {\n  width: 235,\n  margin: 5\n};\n\nclass MagicEightBall extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: '',\n      randomIndex: ''\n    };\n    this.ask = this.ask.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  ask() {\n    if (this.state.userInput) {\n      this.setState({\n        randomIndex: Math.floor(Math.random() * 20),\n        userInput: ''\n      });\n    }\n  }\n  handleChange(event) {\n    this.setState({\n      userInput: event.target.value\n    });\n  }\n  render() {\n    const possibleAnswers = [\n      'It is certain',\n      'It is decidedly so',\n      'Without a doubt',\n      'Yes, definitely',\n      'You may rely on it',\n      'As I see it, yes',\n      'Outlook good',\n      'Yes',\n      'Signs point to yes',\n      'Reply hazy try again',\n      'Ask again later',\n      'Better not tell you now',\n      'Cannot predict now',\n      'Concentrate and ask again',\n      \"Don't count on it\",\n      'My reply is no',\n      'My sources say no',\n      'Outlook not so good',\n      'Very doubtful',\n      'Most likely'\n    ];\n    const answer = possibleAnswers[this.state.randomIndex];\n    return (\n      <div>\n        <input\n          type='text'\n          value={this.state.userInput}\n          onChange={this.handleChange}\n          style={inputStyle}\n        />\n        <br />\n        <button onClick={this.ask}>Ask the Magic Eight Ball!</button>\n        <br />\n        <h3>Answer:</h3>\n        <p>{answer}</p>\n      </div>\n    );\n  }\n}"}]],"tests":[{"text":"<p>The <code>MagicEightBall</code> component should exist and should render to the page.</p>","testString":"assert.strictEqual(\n  Enzyme.mount(React.createElement(MagicEightBall)).find('MagicEightBall')\n    .length,\n  1\n);"},{"text":"<p><code>MagicEightBall</code>'s first child should be an <code>input</code> element.</p>","testString":"assert.strictEqual(\n  Enzyme.mount(React.createElement(MagicEightBall))\n    .children()\n    .childAt(0)\n    .name(),\n  'input'\n);"},{"text":"<p><code>MagicEightBall</code>'s third child should be a <code>button</code> element.</p>","testString":"assert.strictEqual(\n  Enzyme.mount(React.createElement(MagicEightBall))\n    .children()\n    .childAt(2)\n    .name(),\n  'button'\n);"},{"text":"<p><code>MagicEightBall</code>'s state should be initialized with a property of <code>userInput</code> and a property of <code>randomIndex</code> both set to a value of an empty string.</p>","testString":"assert(\n  Enzyme.mount(React.createElement(MagicEightBall)).state('randomIndex') ===\n    '' &&\n    Enzyme.mount(React.createElement(MagicEightBall)).state('userInput') === ''\n);"},{"text":"<p>When <code>MagicEightBall</code> is first mounted to the DOM, it should return an empty <code>p</code> element.</p>","testString":"assert(\n  Enzyme.mount(React.createElement(MagicEightBall)).find('p').length === 1 &&\n    Enzyme.mount(React.createElement(MagicEightBall)).find('p').text() === ''\n);"},{"text":"<p>When text is entered into the <code>input</code> element and the button is clicked, the <code>MagicEightBall</code> component should return a <code>p</code> element that contains a random element from the <code>possibleAnswers</code> array.</p>","testString":"(() => {\n  const comp = Enzyme.mount(React.createElement(MagicEightBall));\n  const simulate = () => {\n    comp.find('input').simulate('change', { target: { value: 'test?' } });\n    comp.find('button').simulate('click');\n  };\n  const result = () => comp.find('p').text();\n  const _1 = () => {\n    simulate();\n    return result();\n  };\n  const _2 = () => {\n    simulate();\n    return result();\n  };\n  const _3 = () => {\n    simulate();\n    return result();\n  };\n  const _4 = () => {\n    simulate();\n    return result();\n  };\n  const _5 = () => {\n    simulate();\n    return result();\n  };\n  const _6 = () => {\n    simulate();\n    return result();\n  };\n  const _7 = () => {\n    simulate();\n    return result();\n  };\n  const _8 = () => {\n    simulate();\n    return result();\n  };\n  const _9 = () => {\n    simulate();\n    return result();\n  };\n  const _10 = () => {\n    simulate();\n    return result();\n  };\n  const _1_val = _1();\n  const _2_val = _2();\n  const _3_val = _3();\n  const _4_val = _4();\n  const _5_val = _5();\n  const _6_val = _6();\n  const _7_val = _7();\n  const _8_val = _8();\n  const _9_val = _9();\n  const _10_val = _10();\n  const actualAnswers = [\n    _1_val,\n    _2_val,\n    _3_val,\n    _4_val,\n    _5_val,\n    _6_val,\n    _7_val,\n    _8_val,\n    _9_val,\n    _10_val\n  ];\n  const hasIndex = actualAnswers.filter(\n    (answer, i) => possibleAnswers.indexOf(answer) !== -1\n  );\n  const notAllEqual = new Set(actualAnswers);\n  assert(notAllEqual.size > 1 && hasIndex.length === 10);\n})();"}],"description":"<section id=\"description\">\n<p>In previous challenges, you learned how to inject JavaScript code into JSX code using curly braces, <code>{ }</code>, for tasks like accessing props, passing props, accessing state, inserting comments into your code, and most recently, styling your components. These are all common use cases to put JavaScript in JSX, but they aren't the only way that you can utilize JavaScript code in your React components.</p>\n<p>You can also write JavaScript directly in your <code>render</code> methods, before the <code>return</code> statement, <em><strong>without</strong></em> inserting it inside of curly braces. This is because it is not yet within the JSX code. When you want to use a variable later in the JSX code <em>inside</em> the <code>return</code> statement, you place the variable name inside curly braces.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>In the code provided, the <code>render</code> method has an array that contains 20 phrases to represent the answers found in the classic 1980's Magic Eight Ball toy. The button click event is bound to the <code>ask</code> method, so each time the button is clicked a random number will be generated and stored as the <code>randomIndex</code> in state. On line 52, delete the string <code>change me!</code> and reassign the <code>answer</code> const so your code randomly accesses a different index of the <code>possibleAnswers</code> array each time the component updates. Finally, insert the <code>answer</code> const inside the <code>p</code> tags.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":37,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403618c","title":"Use Array.filter() to Dynamically Filter an Array","challengeType":6,"forumTopicId":301416,"dashedName":"use-array-filter-to-dynamically-filter-an-array","challengeFiles":[{"head":"","tail":"ReactDOM.render(<MyComponent />, document.getElementById('root'));","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [\n        {\n          username: 'Jeff',\n          online: true\n        },\n        {\n          username: 'Alan',\n          online: false\n        },\n        {\n          username: 'Mary',\n          online: true\n        },\n        {\n          username: 'Jim',\n          online: false\n        },\n        {\n          username: 'Sara',\n          online: true\n        },\n        {\n          username: 'Laura',\n          online: true\n        }\n      ]\n    };\n  }\n  render() {\n    const usersOnline = null; // Change this line\n    const renderOnline = null; // Change this line\n    return (\n      <div>\n        <h1>Current Online Users:</h1>\n        <ul>{renderOnline}</ul>\n      </div>\n    );\n  }\n}","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [\n        {\n          username: 'Jeff',\n          online: true\n        },\n        {\n          username: 'Alan',\n          online: false\n        },\n        {\n          username: 'Mary',\n          online: true\n        },\n        {\n          username: 'Jim',\n          online: false\n        },\n        {\n          username: 'Sara',\n          online: true\n        },\n        {\n          username: 'Laura',\n          online: true\n        }\n      ]\n    };\n  }\n  render() {\n    const usersOnline = null; // Change this line\n    const renderOnline = null; // Change this line\n    return (\n      <div>\n        <h1>Current Online Users:</h1>\n        <ul>{renderOnline}</ul>\n      </div>\n    );\n  }\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [\n        {\n          username: 'Jeff',\n          online: true\n        },\n        {\n          username: 'Alan',\n          online: false\n        },\n        {\n          username: 'Mary',\n          online: true\n        },\n        {\n          username: 'Jim',\n          online: false\n        },\n        {\n          username: 'Sara',\n          online: true\n        },\n        {\n          username: 'Laura',\n          online: true\n        }\n      ]\n    };\n  }\n  render() {\n    const usersOnline = this.state.users.filter(user => {\n      return user.online;\n    });\n    const renderOnline = usersOnline.map(user => {\n      return <li key={user.username}>{user.username}</li>;\n    });\n    return (\n      <div>\n        <h1>Current Online Users:</h1>\n        <ul>{renderOnline}</ul>\n      </div>\n    );\n  }\n}","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [\n        {\n          username: 'Jeff',\n          online: true\n        },\n        {\n          username: 'Alan',\n          online: false\n        },\n        {\n          username: 'Mary',\n          online: true\n        },\n        {\n          username: 'Jim',\n          online: false\n        },\n        {\n          username: 'Sara',\n          online: true\n        },\n        {\n          username: 'Laura',\n          online: true\n        }\n      ]\n    };\n  }\n  render() {\n    const usersOnline = this.state.users.filter(user => {\n      return user.online;\n    });\n    const renderOnline = usersOnline.map(user => {\n      return <li key={user.username}>{user.username}</li>;\n    });\n    return (\n      <div>\n        <h1>Current Online Users:</h1>\n        <ul>{renderOnline}</ul>\n      </div>\n    );\n  }\n}"}]],"tests":[{"text":"<p><code>MyComponent</code> should exist and render to the page.</p>","testString":"assert.strictEqual(\n  Enzyme.mount(React.createElement(MyComponent)).find('MyComponent').length,\n  1\n);"},{"text":"<p><code>MyComponent</code>'s state should be initialized to an array of six users.</p>","testString":"assert(\n  Array.isArray(\n    Enzyme.mount(React.createElement(MyComponent)).state('users')\n  ) === true &&\n    Enzyme.mount(React.createElement(MyComponent)).state('users').length === 6\n);"},{"text":"<p><code>MyComponent</code> should return a <code>div</code>, an <code>h1</code>, and then an unordered list containing <code>li</code> elements for every user whose online status is set to <code>true</code>.</p>","testString":"(() => {\n  const comp = Enzyme.mount(React.createElement(MyComponent));\n  const users = (bool) => ({\n    users: [\n      { username: 'Jeff', online: bool },\n      { username: 'Alan', online: bool },\n      { username: 'Mary', online: bool },\n      { username: 'Jim', online: bool },\n      { username: 'Laura', online: bool }\n    ]\n  });\n  const result = () => comp.find('li').length;\n  const _1 = result();\n  const _2 = () => {\n    comp.setState(users(true));\n    return result();\n  };\n  const _3 = () => {\n    comp.setState(users(false));\n    return result();\n  };\n  const _4 = () => {\n    comp.setState({ users: [] });\n    return result();\n  };\n  const _2_val = _2();\n  const _3_val = _3();\n  const _4_val = _4();\n  assert(\n    comp.find('div').length === 1 &&\n      comp.find('h1').length === 1 &&\n      comp.find('ul').length === 1 &&\n      _1 === 4 &&\n      _2_val === 5 &&\n      _3_val === 0 &&\n      _4_val === 0\n  );\n})();"},{"text":"<p><code>MyComponent</code> should render <code>li</code> elements that contain the <code>username</code> of each online user.</p>","testString":"(() => {\n  const comp = Enzyme.mount(React.createElement(MyComponent));\n  const users = (bool) => ({\n    users: [\n      { username: 'Jeff', online: bool },\n      { username: 'Alan', online: bool },\n      { username: 'Mary', online: bool },\n      { username: 'Jim', online: bool },\n      { username: 'Laura', online: bool }\n    ]\n  });\n  const ul = () => {\n    comp.setState(users(true));\n    return comp.find('ul').html();\n  };\n  const html = ul();\n  assert(\n    html ===\n      '<ul><li>Jeff</li><li>Alan</li><li>Mary</li><li>Jim</li><li>Laura</li></ul>'\n  );\n})();"},{"text":"<p>Each list item element should have a unique <code>key</code> attribute.</p>","testString":"assert(\n  (() => {\n    const ul = Enzyme.mount(React.createElement(MyComponent)).find('ul');\n    console.log(ul.debug());\n    const keys = new Set([\n      ul.childAt(0).key(),\n      ul.childAt(1).key(),\n      ul.childAt(2).key(),\n      ul.childAt(3).key()\n    ]);\n    return keys.size === 4;\n  })()\n);"}],"description":"<section id=\"description\">\n<p>The <code>map</code> array method is a powerful tool that you will use often when working with React. Another method related to <code>map</code> is <code>filter</code>, which filters the contents of an array based on a condition, then returns a new array. For example, if you have an array of users that all have a property <code>online</code> which can be set to <code>true</code> or <code>false</code>, you can filter only those users that are online by writing:</p>\n<pre><code class=\"language-js\">let onlineUsers = users.filter(user => user.online);\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>In the code editor, <code>MyComponent</code>'s <code>state</code> is initialized with an array of users. Some users are online and some aren't. Filter the array so you see only the users who are online. To do this, first use <code>filter</code> to return a new array containing only the users whose <code>online</code> property is <code>true</code>. Then, in the <code>renderOnline</code> variable, map over the filtered array, and return a <code>li</code> element for each user that contains the text of their <code>username</code>. Be sure to include a unique <code>key</code> as well, like in the last challenges.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":45,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403618a","title":"Use Array.map() to Dynamically Render Elements","challengeType":6,"forumTopicId":301417,"dashedName":"use-array-map-to-dynamically-render-elements","challengeFiles":[{"head":"","tail":"ReactDOM.render(<MyToDoList />, document.getElementById('root'));","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const textAreaStyles = {\n  width: 235,\n  margin: 5\n};\n\nclass MyToDoList extends React.Component {\n  constructor(props) {\n    super(props);\n    // Change code below this line\n\n    // Change code above this line\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleSubmit() {\n    const itemsArray = this.state.userInput.split(',');\n    this.setState({\n      toDoList: itemsArray\n    });\n  }\n  handleChange(e) {\n    this.setState({\n      userInput: e.target.value\n    });\n  }\n  render() {\n    const items = null; // Change this line\n    return (\n      <div>\n        <textarea\n          onChange={this.handleChange}\n          value={this.state.userInput}\n          style={textAreaStyles}\n          placeholder='Separate Items With Commas'\n        />\n        <br />\n        <button onClick={this.handleSubmit}>Create List</button>\n        <h1>My \"To Do\" List:</h1>\n        <ul>{items}</ul>\n      </div>\n    );\n  }\n}","error":null,"seed":"const textAreaStyles = {\n  width: 235,\n  margin: 5\n};\n\nclass MyToDoList extends React.Component {\n  constructor(props) {\n    super(props);\n    // Change code below this line\n\n    // Change code above this line\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleSubmit() {\n    const itemsArray = this.state.userInput.split(',');\n    this.setState({\n      toDoList: itemsArray\n    });\n  }\n  handleChange(e) {\n    this.setState({\n      userInput: e.target.value\n    });\n  }\n  render() {\n    const items = null; // Change this line\n    return (\n      <div>\n        <textarea\n          onChange={this.handleChange}\n          value={this.state.userInput}\n          style={textAreaStyles}\n          placeholder='Separate Items With Commas'\n        />\n        <br />\n        <button onClick={this.handleSubmit}>Create List</button>\n        <h1>My \"To Do\" List:</h1>\n        <ul>{items}</ul>\n      </div>\n    );\n  }\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const textAreaStyles = {\n  width: 235,\n  margin: 5\n};\n\nclass MyToDoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toDoList: [],\n      userInput: ''\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleSubmit() {\n    const itemsArray = this.state.userInput.split(',');\n    this.setState({\n      toDoList: itemsArray\n    });\n  }\n  handleChange(e) {\n    this.setState({\n      userInput: e.target.value\n    });\n  }\n  render() {\n    const items = this.state.toDoList.map((item, i) => {\n      return <li key={i}>{item}</li>;\n    });\n    return (\n      <div>\n        <textarea\n          onChange={this.handleChange}\n          value={this.state.userInput}\n          style={textAreaStyles}\n          placeholder='Separate Items With Commas'\n        />\n        <br />\n        <button onClick={this.handleSubmit}>Create List</button>\n        <h1>My \"To Do\" List:</h1>\n        <ul>{items}</ul>\n      </div>\n    );\n  }\n}","error":null,"seed":"const textAreaStyles = {\n  width: 235,\n  margin: 5\n};\n\nclass MyToDoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toDoList: [],\n      userInput: ''\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleSubmit() {\n    const itemsArray = this.state.userInput.split(',');\n    this.setState({\n      toDoList: itemsArray\n    });\n  }\n  handleChange(e) {\n    this.setState({\n      userInput: e.target.value\n    });\n  }\n  render() {\n    const items = this.state.toDoList.map((item, i) => {\n      return <li key={i}>{item}</li>;\n    });\n    return (\n      <div>\n        <textarea\n          onChange={this.handleChange}\n          value={this.state.userInput}\n          style={textAreaStyles}\n          placeholder='Separate Items With Commas'\n        />\n        <br />\n        <button onClick={this.handleSubmit}>Create List</button>\n        <h1>My \"To Do\" List:</h1>\n        <ul>{items}</ul>\n      </div>\n    );\n  }\n}"}]],"tests":[{"text":"<p>The MyToDoList component should exist and render to the page.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyToDoList));\n    return mockedComponent.find('MyToDoList').length === 1;\n  })()\n);"},{"text":"<p>The first child of <code>MyToDoList</code> should be a <code>textarea</code> element.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyToDoList));\n    return (\n      mockedComponent.find('MyToDoList').children().childAt(0).type() ===\n      'textarea'\n    );\n  })()\n);"},{"text":"<p>The second child of <code>MyToDoList</code> should be a <code>br</code> element.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyToDoList));\n    return (\n      mockedComponent.find('MyToDoList').children().childAt(1).type() === 'br'\n    );\n  })()\n);"},{"text":"<p>The third child of <code>MyToDoList</code> should be a <code>button</code> element.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyToDoList));\n    return (\n      mockedComponent.find('MyToDoList').children().childAt(2).type() ===\n      'button'\n    );\n  })()\n);"},{"text":"<p>The state of <code>MyToDoList</code> should be initialized with <code>toDoList</code> as an empty array.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyToDoList));\n    const initialState = mockedComponent.state();\n    return (\n      Array.isArray(initialState.toDoList) === true &&\n      initialState.toDoList.length === 0\n    );\n  })()\n);"},{"text":"<p>The state of <code>MyToDoList</code> should be initialized with <code>userInput</code> as an empty string.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyToDoList));\n    const initialState = mockedComponent.state();\n    return (\n      typeof initialState.userInput === 'string' &&\n      initialState.userInput.length === 0\n    );\n  })()\n);"},{"text":"<p>When the <code>Create List</code> button is clicked, the <code>MyToDoList</code> component should dynamically return an unordered list that contains a list item element for every item of a comma-separated list entered into the <code>textarea</code> element.</p>","testString":"(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(MyToDoList));\n  const simulateChange = (el, value) =>\n    el.simulate('change', { target: { value } });\n  const state_1 = () => {\n    return mockedComponent.find('ul').find('li');\n  };\n  const setInput = () => {\n    return simulateChange(\n      mockedComponent.find('textarea'),\n      'testA, testB, testC'\n    );\n  };\n  const click = () => {\n    return mockedComponent.find('button').simulate('click');\n  };\n  const state_2 = () => {\n    const nodes = mockedComponent.find('ul').find('li');\n    return { nodes, text: nodes.reduce((t, n) => t + n.text().trim(), '') };\n  };\n  const setInput_2 = () => {\n    return simulateChange(\n      mockedComponent.find('textarea'),\n      't1, t2, t3, t4, t5, t6'\n    );\n  };\n  const click_1 = () => {\n    return mockedComponent.find('button').simulate('click');\n  };\n  const state_3 = () => {\n    const nodes = mockedComponent.find('ul').find('li');\n    return { nodes, text: nodes.reduce((t, n) => t + n.text().trim(), '') };\n  };\n  const awaited_state_1 = state_1();\n  const awaited_setInput = setInput();\n  const awaited_click = click();\n  const awaited_state_2 = state_2();\n  const awaited_setInput_2 = setInput_2();\n  const awaited_click_1 = click_1();\n  const awaited_state_3 = state_3();\n  assert(\n    awaited_state_1.length === 0 &&\n      awaited_state_2.nodes.length === 3 &&\n      awaited_state_3.nodes.length === 6 &&\n      awaited_state_2.text === 'testAtestBtestC' &&\n      awaited_state_3.text === 't1t2t3t4t5t6'\n  );\n})();"}],"description":"<section id=\"description\">\n<p>Conditional rendering is useful, but you may need your components to render an unknown number of elements. Often in reactive programming, a programmer has no way to know what the state of an application is until runtime, because so much depends on a user's interaction with that program. Programmers need to write their code to correctly handle that unknown state ahead of time. Using <code>Array.map()</code> in React illustrates this concept.</p>\n<p>For example, you create a simple \"To Do List\" app. As the programmer, you have no way of knowing how many items a user might have on their list. You need to set up your component to dynamically render the correct number of list elements long before someone using the program decides that today is laundry day.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The code editor has most of the <code>MyToDoList</code> component set up. Some of this code should look familiar if you completed the controlled form challenge. You'll notice a <code>textarea</code> and a <code>button</code>, along with a couple of methods that track their states, but nothing is rendered to the page yet.</p>\n<p>Inside the <code>constructor</code>, create a <code>this.state</code> object and define two states: <code>userInput</code> should be initialized as an empty string, and <code>toDoList</code> should be initialized as an empty array. Next, delete the <code>null</code> value in the <code>render()</code> method next to the <code>items</code> variable. In its place, map over the <code>toDoList</code> array stored in the component's internal state and dynamically render a <code>li</code> for each item. Try entering the string <code>eat, code, sleep, repeat</code> into the <code>textarea</code>, then click the button and see what happens.</p>\n<p><strong>Note:</strong> You may know that all sibling child elements created by a mapping operation like this do need to be supplied with a unique <code>key</code> attribute. Don't worry, this is the topic of the next challenge.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":43,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403616b","title":"Use Default Props","challengeType":6,"forumTopicId":301418,"dashedName":"use-default-props","challengeFiles":[{"head":"","tail":"ReactDOM.render(<ShoppingCart />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const ShoppingCart = (props) => {\n  return (\n    <div>\n      <h1>Shopping Cart Component</h1>\n    </div>\n  )\n};\n// Change code below this line","error":null,"seed":"const ShoppingCart = (props) => {\n  return (\n    <div>\n      <h1>Shopping Cart Component</h1>\n    </div>\n  )\n};\n// Change code below this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const ShoppingCart = (props) => {\n  return (\n    <div>\n      <h1>Shopping Cart Component</h1>\n    </div>\n  )\n};\n\n// Change code below this line\nShoppingCart.defaultProps = {\n  items: 0\n}","error":null,"seed":"const ShoppingCart = (props) => {\n  return (\n    <div>\n      <h1>Shopping Cart Component</h1>\n    </div>\n  )\n};\n\n// Change code below this line\nShoppingCart.defaultProps = {\n  items: 0\n}"}]],"tests":[{"text":"<p>The <code>ShoppingCart</code> component should render.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n    return mockedComponent.find('ShoppingCart').length === 1;\n  })()\n);"},{"text":"<p>The <code>ShoppingCart</code> component should have a default prop of <code>{ items: 0 }</code>.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n    mockedComponent.setProps({ items: undefined });\n    return mockedComponent.find('ShoppingCart').props().items === 0;\n  })()\n);"}],"description":"<section id=\"description\">\n<p>React also has an option to set default props. You can assign default props to a component as a property on the component itself and React assigns the default prop if necessary. This allows you to specify what a prop value should be if no value is explicitly provided. For example, if you declare <code>MyComponent.defaultProps = { location: 'San Francisco' }</code>, you have defined a location prop that's set to the string <code>San Francisco</code>, unless you specify otherwise. React assigns default props if props are undefined, but if you pass <code>null</code> as the value for a prop, it will remain <code>null</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The code editor shows a <code>ShoppingCart</code> component. Define default props on this component which specify a prop <code>items</code> with a value of <code>0</code>.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":15,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403616d","title":"Use PropTypes to Define the Props You Expect","challengeType":6,"forumTopicId":301419,"dashedName":"use-proptypes-to-define-the-props-you-expect","challengeFiles":[{"head":"var PropTypes = {\n  number: { isRequired: true }\n};","tail":"ReactDOM.render(<ShoppingCart />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n};\n\n// Change code below this line\n\n// Change code above this line\n\nItems.defaultProps = {\n  quantity: 0\n};\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <Items />\n  }\n};","error":null,"seed":"const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n};\n\n// Change code below this line\n\n// Change code above this line\n\nItems.defaultProps = {\n  quantity: 0\n};\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <Items />\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n};\n\n// Change code below this line\nItems.propTypes = {\n  quantity: PropTypes.number.isRequired\n};\n// Change code above this line\n\nItems.defaultProps = {\n  quantity: 0\n};\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <Items />\n  }\n};","error":null,"seed":"const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n};\n\n// Change code below this line\nItems.propTypes = {\n  quantity: PropTypes.number.isRequired\n};\n// Change code above this line\n\nItems.defaultProps = {\n  quantity: 0\n};\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <Items />\n  }\n};"}]],"tests":[{"text":"<p>The <code>ShoppingCart</code> component should render.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n    return mockedComponent.find('ShoppingCart').length === 1;\n  })()\n);"},{"text":"<p>The <code>Items</code> component should render.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n    return mockedComponent.find('Items').length === 1;\n  })()\n);"},{"text":"<p>The <code>Items</code> component should include a <code>propTypes</code> check to require a value for <code>quantity</code> and ensure that its value is a number.</p>","testString":"(getUserInput) =>\n  assert(\n    (function () {\n      const noWhiteSpace = __helpers.removeWhiteSpace(getUserInput('index'));\n      return (\n        noWhiteSpace.includes('quantity:PropTypes.number.isRequired') &&\n        noWhiteSpace.includes('Items.propTypes=')\n      );\n    })()\n  );"}],"description":"<section id=\"description\">\n<p>React provides useful type-checking features to verify that components receive props of the correct type. For example, your application makes an API call to retrieve data that you expect to be in an array, which is then passed to a component as a prop. You can set <code>propTypes</code> on your component to require the data to be of type <code>array</code>. This will throw a useful warning when the data is of any other type.</p>\n<p>It's considered a best practice to set <code>propTypes</code> when you know the type of a prop ahead of time. You can define a <code>propTypes</code> property for a component in the same way you defined <code>defaultProps</code>. Doing this will check that props of a given key are present with a given type. Here's an example to require the type <code>function</code> for a prop called <code>handleClick</code>:</p>\n<pre><code class=\"language-js\">MyComponent.propTypes = { handleClick: PropTypes.func.isRequired }\n</code></pre>\n<p>In the example above, the <code>PropTypes.func</code> part checks that <code>handleClick</code> is a function. Adding <code>isRequired</code> tells React that <code>handleClick</code> is a required property for that component. You will see a warning if that prop isn't provided. Also notice that <code>func</code> represents <code>function</code>. Among the seven JavaScript primitive types, <code>function</code> and <code>boolean</code> (written as <code>bool</code>) are the only two that use unusual spelling. In addition to the primitive types, there are other types available. For example, you can check that a prop is a React element. Please refer to the <a href=\"https://reactjs.org/docs/typechecking-with-proptypes.html#proptypes\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">documentation</a> for all of the options.</p>\n<p><strong>Note:</strong> As of React v15.5.0, <code>PropTypes</code> is imported independently from React, like this: <code>import PropTypes from 'prop-types';</code></p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Define <code>propTypes</code> for the <code>Items</code> component to require <code>quantity</code> as a prop and verify that it is of type <code>number</code>.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":17,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036165","title":"Use React to Render Nested Components","challengeType":6,"forumTopicId":301420,"dashedName":"use-react-to-render-nested-components","challengeFiles":[{"head":"","tail":"ReactDOM.render(<TypesOfFood />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const TypesOfFruit = () => {\n  return (\n    <div>\n      <h2>Fruits:</h2>\n      <ul>\n        <li>Apples</li>\n        <li>Blueberries</li>\n        <li>Strawberries</li>\n        <li>Bananas</li>\n      </ul>\n    </div>\n  );\n};\n\nconst Fruits = () => {\n  return (\n    <div>\n      { /* Change code below this line */ }\n\n      { /* Change code above this line */ }\n    </div>\n  );\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};","error":null,"seed":"const TypesOfFruit = () => {\n  return (\n    <div>\n      <h2>Fruits:</h2>\n      <ul>\n        <li>Apples</li>\n        <li>Blueberries</li>\n        <li>Strawberries</li>\n        <li>Bananas</li>\n      </ul>\n    </div>\n  );\n};\n\nconst Fruits = () => {\n  return (\n    <div>\n      { /* Change code below this line */ }\n\n      { /* Change code above this line */ }\n    </div>\n  );\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"const TypesOfFruit = () => {\n  return (\n    <div>\n      <h2>Fruits:</h2>\n      <ul>\n        <li>Apples</li>\n        <li>Blueberries</li>\n        <li>Strawberries</li>\n        <li>Bananas</li>\n      </ul>\n    </div>\n  );\n};\n\nconst Fruits = () => {\n  return (\n    <div>\n      { /* Change code below this line */ }\n        <TypesOfFruit />\n      { /* Change code above this line */ }\n    </div>\n  );\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        { /* Change code below this line */ }\n        <Fruits />\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};","error":null,"seed":"const TypesOfFruit = () => {\n  return (\n    <div>\n      <h2>Fruits:</h2>\n      <ul>\n        <li>Apples</li>\n        <li>Blueberries</li>\n        <li>Strawberries</li>\n        <li>Bananas</li>\n      </ul>\n    </div>\n  );\n};\n\nconst Fruits = () => {\n  return (\n    <div>\n      { /* Change code below this line */ }\n        <TypesOfFruit />\n      { /* Change code above this line */ }\n    </div>\n  );\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        { /* Change code below this line */ }\n        <Fruits />\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"}]],"tests":[{"text":"<p>The <code>TypesOfFood</code> component should return a single <code>div</code> element.</p>","testString":"assert(Enzyme.shallow(React.createElement(TypesOfFood)).type() === 'div');"},{"text":"<p>The <code>TypesOfFood</code> component should return the <code>Fruits</code> component.</p>","testString":"assert(\n  Enzyme.shallow(React.createElement(TypesOfFood)).props().children[1].type\n    .name === 'Fruits'\n);"},{"text":"<p>The <code>Fruits</code> component should return the <code>TypesOfFruit</code> component.</p>","testString":"assert(\n  Enzyme.mount(React.createElement(TypesOfFood)).find('h2').html() ===\n    '<h2>Fruits:</h2>'\n);"},{"text":"<p>The <code>TypesOfFruit</code> component should return the <code>h2</code> and <code>ul</code> elements.</p>","testString":"assert(\n  Enzyme.mount(React.createElement(TypesOfFood)).find('ul').text() ===\n    'ApplesBlueberriesStrawberriesBananas'\n);"}],"description":"<section id=\"description\">\n<p>The last challenge showed a simple way to compose two components, but there are many different ways you can compose components with React.</p>\n<p>Component composition is one of React's powerful features. When you work with React, it is important to start thinking about your user interface in terms of components like the App example in the last challenge. You break down your UI into its basic building blocks, and those pieces become the components. This helps to separate the code responsible for the UI from the code responsible for handling your application logic. It can greatly simplify the development and maintenance of complex projects.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>There are two functional components defined in the code editor, called <code>TypesOfFruit</code> and <code>Fruits</code>. Take the <code>TypesOfFruit</code> component and compose it, or <em>nest</em> it, within the <code>Fruits</code> component. Then take the <code>Fruits</code> component and nest it within the <code>TypesOfFood</code> component. The result should be a child component, nested within a parent component, which is nested within a parent component of its own!</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":9,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036176","title":"Use State to Toggle an Element","challengeType":6,"forumTopicId":301421,"dashedName":"use-state-to-toggle-an-element","challengeFiles":[{"head":"","tail":"ReactDOM.render(<MyComponent />, document.getElementById('root'));","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visibility: false\n    };\n    // Change code below this line\n\n    // Change code above this line\n  }\n  // Change code below this line\n\n  // Change code above this line\n  render() {\n    if (this.state.visibility) {\n      return (\n        <div>\n          <button onClick={this.toggleVisibility}>Click Me</button>\n          <h1>Now you see me!</h1>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <button onClick={this.toggleVisibility}>Click Me</button>\n        </div>\n      );\n    }\n  }\n}","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visibility: false\n    };\n    // Change code below this line\n\n    // Change code above this line\n  }\n  // Change code below this line\n\n  // Change code above this line\n  render() {\n    if (this.state.visibility) {\n      return (\n        <div>\n          <button onClick={this.toggleVisibility}>Click Me</button>\n          <h1>Now you see me!</h1>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <button onClick={this.toggleVisibility}>Click Me</button>\n        </div>\n      );\n    }\n  }\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visibility: false\n    };\n    this.toggleVisibility = this.toggleVisibility.bind(this);\n  }\n  toggleVisibility() {\n    this.setState(state => ({\n      visibility: !state.visibility\n    }));\n  }\n  render() {\n    if (this.state.visibility) {\n      return (\n        <div>\n          <button onClick={this.toggleVisibility}>Click Me</button>\n          <h1>Now you see me!</h1>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <button onClick={this.toggleVisibility}>Click Me</button>\n        </div>\n      );\n    }\n  }\n}","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visibility: false\n    };\n    this.toggleVisibility = this.toggleVisibility.bind(this);\n  }\n  toggleVisibility() {\n    this.setState(state => ({\n      visibility: !state.visibility\n    }));\n  }\n  render() {\n    if (this.state.visibility) {\n      return (\n        <div>\n          <button onClick={this.toggleVisibility}>Click Me</button>\n          <h1>Now you see me!</h1>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <button onClick={this.toggleVisibility}>Click Me</button>\n        </div>\n      );\n    }\n  }\n}"}]],"tests":[{"text":"<p><code>MyComponent</code> should return a <code>div</code> element which contains a <code>button</code>.</p>","testString":"assert.strictEqual(\n  Enzyme.mount(React.createElement(MyComponent)).find('div').find('button')\n    .length,\n  1\n);"},{"text":"<p>The state of <code>MyComponent</code> should initialize with a <code>visibility</code> property set to <code>false</code>.</p>","testString":"assert.strictEqual(\n  Enzyme.mount(React.createElement(MyComponent)).state('visibility'),\n  false\n);"},{"text":"<p>Clicking the button element should toggle the <code>visibility</code> property in state between <code>true</code> and <code>false</code>.</p>","testString":"(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const first = () => {\n    mockedComponent.setState({ visibility: false });\n    return mockedComponent.state('visibility');\n  };\n  const second = () => {\n    mockedComponent.find('button').simulate('click');\n    return mockedComponent.state('visibility');\n  };\n  const third = () => {\n    mockedComponent.find('button').simulate('click');\n    return mockedComponent.state('visibility');\n  };\n  const firstValue = first();\n  const secondValue = second();\n  const thirdValue = third();\n  assert(!firstValue && secondValue && !thirdValue);\n})();"},{"text":"<p>An anonymous function should be passed to <code>setState</code>.</p>","testString":"const paramRegex = '[a-zA-Z$_]\\\\w*(,[a-zA-Z$_]\\\\w*)?';\nassert(\n  new RegExp(\n    'this\\\\.setState\\\\((function\\\\(' +\n      paramRegex +\n      '\\\\){|([a-zA-Z$_]\\\\w*|\\\\(' +\n      paramRegex +\n      '\\\\))=>)'\n  ).test(__helpers.removeWhiteSpace(code))\n);"},{"text":"<p><code>this</code> should not be used inside <code>setState</code></p>","testString":"assert(!/this\\.setState\\([^}]*this/.test(code));"}],"description":"<section id=\"description\">\n<p>Sometimes you might need to know the previous state when updating the state. However, state updates may be asynchronous - this means React may batch multiple <code>setState()</code> calls into a single update. This means you can't rely on the previous value of <code>this.state</code> or <code>this.props</code> when calculating the next value. So, you should not use code like this:</p>\n<pre><code class=\"language-jsx\">this.setState({\n  counter: this.state.counter + this.props.increment\n});\n</code></pre>\n<p>Instead, you should pass <code>setState</code> a function that allows you to access state and props. Using a function with <code>setState</code> guarantees you are working with the most current values of state and props. This means that the above should be rewritten as:</p>\n<pre><code class=\"language-jsx\">this.setState((state, props) => ({\n  counter: state.counter + props.increment\n}));\n</code></pre>\n<p>You can also use a form without <code>props</code> if you need only the <code>state</code>:</p>\n<pre><code class=\"language-jsx\">this.setState(state => ({\n  counter: state.counter + 1\n}));\n</code></pre>\n<p>Note that you have to wrap the object literal in parentheses, otherwise JavaScript thinks it's a block of code.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p><code>MyComponent</code> has a <code>visibility</code> property which is initialized to <code>false</code>. The render method returns one view if the value of <code>visibility</code> is true, and a different view if it is false.</p>\n<p>Currently, there is no way of updating the <code>visibility</code> property in the component's <code>state</code>. The value should toggle back and forth between true and false. There is a click handler on the button which triggers a class method called <code>toggleVisibility()</code>. Pass a function to <code>setState</code> to define this method so that the <code>state</code> of <code>visibility</code> toggles to the opposite value when the method is called. If <code>visibility</code> is <code>false</code>, the method sets it to <code>true</code>, and vice versa.</p>\n<p>Finally, click the button to see the conditional rendering of the component based on its <code>state</code>.</p>\n<p><strong>Hint:</strong> Don't forget to bind the <code>this</code> keyword to the method in the <code>constructor</code>!</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":25,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403617d","title":"Use the Lifecycle Method componentDidMount","challengeType":6,"forumTopicId":301422,"dashedName":"use-the-lifecycle-method-componentdidmount","challengeFiles":[{"head":"","tail":"ReactDOM.render(<MyComponent />, document.getElementById('root'));","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeUsers: null\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        activeUsers: 1273\n      });\n    }, 2500);\n  }\n  render() {\n    return (\n      <div>\n        {/* Change code below this line */}\n        <h1>Active Users: </h1>\n        {/* Change code above this line */}\n      </div>\n    );\n  }\n}","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeUsers: null\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        activeUsers: 1273\n      });\n    }, 2500);\n  }\n  render() {\n    return (\n      <div>\n        {/* Change code below this line */}\n        <h1>Active Users: </h1>\n        {/* Change code above this line */}\n      </div>\n    );\n  }\n}"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeUsers: null\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        activeUsers: 1273\n      });\n    }, 2500);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Active Users: {this.state.activeUsers}</h1>\n      </div>\n    );\n  }\n}","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeUsers: null\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        activeUsers: 1273\n      });\n    }, 2500);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Active Users: {this.state.activeUsers}</h1>\n      </div>\n    );\n  }\n}"}]],"tests":[{"text":"<p><code>MyComponent</code> should render a <code>div</code> element which wraps an <code>h1</code> tag.</p>","testString":"assert(\n  (() => {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return (\n      mockedComponent.find('div').length === 1 &&\n      mockedComponent.find('h1').length === 1\n    );\n  })()\n);"},{"text":"<p>Component state should be updated with a timeout function in <code>componentDidMount</code>.</p>","testString":"assert(\n  (() => {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return new RegExp('setTimeout(.|\\n)+setState(.|\\n)+activeUsers').test(\n      String(mockedComponent.instance().componentDidMount)\n    );\n  })()\n);"},{"text":"<p>The <code>h1</code> tag should render the <code>activeUsers</code> value from <code>MyComponent</code>'s state.</p>","testString":"(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const first = () => {\n    mockedComponent.setState({ activeUsers: 1237 });\n    return mockedComponent.find('h1').text();\n  };\n  const second = () => {\n    mockedComponent.setState({ activeUsers: 1000 });\n    return mockedComponent.find('h1').text();\n  };\n  assert(new RegExp('1237').test(first()) && new RegExp('1000').test(second()));\n})();"}],"description":"<section id=\"description\">\n<p>Most web developers, at some point, need to call an API endpoint to retrieve data. If you're working with React, it's important to know where to perform this action.</p>\n<p>The best practice with React is to place API calls or any calls to your server in the lifecycle method <code>componentDidMount()</code>. This method is called after a component is mounted to the DOM. Any calls to <code>setState()</code> here will trigger a re-rendering of your component. When you call an API in this method, and set your state with the data that the API returns, it will automatically trigger an update once you receive the data.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>There is a mock API call in <code>componentDidMount()</code>. It sets state after 2.5 seconds to simulate calling a server to retrieve data. This example requests the current total active users for a site. In the render method, render the value of <code>activeUsers</code> in the <code>h1</code> after the text <code>Active Users:</code>. Watch what happens in the preview, and feel free to change the timeout to see the different effects.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":32,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403617c","title":"Use the Lifecycle Method componentWillMount","challengeType":6,"forumTopicId":301423,"dashedName":"use-the-lifecycle-method-componentwillmount","challengeFiles":[{"head":"","tail":"ReactDOM.render(<MyComponent />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentWillMount() {\n    // Change code below this line\n\n    // Change code above this line\n  }\n  render() {\n    return <div />\n  }\n};","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentWillMount() {\n    // Change code below this line\n\n    // Change code above this line\n  }\n  render() {\n    return <div />\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentWillMount() {\n    // Change code below this line\n    console.log('Component is mounting...');\n    // Change code above this line\n  }\n  render() {\n    return <div />\n  }\n};","error":null,"seed":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentWillMount() {\n    // Change code below this line\n    console.log('Component is mounting...');\n    // Change code above this line\n  }\n  render() {\n    return <div />\n  }\n};"}]],"tests":[{"text":"<p><code>MyComponent</code> should render a <code>div</code> element.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return mockedComponent.find('div').length === 1;\n  })()\n);"},{"text":"<p><code>console.log</code> should be called in <code>componentWillMount</code>.</p>","testString":"assert(\n  (function () {\n    const lifecycle = React.createElement(MyComponent)\n      .type.prototype.componentWillMount.toString()\n      .replace(/ /g, '');\n    return lifecycle.includes('console.log(');\n  })()\n);"}],"description":"<section id=\"description\">\n<p>React components have several special methods that provide opportunities to perform actions at specific points in the lifecycle of a component. These are called lifecycle methods, or lifecycle hooks, and allow you to catch components at certain points in time. This can be before they are rendered, before they update, before they receive props, before they unmount, and so on. Here is a list of some of the main lifecycle methods: <code>componentWillMount()</code> <code>componentDidMount()</code> <code>shouldComponentUpdate()</code> <code>componentDidUpdate()</code> <code>componentWillUnmount()</code> The next several lessons will cover some of the basic use cases for these lifecycle methods.</p>\n<p><strong>Note:</strong> The <code>componentWillMount</code> Lifecycle method will be deprecated in a future version of 16.X and removed in version 17. Learn more in this <a href=\"https://www.freecodecamp.org/news/how-to-safely-use-reacts-life-cycles-with-fiber-s-async-rendering-fd4469ebbd8f/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">article</a></p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The <code>componentWillMount()</code> method is called before the <code>render()</code> method when a component is being mounted to the DOM. Log something to the console within <code>componentWillMount()</code> - you may want to have your browser console open to see the output.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":31,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036168","title":"Write a React Component from Scratch","challengeType":6,"forumTopicId":301424,"dashedName":"write-a-react-component-from-scratch","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"// Change code below this line","error":null,"seed":"// Change code below this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"// Change code below this line\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>My First React Component!</h1>\n      </div>\n    );\n  }\n};\n\nReactDOM.render(<MyComponent />, document.getElementById('challenge-node'));","error":null,"seed":"// Change code below this line\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>My First React Component!</h1>\n      </div>\n    );\n  }\n};\n\nReactDOM.render(<MyComponent />, document.getElementById('challenge-node'));"}]],"tests":[{"text":"<p>There should be a React component called <code>MyComponent</code>.</p>","testString":"(getUserInput) =>\n  assert(\n    __helpers\n      .removeWhiteSpace(getUserInput('index'))\n      .includes('classMyComponentextendsReact.Component{')\n  );"},{"text":"<p><code>MyComponent</code> should contain an <code>h1</code> tag with text <code>My First React Component!</code> Case and punctuation matter.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return mockedComponent.find('h1').text() === 'My First React Component!';\n  })()\n);"},{"text":"<p><code>MyComponent</code> should render to the DOM.</p>","testString":"assert(document.getElementById('challenge-node').childNodes.length === 1);"},{"text":"<p><code>MyComponent</code> should have a constructor calling <code>super</code> with <code>props</code>.</p>","testString":"assert(\n  MyComponent.toString().includes('MyComponent(props)') &&\n    MyComponent.toString().includes('_super.call(this, props)')\n);"}],"description":"<section id=\"description\">\n<p>Now that you've learned the basics of JSX and React components, it's time to write a component on your own. React components are the core building blocks of React applications so it's important to become very familiar with writing them. Remember, a typical React component is an ES6 <code>class</code> which extends <code>React.Component</code>. It has a render method that returns HTML (from JSX) or <code>null</code>. This is the basic form of a React component. Once you understand this well, you will be prepared to start building more complex React projects.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Define a class <code>MyComponent</code> that extends <code>React.Component</code>. Its render method should return a <code>div</code> that contains an <code>h1</code> tag with the text: <code>My First React Component!</code> in it. Use this text exactly, the case and punctuation matter. Make sure to call the constructor for your component, too.</p>\n<p>Render this component to the DOM using <code>ReactDOM.render()</code>. There is a <code>div</code> with <code>id='challenge-node'</code> available for you to use.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":12,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036177","title":"Write a Simple Counter","challengeType":6,"forumTopicId":301425,"dashedName":"write-a-simple-counter","challengeFiles":[{"head":"","tail":"ReactDOM.render(<Counter />, document.getElementById('root'))","id":"","editableRegionBoundaries":[],"history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n    // Change code below this line\n\n    // Change code above this line\n  }\n  // Change code below this line\n\n  // Change code above this line\n  render() {\n    return (\n      <div>\n        <button className='inc' onClick={this.increment}>Increment!</button>\n        <button className='dec' onClick={this.decrement}>Decrement!</button>\n        <button className='reset' onClick={this.reset}>Reset</button>\n        <h1>Current Count: {this.state.count}</h1>\n      </div>\n    );\n  }\n};","error":null,"seed":"class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n    // Change code below this line\n\n    // Change code above this line\n  }\n  // Change code below this line\n\n  // Change code above this line\n  render() {\n    return (\n      <div>\n        <button className='inc' onClick={this.increment}>Increment!</button>\n        <button className='dec' onClick={this.decrement}>Decrement!</button>\n        <button className='reset' onClick={this.reset}>Reset</button>\n        <h1>Current Count: {this.state.count}</h1>\n      </div>\n    );\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["index.jsx"],"name":"index","ext":"jsx","path":"index.jsx","fileKey":"indexjsx","contents":"class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  this.increment = this.increment.bind(this);\n this.decrement = this.decrement.bind(this);\n this.reset = this.reset.bind(this);\n }\n  reset() {\n    this.setState({\n      count: 0\n    });\n  }\n  increment() {\n    this.setState(state => ({\n      count: state.count + 1\n    }));\n  }\n  decrement() {\n    this.setState(state => ({\n      count: state.count - 1\n    }));\n  }\n  render() {\n    return (\n      <div>\n        <button className='inc' onClick={this.increment}>Increment!</button>\n        <button className='dec' onClick={this.decrement}>Decrement!</button>\n        <button className='reset' onClick={this.reset}>Reset</button>\n        <h1>Current Count: {this.state.count}</h1>\n      </div>\n    );\n  }\n};","error":null,"seed":"class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  this.increment = this.increment.bind(this);\n this.decrement = this.decrement.bind(this);\n this.reset = this.reset.bind(this);\n }\n  reset() {\n    this.setState({\n      count: 0\n    });\n  }\n  increment() {\n    this.setState(state => ({\n      count: state.count + 1\n    }));\n  }\n  decrement() {\n    this.setState(state => ({\n      count: state.count - 1\n    }));\n  }\n  render() {\n    return (\n      <div>\n        <button className='inc' onClick={this.increment}>Increment!</button>\n        <button className='dec' onClick={this.decrement}>Decrement!</button>\n        <button className='reset' onClick={this.reset}>Reset</button>\n        <h1>Current Count: {this.state.count}</h1>\n      </div>\n    );\n  }\n};"}]],"tests":[{"text":"<p><code>Counter</code> should return a <code>div</code> element which contains three buttons with text content in this order <code>Increment!</code>, <code>Decrement!</code>, <code>Reset</code>.</p>","testString":"assert(\n  (() => {\n    const mockedComponent = Enzyme.mount(React.createElement(Counter));\n    return (\n      mockedComponent.find('.inc').text() === 'Increment!' &&\n      mockedComponent.find('.dec').text() === 'Decrement!' &&\n      mockedComponent.find('.reset').text() === 'Reset'\n    );\n  })()\n);"},{"text":"<p>The state of <code>Counter</code> should initialize with a <code>count</code> property set to <code>0</code>.</p>","testString":"const mockedComponent = Enzyme.mount(React.createElement(Counter));\nassert(mockedComponent.find('h1').text() === 'Current Count: 0');"},{"text":"<p>Clicking the increment button should increment the count by <code>1</code>.</p>","testString":"const mockedComponent = Enzyme.mount(React.createElement(Counter));\nmockedComponent.find('.inc').simulate('click');\nassert(mockedComponent.find('h1').text() === 'Current Count: 1');"},{"text":"<p>Clicking the decrement button should decrement the count by <code>1</code>.</p>","testString":"const mockedComponent = Enzyme.mount(React.createElement(Counter));\nmockedComponent.find('.dec').simulate('click');\nassert(mockedComponent.find('h1').text() === 'Current Count: -1');"},{"text":"<p>Clicking the reset button should reset the count to <code>0</code>.</p>","testString":"const mockedComponent = Enzyme.mount(React.createElement(Counter));\nmockedComponent.setState({ count: 5 });\nconst currentCountElement = mockedComponent.find('h1');\nassert(currentCountElement.text() === 'Current Count: 5');\nmockedComponent.find('.reset').simulate('click');\nassert(currentCountElement.text() === 'Current Count: 0');"}],"description":"<section id=\"description\">\n<p>You can design a more complex stateful component by combining the concepts covered so far. These include initializing <code>state</code>, writing methods that set <code>state</code>, and assigning click handlers to trigger these methods.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The <code>Counter</code> component keeps track of a <code>count</code> value in <code>state</code>. There are two buttons which call methods <code>increment()</code> and <code>decrement()</code>. Write these methods so the counter value is incremented or decremented by 1 when the appropriate button is clicked. Also, create a <code>reset()</code> method so when the reset button is clicked, the count is set to 0.</p>\n<p><strong>Note:</strong> Make sure you don't modify the <code>className</code>s of the buttons. Also, remember to add the necessary bindings for the newly-created methods in the constructor.</p>\n</section>","block":"react","hasEditableBoundaries":false,"order":3,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":26,"required":[{"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false}]},"redux":{"meta":{"name":"Redux","isUpcomingChange":false,"dashedName":"redux","order":4,"time":"5 hours","template":"","required":[{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"superBlock":"front-end-development-libraries","challengeOrder":[["5a24c314108439a4d403614b","Create a Redux Store"],["5a24c314108439a4d403614c","Get State from the Redux Store"],["5a24c314108439a4d403614d","Define a Redux Action"],["5a24c314108439a4d403614e","Define an Action Creator"],["5a24c314108439a4d403614f","Dispatch an Action Event"],["5a24c314108439a4d4036150","Handle an Action in the Store"],["5a24c314108439a4d4036151","Use a Switch Statement to Handle Multiple Actions"],["5a24c314108439a4d4036152","Use const for Action Types"],["5a24c314108439a4d4036153","Register a Store Listener"],["5a24c314108439a4d4036154","Combine Multiple Reducers"],["5a24c314108439a4d4036155","Send Action Data to the Store"],["5a24c314108439a4d4036156","Use Middleware to Handle Asynchronous Actions"],["5a24c314108439a4d4036157","Write a Counter with Redux"],["5a24c314108439a4d4036158","Never Mutate State"],["5a24c314108439a4d4036159","Use the Spread Operator on Arrays"],["5a24c314108439a4d403615a","Remove an Item from an Array"],["5a24c314108439a4d403615b","Copy an Object with Object.assign"]]},"challenges":[{"id":"5a24c314108439a4d4036154","title":"Combine Multiple Reducers","challengeType":6,"forumTopicId":301436,"dashedName":"combine-multiple-reducers","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\n\nconst counterReducer = (state = 0, action) => {\n  switch(action.type) {\n    case INCREMENT:\n      return state + 1;\n    case DECREMENT:\n      return state - 1;\n    default:\n      return state;\n  }\n};\n\nconst LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\n\nconst authReducer = (state = {authenticated: false}, action) => {\n  switch(action.type) {\n    case LOGIN:\n      return {\n        authenticated: true\n      }\n    case LOGOUT:\n      return {\n        authenticated: false\n      }\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = // Define the root reducer here\n\nconst store = Redux.createStore(rootReducer);","error":null,"seed":"const INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\n\nconst counterReducer = (state = 0, action) => {\n  switch(action.type) {\n    case INCREMENT:\n      return state + 1;\n    case DECREMENT:\n      return state - 1;\n    default:\n      return state;\n  }\n};\n\nconst LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\n\nconst authReducer = (state = {authenticated: false}, action) => {\n  switch(action.type) {\n    case LOGIN:\n      return {\n        authenticated: true\n      }\n    case LOGOUT:\n      return {\n        authenticated: false\n      }\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = // Define the root reducer here\n\nconst store = Redux.createStore(rootReducer);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\n\nconst counterReducer = (state = 0, action) => {\n  switch(action.type) {\n    case INCREMENT:\n      return state + 1;\n    case DECREMENT:\n      return state - 1;\n    default:\n      return state;\n  }\n};\n\nconst LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\n\nconst authReducer = (state = {authenticated: false}, action) => {\n  switch(action.type) {\n    case LOGIN:\n      return {\n        authenticated: true\n      }\n    case LOGOUT:\n      return {\n        authenticated: false\n      }\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = Redux.combineReducers({\n  count: counterReducer,\n  auth: authReducer\n});\n\nconst store = Redux.createStore(rootReducer);","error":null,"seed":"const INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\n\nconst counterReducer = (state = 0, action) => {\n  switch(action.type) {\n    case INCREMENT:\n      return state + 1;\n    case DECREMENT:\n      return state - 1;\n    default:\n      return state;\n  }\n};\n\nconst LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\n\nconst authReducer = (state = {authenticated: false}, action) => {\n  switch(action.type) {\n    case LOGIN:\n      return {\n        authenticated: true\n      }\n    case LOGOUT:\n      return {\n        authenticated: false\n      }\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = Redux.combineReducers({\n  count: counterReducer,\n  auth: authReducer\n});\n\nconst store = Redux.createStore(rootReducer);"}]],"tests":[{"text":"<p>The <code>counterReducer</code> should increment and decrement the <code>state</code>.</p>","testString":"assert(\n  (function () {\n    const initialState = store.getState().count;\n    store.dispatch({ type: INCREMENT });\n    store.dispatch({ type: INCREMENT });\n    const firstState = store.getState().count;\n    store.dispatch({ type: DECREMENT });\n    const secondState = store.getState().count;\n    return firstState === initialState + 2 && secondState === firstState - 1;\n  })()\n);"},{"text":"<p>The <code>authReducer</code> should toggle the <code>state</code> of <code>authenticated</code> between <code>true</code> and <code>false</code>.</p>","testString":"assert(\n  (function () {\n    store.dispatch({ type: LOGIN });\n    const loggedIn = store.getState().auth.authenticated;\n    store.dispatch({ type: LOGOUT });\n    const loggedOut = store.getState().auth.authenticated;\n    return loggedIn === true && loggedOut === false;\n  })()\n);"},{"text":"<p>The store <code>state</code> should have two keys: <code>count</code>, which holds a number, and <code>auth</code>, which holds an object. The <code>auth</code> object should have a property of <code>authenticated</code>, which holds a boolean.</p>","testString":"assert(\n  (function () {\n    const state = store.getState();\n    return (\n      typeof state.auth === 'object' &&\n      typeof state.auth.authenticated === 'boolean' &&\n      typeof state.count === 'number'\n    );\n  })()\n);"},{"text":"<p>The <code>rootReducer</code> should be a function that combines the <code>counterReducer</code> and the <code>authReducer</code>.</p>","testString":"(getUserInput) =>\n  assert(\n    (function () {\n      const noWhiteSpace = __helpers.removeWhiteSpace(getUserInput('index'));\n      return (\n        typeof rootReducer === 'function' &&\n        noWhiteSpace.includes('Redux.combineReducers')\n      );\n    })()\n  );"}],"description":"<section id=\"description\">\n<p>When the state of your app begins to grow more complex, it may be tempting to divide state into multiple pieces. Instead, remember the first principle of Redux: all app state is held in a single state object in the store. Therefore, Redux provides reducer composition as a solution for a complex state model. You define multiple reducers to handle different pieces of your application's state, then compose these reducers together into one root reducer. The root reducer is then passed into the Redux <code>createStore()</code> method.</p>\n<p>In order to let us combine multiple reducers together, Redux provides the <code>combineReducers()</code> method. This method accepts an object as an argument in which you define properties which associate keys to specific reducer functions. The name you give to the keys will be used by Redux as the name for the associated piece of state.</p>\n<p>Typically, it is a good practice to create a reducer for each piece of application state when they are distinct or unique in some way. For example, in a note-taking app with user authentication, one reducer could handle authentication while another handles the text and notes that the user is submitting. For such an application, we might write the <code>combineReducers()</code> method like this:</p>\n<pre><code class=\"language-js\">const rootReducer = Redux.combineReducers({\n  auth: authenticationReducer,\n  notes: notesReducer\n});\n</code></pre>\n<p>Now, the key <code>notes</code> will contain all of the state associated with our notes and handled by our <code>notesReducer</code>. This is how multiple reducers can be composed to manage more complex application state. In this example, the state held in the Redux store would then be a single object containing <code>auth</code> and <code>notes</code> properties.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>There are <code>counterReducer()</code> and <code>authReducer()</code> functions provided in the code editor, along with a Redux store. Finish writing the <code>rootReducer()</code> function using the <code>Redux.combineReducers()</code> method. Assign <code>counterReducer</code> to a key called <code>count</code> and <code>authReducer</code> to a key called <code>auth</code>.</p>\n</section>","block":"redux","hasEditableBoundaries":false,"order":4,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":9,"required":[{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403615b","title":"Copy an Object with Object.assign","challengeType":6,"forumTopicId":301437,"dashedName":"copy-an-object-with-object-assign","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const defaultState = {\n  user: 'CamperBot',\n  status: 'offline',\n  friends: '732,982',\n  community: 'freeCodeCamp'\n};\n\nconst immutableReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case 'ONLINE':\n      // Don't mutate state here or the tests will fail\n      return\n    default:\n      return state;\n  }\n};\n\nconst wakeUp = () => {\n  return {\n    type: 'ONLINE'\n  }\n};\n\nconst store = Redux.createStore(immutableReducer);","error":null,"seed":"const defaultState = {\n  user: 'CamperBot',\n  status: 'offline',\n  friends: '732,982',\n  community: 'freeCodeCamp'\n};\n\nconst immutableReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case 'ONLINE':\n      // Don't mutate state here or the tests will fail\n      return\n    default:\n      return state;\n  }\n};\n\nconst wakeUp = () => {\n  return {\n    type: 'ONLINE'\n  }\n};\n\nconst store = Redux.createStore(immutableReducer);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const defaultState = {\n  user: 'CamperBot',\n  status: 'offline',\n  friends: '732,982',\n  community: 'freeCodeCamp'\n};\n\nconst immutableReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case 'ONLINE':\n      return Object.assign({}, state, {\n        status: 'online'\n      });\n    default:\n      return state;\n  }\n};\n\nconst wakeUp = () => {\n  return {\n    type: 'ONLINE'\n  }\n};\n\nconst store = Redux.createStore(immutableReducer);","error":null,"seed":"const defaultState = {\n  user: 'CamperBot',\n  status: 'offline',\n  friends: '732,982',\n  community: 'freeCodeCamp'\n};\n\nconst immutableReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case 'ONLINE':\n      return Object.assign({}, state, {\n        status: 'online'\n      });\n    default:\n      return state;\n  }\n};\n\nconst wakeUp = () => {\n  return {\n    type: 'ONLINE'\n  }\n};\n\nconst store = Redux.createStore(immutableReducer);"}]],"tests":[{"text":"<p>The Redux store should exist and initialize with a state that is equivalent to the <code>defaultState</code> object declared on line 1.</p>","testString":"assert(\n  (function () {\n    const expectedState = {\n      user: 'CamperBot',\n      status: 'offline',\n      friends: '732,982',\n      community: 'freeCodeCamp'\n    };\n    const initialState = store.getState();\n    return DeepEqual(expectedState, initialState);\n  })()\n);"},{"text":"<p><code>wakeUp</code> and <code>immutableReducer</code> both should be functions.</p>","testString":"assert(typeof wakeUp === 'function' && typeof immutableReducer === 'function');"},{"text":"<p>Dispatching an action of type <code>ONLINE</code> should update the property <code>status</code> in state to <code>online</code> and should NOT mutate state.</p>","testString":"assert(\n  (function () {\n    const initialState = store.getState();\n    const isFrozen = DeepFreeze(initialState);\n    store.dispatch({ type: 'ONLINE' });\n    const finalState = store.getState();\n    const expectedState = {\n      user: 'CamperBot',\n      status: 'online',\n      friends: '732,982',\n      community: 'freeCodeCamp'\n    };\n    return isFrozen && DeepEqual(finalState, expectedState);\n  })()\n);"},{"text":"<p><code>Object.assign</code> should be used to return new state.</p>","testString":"(getUserInput) => assert(getUserInput('index').includes('Object.assign'));"}],"description":"<section id=\"description\">\n<p>The last several challenges worked with arrays, but there are ways to help enforce state immutability when state is an <code>object</code>, too. A useful tool for handling objects is the <code>Object.assign()</code> utility. <code>Object.assign()</code> takes a target object and source objects and maps properties from the source objects to the target object. Any matching properties are overwritten by properties in the source objects. This behavior is commonly used to make shallow copies of objects by passing an empty object as the first argument followed by the object(s) you want to copy. Here's an example:</p>\n<pre><code class=\"language-js\">const newObject = Object.assign({}, obj1, obj2);\n</code></pre>\n<p>This creates <code>newObject</code> as a new <code>object</code>, which contains the properties that currently exist in <code>obj1</code> and <code>obj2</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The Redux state and actions were modified to handle an <code>object</code> for the <code>state</code>. Edit the code to return a new <code>state</code> object for actions with type <code>ONLINE</code>, which set the <code>status</code> property to the string <code>online</code>. Try to use <code>Object.assign()</code> to complete the challenge.</p>\n</section>","block":"redux","hasEditableBoundaries":false,"order":4,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":16,"required":[{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403614b","title":"Create a Redux Store","challengeType":6,"forumTopicId":301439,"dashedName":"create-a-redux-store","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const reducer = (state = 5) => {\n  return state;\n}\n\n// Redux methods are available from a Redux object\n// For example: Redux.createStore()\n// Define the store here:","error":null,"seed":"const reducer = (state = 5) => {\n  return state;\n}\n\n// Redux methods are available from a Redux object\n// For example: Redux.createStore()\n// Define the store here:"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const reducer = (state = 5) => {\n  return state;\n}\n\nconst store = Redux.createStore(reducer);","error":null,"seed":"const reducer = (state = 5) => {\n  return state;\n}\n\nconst store = Redux.createStore(reducer);"}]],"tests":[{"text":"<p>The Redux store should exist.</p>","testString":"assert(typeof store.getState === 'function');"},{"text":"<p>The Redux store should have a value of 5 for the state.</p>","testString":"assert(store.getState() === 5);"}],"description":"<section id=\"description\">\n<p>Redux is a state management framework that can be used with a number of different web technologies, including React.</p>\n<p>In Redux, there is a single state object that's responsible for the entire state of your application. This means if you had a React app with ten components, and each component had its own local state, the entire state of your app would be defined by a single state object housed in the Redux <code>store</code>. This is the first important principle to understand when learning Redux: the Redux store is the single source of truth when it comes to application state.</p>\n<p>This also means that any time any piece of your app wants to update state, it <strong>must</strong> do so through the Redux store. The unidirectional data flow makes it easier to track state management in your app.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The Redux <code>store</code> is an object which holds and manages application <code>state</code>. There is a method called <code>createStore()</code> on the Redux object, which you use to create the Redux <code>store</code>. This method takes a <code>reducer</code> function as a required argument. The <code>reducer</code> function is covered in a later challenge, and is already defined for you in the code editor. It simply takes <code>state</code> as an argument and returns <code>state</code>.</p>\n<p>Declare a <code>store</code> variable and assign it to the <code>createStore()</code> method, passing in the <code>reducer</code> as an argument.</p>\n<p><strong>Note:</strong> The code in the editor uses ES6 default argument syntax to initialize this state to hold a value of <code>5</code>. If you're not familiar with default arguments, you can refer to the <a href=\"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/set-default-parameters-for-your-functions\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">ES6 section in the Curriculum</a> which covers this topic.</p>\n</section>","block":"redux","hasEditableBoundaries":false,"order":4,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":0,"required":[{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403614d","title":"Define a Redux Action","challengeType":6,"forumTopicId":301440,"dashedName":"define-a-redux-action","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"// Define an action here:","error":null,"seed":"// Define an action here:"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const action = {\n  type: 'LOGIN'\n}","error":null,"seed":"const action = {\n  type: 'LOGIN'\n}"}]],"tests":[{"text":"<p>An <code>action</code> object should exist.</p>","testString":"assert(\n  (function () {\n    return typeof action === 'object';\n  })()\n);"},{"text":"<p>The <code>action</code> object should have a key property <code>type</code> with value <code>LOGIN</code>.</p>","testString":"assert(\n  (function () {\n    return action.type === 'LOGIN';\n  })()\n);"}],"description":"<section id=\"description\">\n<p>Since Redux is a state management framework, updating state is one of its core tasks. In Redux, all state updates are triggered by dispatching actions. An action is simply a JavaScript object that contains information about an action event that has occurred. The Redux store receives these action objects, then updates its state accordingly. Sometimes a Redux action also carries some data. For example, the action carries a username after a user logs in. While the data is optional, actions must carry a <code>type</code> property that specifies the 'type' of action that occurred.</p>\n<p>Think of Redux actions as messengers that deliver information about events happening in your app to the Redux store. The store then conducts the business of updating state based on the action that occurred.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Writing a Redux action is as simple as declaring an object with a type property. Declare an object <code>action</code> and give it a property <code>type</code> set to the string <code>'LOGIN'</code>.</p>\n</section>","block":"redux","hasEditableBoundaries":false,"order":4,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":2,"required":[{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403614e","title":"Define an Action Creator","challengeType":6,"forumTopicId":301441,"dashedName":"define-an-action-creator","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const action = {\n  type: 'LOGIN'\n}\n// Define an action creator here:","error":null,"seed":"const action = {\n  type: 'LOGIN'\n}\n// Define an action creator here:"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const action = {\n  type: 'LOGIN'\n}\nconst actionCreator = () => {\n  return action;\n};","error":null,"seed":"const action = {\n  type: 'LOGIN'\n}\nconst actionCreator = () => {\n  return action;\n};"}]],"tests":[{"text":"<p>The function <code>actionCreator</code> should exist.</p>","testString":"assert(typeof actionCreator === 'function');"},{"text":"<p>Running the <code>actionCreator</code> function should return the <code>action</code> object.</p>","testString":"assert(typeof action === 'object');"},{"text":"<p>The returned <code>action</code> should have a key property <code>type</code> with value <code>LOGIN</code>.</p>","testString":"assert(action.type === 'LOGIN');"}],"description":"<section id=\"description\">\n<p>After creating an action, the next step is sending the action to the Redux store so it can update its state. In Redux, you define action creators to accomplish this. An action creator is simply a JavaScript function that returns an action. In other words, action creators create objects that represent action events.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Define a function named <code>actionCreator()</code> that returns the <code>action</code> object when called.</p>\n</section>","block":"redux","hasEditableBoundaries":false,"order":4,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":3,"required":[{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403614f","title":"Dispatch an Action Event","challengeType":6,"forumTopicId":301442,"dashedName":"dispatch-an-action-event","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const store = Redux.createStore(\n  (state = {login: false}) => state\n);\n\nconst loginAction = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\n// Dispatch the action here:","error":null,"seed":"const store = Redux.createStore(\n  (state = {login: false}) => state\n);\n\nconst loginAction = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\n// Dispatch the action here:"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const store = Redux.createStore(\n  (state = {login: false}) => state\n);\n\nconst loginAction = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\nstore.dispatch(loginAction());","error":null,"seed":"const store = Redux.createStore(\n  (state = {login: false}) => state\n);\n\nconst loginAction = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\nstore.dispatch(loginAction());"}]],"tests":[{"text":"<p>Calling the function <code>loginAction</code> should return an object with <code>type</code> property set to the string <code>LOGIN</code>.</p>","testString":"assert(loginAction().type === 'LOGIN');"},{"text":"<p>The store should be initialized with an object with property <code>login</code> set to <code>false</code>.</p>","testString":"assert(store.getState().login === false);"},{"text":"<p>The <code>store.dispatch()</code> method should be used to dispatch an action of type <code>LOGIN</code>.</p>","testString":"(getUserInput) =>\n  assert(\n    (function () {\n      let noWhiteSpace = getUserInput('index').replace(/\\s/g, '');\n      return (\n        noWhiteSpace.includes('store.dispatch(loginAction())') ||\n        noWhiteSpace.includes(\"store.dispatch({type: 'LOGIN'})\") === true\n      );\n    })()\n  );"}],"description":"<section id=\"description\">\n<p><code>dispatch</code> method is what you use to dispatch actions to the Redux store. Calling <code>store.dispatch()</code> and passing the value returned from an action creator sends an action back to the store.</p>\n<p>Recall that action creators return an object with a type property that specifies the action that has occurred. Then the method dispatches an action object to the Redux store. Based on the previous challenge's example, the following lines are equivalent, and both dispatch the action of type <code>LOGIN</code>:</p>\n<pre><code class=\"language-js\">store.dispatch(actionCreator());\nstore.dispatch({ type: 'LOGIN' });\n</code></pre>\n</section>","instructions":"<section id=\"instructions\">\n<p>The Redux store in the code editor has an initialized state that's an object containing a <code>login</code> property currently set to <code>false</code>. There's also an action creator called <code>loginAction()</code> which returns an action of type <code>LOGIN</code>. Dispatch the <code>LOGIN</code> action to the Redux store by calling the <code>dispatch</code> method, and pass in the action created by <code>loginAction()</code>.</p>\n</section>","block":"redux","hasEditableBoundaries":false,"order":4,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":4,"required":[{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403614c","title":"Get State from the Redux Store","challengeType":6,"forumTopicId":301443,"dashedName":"get-state-from-the-redux-store","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const store = Redux.createStore(\n  (state = 5) => state\n);\n\n// Change code below this line","error":null,"seed":"const store = Redux.createStore(\n  (state = 5) => state\n);\n\n// Change code below this line"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const store = Redux.createStore(\n  (state = 5) => state\n);\n\n// Change code below this line\nconst currentState = store.getState();","error":null,"seed":"const store = Redux.createStore(\n  (state = 5) => state\n);\n\n// Change code below this line\nconst currentState = store.getState();"}]],"tests":[{"text":"<p>The Redux store should have a value of 5 for the initial state.</p>","testString":"assert(store.getState() === 5);"},{"text":"<p>A variable <code>currentState</code> should exist and should be assigned the current state of the Redux store.</p>","testString":"(getUserInput) =>\n  assert(\n    currentState === 5 && getUserInput('index').includes('store.getState()')\n  );"}],"description":"<section id=\"description\">\n<p>The Redux store object provides several methods that allow you to interact with it. For example, you can retrieve the current <code>state</code> held in the Redux store object with the <code>getState()</code> method.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The code from the previous challenge is re-written more concisely in the code editor. Use <code>store.getState()</code> to retrieve the <code>state</code> from the <code>store</code>, and assign this to a new variable <code>currentState</code>.</p>\n</section>","block":"redux","hasEditableBoundaries":false,"order":4,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":1,"required":[{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036150","title":"Handle an Action in the Store","challengeType":6,"forumTopicId":301444,"dashedName":"handle-an-action-in-the-store","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const defaultState = {\n  login: false\n};\n\nconst reducer = (state = defaultState, action) => {\n  // Change code below this line\n\n  // Change code above this line\n};\n\nconst store = Redux.createStore(reducer);\n\nconst loginAction = () => {\n  return {\n    type: 'LOGIN'\n  }\n};","error":null,"seed":"const defaultState = {\n  login: false\n};\n\nconst reducer = (state = defaultState, action) => {\n  // Change code below this line\n\n  // Change code above this line\n};\n\nconst store = Redux.createStore(reducer);\n\nconst loginAction = () => {\n  return {\n    type: 'LOGIN'\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const defaultState = {\n  login: false\n};\n\nconst reducer = (state = defaultState, action) => {\n\n  if (action.type === 'LOGIN') {\n    return {login: true}\n  }\n\n  else {\n    return state\n  }\n\n};\n\nconst store = Redux.createStore(reducer);\n\nconst loginAction = () => {\n  return {\n    type: 'LOGIN'\n  }\n};","error":null,"seed":"const defaultState = {\n  login: false\n};\n\nconst reducer = (state = defaultState, action) => {\n\n  if (action.type === 'LOGIN') {\n    return {login: true}\n  }\n\n  else {\n    return state\n  }\n\n};\n\nconst store = Redux.createStore(reducer);\n\nconst loginAction = () => {\n  return {\n    type: 'LOGIN'\n  }\n};"}]],"tests":[{"text":"<p>Calling the function <code>loginAction</code> should return an object with type property set to the string <code>LOGIN</code>.</p>","testString":"assert(loginAction().type === 'LOGIN');"},{"text":"<p>The store should be initialized with an object with property <code>login</code> set to <code>false</code>.</p>","testString":"assert(store.getState().login === false);"},{"text":"<p>Dispatching <code>loginAction</code> should update the <code>login</code> property in the store state to <code>true</code>.</p>","testString":"assert(\n  (function () {\n    const initialState = store.getState();\n    store.dispatch(loginAction());\n    const afterState = store.getState();\n    return initialState.login === false && afterState.login === true;\n  })()\n);"},{"text":"<p>If the action is not of type <code>LOGIN</code>, the store should return the current state.</p>","testString":"assert(\n  (function () {\n    store.dispatch({ type: '__TEST__ACTION__' });\n    let afterTest = store.getState();\n    return typeof afterTest === 'object' && afterTest.hasOwnProperty('login');\n  })()\n);"}],"description":"<section id=\"description\">\n<p>After an action is created and dispatched, the Redux store needs to know how to respond to that action. This is the job of a <code>reducer</code> function. Reducers in Redux are responsible for the state modifications that take place in response to actions. A <code>reducer</code> takes <code>state</code> and <code>action</code> as arguments, and it always returns a new <code>state</code>. It is important to see that this is the <strong>only</strong> role of the reducer. It has no side effects — it never calls an API endpoint and it never has any hidden surprises. The reducer is simply a pure function that takes state and action, then returns new state.</p>\n<p>Another key principle in Redux is that <code>state</code> is read-only. In other words, the <code>reducer</code> function must <strong>always</strong> return a new copy of <code>state</code> and never modify state directly. Redux does not enforce state immutability, however, you are responsible for enforcing it in the code of your reducer functions. You'll practice this in later challenges.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The code editor has the previous example as well as the start of a <code>reducer</code> function for you. Fill in the body of the <code>reducer</code> function so that if it receives an action of type <code>'LOGIN'</code> it returns a state object with <code>login</code> set to <code>true</code>. Otherwise, it returns the current <code>state</code>. Note that the current <code>state</code> and the dispatched <code>action</code> are passed to the reducer, so you can access the action's type directly with <code>action.type</code>.</p>\n</section>","block":"redux","hasEditableBoundaries":false,"order":4,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":5,"required":[{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036158","title":"Never Mutate State","challengeType":6,"forumTopicId":301445,"dashedName":"never-mutate-state","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const ADD_TO_DO = 'ADD_TO_DO';\n\n// A list of strings representing tasks to do:\nconst todos = [\n  'Go to the store',\n  'Clean the house',\n  'Cook dinner',\n  'Learn to code',\n];\n\nconst immutableReducer = (state = todos, action) => {\n  switch(action.type) {\n    case ADD_TO_DO:\n      // Don't mutate state here or the tests will fail\n      return\n    default:\n      return state;\n  }\n};\n\nconst addToDo = (todo) => {\n  return {\n    type: ADD_TO_DO,\n    todo\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);","error":null,"seed":"const ADD_TO_DO = 'ADD_TO_DO';\n\n// A list of strings representing tasks to do:\nconst todos = [\n  'Go to the store',\n  'Clean the house',\n  'Cook dinner',\n  'Learn to code',\n];\n\nconst immutableReducer = (state = todos, action) => {\n  switch(action.type) {\n    case ADD_TO_DO:\n      // Don't mutate state here or the tests will fail\n      return\n    default:\n      return state;\n  }\n};\n\nconst addToDo = (todo) => {\n  return {\n    type: ADD_TO_DO,\n    todo\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const ADD_TO_DO = 'ADD_TO_DO';\n\nconst todos = [\n  'Go to the store',\n  'Clean the house',\n  'Cook dinner',\n  'Learn to code',\n];\n\nconst immutableReducer = (state = todos, action) => {\n  switch(action.type) {\n    case ADD_TO_DO:\n      return state.concat(action.todo);\n    default:\n      return state;\n  }\n};\n\nconst addToDo = (todo) => {\n  return {\n    type: ADD_TO_DO,\n    todo\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);","error":null,"seed":"const ADD_TO_DO = 'ADD_TO_DO';\n\nconst todos = [\n  'Go to the store',\n  'Clean the house',\n  'Cook dinner',\n  'Learn to code',\n];\n\nconst immutableReducer = (state = todos, action) => {\n  switch(action.type) {\n    case ADD_TO_DO:\n      return state.concat(action.todo);\n    default:\n      return state;\n  }\n};\n\nconst addToDo = (todo) => {\n  return {\n    type: ADD_TO_DO,\n    todo\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);"}]],"tests":[{"text":"<p>The Redux store should exist and initialize with a state equal to the <code>todos</code> array in the code editor.</p>","testString":"assert(\n  (function () {\n    const todos = [\n      'Go to the store',\n      'Clean the house',\n      'Cook dinner',\n      'Learn to code'\n    ];\n    const initialState = store.getState();\n    return (\n      Array.isArray(initialState) && initialState.join(',') === todos.join(',')\n    );\n  })()\n);"},{"text":"<p><code>addToDo</code> and <code>immutableReducer</code> both should be functions.</p>","testString":"assert(typeof addToDo === 'function' && typeof immutableReducer === 'function');"},{"text":"<p>Dispatching an action of type <code>ADD_TO_DO</code> on the Redux store should add a <code>todo</code> item and should NOT mutate state.</p>","testString":"assert(\n  (function () {\n    const initialState = store.getState();\n    const isFrozen = DeepFreeze(initialState);\n    store.dispatch(addToDo('__TEST__TO__DO__'));\n    const finalState = store.getState();\n    const expectedState = [\n      'Go to the store',\n      'Clean the house',\n      'Cook dinner',\n      'Learn to code',\n      '__TEST__TO__DO__'\n    ];\n    return isFrozen && DeepEqual(finalState, expectedState);\n  })()\n);"}],"description":"<section id=\"description\">\n<p>These final challenges describe several methods of enforcing the key principle of state immutability in Redux. Immutable state means that you never modify state directly, instead, you return a new copy of state.</p>\n<p>If you took a snapshot of the state of a Redux app over time, you would see something like <code>state 1</code>, <code>state 2</code>, <code>state 3</code>,<code>state 4</code>, <code>...</code> and so on where each state may be similar to the last, but each is a distinct piece of data. This immutability, in fact, is what provides such features as time-travel debugging that you may have heard about.</p>\n<p>Redux does not actively enforce state immutability in its store or reducers, that responsibility falls on the programmer. Fortunately, JavaScript (especially ES6) provides several useful tools you can use to enforce the immutability of your state, whether it is a <code>string</code>, <code>number</code>, <code>array</code>, or <code>object</code>. Note that strings and numbers are primitive values and are immutable by nature. In other words, 3 is always 3. You cannot change the value of the number 3. An <code>array</code> or <code>object</code>, however, is mutable. In practice, your state will probably consist of an <code>array</code> or <code>object</code>, as these are useful data structures for representing many types of information.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>There is a <code>store</code> and <code>reducer</code> in the code editor for managing to-do items. Finish writing the <code>ADD_TO_DO</code> case in the reducer to append a new to-do to the state. There are a few ways to accomplish this with standard JavaScript or ES6. See if you can find a way to return a new array with the item from <code>action.todo</code> appended to the end.</p>\n</section>","block":"redux","hasEditableBoundaries":false,"order":4,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":13,"required":[{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036153","title":"Register a Store Listener","challengeType":6,"forumTopicId":301446,"dashedName":"register-a-store-listener","challengeFiles":[{"head":"count = 0;","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const ADD = 'ADD';\n\nconst reducer = (state = 0, action) => {\n  switch(action.type) {\n    case ADD:\n      return state + 1;\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(reducer);\n\n// Global count variable:\nlet count = 0;\n\n// Change code below this line\n\n// Change code above this line\n\nstore.dispatch({type: ADD});\nconsole.log(count);\nstore.dispatch({type: ADD});\nconsole.log(count);\nstore.dispatch({type: ADD});\nconsole.log(count);","error":null,"seed":"const ADD = 'ADD';\n\nconst reducer = (state = 0, action) => {\n  switch(action.type) {\n    case ADD:\n      return state + 1;\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(reducer);\n\n// Global count variable:\nlet count = 0;\n\n// Change code below this line\n\n// Change code above this line\n\nstore.dispatch({type: ADD});\nconsole.log(count);\nstore.dispatch({type: ADD});\nconsole.log(count);\nstore.dispatch({type: ADD});\nconsole.log(count);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const ADD = 'ADD';\n\nconst reducer = (state = 0, action) => {\n  switch(action.type) {\n    case ADD:\n      return state + 1;\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(reducer);\n let count = 0;\n// Change code below this line\n\nstore.subscribe( () =>\n {\n count++;\n }\n);\n\n// Change code above this line\n\nstore.dispatch({type: ADD});\nstore.dispatch({type: ADD});\nstore.dispatch({type: ADD});","error":null,"seed":"const ADD = 'ADD';\n\nconst reducer = (state = 0, action) => {\n  switch(action.type) {\n    case ADD:\n      return state + 1;\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(reducer);\n let count = 0;\n// Change code below this line\n\nstore.subscribe( () =>\n {\n count++;\n }\n);\n\n// Change code above this line\n\nstore.dispatch({type: ADD});\nstore.dispatch({type: ADD});\nstore.dispatch({type: ADD});"}]],"tests":[{"text":"<p>Dispatching the <code>ADD</code> action on the store should increment the state by <code>1</code>.</p>","testString":"assert(\n  (function () {\n    const initialState = store.getState();\n    store.dispatch({ type: 'ADD' });\n    const newState = store.getState();\n    return newState === initialState + 1;\n  })()\n);"},{"text":"<p>There should be a listener function subscribed to the store using <code>store.subscribe</code>.</p>","testString":"(getUserInput) => assert(getUserInput('index').match(/store\\s*\\.\\s*subscribe\\(/gm));"},{"text":"<p>The <code>store.subscribe</code> should receive a function.</p>","testString":"(getUserInput) => assert(getUserInput('index').match(/(\\s*function\\s*)|(\\s*\\(\\s*\\)\\s*=>)/gm)) "},{"text":"<p>The callback to <code>store.subscribe</code> should also increment the global <code>count</code> variable as the store is updated.</p>","testString":"assert(store.getState() === count);"}],"description":"<section id=\"description\">\n<p>Another method you have access to on the Redux <code>store</code> object is <code>store.subscribe()</code>. This allows you to subscribe listener functions to the store, which are called whenever an action is dispatched against the store. One simple use for this method is to subscribe a function to your store that simply logs a message every time an action is received and the store is updated.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Write a callback function that increments the global variable <code>count</code> every time the store receives an action, and pass this function in to the <code>store.subscribe()</code> method. You'll see that <code>store.dispatch()</code> is called three times in a row, each time directly passing in an action object. Watch the console output between the action dispatches to see the updates take place.</p>\n</section>","block":"redux","hasEditableBoundaries":false,"order":4,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":8,"required":[{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d403615a","title":"Remove an Item from an Array","challengeType":6,"forumTopicId":301447,"dashedName":"remove-an-item-from-an-array","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const immutableReducer = (state = [0,1,2,3,4,5], action) => {\n  switch(action.type) {\n    case 'REMOVE_ITEM':\n      // Don't mutate state here or the tests will fail\n      return\n    default:\n      return state;\n  }\n};\n\nconst removeItem = (index) => {\n  return {\n    type: 'REMOVE_ITEM',\n    index\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);","error":null,"seed":"const immutableReducer = (state = [0,1,2,3,4,5], action) => {\n  switch(action.type) {\n    case 'REMOVE_ITEM':\n      // Don't mutate state here or the tests will fail\n      return\n    default:\n      return state;\n  }\n};\n\nconst removeItem = (index) => {\n  return {\n    type: 'REMOVE_ITEM',\n    index\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const immutableReducer = (state = [0,1,2,3,4,5], action) => {\n  switch(action.type) {\n    case 'REMOVE_ITEM':\n      return [\n        ...state.slice(0, action.index),\n        ...state.slice(action.index + 1)\n      ];\n    default:\n      return state;\n  }\n};\n\nconst removeItem = (index) => {\n  return {\n    type: 'REMOVE_ITEM',\n    index\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);","error":null,"seed":"const immutableReducer = (state = [0,1,2,3,4,5], action) => {\n  switch(action.type) {\n    case 'REMOVE_ITEM':\n      return [\n        ...state.slice(0, action.index),\n        ...state.slice(action.index + 1)\n      ];\n    default:\n      return state;\n  }\n};\n\nconst removeItem = (index) => {\n  return {\n    type: 'REMOVE_ITEM',\n    index\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);"}]],"tests":[{"text":"<p>The Redux store should exist and initialize with a state equal to <code>[0,1,2,3,4,5]</code></p>","testString":"assert(\n  (function () {\n    const initialState = store.getState();\n    return (\n      Array.isArray(initialState) === true &&\n      DeepEqual(initialState, [0, 1, 2, 3, 4, 5])\n    );\n  })()\n);"},{"text":"<p><code>removeItem</code> and <code>immutableReducer</code> both should be functions.</p>","testString":"assert(\n  typeof removeItem === 'function' && typeof immutableReducer === 'function'\n);"},{"text":"<p>Dispatching the <code>removeItem</code> action creator should remove items from the state and should NOT mutate state.</p>","testString":"assert(\n  (function () {\n    const initialState = store.getState();\n    const isFrozen = DeepFreeze(initialState);\n    store.dispatch(removeItem(3));\n    const state_1 = store.getState();\n    store.dispatch(removeItem(2));\n    const state_2 = store.getState();\n    store.dispatch(removeItem(0));\n    store.dispatch(removeItem(0));\n    store.dispatch(removeItem(0));\n    const state_3 = store.getState();\n    return (\n      isFrozen &&\n      DeepEqual(state_1, [0, 1, 2, 4, 5]) &&\n      DeepEqual(state_2, [0, 1, 4, 5]) &&\n      DeepEqual(state_3, [5])\n    );\n  })()\n);"}],"description":"<section id=\"description\">\n<p>Time to practice removing items from an array. The spread operator can be used here as well. Other useful JavaScript methods include <code>slice()</code> and <code>concat()</code>.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The reducer and action creator were modified to remove an item from an array based on the index of the item. Finish writing the reducer so a new state array is returned with the item at the specific index removed.</p>\n</section>","block":"redux","hasEditableBoundaries":false,"order":4,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":15,"required":[{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036155","title":"Send Action Data to the Store","challengeType":6,"forumTopicId":301448,"dashedName":"send-action-data-to-the-store","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const ADD_NOTE = 'ADD_NOTE';\n\nconst notesReducer = (state = 'Initial State', action) => {\n  switch(action.type) {\n    // Change code below this line\n\n    // Change code above this line\n    default:\n      return state;\n  }\n};\n\nconst addNoteText = (note) => {\n  // Change code below this line\n\n  // Change code above this line\n};\n\nconst store = Redux.createStore(notesReducer);\n\nconsole.log(store.getState());\nstore.dispatch(addNoteText('Hello!'));\nconsole.log(store.getState());","error":null,"seed":"const ADD_NOTE = 'ADD_NOTE';\n\nconst notesReducer = (state = 'Initial State', action) => {\n  switch(action.type) {\n    // Change code below this line\n\n    // Change code above this line\n    default:\n      return state;\n  }\n};\n\nconst addNoteText = (note) => {\n  // Change code below this line\n\n  // Change code above this line\n};\n\nconst store = Redux.createStore(notesReducer);\n\nconsole.log(store.getState());\nstore.dispatch(addNoteText('Hello!'));\nconsole.log(store.getState());"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const ADD_NOTE = 'ADD_NOTE';\n\nconst notesReducer = (state = 'Initial State', action) => {\n  switch(action.type) {\n    // Change code below this line\n    case ADD_NOTE:\n      return action.text;\n    // Change code above this line\n    default:\n      return state;\n  }\n};\n\nconst addNoteText = (note) => {\n  // Change code below this line\n  return {\n    type: ADD_NOTE,\n    text: note\n  }\n  // Change code above this line\n};\n\nconst store = Redux.createStore(notesReducer);\n\nconsole.log(store.getState());\nstore.dispatch(addNoteText('Hello Redux!'));\nconsole.log(store.getState());","error":null,"seed":"const ADD_NOTE = 'ADD_NOTE';\n\nconst notesReducer = (state = 'Initial State', action) => {\n  switch(action.type) {\n    // Change code below this line\n    case ADD_NOTE:\n      return action.text;\n    // Change code above this line\n    default:\n      return state;\n  }\n};\n\nconst addNoteText = (note) => {\n  // Change code below this line\n  return {\n    type: ADD_NOTE,\n    text: note\n  }\n  // Change code above this line\n};\n\nconst store = Redux.createStore(notesReducer);\n\nconsole.log(store.getState());\nstore.dispatch(addNoteText('Hello Redux!'));\nconsole.log(store.getState());"}]],"tests":[{"text":"<p>The action creator <code>addNoteText</code> should return an object with keys <code>type</code> and <code>text</code>.</p>","testString":"assert(\n  (function () {\n    const addNoteFn = addNoteText('__TEST__NOTE');\n    return addNoteFn.type === ADD_NOTE && addNoteFn.text === '__TEST__NOTE';\n  })()\n);"},{"text":"<p>Dispatching an action of type <code>ADD_NOTE</code> with the <code>addNoteText</code> action creator should update the <code>state</code> to the string passed to the action creator.</p>","testString":"assert(\n  (function () {\n    const initialState = store.getState();\n    store.dispatch(addNoteText('__TEST__NOTE'));\n    const newState = store.getState();\n    return initialState !== newState && newState === '__TEST__NOTE';\n  })()\n);"}],"description":"<section id=\"description\">\n<p>By now you've learned how to dispatch actions to the Redux store, but so far these actions have not contained any information other than a <code>type</code>. You can also send specific data along with your actions. In fact, this is very common because actions usually originate from some user interaction and tend to carry some data with them. The Redux store often needs to know about this data.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>There's a basic <code>notesReducer()</code> and an <code>addNoteText()</code> action creator defined in the code editor. Finish the body of the <code>addNoteText()</code> function so that it returns an <code>action</code> object. The object should include a <code>type</code> property with a value of <code>ADD_NOTE</code>, and also a <code>text</code> property set to the <code>note</code> data that's passed into the action creator. When you call the action creator, you'll pass in specific note information that you can access for the object.</p>\n<p>Next, finish writing the <code>switch</code> statement in the <code>notesReducer()</code>. You need to add a case that handles the <code>addNoteText()</code> actions. This case should be triggered whenever there is an action of type <code>ADD_NOTE</code> and it should return the <code>text</code> property on the incoming <code>action</code> as the new <code>state</code>.</p>\n<p>The action is dispatched at the bottom of the code. Once you're finished, run the code and watch the console. That's all it takes to send action-specific data to the store and use it when you update store <code>state</code>.</p>\n</section>","block":"redux","hasEditableBoundaries":false,"order":4,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":10,"required":[{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036151","title":"Use a Switch Statement to Handle Multiple Actions","challengeType":6,"forumTopicId":301449,"dashedName":"use-a-switch-statement-to-handle-multiple-actions","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n  // Change code below this line\n\n  // Change code above this line\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: 'LOGOUT'\n  }\n};","error":null,"seed":"const defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n  // Change code below this line\n\n  // Change code above this line\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: 'LOGOUT'\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n\n  switch (action.type) {\n\n    case 'LOGIN':\n      return {\n        authenticated: true\n      }\n\n    case 'LOGOUT':\n      return {\n        authenticated: false\n      }\n\n    default:\n      return state;\n\n  }\n\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: 'LOGOUT'\n  }\n};","error":null,"seed":"const defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n\n  switch (action.type) {\n\n    case 'LOGIN':\n      return {\n        authenticated: true\n      }\n\n    case 'LOGOUT':\n      return {\n        authenticated: false\n      }\n\n    default:\n      return state;\n\n  }\n\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: 'LOGOUT'\n  }\n};"}]],"tests":[{"text":"<p>Calling the function <code>loginUser</code> should return an object with type property set to the string <code>LOGIN</code>.</p>","testString":"assert(loginUser().type === 'LOGIN');"},{"text":"<p>Calling the function <code>logoutUser</code> should return an object with type property set to the string <code>LOGOUT</code>.</p>","testString":"assert(logoutUser().type === 'LOGOUT');"},{"text":"<p>The store should be initialized with an object with an <code>authenticated</code> property set to <code>false</code>.</p>","testString":"assert(store.getState().authenticated === false);"},{"text":"<p>Dispatching <code>loginUser</code> should update the <code>authenticated</code> property in the store state to <code>true</code>.</p>","testString":"assert(\n  (function () {\n    const initialState = store.getState();\n    store.dispatch(loginUser());\n    const afterLogin = store.getState();\n    return (\n      initialState.authenticated === false && afterLogin.authenticated === true\n    );\n  })()\n);"},{"text":"<p>Dispatching <code>logoutUser</code> should update the <code>authenticated</code> property in the store state to <code>false</code>.</p>","testString":"assert(\n  (function () {\n    store.dispatch(loginUser());\n    const loggedIn = store.getState();\n    store.dispatch(logoutUser());\n    const afterLogout = store.getState();\n    return (\n      loggedIn.authenticated === true && afterLogout.authenticated === false\n    );\n  })()\n);"},{"text":"<p>The <code>authReducer</code> function should handle multiple action types with a <code>switch</code> statement.</p>","testString":"(getUserInput) =>\n  assert(\n    getUserInput('index').toString().includes('switch') &&\n      getUserInput('index').toString().includes('case') &&\n      getUserInput('index').toString().includes('default')\n  );"}],"description":"<section id=\"description\">\n<p>You can tell the Redux store how to handle multiple action types. Say you are managing user authentication in your Redux store. You want to have a state representation for when users are logged in and when they are logged out. You represent this with a single state object with the property <code>authenticated</code>. You also need action creators that create actions corresponding to user login and user logout, along with the action objects themselves.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>The code editor has a store, actions, and action creators set up for you. Fill in the <code>reducer</code> function to handle multiple authentication actions. Use a JavaScript <code>switch</code> statement in the <code>reducer</code> to respond to different action events. This is a standard pattern in writing Redux reducers. The switch statement should switch over <code>action.type</code> and return the appropriate authentication state.</p>\n<p><strong>Note:</strong> At this point, don't worry about state immutability, since it is small and simple in this example. For each action, you can return a new object — for example, <code>{authenticated: true}</code>. Also, don't forget to write a <code>default</code> case in your switch statement that returns the current <code>state</code>. This is important because once your app has multiple reducers, they are all run any time an action dispatch is made, even when the action isn't related to that reducer. In such a case, you want to make sure that you return the current <code>state</code>.</p>\n</section>","block":"redux","hasEditableBoundaries":false,"order":4,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":6,"required":[{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036152","title":"Use const for Action Types","challengeType":6,"forumTopicId":301450,"dashedName":"use-const-for-action-types","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"\n\nconst defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n\n  switch (action.type) {\n    case 'LOGIN': \n      return {\n        authenticated: true\n      }\n    case 'LOGOUT': \n      return {\n        authenticated: false\n      }\n\n    default:\n      return state;\n\n  }\n\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: 'LOGOUT'\n  }\n};","error":null,"seed":"\n\nconst defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n\n  switch (action.type) {\n    case 'LOGIN': \n      return {\n        authenticated: true\n      }\n    case 'LOGOUT': \n      return {\n        authenticated: false\n      }\n\n    default:\n      return state;\n\n  }\n\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: 'LOGOUT'\n  }\n};"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\n\nconst defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n\n  switch (action.type) {\n\n    case LOGIN:\n      return {\n        authenticated: true\n      }\n\n    case LOGOUT:\n      return {\n        authenticated: false\n      }\n\n    default:\n      return state;\n\n  }\n\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: LOGIN\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: LOGOUT\n  }\n};","error":null,"seed":"const LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\n\nconst defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n\n  switch (action.type) {\n\n    case LOGIN:\n      return {\n        authenticated: true\n      }\n\n    case LOGOUT:\n      return {\n        authenticated: false\n      }\n\n    default:\n      return state;\n\n  }\n\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: LOGIN\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: LOGOUT\n  }\n};"}]],"tests":[{"text":"<p>Calling the function <code>loginUser</code> should return an object with <code>type</code> property set to the string <code>LOGIN</code>.</p>","testString":"assert(loginUser().type === 'LOGIN');"},{"text":"<p>Calling the function <code>logoutUser</code> should return an object with <code>type</code> property set to the string <code>LOGOUT</code>.</p>","testString":"assert(logoutUser().type === 'LOGOUT');"},{"text":"<p>The store should be initialized with an object with property <code>login</code> set to <code>false</code>.</p>","testString":"assert(store.getState().authenticated === false);"},{"text":"<p>Dispatching <code>loginUser</code> should update the <code>login</code> property in the store state to <code>true</code>.</p>","testString":"assert(\n  (function () {\n    const initialState = store.getState();\n    store.dispatch(loginUser());\n    const afterLogin = store.getState();\n    return (\n      initialState.authenticated === false && afterLogin.authenticated === true\n    );\n  })()\n);"},{"text":"<p>Dispatching <code>logoutUser</code> should update the <code>login</code> property in the store state to <code>false</code>.</p>","testString":"assert(\n  (function () {\n    store.dispatch(loginUser());\n    const loggedIn = store.getState();\n    store.dispatch(logoutUser());\n    const afterLogout = store.getState();\n    return (\n      loggedIn.authenticated === true && afterLogout.authenticated === false\n    );\n  })()\n);"},{"text":"<p>The <code>authReducer</code> function should handle multiple action types with a switch statement.</p>","testString":"(getUserInput) =>\n  assert(\n    (function () {\n      return (\n        typeof authReducer === 'function' &&\n        getUserInput('index').toString().includes('switch') &&\n        getUserInput('index').toString().includes('case') &&\n        getUserInput('index').toString().includes('default')\n      );\n    })()\n  );"},{"text":"<p><code>LOGIN</code> and <code>LOGOUT</code> should be declared as <code>const</code> values and should be assigned strings of <code>LOGIN</code>and <code>LOGOUT</code>.</p>","testString":"const noWhiteSpace = __helpers.removeWhiteSpace(code);\nassert(LOGIN === 'LOGIN' && LOGOUT === 'LOGOUT')\nassert(noWhiteSpace.includes('const'))"},{"text":"<p>The action creators and the reducer should reference the <code>LOGIN</code> and <code>LOGOUT</code> constants.</p>","testString":"(getUserInput) =>\n  assert(\n    (function () {\n      const noWhiteSpace = __helpers.removeWhiteSpace(\n        getUserInput('index').toString()\n      );\n      return (\n        noWhiteSpace.includes('caseLOGIN:') &&\n        noWhiteSpace.includes('caseLOGOUT:') &&\n        noWhiteSpace.includes('type:LOGIN') &&\n        noWhiteSpace.includes('type:LOGOUT')\n      );\n    })()\n  );"}],"description":"<section id=\"description\">\n<p>A common practice when working with Redux is to assign action types as read-only constants, then reference these constants wherever they are used. You can refactor the code you're working with to write the action types as <code>const</code> declarations.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Declare <code>LOGIN</code> and <code>LOGOUT</code> as <code>const</code> values and assign them to the strings <code>'LOGIN'</code> and <code>'LOGOUT'</code>, respectively. Then, edit the <code>authReducer()</code> and the action creators to reference these constants instead of string values.</p>\n<p><strong>Note:</strong> It's generally a convention to write constants in all uppercase, and this is standard practice in Redux as well.</p>\n</section>","block":"redux","hasEditableBoundaries":false,"order":4,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":7,"required":[{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036156","title":"Use Middleware to Handle Asynchronous Actions","challengeType":6,"forumTopicId":301451,"dashedName":"use-middleware-to-handle-asynchronous-actions","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const REQUESTING_DATA = 'REQUESTING_DATA'\nconst RECEIVED_DATA = 'RECEIVED_DATA'\n\nconst requestingData = () => { return {type: REQUESTING_DATA} }\nconst receivedData = (data) => { return {type: RECEIVED_DATA, users: data.users} }\n\nconst handleAsync = () => {\n  return function(dispatch) {\n    // Dispatch request action here\n\n    setTimeout(function() {\n      let data = {\n        users: ['Jeff', 'William', 'Alice']\n      }\n      // Dispatch received data action here\n\n    }, 2500);\n  }\n};\n\nconst defaultState = {\n  fetching: false,\n  users: []\n};\n\nconst asyncDataReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case REQUESTING_DATA:\n      return {\n        fetching: true,\n        users: []\n      }\n    case RECEIVED_DATA:\n      return {\n        fetching: false,\n        users: action.users\n      }\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(\n  asyncDataReducer,\n  Redux.applyMiddleware(ReduxThunk.default)\n);","error":null,"seed":"const REQUESTING_DATA = 'REQUESTING_DATA'\nconst RECEIVED_DATA = 'RECEIVED_DATA'\n\nconst requestingData = () => { return {type: REQUESTING_DATA} }\nconst receivedData = (data) => { return {type: RECEIVED_DATA, users: data.users} }\n\nconst handleAsync = () => {\n  return function(dispatch) {\n    // Dispatch request action here\n\n    setTimeout(function() {\n      let data = {\n        users: ['Jeff', 'William', 'Alice']\n      }\n      // Dispatch received data action here\n\n    }, 2500);\n  }\n};\n\nconst defaultState = {\n  fetching: false,\n  users: []\n};\n\nconst asyncDataReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case REQUESTING_DATA:\n      return {\n        fetching: true,\n        users: []\n      }\n    case RECEIVED_DATA:\n      return {\n        fetching: false,\n        users: action.users\n      }\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(\n  asyncDataReducer,\n  Redux.applyMiddleware(ReduxThunk.default)\n);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const REQUESTING_DATA = 'REQUESTING_DATA'\nconst RECEIVED_DATA = 'RECEIVED_DATA'\n\nconst requestingData = () => { return {type: REQUESTING_DATA} }\nconst receivedData = (data) => { return {type: RECEIVED_DATA, users: data.users} }\n\nconst handleAsync = () => {\n  return function(dispatch) {\n    dispatch(requestingData());\n    setTimeout(function() {\n      let data = {\n        users: ['Jeff', 'William', 'Alice']\n      }\n      dispatch(receivedData(data));\n    }, 2500);\n  }\n};\n\nconst defaultState = {\n  fetching: false,\n  users: []\n};\n\nconst asyncDataReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case REQUESTING_DATA:\n      return {\n        fetching: true,\n        users: []\n      }\n    case RECEIVED_DATA:\n      return {\n        fetching: false,\n        users: action.users\n      }\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(\n  asyncDataReducer,\n  Redux.applyMiddleware(ReduxThunk.default)\n);","error":null,"seed":"const REQUESTING_DATA = 'REQUESTING_DATA'\nconst RECEIVED_DATA = 'RECEIVED_DATA'\n\nconst requestingData = () => { return {type: REQUESTING_DATA} }\nconst receivedData = (data) => { return {type: RECEIVED_DATA, users: data.users} }\n\nconst handleAsync = () => {\n  return function(dispatch) {\n    dispatch(requestingData());\n    setTimeout(function() {\n      let data = {\n        users: ['Jeff', 'William', 'Alice']\n      }\n      dispatch(receivedData(data));\n    }, 2500);\n  }\n};\n\nconst defaultState = {\n  fetching: false,\n  users: []\n};\n\nconst asyncDataReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case REQUESTING_DATA:\n      return {\n        fetching: true,\n        users: []\n      }\n    case RECEIVED_DATA:\n      return {\n        fetching: false,\n        users: action.users\n      }\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(\n  asyncDataReducer,\n  Redux.applyMiddleware(ReduxThunk.default)\n);"}]],"tests":[{"text":"<p>The <code>requestingData</code> action creator should return an object of type equal to the value of <code>REQUESTING_DATA</code>.</p>","testString":"assert(requestingData().type === REQUESTING_DATA);"},{"text":"<p>The <code>receivedData</code> action creator should return an object of type equal to the value of <code>RECEIVED_DATA</code>.</p>","testString":"assert(receivedData('data').type === RECEIVED_DATA);"},{"text":"<p><code>asyncDataReducer</code> should be a function.</p>","testString":"assert(typeof asyncDataReducer === 'function');"},{"text":"<p>Dispatching the <code>requestingData</code> action creator should update the store <code>state</code> property of fetching to <code>true</code>.</p>","testString":"assert(\n  (function () {\n    const initialState = store.getState();\n    store.dispatch(requestingData());\n    const reqState = store.getState();\n    return initialState.fetching === false && reqState.fetching === true;\n  })()\n);"},{"text":"<p>Dispatching <code>handleAsync</code> should dispatch the data request action and then dispatch the received data action after a delay.</p>","testString":"assert(\n  (function () {\n    const noWhiteSpace = __helpers.removeWhiteSpace(handleAsync.toString());\n    return (\n      noWhiteSpace.includes('dispatch(requestingData())') === true &&\n      noWhiteSpace.includes('dispatch(receivedData(data))') === true\n    );\n  })()\n);"}],"description":"<section id=\"description\">\n<p>So far these challenges have avoided discussing asynchronous actions, but they are an unavoidable part of web development. At some point you'll need to call asynchronous endpoints in your Redux app, so how do you handle these types of requests? Redux provides middleware designed specifically for this purpose, called Redux Thunk middleware. Here's a brief description how to use this with Redux.</p>\n<p>To include Redux Thunk middleware, you pass it as an argument to <code>Redux.applyMiddleware()</code>. This statement is then provided as a second optional parameter to the <code>createStore()</code> function. Take a look at the code at the bottom of the editor to see this. Then, to create an asynchronous action, you return a function in the action creator that takes <code>dispatch</code> as an argument. Within this function, you can dispatch actions and perform asynchronous requests.</p>\n<p>In this example, an asynchronous request is simulated with a <code>setTimeout()</code> call. It's common to dispatch an action before initiating any asynchronous behavior so that your application state knows that some data is being requested (this state could display a loading icon, for instance). Then, once you receive the data, you dispatch another action which carries the data as a payload along with information that the action is completed.</p>\n<p>Remember that you're passing <code>dispatch</code> as a parameter to this special action creator. This is what you'll use to dispatch your actions, you simply pass the action directly to dispatch and the middleware takes care of the rest.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Write both dispatches in the <code>handleAsync()</code> action creator. Dispatch <code>requestingData()</code> before the <code>setTimeout()</code> (the simulated API call). Then, after you receive the (pretend) data, dispatch the <code>receivedData()</code> action, passing in this data. Now you know how to handle asynchronous actions in Redux. Everything else continues to behave as before.</p>\n</section>","block":"redux","hasEditableBoundaries":false,"order":4,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":11,"required":[{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036159","title":"Use the Spread Operator on Arrays","challengeType":6,"forumTopicId":301452,"dashedName":"use-the-spread-operator-on-arrays","challengeFiles":[{"head":"","tail":"","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const immutableReducer = (state = ['Do not mutate state!'], action) => {\n  switch(action.type) {\n    case 'ADD_TO_DO':\n      // Don't mutate state here or the tests will fail\n      return\n    default:\n      return state;\n  }\n};\n\nconst addToDo = (todo) => {\n  return {\n    type: 'ADD_TO_DO',\n    todo\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);","error":null,"seed":"const immutableReducer = (state = ['Do not mutate state!'], action) => {\n  switch(action.type) {\n    case 'ADD_TO_DO':\n      // Don't mutate state here or the tests will fail\n      return\n    default:\n      return state;\n  }\n};\n\nconst addToDo = (todo) => {\n  return {\n    type: 'ADD_TO_DO',\n    todo\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const immutableReducer = (state = ['Do not mutate state!'], action) => {\n  switch(action.type) {\n    case 'ADD_TO_DO':\n      return [\n        ...state,\n        action.todo\n      ];\n    default:\n      return state;\n  }\n};\n\nconst addToDo = (todo) => {\n  return {\n    type: 'ADD_TO_DO',\n    todo\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);","error":null,"seed":"const immutableReducer = (state = ['Do not mutate state!'], action) => {\n  switch(action.type) {\n    case 'ADD_TO_DO':\n      return [\n        ...state,\n        action.todo\n      ];\n    default:\n      return state;\n  }\n};\n\nconst addToDo = (todo) => {\n  return {\n    type: 'ADD_TO_DO',\n    todo\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);"}]],"tests":[{"text":"<p>The Redux store should exist and initialize with a state equal to <code>[\"Do not mutate state!\"]</code>.</p>","testString":"assert(\n  (function () {\n    const initialState = store.getState();\n    return (\n      Array.isArray(initialState) === true &&\n      initialState[0] === 'Do not mutate state!'\n    );\n  })()\n);"},{"text":"<p><code>addToDo</code> and <code>immutableReducer</code> both should be functions.</p>","testString":"assert(typeof addToDo === 'function' && typeof immutableReducer === 'function');"},{"text":"<p>Dispatching an action of type <code>ADD_TO_DO</code> on the Redux store should add a <code>todo</code> item and should NOT mutate state.</p>","testString":"assert(\n  (function () {\n    const initialState = store.getState();\n    const isFrozen = DeepFreeze(initialState);\n    store.dispatch(addToDo('__TEST__TO__DO__'));\n    const finalState = store.getState();\n    const expectedState = ['Do not mutate state!', '__TEST__TO__DO__'];\n    return isFrozen && DeepEqual(finalState, expectedState);\n  })()\n);"},{"text":"<p>The spread operator should be used to return new state.</p>","testString":"(getUserInput) => assert(getUserInput('index').includes('...state'));"}],"description":"<section id=\"description\">\n<p>One solution from ES6 to help enforce state immutability in Redux is the spread operator: <code>...</code>. The spread operator has a variety of applications, one of which is well-suited to the previous challenge of producing a new array from an existing array. This is relatively new, but commonly used syntax. For example, if you have an array <code>myArray</code> and write:</p>\n<pre><code class=\"language-js\">let newArray = [...myArray];\n</code></pre>\n<p><code>newArray</code> is now a clone of <code>myArray</code>. Both arrays still exist separately in memory. If you perform a mutation like <code>newArray.push(5)</code>, <code>myArray</code> doesn't change. The <code>...</code> effectively <em>spreads</em> out the values in <code>myArray</code> into a new array. To clone an array but add additional values in the new array, you could write <code>[...myArray, 'new value']</code>. This would return a new array composed of the values in <code>myArray</code> and the string <code>new value</code> as the last value. The spread syntax can be used multiple times in array composition like this, but it's important to note that it only makes a shallow copy of the array. That is to say, it only provides immutable array operations for one-dimensional arrays.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Use the spread operator to return a new copy of state when a to-do is added.</p>\n</section>","block":"redux","hasEditableBoundaries":false,"order":4,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":14,"required":[{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false},{"id":"5a24c314108439a4d4036157","title":"Write a Counter with Redux","challengeType":6,"forumTopicId":301453,"dashedName":"write-a-counter-with-redux","challengeFiles":[{"head":"","tail":"const _store = Redux.createStore(counterReducer)","id":"","editableRegionBoundaries":[],"history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const INCREMENT = null; // Define a constant for increment action types\nconst DECREMENT = null; // Define a constant for decrement action types\n\nconst counterReducer = null; // Define the counter reducer which will increment or decrement the state based on the action it receives\n\nconst incAction = null; // Define an action creator for incrementing\n\nconst decAction = null; // Define an action creator for decrementing\n\nconst store = null; // Define the Redux store here, passing in your reducers","error":null,"seed":"const INCREMENT = null; // Define a constant for increment action types\nconst DECREMENT = null; // Define a constant for decrement action types\n\nconst counterReducer = null; // Define the counter reducer which will increment or decrement the state based on the action it receives\n\nconst incAction = null; // Define an action creator for incrementing\n\nconst decAction = null; // Define an action creator for decrementing\n\nconst store = null; // Define the Redux store here, passing in your reducers"}],"solutions":[[{"head":"","tail":"","id":"","history":["script.js"],"name":"script","ext":"js","path":"script.js","fileKey":"scriptjs","contents":"const INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\n\nconst counterReducer = (state = 0, action) => {\n  switch(action.type) {\n    case INCREMENT:\n      return state + 1;\n    case DECREMENT:\n      return state - 1;\n    default:\n      return state;\n  }\n};\n\nconst incAction = () => {\n  return {\n    type: INCREMENT\n  }\n};\n\nconst decAction = () => {\n  return {\n    type: DECREMENT\n  }\n};\n\nconst store = Redux.createStore(counterReducer);","error":null,"seed":"const INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\n\nconst counterReducer = (state = 0, action) => {\n  switch(action.type) {\n    case INCREMENT:\n      return state + 1;\n    case DECREMENT:\n      return state - 1;\n    default:\n      return state;\n  }\n};\n\nconst incAction = () => {\n  return {\n    type: INCREMENT\n  }\n};\n\nconst decAction = () => {\n  return {\n    type: DECREMENT\n  }\n};\n\nconst store = Redux.createStore(counterReducer);"}]],"tests":[{"text":"<p>The action creator <code>incAction</code> should return an action object with <code>type</code> equal to the value of <code>INCREMENT</code></p>","testString":"assert(incAction().type === INCREMENT);"},{"text":"<p>The action creator <code>decAction</code> should return an action object with <code>type</code> equal to the value of <code>DECREMENT</code></p>","testString":"assert(decAction().type === DECREMENT);"},{"text":"<p>The Redux store should initialize with a <code>state</code> of 0.</p>","testString":"assert(_store.getState() === 0);"},{"text":"<p>Dispatching <code>incAction</code> on the Redux store should increment the <code>state</code> by 1.</p>","testString":"assert(\n  (function () {\n    const initialState = _store.getState();\n    _store.dispatch(incAction());\n    const incState = _store.getState();\n    return initialState + 1 === incState;\n  })()\n);"},{"text":"<p>Dispatching <code>decAction</code> on the Redux store should decrement the <code>state</code> by 1.</p>","testString":"assert(\n  (function () {\n    const initialState = _store.getState();\n    _store.dispatch(decAction());\n    const decState = _store.getState();\n    return initialState - 1 === decState;\n  })()\n);"},{"text":"<p><code>counterReducer</code> should be a function</p>","testString":"assert(typeof counterReducer === 'function');"}],"description":"<section id=\"description\">\n<p>Now you've learned all the core principles of Redux! You've seen how to create actions and action creators, create a Redux store, dispatch your actions against the store, and design state updates with pure reducers. You've even seen how to manage complex state with reducer composition and handle asynchronous actions. These examples are simplistic, but these concepts are the core principles of Redux. If you understand them well, you're ready to start building your own Redux app. The next challenges cover some of the details regarding <code>state</code> immutability, but first, here's a review of everything you've learned so far.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>In this lesson, you'll implement a simple counter with Redux from scratch. The basics are provided in the code editor, but you'll have to fill in the details! Use the names that are provided and define <code>incAction</code> and <code>decAction</code> action creators, the <code>counterReducer()</code>, <code>INCREMENT</code> and <code>DECREMENT</code> action types, and finally the Redux <code>store</code>. Once you're finished you should be able to dispatch <code>INCREMENT</code> or <code>DECREMENT</code> actions to increment or decrement the state held in the <code>store</code>. Good luck building your first Redux app!</p>\n</section>","block":"redux","hasEditableBoundaries":false,"order":4,"superOrder":2,"certification":"front-end-development-libraries","superBlock":"front-end-development-libraries","challengeOrder":12,"required":[{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"template":"","time":"5 hours","helpCategory":"JavaScript","translationPending":false,"usesMultifileEditor":false}]}}}}